CREATE PROGRAM dm_atr_refresh_req:dba
 SET inhouse_ind = 0
 IF (trim(ref)="C")
  SET inhouse_ind = 1
 ENDIF
 SET readme_ind = validate(request->setup_proc[1].env_id,0.0)
 SET env = fillstring(20," ")
 IF (readme_ind > 0.0)
  SELECT INTO "nl:"
   de.environment_name
   FROM dm_environment de
   WHERE (de.environment_id=request->setup_proc[1].env_id)
   DETAIL
    env = de.environment_name
   WITH nocounter
  ;end select
 ELSE
  SELECT INTO "nl:"
   de.environment_name
   FROM dm_info di,
    dm_environment de
   WHERE di.info_name="DM_ENV_ID"
    AND di.info_domain="DATA MANAGEMENT"
    AND de.environment_id=di.info_number
   DETAIL
    env = de.environment_name
   WITH nocounter
  ;end select
 ENDIF
 FREE SET r_list
 RECORD r_list(
   1 count = i4
   1 r[*]
     2 r_num = i4
     2 f_num = i4
     2 s_dt = dq8
 )
 SET r_list->count = 0
 SET filename = "DM_ATR_REFRESH_REQ.DAT"
 SET temp = fillstring(255," ")
 SET feature_status = fillstring(20," ")
 SELECT INTO value(filename)
  FROM dual
  DETAIL
   "/* This file is generated by the ATR refresh process */", row + 1, "/* Environment: ",
   env, " */", row + 1
   IF (readme_ind > 0.0)
    IF (inhouse_ind=1)
     "/* This process was executed as a readme step in cert in-house */", row + 1
    ELSE
     "/* This process was executed as a readme step */", row + 1
    ENDIF
   ELSE
    "/* This process was executed to refresh ATRs in cert */", row + 1
   ENDIF
   "set trace noreflog go", row + 1
  WITH nocounter, maxrow = 1, maxcol = 512,
   format = variable, formfeed = none
 ;end select
 IF (inhouse_ind=1)
  SET feature_status = "'2B'"
 ELSE
  SET feature_status = "('5')"
 ENDIF
 CALL echo("Generating list of latest Requests...")
 SELECT INTO value(filename)
  *
  FROM dm_request d
  WHERE sqlpassthru(concat("(d.request_number,d.schema_date) in ",
    "(select request_number, max(schema_date) from dm_request dm, dm_features df where 1=1"))
   AND sqlpassthru(concat(" UPPER(df.feature_status) in ",trim(feature_status)," "))
   AND sqlpassthru(" dm.feature_number = df.feature_number group by request_number )")
  HEAD REPORT
   IF (readme_ind > 0.0)
    "/* Save readme request parameters */", row + 1,
    "set process_id = request->setup_proc[1]->process_id go",
    row + 1, "set env_id = request->setup_proc[1]->env_id go", row + 1,
    row + 1
   ELSE
    r_list->count = 0, stat = alterlist(r_list->r,0)
   ENDIF
   "/* Now declare new request structue for program */", row + 1, "free set request go",
   row + 1, "record request (", row + 1,
   "  1 atr_count = i4", row + 1, "  1 atr_list[*]",
   row + 1, "    2 request_number = i4", row + 1,
   "    2 description = c200", row + 1, "    2 request_name = c20",
   row + 1, "    2 epilog_script = c30", row + 1,
   "    2 prolog_script = c30", row + 1, "    2 write_to_que_ind = i2",
   row + 1, "    2 active_ind = i2", row + 1,
   "    2 active_dt_tm = dq8", row + 1, "    2 inactive_dt_tm = dq8",
   row + 18, "    2 cachetime = i4", row + 1,
   "    2 cachegrace = i4", row + 1, "    2 cachestale = i4",
   row + 1, "    2 cachetrim = c20", row + 1,
   "    2 requestclass = i4", row + 1, "    2 text = vc",
   row + 1, "    2 feature_number = i4", row + 1,
   "    2 schema_date = dq8", row + 1, "    2 deleted_ind = i2",
   row + 1, ") go", row + 1,
   "set request->atr_count = 0 go", row + 1, "set stat = alterlist(request->atr_list,0) go",
   row + 1, "set trace symbol mark go", row + 1,
   row + 1, atr_cnt = 0, "/* Now populate the new request request structure */"
  DETAIL
   IF (readme_ind=0.0)
    r_list->count = (r_list->count+ 1), stat = alterlist(r_list->r,r_list->count), r_list->r[r_list->
    count].r_num = d.request_number,
    r_list->r[r_list->count].f_num = d.feature_number, r_list->r[r_list->count].s_dt = d.schema_date
   ENDIF
   row + 1, row + 1, "set request->atr_count = request->atr_count + 1 go",
   row + 1, "set stat = alterlist(request->atr_list,request->atr_count) go", row + 1,
   'set t1 = fillstring(115, " ") go', row + 1, 'set t2 = fillstring(115, " ") go',
   row + 1, 'set t3 = fillstring(115, " ") go', row + 1,
   "/* Original feature number = ", d.feature_number, " */",
   row + 1, "set request->atr_list[request->atr_count]->feature_number = 0 go", row + 1,
   "set request->atr_list[request->atr_count]->request_number = ", d.request_number, " go",
   row + 1, "set request->atr_list[request->atr_count]->deleted_ind = ", d.deleted_ind,
   " go", row + 1, temp = build("set t1 = ",'"'),
   temp = build(temp,replace(substring(1,66,d.description),'"',"'",0)), temp = build(temp,'" go'),
   temp,
   row + 1, temp = build("set t2 = ",'"'), temp = build(temp,replace(substring(67,66,d.description),
     '"',"'",0)),
   temp = build(temp,'" go'), temp, row + 1,
   temp = build("set t3 = ",'"'), temp = build(temp,replace(substring(133,66,d.description),'"',"'",0
     )), temp = build(temp,'" go'),
   temp, row + 1,
   "set request->atr_list[request->atr_count]->description = concat(trim(t1),trim(t2),trim(t3)) go",
   row + 1, "set request->atr_list[request->atr_count]->active_ind = ", d.active_ind,
   " go", row + 1, temp = concat('("',format(d.active_dt_tm,"DD-MMM-YYYY;;D"),'") go'),
   "set request->atr_list[request->atr_count]->active_dt_tm = cnvtdatetime", temp, row + 1,
   temp = concat('("',format(d.inactive_dt_tm,"DD-MMM-YYYY;;D"),'") go'),
   "set request->atr_list[request->atr_count]->inactive_dt_tm = cnvtdatetime", temp,
   row + 1, 'set request->atr_list[request->atr_count]->request_name = "', d.request_name,
   '" go', row + 1, "set request->atr_list[request->atr_count]->cachetime = ",
   d.cachetime, " go", row + 1,
   "set request->atr_list[request->atr_count]->cachegrace = ", d.cachegrace, " go",
   row + 1, "set request->atr_list[request->atr_count]->cachestale = ", d.cachestale,
   " go", row + 1, 'set request->atr_list[request->atr_count]->cachetrim = "',
   d.cachetrim, '" go', row + 1,
   "set request->atr_list[request->atr_count]->requestclass = ", d.requestclass, " go",
   row + 1, 'set request->atr_list[request->atr_count]->epilog_script = "', d.epilog_script,
   '" go', row + 1, 'set request->atr_list[request->atr_count]->prolog_script = "',
   d.prolog_script, '" go', row + 1,
   "set request->atr_list[request->atr_count]->write_to_que_ind = ", d.write_to_que_ind, " go",
   row + 1, temp = build("set t1 = ",'"'), temp = build(temp,replace(substring(1,114,d.text),'"',"'",
     0)),
   temp = build(temp,'" go'), temp, row + 1,
   temp = build("set t2 = ",'"'), temp = build(temp,replace(substring(115,114,d.text),'"',"'",0)),
   temp = build(temp,'" go'),
   temp, row + 1, temp = build("set t3 = ",'"'),
   temp = build(temp,replace(substring(229,114,d.text),'"',"'",0)), temp = build(temp,'" go'), temp,
   row + 1, "set request->atr_list[request->atr_count]->text = trim(concat(t1,t2,t3)) go", row + 1,
   atr_cnt = (atr_cnt+ 1)
   IF (atr_cnt=500)
    row + 1, row + 1, "/* Call the import script every 500th ATR */",
    row + 1, "execute dm_atr_req_import go", row + 1,
    "set trace symbol go", row + 1, "set request->atr_count = 0 go",
    row + 1, "set stat = alterlist(request->atr_list,0) go", row + 1,
    row + 1, atr_cnt = 0
   ENDIF
  FOOT REPORT
   row + 1, row + 1
   IF (atr_cnt > 0)
    "/* Now call the import script */", row + 1, "execute dm_atr_req_import go",
    row + 1, "set trace symbol go"
   ENDIF
   IF (readme_ind > 0.0)
    row + 1, row + 1,
    "/* Destroy program request structure and use readme request again for error checking */",
    row + 1, "free set request go", row + 1,
    "record request (", row + 1, "%i cer_install:dm_readme_request.inc",
    row + 1, ") go", row + 1,
    "set request->setup_proc[1]->process_id = process_id go", row + 1,
    "set request->setup_proc[1]->env_id = env_id go",
    row + 1, row + 1, "/* Now perform error checking for readme */",
    row + 1, "execute dm_atr_refresh_check go"
   ENDIF
  WITH nocounter, maxrow = 1, maxcol = 512,
   format = variable, formfeed = none, append
 ;end select
 IF (readme_ind=0.0)
  CALL echo("Updating ATR status for Requests...")
  UPDATE  FROM dm_feature_req_env dm,
    (dummyt d  WITH seq = value(size(r_list->r,5)))
   SET dm.status = "1"
   PLAN (d)
    JOIN (dm
    WHERE dm.environment=env
     AND (dm.request_number=r_list->r[d.seq].r_num)
     AND (((dm.feature_number=r_list->r[d.seq].f_num)) OR (datetimecmp(dm.schema_dt_tm,cnvtdatetime(
      format(r_list->r[d.seq].s_dt,"DD-MMM-YYYY;;D"))) <= 0)) )
  ;end update
  COMMIT
 ENDIF
END GO
