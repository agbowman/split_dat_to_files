CREATE PROGRAM dm2_eod_si_rebuild:dba
 DECLARE getfileextension(opsys=vc) = vc
 DECLARE writeerror(null) = null
 DECLARE buildtargetfiles(null) = null
 DECLARE displayerrstruct(filename=vc,dateoccurred=vc) = null
 DECLARE builddatetime(null) = vc
 DECLARE errmsg = vc WITH protect, noconstant("")
 DECLARE curopsys = c10 WITH protect, noconstant(validate(cursys2,cursys))
 DECLARE targetdirectory = vc WITH protect, noconstant("cer_proc:")
 DECLARE fileext = vc WITH protect, noconstant(getfileextension(curopsys))
 DECLARE eodscript = vc WITH protect, noconstant("dm2_core_eod_si_")
 DECLARE eoderrorfile = vc WITH protect, noconstant("dm2_fail_")
 DECLARE targetscript = vc WITH protect, noconstant("")
 DECLARE targeterrorfile = vc WITH protect, noconstant("")
 DECLARE release_id = f8 WITH protect, noconstant(0.0)
 DECLARE plan_id = i4 WITH protect, noconstant(0)
 DECLARE versionnum = i4 WITH protect, noconstant(0)
 FREE RECORD errstruct
 RECORD errstruct(
   1 list_0[*]
     2 errmsg = vc
 )
 SET release_id = cnvtreal( $1)
 SET plan_id = abs(cnvtint( $2))
 IF (error(errmsg,1) != 0)
  SET release_id = 0
  CALL buildtargetfiles(null)
  SET stat = alterlist(errstruct->list_0,2)
  SET errstruct->list_0[1].errmsg =
  "Program needs two parameters; parameters may not have been passed to script."
  SET errstruct->list_0[2].errmsg = concat("Captured error: ",errmsg)
  CALL writeerror(null)
  GO TO exit_script
 ENDIF
 IF (release_id <= 0)
  SET release_id = 0
  CALL buildtargetfiles(null)
  SET stat = alterlist(errstruct->list_0,1)
  SET errstruct->list_0[1].errmsg = "Release ID passed was not a non-zero, positive numeric value."
  CALL writeerror(null)
  GO TO exit_script
 ENDIF
 CALL buildtargetfiles(null)
 SELECT INTO "nl:"
  max_version = max(dces.version_number)
  FROM dm_core_eod_si dces
  WHERE dces.si_release_ident=release_id
   AND dces.os_version_name=curopsys
  DETAIL
   versionnum = max_version
  WITH nocounter
 ;end select
 IF (error(errmsg,1) != 0)
  SET stat = alterlist(errstruct->list_0,2)
  SET errstruct->list_0[1].errmsg = concat(
   "Error encountered when SELECTing the maximum version number for release ID ",trim(cnvtstring(
     release_id),3)," and OS mnemonic ",curopsys)
  SET errstruct->list_0[2].errmsg = concat("Captured error message: ",errmsg)
  CALL writeerror(null)
  GO TO exit_script
 ENDIF
 IF (versionnum <= 0)
  SET stat = alterlist(errstruct->list_0,1)
  SET errstruct->list_0[1].errmsg = concat("No version number found for release ID ",trim(cnvtstring(
     release_id),3)," and OS mnemonic ",curopsys)
  CALL writeerror(null)
  GO TO exit_script
 ENDIF
 IF (plan_id > 0)
  SELECT INTO "nl:"
   dol.ocd
   FROM dm_ocd_log dol
   WHERE (dol.ocd=- (plan_id))
    AND dol.project_type="INSTALL LOG"
   WITH nocounter
  ;end select
  IF (curqual=0)
   SET stat = alterlist(errstruct->list_0,1)
   SET errstruct->list_0[1].errmsg = concat("Invalid plan ID ",build(plan_id)," passed in.")
   CALL writeerror(null)
   GO TO exit_script
  ENDIF
 ENDIF
 SELECT INTO value(targetscript)
  dces.line_number
  FROM dm_core_eod_si dces
  WHERE dces.si_release_ident=release_id
   AND dces.os_version_name=curopsys
   AND dces.version_number=versionnum
  ORDER BY dces.line_number
  DETAIL
   col 0, dces.instruction_txt, row + 1
  FOOT REPORT
   IF (curopsys="AXP")
    row + 1, col 0, "$! SI release: ",
    release_id, row + 1, col 0,
    "$! Version: ", versionnum
   ELSE
    row + 1, col 0, "# SI release: ",
    release_id, row + 1, col 0,
    "# Version: ", versionnum
   ENDIF
  WITH nocounter, maxcol = 256, maxrow = 1,
   formfeed = none
 ;end select
 IF (error(errmsg,1) != 0)
  SET stat = alterlist(errstruct->list_0,2)
  SET errstruct->list_0[1].errmsg =
  "Error encountered when SELECTing from DM_CORE_EOD_SI to rebuild script."
  SET errstruct->list_0[2].errmsg = concat("Captured error message: ",errmsg)
  CALL writeerror(null)
  GO TO exit_script
 ENDIF
#exit_script
 FREE RECORD errstruct
 SUBROUTINE getfileextension(opsys)
   IF (opsys IN ("AIX", "HPX", "LNX"))
    RETURN(".ksh")
   ELSE
    RETURN(".com")
   ENDIF
 END ;Subroutine
 SUBROUTINE writeerror(null)
   DECLARE starline = c66 WITH protect, noconstant(fillstring(66,"*"))
   DECLARE curdatetime = vc WITH protect, noconstant("")
   SET curdatetime = builddatetime(null)
   CALL displayerrstruct(targeterrorfile,curdatetime)
   CALL deletescript(null)
   SELECT INTO value(targeterrorfile)
    FROM dual du,
     (dummyt d  WITH seq = value(size(errstruct->list_0,5)))
    PLAN (d)
     JOIN (du)
    HEAD REPORT
     col 0, starline, row + 1,
     col 0, "EOD SI REBUILD ERROR LOG", row + 1,
     col 0, "Generated by dm2_eod_si_rebuild CCL script", row + 1,
     col 0, starline, row + 1,
     col 0, "Date: ", curdatetime
    DETAIL
     row + 1, col 0, errstruct->list_0[d.seq].errmsg
    WITH nocounter, maxcol = 256, maxrow = 1,
     formfeed = none
   ;end select
   DECLARE tmperr = vc WITH protect, noconstant("")
   IF (error(tmperr,1) != 0)
    SET stat = alterlist(errstruct->list_0,3)
    SET errstruct->list_0[1].errmsg = "Error encountered when generating error log file"
    SET errstruct->list_0[2].errmsg = "(This error will not be dumped to the error log)"
    SET errstruct->list_0[3].errmsg = concat("Captured error was: ",tmperr)
    CALL displayerrstruct(targeterrorfile,curdatetime)
   ENDIF
 END ;Subroutine
 SUBROUTINE displayerrstruct(filename,dateoccurred)
   CALL echo(starline)
   CALL echo("* ERROR:")
   FOR (i = 1 TO size(errstruct->list_0,5))
     CALL echo(concat("* ",errstruct->list_0[i].errmsg))
   ENDFOR
   CALL echo("*")
   CALL echo(concat("* Date of occurrence: ",dateoccurred))
   CALL echo("*")
   CALL echo(concat("* Error recorded in: ",filename))
   CALL echo(starline)
 END ;Subroutine
 SUBROUTINE buildtargetfiles(null)
   SET targetscript = build(targetdirectory,eodscript,cnvtint(release_id),fileext)
   SET targeterrorfile = build(targetdirectory,eoderrorfile,cnvtint(release_id),fileext)
   CALL echo(concat("Target script file is: ",targetscript))
   CALL echo(concat("Target error file is: ",targeterrorfile))
 END ;Subroutine
 SUBROUTINE builddatetime(null)
   DECLARE curdatevc = vc WITH protect, noconstant("")
   DECLARE curtimevc = vc WITH protect, noconstant("")
   DECLARE curdatetime = vc WITH protect, noconstant("")
   DECLARE curhouri4 = i4 WITH protect, noconstant(hour(curtime))
   DECLARE curminutec2 = c2 WITH protect, noconstant(cnvtstring(minute(curtime)))
   DECLARE c_ampm = c2 WITH protect, noconstant("AM")
   IF (curhouri4 > 12)
    SET c_ampm = "PM"
    SET curhouri4 = (curhouri4 - 12)
   ENDIF
   IF (cnvtint(curminutec2) < 10)
    SET curminutec2 = concat("0",curminutec2)
   ENDIF
   SET curdatevc = build(month(curdate),"-",day(curdate),"-",year(curdate))
   SET curtimevc = concat(trim(cnvtstring(curhouri4),3),":",trim(curminutec2)," ",c_ampm)
   SET curdatetime = concat(curdatevc," ",curtimevc)
   RETURN(curdatetime)
 END ;Subroutine
 SUBROUTINE deletescript(null)
   IF (curopsys IN ("AIX", "HPX", "LNX"))
    SET stat = remove(targetscript)
   ELSE
    SET stat = remove(concat(targetscript,";*"))
   ENDIF
 END ;Subroutine
END GO
