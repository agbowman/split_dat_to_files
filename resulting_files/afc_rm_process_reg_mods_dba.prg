CREATE PROGRAM afc_rm_process_reg_mods:dba
 DECLARE afc_rm_process_reg_mods = vc WITH protect, constant("RCBACM-29658.073")
 IF ( NOT (validate(reply)))
  RECORD reply(
    1 pft_status_data
      2 status = c1
      2 subeventstatus[*]
        3 status = c1
        3 table_name = vc
        3 pk_values = vc
    1 mod_objs[*]
      2 entity_type = vc
      2 mod_recs[*]
        3 table_name = vc
        3 pk_values = vc
        3 mod_flds[*]
          4 field_name = vc
          4 field_type = vc
          4 field_value_obj = vc
          4 field_value_db = vc
    1 failure_stack
      2 failures[*]
        3 programname = vc
        3 routinename = vc
        3 message = vc
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
    1 status_detail
      2 details[*]
        3 entityid = f8
        3 detailflag = i4
        3 detailmessage = vc
        3 parameters[*]
          4 paramname = vc
          4 paramvalue = vc
  )
 ENDIF
 RECORD encountervalues(
   1 olddischargedttm = dq8
   1 newdischargedttm = dq8
   1 oldadmitdttm = dq8
   1 newadmitdttm = dq8
   1 oldregdttm = dq8
   1 newregdttm = dq8
   1 oldencountertype = f8
   1 newencountertype = f8
   1 oldencounterclass = f8
   1 newencounterclass = f8
   1 oldlocation = f8
   1 newlocation = f8
   1 oldfacilitycd = f8
   1 newfacilitycd = f8
   1 isdenormalized = i2
   1 newmedservicecd = f8
 ) WITH protect
 RECORD eventparams(
   1 params[*]
     2 paramcd = f8
     2 paramvalue = f8
 ) WITH protect
 RECORD affectedfinencounterlist(
   1 financialencounters[*]
     2 pftencntrid = f8
     2 historyind = i2
     2 zerobalancedttm = dq8
     2 endeffectivedttm = dq8
     2 newpftencntrid = f8
 ) WITH protect
 RECORD bypasslist(
   1 pelist[*]
     2 pftencntrid = f8
 ) WITH protect
 RECORD enctypes(
   1 newenctype = f8
   1 oldenctype = f8
 ) WITH protect
 RECORD rpchargelist(
   1 charges[*]
     2 o_charge_item_id = f8
     2 n_charge_item_id = f8
     2 o_bo_hp_id = f8
     2 n_bo_hp_id = f8
     2 o_pft_charge_id = f8
     2 n_pft_charge_id = f8
     2 o_pft_encntr_id = f8
     2 n_pft_encntr_id = f8
     2 o_bo_id = f8
     2 n_bo_id = f8
     2 o_bo_hp_status_cd = f8
     2 o_pli_chrg_reltn_id = f8
 ) WITH protect
 RECORD transactions(
   1 batch_type_flag = i2
   1 objarray[*]
     2 activity_id = f8
 ) WITH protect
 RECORD transactionsinfo(
   1 obj_vrsn_8 = c1
   1 ein_type = i4
   1 proxy_ind = i2
   1 hide_adjustments_ind = i2
   1 hide_payments_ind = i2
   1 hide_charges_ind = i2
   1 objarray[*]
     2 reconstructed_ind = i2
     2 acct_id = f8
     2 activity_id = f8
     2 batch_denial_file_r_id = f8
     2 batch_trans_ext_id = f8
     2 batch_trans_file_id = f8
     2 batch_trans_id = f8
     2 benefit_order_id = f8
     2 bill_item_id = f8
     2 bill_templ_id = f8
     2 bill_vrsn_nbr = i4
     2 billing_entity_id = f8
     2 bo_hp_reltn_id = f8
     2 charge_item_id = f8
     2 chrg_activity_id = f8
     2 claim_status_id = f8
     2 client_org_id = f8
     2 corsp_activity_id = f8
     2 corsp_log_reltn_id = f8
     2 denial_id = f8
     2 dirty_flag = i4
     2 encntr_id = f8
     2 guar_acct_id = f8
     2 guarantor_id = f8
     2 health_plan_id = f8
     2 long_text_id = f8
     2 organization_id = f8
     2 payor_org_id = f8
     2 pe_status_reason_id = f8
     2 person_id = f8
     2 pft_balance_id = f8
     2 pft_bill_activity_id = f8
     2 pft_charge_id = f8
     2 pft_encntr_fact_id = f8
     2 pft_encntr_id = f8
     2 pft_line_item_id = f8
     2 trans_alias_id = f8
     2 pft_payment_plan_id = f8
     2 daily_encntr_bal_id = f8
     2 daily_acct_bal_id = f8
     2 active_ind = i2
     2 active_status_cd = f8
     2 active_status_disp = vc
     2 active_status_desc = vc
     2 active_status_mean = vc
     2 active_status_code_set = f8
     2 active_status_dt_tm = dq8
     2 active_status_prsnl_id = f8
     2 beg_effective_dt_tm = dq8
     2 end_effective_dt_tm = dq8
     2 updt_applctx = f8
     2 updt_cnt = i4
     2 updt_dt_tm = dq8
     2 updt_id = f8
     2 updt_task = f8
     2 benefit_status_cd = f8
     2 financial_class_cd = f8
     2 payment_plan_flag = i2
     2 payment_location_id = f8
     2 encntr_plan_cob_id = f8
     2 guarantor_account_id = f8
     2 guarantor_id1 = f8
     2 guarantor_id2 = f8
     2 cbos_pe_reltn_id = f8
     2 post_dt_tm = dq8
     2 posting_category_type_flag = i2
     2 patient_name = vc
     2 trans_type_cd = f8
     2 trans_type_disp = vc
     2 trans_type_desc = vc
     2 trans_type_mean = vc
     2 trans_type_code_set = f8
     2 trans_sub_type_cd = f8
     2 trans_sub_type_disp = vc
     2 trans_sub_type_desc = vc
     2 trans_sub_type_mean = vc
     2 trans_sub_type_code_set = f8
     2 trans_alias_id = f8
     2 acct_sub_type_cd = f8
     2 acct_sub_type_disp = vc
     2 acct_sub_type_desc = vc
     2 acct_sub_type_mean = vc
     2 acct_sub_type_code_set = f8
     2 total_trans_amount = f8
     2 trans_reason_cd = f8
     2 trans_reason_disp = vc
     2 trans_reason_desc = vc
     2 trans_reason_mean = vc
     2 trans_reason_code_set = f8
     2 trans_comment = vc
     2 trans_status_cd = f8
     2 trans_status_disp = vc
     2 trans_status_desc = vc
     2 trans_status_mean = vc
     2 trans_status_code_set = f8
     2 trans_status_reason_cd = f8
     2 trans_status_reason_disp = vc
     2 trans_status_reason_desc = vc
     2 trans_status_reason_mean = vc
     2 trans_status_reason_code_set = f8
     2 bundle_id = f8
     2 bundle_ind = i2
     2 gl_posted_ind = i2
     2 post_dt_tm = dq8
     2 bill_ind = i2
     2 suppress_flag = i2
     2 suppress_txt = vc
     2 created_dt_tm = dq8
     2 created_prsnl_id = f8
     2 payment_detail_id = f8
     2 tpm_id = f8
     2 cr_acct_id = f8
     2 dr_acct_id = f8
     2 ext_acct_id_txt = vc
     2 acct_bal = f8
     2 cr_be_id = f8
     2 dr_be_id = f8
     2 ar_account_id = f8
     2 nar_account_id = f8
     2 fin_nbr = vc
     2 fin_bal = f8
     2 bo_bal = f8
     2 payment_method_cd = f8
     2 payment_method_disp = vc
     2 payment_method_desc = vc
     2 payment_method_mean = vc
     2 payment_method_code_set = f8
     2 payment_num_desc = vc
     2 payor_name = vc
     2 payor_id = f8
     2 payor_entity_name = vc
     2 cc_beg_eff_dt_tm = dq8
     2 cc_end_eff_dt_tm = dq8
     2 cc_auth_nbr = vc
     2 cc_token_txt = vc
     2 external_ident = vc
     2 current_cur_cd = f8
     2 current_cur_disp = vc
     2 current_cur_desc = vc
     2 current_cur_mean = vc
     2 current_cur_code_set = f8
     2 orig_cur_cd = f8
     2 orig_cur_disp = vc
     2 orig_cur_desc = vc
     2 orig_cur_mean = vc
     2 orig_cur_code_set = f8
     2 check_date = dq8
     2 napplevel_flag = i4
     2 parent_entity_name = vc
     2 parent_entity_id = f8
     2 parent_activity_id = f8
     2 tendered_amount = f8
     2 change_due_amount = f8
     2 sequence_nbr = i4
     2 reversed_ind = i2
     2 reversed_amount = f8
     2 transfered_ind = i2
     2 transferred_amount = f8
     2 reversal_ind = i2
     2 transfer_ind = i2
     2 preview = vc
     2 batch_trans_reltn_id = f8
     2 error_status_cd = f8
     2 refundable_amount = f8
     2 pending_refund_amount = f8
     2 cc_type_cd = f8
     2 merchant_ident = vc
     2 cc_location_cd = f8
     2 cc_trans_org_id = f8
     2 interchange_trans_ident = vc
     2 cc_app_name = vc
     2 cc_card_entry_mode_txt = vc
     2 cc_cvm_txt = vc
     2 cc_aid_txt = vc
     2 cc_tvr_txt = vc
     2 cc_iad_txt = vc
     2 cc_tsi_txt = vc
     2 cc_arc_txt = vc
     2 cc_app_label = vc
     2 activity_dt_tm = dq8
     2 user_name = vc
     2 pending_dt_tm = dq8
     2 icn_number = i4
     2 hp_name = vc
     2 service_dt_tm = dq8
     2 last_charge_dt_tm = dq8
     2 charge_description = vc
     2 proc_cd = vc
     2 icd9_cd = vc
     2 rev_cd = vc
     2 mod1 = vc
     2 mod2 = vc
     2 diag1 = vc
     2 diag2 = vc
     2 diag3 = vc
     2 diag4 = vc
     2 unit_price = f8
     2 quantity = f8
     2 fin_class_cd = f8
     2 fin_class_disp = vc
     2 fin_class_desc = vc
     2 fin_class_mean = vc
     2 fin_class_code_set = f8
     2 ordering_physician = vc
     2 performing_physician = vc
     2 service_resource_cd = f8
     2 service_resource_disp = vc
     2 service_resource_desc = vc
     2 service_resource_mean = vc
     2 service_resource_code_set = f8
     2 perf_loc_cd = f8
     2 perf_loc_disp = vc
     2 perf_loc_desc = vc
     2 perf_loc_mean = vc
     2 perf_loc_code_set = f8
     2 department_cd = f8
     2 department_disp = vc
     2 department_desc = vc
     2 department_mean = vc
     2 department_code_set = f8
     2 abn_status_cd = f8
     2 abn_status_disp = vc
     2 abn_status_desc = vc
     2 abn_status_mean = vc
     2 abn_status_code_set = f8
     2 activity_type_cd = f8
     2 activity_type_disp = vc
     2 activity_type_desc = vc
     2 activity_type_mean = vc
     2 activity_type_code_set = f8
     2 total_payments = f8
     2 total_adjustments = f8
     2 balance = f8
     2 order_id = f8
     2 chrg_group_disp = vc
     2 late_chrg_flag = i2
     2 trans_sub_amount = f8
     2 charge_event_id = f8
     2 charge_event_act_id = f8
     2 gl_trans_log_id = f8
     2 company_alias = vc
     2 company_unit = vc
     2 account_alias = vc
     2 account_unit = vc
     2 gl_interface_dt_tm = dq8
     2 gl_status_cd = f8
     2 gl_status_disp = vc
     2 gl_status_desc = vc
     2 gl_status_mean = vc
     2 gl_status_code_set = f8
     2 non_ar_gl_trans_log_id = f8
     2 non_ar_company_alias = vc
     2 non_ar_company_unit = vc
     2 non_ar_account_alias = vc
     2 non_ar_account_unit = vc
     2 non_ar_gl_interface_dt_tm = dq8
     2 non_ar_gl_status_cd = f8
     2 non_ar_gl_status_disp = vc
     2 non_ar_gl_status_desc = vc
     2 non_ar_gl_status_mean = vc
     2 non_ar_gl_status_code_set = f8
     2 transaction_level = vc
     2 trans_reltn_sub_reason_cd = f8
     2 trans_reltn_reason_cd = f8
     2 trans_trans_reltn_id = f8
     2 ar_balance_id = f8
     2 nar_balance_id = f8
     2 payer_desc = vc
     2 entity_instance_desc = vc
     2 entity_resource_large_key = vc
     2 entity_resource_small_key = vc
     2 entity_name = vc
     2 edi_adj_group_cd = f8
     2 edi_adj_reason_cd = f8
 ) WITH protect
 RECORD transfindreply(
   1 pft_status_data
     2 status = c1
     2 subeventstatus[*]
       3 status = c1
       3 table_name = vc
       3 pk_values = vc
   1 mod_objs[*]
     2 entity_type = vc
     2 mod_recs[*]
       3 table_name = vc
       3 pk_values = vc
       3 mod_flds[*]
         4 field_name = vc
         4 field_type = vc
         4 field_value_obj = vc
         4 field_value_db = vc
   1 failure_stack
     2 failures[*]
       3 programname = vc
       3 routinename = vc
       3 message = vc
   1 status_data
     2 status = c1
     2 subeventstatus[1]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 ) WITH protect
 RECORD chargesforreclass(
   1 charges[*]
     2 charge_item_id = f8
 ) WITH protect
 IF ( NOT (validate(afcrmtimerevents)))
  RECORD afcrmtimerevents(
    1 timerevents[*]
      2 elapsedtime = f8
      2 timername = vc
      2 subtimername = vc
      2 metadata1 = vc
      2 metadata2 = vc
      2 metadata3 = vc
  ) WITH protect
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(log_error)))
  DECLARE log_error = i4 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(log_warning)))
  DECLARE log_warning = i4 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(log_audit)))
  DECLARE log_audit = i4 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(log_info)))
  DECLARE log_info = i4 WITH protect, constant(3)
 ENDIF
 IF ( NOT (validate(log_debug)))
  DECLARE log_debug = i4 WITH protect, constant(4)
 ENDIF
 DECLARE __lpahsys = i4 WITH protect, noconstant(0)
 DECLARE __lpalsysstat = i4 WITH protect, noconstant(0)
 IF (validate(logmessage,char(128))=char(128))
  SUBROUTINE (logmessage(psubroutine=vc,pmessage=vc,plevel=i4) =null)
    DECLARE cs23372_failed_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",23372,"FAILED"))
    DECLARE hmsg = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrep = i4 WITH protect, noconstant(0)
    DECLARE hobjarray = i4 WITH protect, noconstant(0)
    DECLARE srvstatus = i4 WITH protect, noconstant(0)
    DECLARE submit_log = i4 WITH protect, constant(4099455)
    CALL echo("")
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    IF (size(trim(psubroutine,3)) > 0)
     CALL echo(concat(curprog," : ",psubroutine,"() : ",pmessage))
    ELSE
     CALL echo(concat(curprog," : ",pmessage))
    ENDIF
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    CALL echo("")
    SET __lpahsys = 0
    SET __lpalsysstat = 0
    CALL uar_syscreatehandle(__lpahsys,__lpalsysstat)
    IF (__lpahsys > 0)
     CALL uar_sysevent(__lpahsys,plevel,curprog,nullterm(pmessage))
     CALL uar_sysdestroyhandle(__lpahsys)
    ENDIF
    IF (plevel=log_error)
     SET hmsg = uar_srvselectmessage(submit_log)
     SET hreq = uar_srvcreaterequest(hmsg)
     SET hrep = uar_srvcreatereply(hmsg)
     SET hobjarray = uar_srvadditem(hreq,"objArray")
     SET stat = uar_srvsetdouble(hobjarray,"final_status_cd",cs23372_failed_cd)
     SET stat = uar_srvsetstring(hobjarray,"task_name",nullterm(curprog))
     SET stat = uar_srvsetstring(hobjarray,"completion_msg",nullterm(pmessage))
     SET stat = uar_srvsetdate(hobjarray,"end_dt_tm",cnvtdatetime(sysdate))
     SET stat = uar_srvsetstring(hobjarray,"current_node_name",nullterm(curnode))
     SET stat = uar_srvsetstring(hobjarray,"server_name",nullterm(build(curserver)))
     SET srvstatus = uar_srvexecute(hmsg,hreq,hrep)
     IF (srvstatus != 0)
      CALL echo(build2("Execution of pft_save_system_activity_log was not successful"))
     ENDIF
     CALL uar_srvdestroyinstance(hreq)
     CALL uar_srvdestroyinstance(hrep)
    ENDIF
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(go_to_exit_script)))
  DECLARE go_to_exit_script = i2 WITH constant(1)
 ENDIF
 IF ( NOT (validate(dont_go_to_exit_script)))
  DECLARE dont_go_to_exit_script = i2 WITH constant(0)
 ENDIF
 IF (validate(beginservice,char(128))=char(128))
  SUBROUTINE (beginservice(pversion=vc) =null)
   CALL logmessage("",concat("version:",pversion," :Begin Service"),log_debug)
   CALL setreplystatus("F","Begin Service")
  END ;Subroutine
 ENDIF
 IF (validate(exitservicesuccess,char(128))=char(128))
  SUBROUTINE (exitservicesuccess(pmessage=vc) =null)
    DECLARE errmsg = vc WITH noconstant(" ")
    DECLARE errcode = i2 WITH noconstant(1)
    IF (size(trim(pmessage,3)) > 0)
     CALL logmessage("",pmessage,log_info)
    ENDIF
    IF ((((currevminor2+ (currevminor * 100))+ (currev * 10000)) >= 080311))
     IF (curdomain IN ("SURROUND", "SOLUTION"))
      SET errmsg = fillstring(132," ")
      SET errcode = error(errmsg,1)
      IF (errcode != 0)
       CALL exitservicefailure(errmsg,true)
      ELSE
       CALL logmessage("","Exit Service - SUCCESS",log_debug)
       CALL setreplystatus("S",evaluate(pmessage,"","Exit Service - SUCCESS",pmessage))
       SET reqinfo->commit_ind = true
      ENDIF
     ELSE
      CALL logmessage("","Exit Service - SUCCESS",log_debug)
      CALL setreplystatus("S",evaluate(pmessage,"","Exit Service - SUCCESS",pmessage))
      SET reqinfo->commit_ind = true
     ENDIF
    ELSE
     CALL logmessage("","Exit Service - SUCCESS",log_debug)
     CALL setreplystatus("S",evaluate(pmessage,"","Exit Service - SUCCESS",pmessage))
     SET reqinfo->commit_ind = true
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(exitservicefailure,char(128))=char(128))
  SUBROUTINE (exitservicefailure(pmessage=vc,exitscriptind=i2) =null)
    CALL addtracemessage("",evaluate(trim(pmessage),trim(""),"Exit Service - FAILURE",pmessage))
    CALL logmessage("",evaluate(trim(pmessage),trim(""),"Exit Service - FAILURE",pmessage),log_error)
    IF (validate(reply->failure_stack.failures))
     SET reply->status_data.status = "F"
     SET reply->status_data.subeventstatus[1].operationstatus = "F"
     SET reply->status_data.subeventstatus[1].operationname = reply->failure_stack.failures[1].
     programname
     SET reply->status_data.subeventstatus[1].targetobjectname = reply->failure_stack.failures[1].
     routinename
     SET reply->status_data.subeventstatus[1].targetobjectvalue = reply->failure_stack.failures[1].
     message
    ELSE
     CALL setreplystatus("F",evaluate(trim(pmessage),trim(""),"Exit Service - FAILURE",pmessage))
    ENDIF
    SET reqinfo->commit_ind = false
    IF (exitscriptind)
     GO TO exit_script
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(exitservicenodata,char(128))=char(128))
  SUBROUTINE (exitservicenodata(pmessage=vc,exitscriptind=i2) =null)
    IF (size(trim(pmessage,3)) > 0)
     CALL logmessage("",pmessage,log_info)
    ENDIF
    CALL logmessage("","Exit Service - NO DATA",log_debug)
    CALL setreplystatus("Z",evaluate(pmessage,"","Exit Service - NO DATA",pmessage))
    SET reqinfo->commit_ind = false
    IF (exitscriptind)
     GO TO exit_script
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setreplystatus,char(128))=char(128))
  SUBROUTINE (setreplystatus(pstatus=vc,pmessage=vc) =null)
    IF (validate(reply->status_data))
     SET reply->status_data.status = nullterm(pstatus)
     SET reply->status_data.subeventstatus[1].operationstatus = nullterm(pstatus)
     SET reply->status_data.subeventstatus[1].operationname = nullterm(curprog)
     SET reply->status_data.subeventstatus[1].targetobjectvalue = nullterm(pmessage)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(addtracemessage,char(128))=char(128))
  SUBROUTINE (addtracemessage(proutinename=vc,pmessage=vc) =null)
   CALL logmessage(proutinename,pmessage,log_debug)
   IF (validate(reply->failure_stack))
    DECLARE failcnt = i4 WITH protect, noconstant((size(reply->failure_stack.failures,5)+ 1))
    SET stat = alterlist(reply->failure_stack.failures,failcnt)
    SET reply->failure_stack.failures[failcnt].programname = nullterm(curprog)
    SET reply->failure_stack.failures[failcnt].routinename = nullterm(proutinename)
    SET reply->failure_stack.failures[failcnt].message = nullterm(pmessage)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(addstatusdetail,char(128))=char(128))
  SUBROUTINE (addstatusdetail(pentityid=f8,pdetailflag=i4,pdetailmessage=vc) =null)
    IF (validate(reply->status_detail))
     DECLARE detailcnt = i4 WITH protect, noconstant((size(reply->status_detail.details,5)+ 1))
     SET stat = alterlist(reply->status_detail.details,detailcnt)
     SET reply->status_detail.details[detailcnt].entityid = pentityid
     SET reply->status_detail.details[detailcnt].detailflag = pdetailflag
     SET reply->status_detail.details[detailcnt].detailmessage = nullterm(pdetailmessage)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(copystatusdetails,char(128))=char(128))
  SUBROUTINE (copystatusdetails(pfromrecord=vc(ref),prtorecord=vc(ref)) =null)
    IF (validate(pfromrecord->status_detail)
     AND validate(prtorecord->status_detail))
     DECLARE fromidx = i4 WITH protect, noconstant(0)
     DECLARE fromcnt = i4 WITH protect, noconstant(size(pfromrecord->status_detail.details,5))
     DECLARE toidx = i4 WITH protect, noconstant(size(prtorecord->status_detail.details,5))
     DECLARE fromparamidx = i4 WITH protect, noconstant(0)
     DECLARE toparamcnt = i4 WITH protect, noconstant(0)
     FOR (fromidx = 1 TO fromcnt)
       SET toidx += 1
       SET stat = alterlist(prtorecord->status_detail.details,toidx)
       SET prtorecord->status_detail.details[toidx].entityid = pfromrecord->status_detail.details[
       fromidx].entityid
       SET prtorecord->status_detail.details[toidx].detailflag = pfromrecord->status_detail.details[
       fromidx].detailflag
       SET prtorecord->status_detail.details[toidx].detailmessage = pfromrecord->status_detail.
       details[fromidx].detailmessage
       SET toparamcnt = 0
       FOR (fromparamidx = 1 TO size(pfromrecord->status_detail.details[fromidx].parameters,5))
         SET toparamcnt += 1
         SET stat = alterlist(prtorecord->status_detail.details[toidx].parameters,toparamcnt)
         SET prtorecord->status_detail.details[toidx].parameters[toparamcnt].paramname = pfromrecord
         ->status_detail.details[fromidx].parameters[fromparamidx].paramname
         SET prtorecord->status_detail.details[toidx].parameters[toparamcnt].paramvalue = pfromrecord
         ->status_detail.details[fromidx].parameters[fromparamidx].paramvalue
       ENDFOR
     ENDFOR
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(addstatusdetailparam,char(128))=char(128))
  SUBROUTINE (addstatusdetailparam(pdetailidx=i4,pparamname=vc,pparamvalue=vc) =null)
    IF (validate(reply->status_detail))
     IF (validate(reply->status_detail.details[pdetailidx].parameters))
      DECLARE paramcnt = i4 WITH protect, noconstant((size(reply->status_detail.details[pdetailidx].
        parameters,5)+ 1))
      SET stat = alterlist(reply->status_detail.details[pdetailidx].parameters,paramcnt)
      SET reply->status_detail.details[pdetailidx].parameters[paramcnt].paramname = pparamname
      SET reply->status_detail.details[pdetailidx].parameters[paramcnt].paramvalue = pparamvalue
     ENDIF
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(copytracemessages,char(128))=char(128))
  SUBROUTINE (copytracemessages(pfromrecord=vc(ref),prtorecord=vc(ref)) =null)
    IF (validate(pfromrecord->failure_stack)
     AND validate(prtorecord->failure_stack))
     DECLARE fromidx = i4 WITH protect, noconstant(0)
     DECLARE fromcnt = i4 WITH protect, noconstant(size(pfromrecord->failure_stack.failures,5))
     DECLARE toidx = i4 WITH protect, noconstant(size(prtorecord->failure_stack.failures,5))
     FOR (fromidx = 1 TO fromcnt)
       SET toidx += 1
       SET stat = alterlist(prtorecord->failure_stack.failures,toidx)
       SET prtorecord->failure_stack.failures[toidx].programname = pfromrecord->failure_stack.
       failures[fromidx].programname
       SET prtorecord->failure_stack.failures[toidx].routinename = pfromrecord->failure_stack.
       failures[fromidx].routinename
       SET prtorecord->failure_stack.failures[toidx].message = pfromrecord->failure_stack.failures[
       fromidx].message
     ENDFOR
    ENDIF
  END ;Subroutine
 ENDIF
 CALL echo("Begin pft_rm_reevaluate_charges_subs.inc, version [RCBACM-29658.062-059]")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF (validate(isequal,char(128))=char(128))
  SUBROUTINE (isequal(amount1=f8,amount2=f8) =i2)
   DECLARE tmpdiff = f8 WITH private, noconstant(abs((abs(amount1) - abs(amount2))))
   IF (tmpdiff < 0.009)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(enccharges)))
  FREE RECORD enccharges
  RECORD enccharges(
    1 charge_item_count = i4
    1 charge_items[*]
      2 charge_item_id = f8
      2 parent_charge_item_id = f8
      2 charge_event_act_id = f8
      2 charge_event_id = f8
      2 bill_item_id = f8
      2 order_id = f8
      2 encntr_id = f8
      2 person_id = f8
      2 person_name = vc
      2 username = vc
      2 payor_id = f8
      2 ord_loc_cd = f8
      2 perf_loc_cd = f8
      2 perf_loc_disp = vc
      2 ord_phys_id = f8
      2 perf_phys_id = f8
      2 charge_description = vc
      2 price_sched_id = f8
      2 item_quantity = f8
      2 item_price = f8
      2 item_extended_price = f8
      2 item_allowable = f8
      2 item_copay = f8
      2 charge_type_cd = f8
      2 charge_type_disp = vc
      2 charge_type_mean = vc
      2 research_acct_id = f8
      2 suspense_rsn_cd = f8
      2 reason_comment = vc
      2 posted_cd = f8
      2 posted_dt_tm = dq8
      2 process_flg = i4
      2 service_dt_tm = dq8
      2 activity_dt_tm = dq8
      2 updt_cnt = i4
      2 updt_dt_tm = dq8
      2 updt_id = f8
      2 updt_task = i4
      2 updt_applctx = i4
      2 active_status_dt_tm = dq8
      2 active_status_prsnl_id = f8
      2 active_ind = i2
      2 active_status_cd = f8
      2 beg_effective_dt_tm = dq8
      2 end_effective_dt_tm = dq8
      2 credited_dt_tm = dq8
      2 adjusted_dt_tm = dq8
      2 interface_file_id = f8
      2 tier_group_cd = f8
      2 def_bill_item_id = f8
      2 verify_phys_id = f8
      2 gross_price = f8
      2 discount_amount = f8
      2 manual_ind = i2
      2 combine_ind = i2
      2 activity_type_cd = f8
      2 admit_type_cd = f8
      2 bundle_id = f8
      2 department_cd = f8
      2 institution_cd = f8
      2 level5_cd = f8
      2 med_service_cd = f8
      2 section_cd = f8
      2 subsection_cd = f8
      2 abn_status_cd = f8
      2 cost_center_cd = f8
      2 inst_fin_nbr = vc
      2 fin_class_cd = f8
      2 health_plan_id = f8
      2 item_interval_id = f8
      2 item_list_price = f8
      2 item_reimbursement = f8
      2 list_price_sched_id = f8
      2 payor_type_cd = f8
      2 epsdt_ind = i2
      2 ref_phys_id = f8
      2 start_dt_tm = dq8
      2 stop_dt_tm = dq8
      2 alpha_nomen_id = f8
      2 server_process_flag = i2
      2 offset_charge_item_id = f8
      2 item_deductible_amt = f8
      2 patient_responsibility_flag = i2
      2 ext_parent_reference_id = f8
      2 ext_parent_contributor_cd = f8
      2 charge_mod_count = i4
      2 activity_sub_type_cd = f8
      2 provider_specialty_cd = f8
      2 original_org_id = f8
      2 charge_mods[*]
        3 charge_mod_id = f8
        3 charge_mod_type_cd = f8
        3 field1 = vc
        3 field2 = vc
        3 field3 = vc
        3 field4 = vc
        3 field5 = vc
        3 field6 = vc
        3 field7 = vc
        3 field8 = vc
        3 field9 = vc
        3 field10 = vc
        3 field1_id = f8
        3 field2_id = f8
        3 field3_id = f8
        3 field4_id = f8
        3 field5_id = f8
        3 nomen_id = f8
        3 cm1_nbr = f8
        3 activity_dt_tm = dq8
        3 active_ind = i2
        3 field3_ext = vc
        3 charge_mod_source_cd = f8
      2 factransrepind = i2
      2 item_price_adj_amt = f8
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF ( NOT (validate(repcharges)))
  FREE RECORD repcharges
  RECORD repcharges(
    1 syncedbackind = i2
    1 reevaluatedind = i2
    1 retierind = i2
    1 charges[*]
      2 charge_item_id = f8
      2 charge_act_id = f8
      2 charge_event_id = f8
      2 bill_item_id = f8
      2 charge_description = c200
      2 price_sched_id = f8
      2 payor_id = f8
      2 item_quantity = f8
      2 item_price = f8
      2 item_extended_price = f8
      2 charge_type_cd = f8
      2 suspense_rsn_cd = f8
      2 reason_comment = c200
      2 posted_cd = f8
      2 ord_phys_id = f8
      2 perf_phys_id = f8
      2 order_id = f8
      2 beg_effective_dt_tm = dq8
      2 person_id = f8
      2 encntr_id = f8
      2 admit_type_cd = f8
      2 med_service_cd = f8
      2 institution_cd = f8
      2 department_cd = f8
      2 section_cd = f8
      2 subsection_cd = f8
      2 level5_cd = f8
      2 service_dt_tm = dq8
      2 process_flg = i2
      2 parent_charge_item_id = f8
      2 interface_id = f8
      2 tier_group_cd = f8
      2 def_bill_item_id = f8
      2 verify_phys_id = f8
      2 gross_price = f8
      2 discount_amount = f8
      2 activity_type_cd = f8
      2 research_acct_id = f8
      2 cost_center_cd = f8
      2 abn_status_cd = f8
      2 perf_loc_cd = f8
      2 inst_fin_nbr = c50
      2 ord_loc_cd = f8
      2 fin_class_cd = f8
      2 health_plan_id = f8
      2 hp_beg_effective_dt_tm = dq8
      2 hp_end_effective_dt_tm = dq8
      2 manual_ind = i2
      2 updt_ind = i2
      2 payor_type_cd = f8
      2 item_copay = f8
      2 item_reimbursement = f8
      2 posted_dt_tm = dq8
      2 item_interval_id = f8
      2 list_price = f8
      2 list_price_sched_id = f8
      2 realtime_ind = i2
      2 epsdt_ind = i2
      2 ref_phys_id = f8
      2 alpha_nomen_id = f8
      2 server_process_flag = i2
      2 mods
        3 charge_mods[*]
          4 mod_id = f8
          4 charge_event_id = f8
          4 charge_event_mod_type_cd = f8
          4 charge_item_id = f8
          4 charge_mod_type_cd = f8
          4 field1 = c200
          4 field2 = c200
          4 field3 = c200
          4 field4 = c200
          4 field5 = c200
          4 field6 = c200
          4 field7 = c200
          4 field8 = c200
          4 field9 = c200
          4 field10 = c200
          4 field1_id = f8
          4 field2_id = f8
          4 field3_id = f8
          4 field4_id = f8
          4 field5_id = f8
          4 nomen_id = f8
          4 cm1_nbr = f8
          4 activity_dt_tm = dq8
          4 field3_ext = c350
          4 charge_mod_source_cd = f8
          4 code1_cd = f8
      2 offset_charge_item_id = f8
      2 patient_responsibility_flag = i2
      2 item_deductible_amt = f8
      2 activity_sub_type_cd = f8
      2 provider_specialty_cd = f8
      2 original_org_id = f8
      2 item_price_adj_amt = f8
    1 srv_diag[*]
      2 charge_event_mod_id = f8
      2 charge_event_id = f8
      2 charge_event_act_id = f8
      2 srv_diag_cd = f8
      2 srv_diag1_id = f8
      2 srv_diag2_id = f8
      2 srv_diag3_id = f8
      2 srv_diag_tier = f8
      2 srv_diag_reason = c200
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF ( NOT (validate(aac)))
  FREE RECORD aac
  RECORD aac(
    1 processedind = i2
    1 charge_qual = i4
    1 charge[*]
      2 charge_item_id = f8
      2 suspense_rsn_cd = f8
      2 reason_comment = vc
      2 late_charge_processing_ind = i2
  )
 ENDIF
 IF ( NOT (validate(csac)))
  FREE RECORD csac
  RECORD csac(
    1 processedind = i2
    1 asyncrequesthandle = i4
    1 charges[*]
      2 charge_item_id = f8
      2 charge_act_id = f8
      2 charge_event_id = f8
      2 bill_item_id = f8
      2 charge_description = c200
      2 price_sched_id = f8
      2 payor_id = f8
      2 item_quantity = f8
      2 item_price = f8
      2 item_extended_price = f8
      2 charge_type_cd = f8
      2 suspense_rsn_cd = f8
      2 reason_comment = c200
      2 posted_cd = f8
      2 ord_phys_id = f8
      2 perf_phys_id = f8
      2 order_id = f8
      2 beg_effective_dt_tm = dq8
      2 person_id = f8
      2 encntr_id = f8
      2 admit_type_cd = f8
      2 med_service_cd = f8
      2 institution_cd = f8
      2 department_cd = f8
      2 section_cd = f8
      2 subsection_cd = f8
      2 level5_cd = f8
      2 service_dt_tm = dq8
      2 process_flg = i2
      2 parent_charge_item_id = f8
      2 interface_id = f8
      2 tier_group_cd = f8
      2 def_bill_item_id = f8
      2 verify_phys_id = f8
      2 gross_price = f8
      2 discount_amount = f8
      2 activity_type_cd = f8
      2 research_acct_id = f8
      2 cost_center_cd = f8
      2 abn_status_cd = f8
      2 perf_loc_cd = f8
      2 inst_fin_nbr = c50
      2 ord_loc_cd = f8
      2 fin_class_cd = f8
      2 health_plan_id = f8
      2 hp_beg_effective_dt_tm = dq8
      2 hp_end_effective_dt_tm = dq8
      2 manual_ind = i2
      2 updt_ind = i2
      2 payor_type_cd = f8
      2 item_copay = f8
      2 item_reimbursement = f8
      2 posted_dt_tm = dq8
      2 item_interval_id = f8
      2 list_price = f8
      2 list_price_sched_id = f8
      2 realtime_ind = i2
      2 epsdt_ind = i2
      2 ref_phys_id = f8
      2 alpha_nomen_id = f8
      2 server_process_flag = i2
      2 mods
        3 charge_mods[*]
          4 mod_id = f8
          4 charge_event_id = f8
          4 charge_event_mod_type_cd = f8
          4 charge_item_id = f8
          4 charge_mod_type_cd = f8
          4 field1 = c200
          4 field2 = c200
          4 field3 = c200
          4 field4 = c200
          4 field5 = c200
          4 field6 = c200
          4 field7 = c200
          4 field8 = c200
          4 field9 = c200
          4 field10 = c200
          4 field1_id = f8
          4 field2_id = f8
          4 field3_id = f8
          4 field4_id = f8
          4 field5_id = f8
          4 nomen_id = f8
          4 cm1_nbr = f8
          4 activity_dt_tm = dq8
          4 field3_ext = c350
          4 charge_mod_source_cd = f8
          4 code1_cd = f8
      2 offset_charge_item_id = f8
      2 patient_responsibility_flag = i2
      2 item_deductible_amt = f8
      2 activity_sub_type_cd = f8
      2 provider_specialty_cd = f8
      2 original_org_id = f8
      2 item_price_adj_amt = f8
    1 srv_diag[*]
      2 charge_event_mod_id = f8
      2 charge_event_id = f8
      2 charge_event_act_id = f8
      2 srv_diag_cd = f8
      2 srv_diag1_id = f8
      2 srv_diag2_id = f8
      2 srv_diag3_id = f8
      2 srv_diag_tier = f8
      2 srv_diag_reason = c200
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF ( NOT (validate(auc)))
  FREE RECORD auc
  RECORD auc(
    1 processedind = i2
    1 charge_qual = i4
    1 charge[*]
      2 charge_item_id = f8
      2 parent_charge_item_id = f8
      2 charge_event_act_id = f8
      2 charge_event_id = f8
      2 bill_item_id = f8
      2 order_id = f8
      2 encntr_id = f8
      2 person_id = f8
      2 payor_id = f8
      2 ord_loc_cd = f8
      2 perf_loc_cd = f8
      2 ord_phys_id = f8
      2 perf_phys_id = f8
      2 charge_description = c200
      2 price_sched_id = f8
      2 item_quantity = f8
      2 item_price_ind = i2
      2 item_price = f8
      2 item_extended_price_ind = i2
      2 item_extended_price = f8
      2 item_allowable_ind = i2
      2 item_allowable = f8
      2 item_copay_ind = i2
      2 item_copay = f8
      2 charge_type_cd = f8
      2 research_acct_id = f8
      2 suspense_rsn_cd = f8
      2 reason_comment = c200
      2 posted_cd = f8
      2 posted_dt_tm = dq8
      2 process_flg = i4
      2 service_dt_tm = dq8
      2 activity_dt_tm = dq8
      2 active_status_cd = f8
      2 beg_effective_dt_tm = dq8
      2 end_effective_dt_tm = dq8
      2 updt_cnt = i4
      2 abn_status_cd = f8
      2 item_deductible_amt = f8
      2 patient_responsibility_flag = i2
      2 health_plan_id = f8
      2 fin_class_cd = f8
      2 admit_type_cd = f8
      2 verify_phys_id = f8
      2 active_ind = i2
      2 med_service_cd = f8
  )
 ENDIF
 IF ( NOT (validate(aacm)))
  FREE RECORD aacm
  RECORD aacm(
    1 processedind = i2
    1 charge_mod_qual = i2
    1 charge_mod[*]
      2 action_type = c3
      2 charge_mod_id = f8
      2 charge_item_id = f8
      2 charge_mod_type_cd = f8
      2 charge_event_mod_type_cd = f8
      2 field1 = vc
      2 field2 = vc
      2 field3 = vc
      2 field4 = vc
      2 field5 = vc
      2 field6 = vc
      2 field7 = vc
      2 field8 = vc
      2 field9 = vc
      2 field10 = vc
      2 field1_id = f8
      2 field2_id = f8
      2 field3_id = f8
      2 field4_id = f8
      2 field5_id = f8
      2 nomen_id = f8
      2 activity_dt_tm = dq8
      2 active_ind_ind = i2
      2 active_ind = i2
      2 active_status_cd = f8
      2 active_status_dt_tm = f8
      2 active_status_prsnl_id = f8
      2 beg_effective_dt_tm = dq8
      2 end_effective_dt_tm = dq8
      2 nomen_entity_reltn_id = f8
      2 cm1_nbr = f8
    1 skip_charge_event_mod_ind = i2
  )
 ENDIF
 IF ( NOT (validate(adcm)))
  FREE RECORD adcm
  RECORD adcm(
    1 processedind = i2
    1 charge_mod_qual = i4
    1 charge_mod[*]
      2 charge_mod_id = f8
      2 charge_item_id = f8
      2 active_status_cd = f8
      2 action_type = vc
  )
 ENDIF
 IF ( NOT (validate(afcaddcreditreply)))
  FREE RECORD afcaddcreditreply
  RECORD afcaddcreditreply(
    1 charge_qual = i2
    1 dequeued_ind = i2
    1 charge[*]
      2 charge_item_id = f8
      2 parent_charge_item_id = f8
      2 charge_event_act_id = f8
      2 charge_event_id = f8
      2 bill_item_id = f8
      2 order_id = f8
      2 encntr_id = f8
      2 person_id = f8
      2 person_name = vc
      2 payor_id = f8
      2 perf_loc_cd = f8
      2 perf_loc_disp = c40
      2 perf_loc_desc = c60
      2 perf_loc_mean = c12
      2 ord_loc_cd = f8
      2 ord_phys_id = f8
      2 perf_phys_id = f8
      2 charge_description = vc
      2 price_sched_id = f8
      2 item_quantity = f8
      2 item_price = f8
      2 item_extended_price = f8
      2 item_allowable = f8
      2 item_copay = f8
      2 charge_type_cd = f8
      2 charge_type_disp = c40
      2 charge_type_desc = c60
      2 charge_type_mean = c12
      2 research_acct_id = f8
      2 suspense_rsn_cd = f8
      2 suspense_rsn_disp = c40
      2 suspense_rsn_desc = c60
      2 suspense_rsn_mean = c12
      2 reason_comment = vc
      2 posted_cd = f8
      2 posted_dt_tm = dq8
      2 process_flg = i4
      2 service_dt_tm = dq8
      2 price_sched_id = f8
      2 activity_dt_tm = dq8
      2 updt_cnt = i4
      2 updt_dt_tm = dq8
      2 updt_id = f8
      2 username = vc
      2 updt_task = i4
      2 updt_applctx = i4
      2 active_ind = i2
      2 active_status_cd = f8
      2 active_status_dt_tm = dq8
      2 active_status_prsnl_id = f8
      2 beg_effective_dt_tm = dq8
      2 end_effective_dt_tm = dq8
      2 credited_dt_tm = dq8
      2 adjusted_dt_tm = dq8
      2 interface_file_id = f8
      2 tier_group_cd = f8
      2 tier_group_disp = c40
      2 tier_group_desc = c60
      2 tier_group_mean = c12
      2 def_bill_item_id = f8
      2 verify_phys_id = f8
      2 gross_price = f8
      2 discount_amount = f8
      2 manual_ind = i2
      2 combine_ind = i2
      2 bundle_id = f8
      2 institution_cd = f8
      2 department_cd = f8
      2 section_cd = f8
      2 subsection_cd = f8
      2 level5_cd = f8
      2 admit_type_cd = f8
      2 med_service_cd = f8
      2 activity_type_cd = f8
      2 activity_type_disp = c40
      2 activity_type_desc = c60
      2 activity_type_mean = c12
      2 inst_fin_nbr = c50
      2 cost_center_cd = f8
      2 cost_center_disp = c40
      2 cost_center_desc = c60
      2 cost_center_mean = c12
      2 abn_status_cd = f8
      2 health_plan_id = f8
      2 fin_class_cd = f8
      2 payor_type_cd = f8
      2 item_reimbursement = f8
      2 item_interval_id = f8
      2 item_list_price = f8
      2 list_price_sched_id = f8
      2 start_dt_tm = dq8
      2 stop_dt_tm = dq8
      2 epsdt_ind = i2
      2 ref_phys_id = f8
      2 item_deductible_amt = f8
      2 patient_responsibility_flag = i2
      2 activity_sub_type_cd = f8
      2 provider_specialty_cd = f8
      2 charge_mod_qual = i2
      2 original_org_id = f8
      2 charge_mod[*]
        3 charge_mod_id = f8
        3 charge_mod_type_cd = f8
        3 field1_id = f8
        3 field2_id = f8
        3 field3_id = f8
        3 field4_id = f8
        3 field5_id = f8
        3 field1 = vc
        3 field2 = vc
        3 field3 = vc
        3 field4 = vc
        3 field5 = vc
        3 field6 = vc
        3 field7 = vc
        3 field8 = vc
        3 field9 = vc
        3 field10 = vc
        3 nomen_id = f8
        3 cm1_nbr = f8
        3 activity_dt_tm = dq8
        3 code1_cd = f8
    1 original_charge_qual = i2
    1 original_charge[*]
      2 charge_item_id = f8
      2 process_flg = f8
      2 updt_id = f8
      2 updt_task = i4
      2 updt_applctx = f8
      2 updt_dt_tm = dq8
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF ( NOT (validate(updatechargereply)))
  FREE RECORD updatechargereply
  RECORD updatechargereply(
    1 charge_qual = i2
    1 charge[*]
      2 charge_item_id = f8
      2 perf_loc_cd = f8
      2 perf_loc_disp = c40
      2 perf_loc_desc = c60
      2 perf_loc_mean = c12
      2 ord_phys_id = f8
      2 verify_phys_id = f8
      2 research_acct_id = f8
      2 abn_status_cd = f8
      2 service_dt_tm = dq8
      2 suspense_rsn_cd = f8
      2 reason_comment = vc
      2 process_flg = i4
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF ( NOT (validate(addchargemodreply)))
  FREE RECORD addchargemodreply
  RECORD addchargemodreply(
    1 charge_mod_qual = i2
    1 charge_mod[*]
      2 charge_mod_id = f8
      2 charge_item_id = f8
      2 charge_mod_type_cd = f8
      2 field1_id = f8
      2 field2_id = f8
      2 field3_id = f8
      2 field6 = vc
      2 field7 = vc
      2 nomen_id = f8
      2 action_type = c3
      2 nomen_entity_reltn_id = f8
      2 cm1_nbr = f8
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF ( NOT (validate(deletechargemodreply)))
  FREE RECORD deletechargemodreply
  RECORD deletechargemodreply(
    1 charge_mod_qual = i2
    1 charge_mod[*]
      2 charge_mod_id = f8
      2 charge_item_id = f8
      2 action_type = c3
      2 charge_mod_type_cd = f8
      2 field1_id = f8
      2 field2_id = f8
      2 field3_id = f8
      2 field6 = vc
      2 field7 = vc
      2 nomen_id = f8
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF ( NOT (validate(postingreply)))
  FREE RECORD postingreply
  RECORD postingreply(
    1 success_cnt = i4
    1 failed_cnt = i4
    1 charges[*]
      2 charge_item_id = f8
      2 ar_acct_id = f8
      2 rev_acct_id = f8
      2 pft_encntr_id = f8
      2 pft_charge_id = f8
      2 self_pay_benefit_order_id = f8
      2 non_self_pay_benefit_order_id = f8
      2 process_flg = i4
      2 suspense_reason_cd = f8
      2 error_prog = vc
      2 error_sub = vc
      2 error_msg = vc
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
    1 pft_status_data
      2 status = c1
      2 subeventstatus[*]
        3 status = c1
        3 table_name = vc
        3 pk_values = vc
    1 mod_objs[*]
      2 entity_type = vc
      2 mod_recs[*]
        3 table_name = vc
        3 pk_values = vc
        3 mod_flds[*]
          4 field_name = vc
          4 field_type = vc
          4 field_value_obj = vc
          4 field_value_db = vc
    1 failure_stack
      2 failures[*]
        3 programname = vc
        3 routinename = vc
        3 message = vc
    1 objarray[*]
      2 service_cd = f8
      2 updt_id = f8
      2 event_key = vc
      2 category_key = vc
      2 published_ind = i2
      2 pe_status_reason_cd = f8
      2 acct_id = f8
      2 activity_id = f8
      2 batch_denial_file_r_id = f8
      2 batch_trans_ext_id = f8
      2 batch_trans_file_id = f8
      2 batch_trans_id = f8
      2 benefit_order_id = f8
      2 bill_item_id = f8
      2 bill_templ_id = f8
      2 bill_vrsn_nbr = i4
      2 billing_entity_id = f8
      2 bo_hp_reltn_id = f8
      2 charge_item_id = f8
      2 chrg_activity_id = f8
      2 claim_status_id = f8
      2 client_org_id = f8
      2 corsp_activity_id = f8
      2 corsp_log_reltn_id = f8
      2 denial_id = f8
      2 dirty_flag = i4
      2 encntr_id = f8
      2 guar_acct_id = f8
      2 guarantor_id = f8
      2 health_plan_id = f8
      2 long_text_id = f8
      2 organization_id = f8
      2 payor_org_id = f8
      2 pe_status_reason_id = f8
      2 person_id = f8
      2 pft_balance_id = f8
      2 pft_bill_activity_id = f8
      2 pft_charge_id = f8
      2 pft_encntr_fact_id = f8
      2 pft_encntr_id = f8
      2 pft_line_item_id = f8
      2 trans_alias_id = f8
      2 pft_payment_plan_id = f8
      2 daily_encntr_bal_id = f8
      2 daily_acct_bal_id = f8
      2 active_ind = i2
      2 active_status_cd = f8
      2 active_status_disp = vc
      2 active_status_desc = vc
      2 active_status_mean = vc
      2 active_status_code_set = f8
      2 active_status_dt_tm = dq8
      2 active_status_prsnl_id = f8
      2 beg_effective_dt_tm = dq8
      2 end_effective_dt_tm = dq8
      2 updt_applctx = f8
      2 updt_cnt = i4
      2 updt_dt_tm = dq8
      2 updt_id = f8
      2 updt_task = f8
      2 benefit_status_cd = f8
      2 financial_class_cd = f8
      2 payment_plan_flag = i2
      2 payment_location_id = f8
      2 encntr_plan_cob_id = f8
      2 guarantor_account_id = f8
      2 guarantor_id1 = f8
      2 guarantor_id2 = f8
      2 cbos_pe_reltn_id = f8
      2 post_dt_tm = dq8
      2 posting_category_type_flag = i2
  )
 ENDIF
 IF ( NOT (validate(intefacereply)))
  FREE RECORD intefacereply
  RECORD intefacereply(
    1 interface_charge[*]
      2 abn_status_cd = f8
      2 active_ind = i2
      2 active_status_cd = f8
      2 active_status_dt_tm = dq8
      2 active_status_prsnl_id = f8
      2 activity_type_cd = f8
      2 additional_encntr_phys1_id = f8
      2 additional_encntr_phys2_id = f8
      2 additional_encntr_phys3_id = f8
      2 admit_type_cd = f8
      2 adm_phys_id = f8
      2 attending_phys_id = f8
      2 batch_num = i4
      2 bed_cd = f8
      2 beg_effective_dt_tm = dq8
      2 bill_code1 = c50
      2 bill_code1_desc = c200
      2 bill_code2 = c50
      2 bill_code2_desc = c200
      2 bill_code3 = c50
      2 bill_code3_desc = c200
      2 bill_code_more_ind = i2
      2 bill_code_type_cdf = c12
      2 building_cd = f8
      2 charge_description = c200
      2 charge_item_id = f8
      2 charge_type_cd = f8
      2 code_modifier1_cd = f8
      2 code_modifier2_cd = f8
      2 code_modifier3_cd = f8
      2 code_modifier_more_ind = i2
      2 code_revenue_cd = f8
      2 code_revenue_more_ind = i2
      2 cost_center_cd = f8
      2 department_cd = f8
      2 diag_code1 = c50
      2 diag_code2 = c50
      2 diag_code3 = c50
      2 diag_desc1 = c200
      2 diag_desc2 = c200
      2 diag_desc3 = c200
      2 diag_more_ind = i2
      2 discount_amount = f8
      2 encntr_id = f8
      2 encntr_type_cd = f8
      2 end_effective_dt_tm = dq8
      2 facility_cd = f8
      2 fin_nbr = c50
      2 fin_nbr_type_flg = i4
      2 gross_price = f8
      2 icd9_proc_more_ind = i2
      2 institution_cd = f8
      2 interface_charge_id = f8
      2 interface_file_id = f8
      2 level5_cd = f8
      2 manual_ind = i2
      2 med_nbr = c50
      2 med_service_cd = f8
      2 net_ext_price = f8
      2 nurse_unit_cd = f8
      2 order_dept = i4
      2 order_nbr = c200
      2 ord_doc_nbr = c20
      2 ord_phys_id = f8
      2 organization_id = f8
      2 override_desc = c200
      2 payor_id = f8
      2 perf_loc_cd = f8
      2 perf_phys_id = f8
      2 person_id = f8
      2 person_name = c100
      2 posted_dt_tm = dq8
      2 price = f8
      2 prim_cdm = c50
      2 prim_cdm_desc = c200
      2 prim_cpt = c50
      2 prim_cpt_desc = c200
      2 prim_icd9_proc = c50
      2 prim_icd9_proc_desc = c200
      2 process_flg = i4
      2 quantity = f8
      2 referring_phys_id = f8
      2 room_cd = f8
      2 section_cd = f8
      2 service_dt_tm = dq8
      2 subsection_cd = f8
      2 updt_applctx = i4
      2 updt_cnt = i4
      2 updt_dt_tm = dq8
      2 updt_id = f8
      2 updt_task = i4
      2 user_def_ind = i2
      2 ndc_ident = c40
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF ( NOT (validate(reprocreply)))
  FREE RECORD reprocreply
  RECORD reprocreply(
    1 asyncrequesthandle = i4
    1 charges[*]
      2 charge_item_id = f8
      2 charge_act_id = f8
      2 charge_event_id = f8
      2 bill_item_id = f8
      2 charge_description = c200
      2 price_sched_id = f8
      2 payor_id = f8
      2 item_quantity = f8
      2 item_price = f8
      2 item_extended_price = f8
      2 charge_type_cd = f8
      2 suspense_rsn_cd = f8
      2 reason_comment = c200
      2 posted_cd = f8
      2 ord_phys_id = f8
      2 perf_phys_id = f8
      2 order_id = f8
      2 beg_effective_dt_tm = dq8
      2 person_id = f8
      2 encntr_id = f8
      2 admit_type_cd = f8
      2 med_service_cd = f8
      2 institution_cd = f8
      2 department_cd = f8
      2 section_cd = f8
      2 subsection_cd = f8
      2 level5_cd = f8
      2 service_dt_tm = dq8
      2 process_flg = i2
      2 parent_charge_item_id = f8
      2 interface_id = f8
      2 tier_group_cd = f8
      2 def_bill_item_id = f8
      2 verify_phys_id = f8
      2 gross_price = f8
      2 discount_amount = f8
      2 activity_type_cd = f8
      2 research_acct_id = f8
      2 cost_center_cd = f8
      2 abn_status_cd = f8
      2 perf_loc_cd = f8
      2 inst_fin_nbr = c50
      2 ord_loc_cd = f8
      2 fin_class_cd = f8
      2 health_plan_id = f8
      2 hp_beg_effective_dt_tm = dq8
      2 hp_end_effective_dt_tm = dq8
      2 manual_ind = i2
      2 updt_ind = i2
      2 payor_type_cd = f8
      2 item_copay = f8
      2 item_reimbursement = f8
      2 posted_dt_tm = dq8
      2 item_interval_id = f8
      2 list_price = f8
      2 list_price_sched_id = f8
      2 realtime_ind = i2
      2 epsdt_ind = i2
      2 ref_phys_id = f8
      2 alpha_nomen_id = f8
      2 server_process_flag = i2
      2 offset_charge_item_id = f8
      2 patient_responsibility_flag = i2
      2 item_deductible_amt = f8
      2 activity_sub_type_cd = f8
      2 provider_specialty_cd = f8
      2 original_org_id = f8
      2 item_price_adj_amt = f8
      2 mods
        3 charge_mods[*]
          4 mod_id = f8
          4 charge_event_id = f8
          4 charge_event_mod_type_cd = f8
          4 charge_item_id = f8
          4 charge_mod_type_cd = f8
          4 field1 = c200
          4 field2 = c200
          4 field3 = c200
          4 field4 = c200
          4 field5 = c200
          4 field6 = c200
          4 field7 = c200
          4 field8 = c200
          4 field9 = c200
          4 field10 = c200
          4 field1_id = f8
          4 field2_id = f8
          4 field3_id = f8
          4 field4_id = f8
          4 field5_id = f8
          4 nomen_id = f8
          4 cm1_nbr = f8
          4 activity_dt_tm = dq8
          4 field3_ext = c350
          4 charge_mod_source_cd = f8
    1 srv_diag[*]
      2 charge_event_mod_id = f8
      2 charge_event_id = f8
      2 charge_event_act_id = f8
      2 srv_diag_cd = f8
      2 srv_diag1_id = f8
      2 srv_diag2_id = f8
      2 srv_diag3_id = f8
      2 srv_diag_tier = f8
      2 srv_diag_reason = c200
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF ( NOT (validate(suspendedcharges)))
  FREE RECORD suspendedcharges
  RECORD suspendedcharges(
    1 charges[*]
      2 parent_charge_item_id = f8
      2 charge_type_cd = f8
      2 field1_id = f8
      2 field3 = c200
      2 field6 = c200
  )
 ENDIF
 IF ( NOT (validate(oldfailurequeueitems)))
  FREE RECORD oldfailurequeueitems
  RECORD oldfailurequeueitems(
    1 pft_queue_item_qual = i4
    1 pft_queue_item[*]
      2 pft_queue_item_id = f8
  )
 ENDIF
 IF ( NOT (validate(healthplandtchangeind)))
  FREE RECORD healthplandtchangeind
  RECORD healthplandtchangeind(
    1 changeind = i2
  )
 ENDIF
 CALL echo("Begin PFT_RM_COMMON_SUBS.INC, version [RCBACM-29658.024]")
 CALL echo("Begin PFT_RM_GET_REG_MODS_DATA_SUBS.INC, version [RCBACM-24649.045]")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 CALL echo("Begin PFT_GET_ORGANIZATION_SUBS.INC, version [565928.008]")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 CALL echo("Begin PFT_LOGICAL_DOMAIN_SUBS.INC, version [714452.014 w/o 002,005,007,008,009,010]")
 IF (validate(ld_concept_person)=0)
  DECLARE ld_concept_person = i2 WITH public, constant(1)
 ENDIF
 IF (validate(ld_concept_prsnl)=0)
  DECLARE ld_concept_prsnl = i2 WITH public, constant(2)
 ENDIF
 IF (validate(ld_concept_organization)=0)
  DECLARE ld_concept_organization = i2 WITH public, constant(3)
 ENDIF
 IF (validate(ld_concept_healthplan)=0)
  DECLARE ld_concept_healthplan = i2 WITH public, constant(4)
 ENDIF
 IF (validate(ld_concept_alias_pool)=0)
  DECLARE ld_concept_alias_pool = i2 WITH public, constant(5)
 ENDIF
 IF (validate(ld_concept_minvalue)=0)
  DECLARE ld_concept_minvalue = i2 WITH public, constant(1)
 ENDIF
 IF (validate(ld_concept_maxvalue)=0)
  DECLARE ld_concept_maxvalue = i2 WITH public, constant(5)
 ENDIF
 IF ( NOT (validate(profitlogicaldomaininfo)))
  RECORD profitlogicaldomaininfo(
    1 hasbeenset = i2
    1 logicaldomainid = f8
    1 logicaldomainsystemuserid = f8
  ) WITH persistscript
 ENDIF
 IF ( NOT (validate(ld_concept_batch_trans)))
  DECLARE ld_concept_batch_trans = i2 WITH public, constant(ld_concept_person)
 ENDIF
 IF ( NOT (validate(ld_concept_pft_event)))
  DECLARE ld_concept_pft_event = i2 WITH public, constant(ld_concept_person)
 ENDIF
 IF ( NOT (validate(ld_concept_pft_ruleset)))
  DECLARE ld_concept_pft_ruleset = i2 WITH public, constant(ld_concept_person)
 ENDIF
 IF ( NOT (validate(ld_concept_pft_queue_item_wf_hist)))
  DECLARE ld_concept_pft_queue_item_wf_hist = i2 WITH public, constant(ld_concept_prsnl)
 ENDIF
 IF ( NOT (validate(ld_concept_pft_workflow)))
  DECLARE ld_concept_pft_workflow = i2 WITH public, constant(ld_concept_prsnl)
 ENDIF
 IF ( NOT (validate(ld_entity_account)))
  DECLARE ld_entity_account = vc WITH protect, constant("ACCOUNT")
 ENDIF
 IF ( NOT (validate(ld_entity_adjustment)))
  DECLARE ld_entity_adjustment = vc WITH protect, constant("ADJUSTMENT")
 ENDIF
 IF ( NOT (validate(ld_entity_balance)))
  DECLARE ld_entity_balance = vc WITH protect, constant("BALANCE")
 ENDIF
 IF ( NOT (validate(ld_entity_charge)))
  DECLARE ld_entity_charge = vc WITH protect, constant("CHARGE")
 ENDIF
 IF ( NOT (validate(ld_entity_claim)))
  DECLARE ld_entity_claim = vc WITH protect, constant("CLAIM")
 ENDIF
 IF ( NOT (validate(ld_entity_encounter)))
  DECLARE ld_entity_encounter = vc WITH protect, constant("ENCOUNTER")
 ENDIF
 IF ( NOT (validate(ld_entity_invoice)))
  DECLARE ld_entity_invoice = vc WITH protect, constant("INVOICE")
 ENDIF
 IF ( NOT (validate(ld_entity_payment)))
  DECLARE ld_entity_payment = vc WITH protect, constant("PAYMENT")
 ENDIF
 IF ( NOT (validate(ld_entity_person)))
  DECLARE ld_entity_person = vc WITH protect, constant("PERSON")
 ENDIF
 IF ( NOT (validate(ld_entity_pftencntr)))
  DECLARE ld_entity_pftencntr = vc WITH protect, constant("PFTENCNTR")
 ENDIF
 IF ( NOT (validate(ld_entity_statement)))
  DECLARE ld_entity_statement = vc WITH protect, constant("STATEMENT")
 ENDIF
 IF ( NOT (validate(getlogicaldomain)))
  SUBROUTINE (getlogicaldomain(concept=i4,logicaldomainid=f8(ref)) =i2)
    CALL logmessage("getLogicalDomain","Entering...",log_debug)
    IF (arelogicaldomainsinuse(0))
     IF (((concept < ld_concept_minvalue) OR (concept > ld_concept_maxvalue)) )
      CALL logmessage("getLogicalDomain",build2("Invalid logical domain concept: ",concept),log_error
       )
      RETURN(false)
     ENDIF
     FREE RECORD acm_get_curr_logical_domain_req
     RECORD acm_get_curr_logical_domain_req(
       1 concept = i4
     )
     FREE RECORD acm_get_curr_logical_domain_rep
     RECORD acm_get_curr_logical_domain_rep(
       1 logical_domain_id = f8
       1 status_block
         2 status_ind = i2
         2 error_code = i4
     )
     DECLARE currentuserid = f8 WITH protect, constant(reqinfo->updt_id)
     IF ((profitlogicaldomaininfo->hasbeenset=true))
      SET reqinfo->updt_id = profitlogicaldomaininfo->logicaldomainsystemuserid
     ENDIF
     SET acm_get_curr_logical_domain_req->concept = concept
     EXECUTE acm_get_curr_logical_domain
     SET reqinfo->updt_id = currentuserid
     IF ((acm_get_curr_logical_domain_rep->status_block.status_ind != true))
      CALL logmessage("getLogicalDomain","Failed to retrieve logical domain...",log_error)
      CALL echorecord(acm_get_curr_logical_domain_rep)
      RETURN(false)
     ENDIF
     SET logicaldomainid = acm_get_curr_logical_domain_rep->logical_domain_id
     CALL logmessage("getLogicalDomain",build2("Logical domain for concept [",trim(cnvtstring(concept
         )),"]: ",trim(cnvtstring(logicaldomainid))),log_debug)
     FREE RECORD acm_get_curr_logical_domain_req
     FREE RECORD acm_get_curr_logical_domain_rep
    ELSE
     SET logicaldomainid = 0.0
    ENDIF
    CALL logmessage("getLogicalDomain","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 SUBROUTINE (getlogicaldomainforentitytype(pentityname=vc,prlogicaldomainid=f8(ref)) =i2)
   DECLARE entityconcept = i4 WITH protect, noconstant(0)
   CASE (pentityname)
    OF value(ld_entity_person,ld_entity_encounter,ld_entity_pftencntr):
     SET entityconcept = ld_concept_person
    OF value(ld_entity_claim,ld_entity_invoice,ld_entity_statement,ld_entity_adjustment,
    ld_entity_charge,
    ld_entity_payment,ld_entity_account,ld_entity_balance):
     SET entityconcept = ld_concept_organization
   ENDCASE
   RETURN(getlogicaldomain(entityconcept,prlogicaldomainid))
 END ;Subroutine
 IF ( NOT (validate(setlogicaldomain)))
  SUBROUTINE (setlogicaldomain(logicaldomainid=f8) =i2)
    CALL logmessage("setLogicalDomain","Entering...",log_debug)
    IF (arelogicaldomainsinuse(0))
     SELECT INTO "nl:"
      FROM logical_domain ld
      WHERE ld.logical_domain_id=logicaldomainid
      DETAIL
       profitlogicaldomaininfo->logicaldomainsystemuserid = ld.system_user_id
      WITH nocounter
     ;end select
     SET profitlogicaldomaininfo->logicaldomainid = logicaldomainid
     SET profitlogicaldomaininfo->hasbeenset = true
     SELECT INTO "nl:"
      FROM prsnl p
      WHERE (p.person_id=reqinfo->updt_id)
      DETAIL
       IF (p.logical_domain_id != logicaldomainid)
        reqinfo->updt_id = profitlogicaldomaininfo->logicaldomainsystemuserid
       ENDIF
      WITH nocounter
     ;end select
     IF (validate(debug,0))
      CALL echorecord(profitlogicaldomaininfo)
      CALL echo(build("reqinfo->updt_id:",reqinfo->updt_id))
     ENDIF
    ENDIF
    CALL logmessage("setLogicalDomain","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(arelogicaldomainsinuse)))
  DECLARE arelogicaldomainsinuse(null) = i2
  SUBROUTINE arelogicaldomainsinuse(null)
    CALL logmessage("areLogicalDomainsInUse","Entering...",log_debug)
    DECLARE multiplelogicaldomainsdefined = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM logical_domain ld
     WHERE ld.logical_domain_id > 0.0
      AND ld.active_ind=true
     WITH nocounter
    ;end select
    IF (curqual > 0)
     SET multiplelogicaldomainsdefined = true
    ENDIF
    CALL logmessage("areLogicalDomainsInUse",build2("Multiple logical domains ",evaluate(
       multiplelogicaldomainsdefined,true,"are","are not")," in use"),log_debug)
    CALL logmessage("areLogicalDomainsInUse","Exiting...",log_debug)
    RETURN(multiplelogicaldomainsdefined)
  END ;Subroutine
 ENDIF
 SUBROUTINE (getparameterentityname(dparmcd=f8) =vc)
   DECLARE parammeaning = vc WITH private, constant(trim(uar_get_code_meaning(dparmcd)))
   DECLARE returnvalue = vc WITH private, noconstant("")
   SET returnvalue = evaluate(parammeaning,"BEID","BILLING_ENTITY","OPTIONALBEID","BILLING_ENTITY",
    "HP ID","HEALTH_PLAN","HP_LIST","HEALTH_PLAN","PRIMARYHP",
    "HEALTH_PLAN","PRIPAYORHPID","HEALTH_PLAN","SECPAYORHPID","HEALTH_PLAN",
    "TERPAYORHPID","HEALTH_PLAN","COLLAGENCY","ORGANIZATION","PAYORORGID",
    "ORGANIZATION","PRECOLAGENCY","ORGANIZATION","PRIPAYORORGI","ORGANIZATION",
    "SECPAYORORGI","ORGANIZATION","TERPAYORORGI","ORGANIZATION","PAYER_LIST",
    "ORGANIZATION","UNKNOWN")
   RETURN(returnvalue)
 END ;Subroutine
 SUBROUTINE (paramsarevalidfordomain(paramstruct=vc(ref),dlogicaldomainid=f8) =i2)
   DECLARE paramidx = i4 WITH private, noconstant(0)
   DECLARE paramentityname = vc WITH private, noconstant("")
   DECLARE paramvalue = f8 WITH protect, noconstant(0.0)
   DECLARE paramerror = i2 WITH protect, noconstant(false)
   FOR (paramidx = 1 TO paramstruct->lparams_qual)
     SET paramentityname = getparameterentityname(paramstruct->aparams[paramidx].dvalue_meaning)
     SET paramvalue = cnvtreal(paramstruct->aparams[paramidx].svalue)
     SET paramerror = true
     IF (paramentityname="BILLING_ENTITY")
      SELECT INTO "nl:"
       FROM billing_entity be,
        organization o
       PLAN (be
        WHERE be.billing_entity_id=paramvalue)
        JOIN (o
        WHERE o.organization_id=be.organization_id
         AND o.logical_domain_id=dlogicaldomainid)
       DETAIL
        paramerror = false
       WITH nocounter
      ;end select
     ELSEIF (paramentityname="HEALTH_PLAN")
      SELECT INTO "nl:"
       FROM health_plan hp
       PLAN (hp
        WHERE hp.health_plan_id=paramvalue
         AND hp.logical_domain_id=dlogicaldomainid)
       DETAIL
        paramerror = false
       WITH nocounter
      ;end select
     ELSEIF (paramentityname="ORGANIZATION")
      SELECT INTO "nl:"
       FROM organization o
       PLAN (o
        WHERE o.organization_id=paramvalue
         AND o.logical_domain_id=dlogicaldomainid)
       DETAIL
        paramerror = false
       WITH nocounter
      ;end select
     ELSE
      SET paramerror = false
     ENDIF
     IF (paramerror)
      RETURN(false)
     ENDIF
   ENDFOR
   RETURN(true)
 END ;Subroutine
 IF ( NOT (validate(getlogicaldomainsystemuser)))
  SUBROUTINE (getlogicaldomainsystemuser(logicaldomainid=f8(ref)) =f8)
    DECLARE systempersonnelid = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM logical_domain ld
     WHERE ld.logical_domain_id=logicaldomainid
     DETAIL
      systempersonnelid = ld.system_user_id
     WITH nocounter
    ;end select
    IF (systempersonnelid <= 0.0)
     SELECT INTO "nl:"
      FROM prsnl p
      WHERE p.active_ind=true
       AND p.logical_domain_id=logicaldomainid
       AND p.username="SYSTEM"
      DETAIL
       systempersonnelid = p.person_id
      WITH nocounter
     ;end select
    ENDIF
    IF (systempersonnelid <= 0.0)
     CALL logmessage("getLogicalDomainSystemUser",
      "Failed to determine the default 'SYSTEM' personnel id",log_error)
     RETURN(0.0)
    ENDIF
    CALL logmessage("getLogicalDomainSystemUser","Exiting",log_debug)
    RETURN(systempersonnelid)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(cs278_facility_cd)))
  DECLARE cs278_facility_cd = f8 WITH protect, constant(getcodevalue(278,"FACILITY",1))
 ENDIF
 IF ( NOT (validate(cs20849_client_cd)))
  DECLARE cs20849_client_cd = f8 WITH protect, constant(getcodevalue(20849,"CLIENT",1))
 ENDIF
 IF ( NOT (validate(getauthorizedorganizations)))
  SUBROUTINE (getauthorizedorganizations(authorizedorganizations=vc(ref)) =i2)
    CALL logmessage("getAuthorizedOrganizations","Entering...",log_debug)
    DECLARE organizationlogicaldomainid = f8 WITH protect, noconstant(0.0)
    DECLARE isorgsecurityon = i2 WITH protect, constant(isorganizationsecurityon(0))
    DECLARE organizationcount = i4 WITH protect, noconstant(0)
    IF ( NOT (getlogicaldomain(ld_concept_organization,organizationlogicaldomainid)))
     CALL logmessage("getAuthorizedOrganizations","Failed to retrieve logical domain ID...",log_error
      )
     RETURN(false)
    ENDIF
    CALL echo(format(cnvtdatetime(sysdate),"hhmmsscc;3;M"))
    IF (isorgsecurityon)
     SELECT INTO "nl:"
      FROM prsnl_org_reltn por,
       code_value cv,
       organization o
      PLAN (por
       WHERE (por.person_id=reqinfo->updt_id)
        AND por.active_ind=true
        AND por.beg_effective_dt_tm <= cnvtdatetime(sysdate)
        AND por.end_effective_dt_tm > cnvtdatetime(sysdate))
       JOIN (cv
       WHERE cv.code_value=por.confid_level_cd)
       JOIN (o
       WHERE o.organization_id=por.organization_id
        AND o.active_ind=true
        AND o.logical_domain_id=organizationlogicaldomainid)
      ORDER BY por.organization_id
      DETAIL
       organizationcount += 1
       IF (mod(organizationcount,20)=1)
        stat = alterlist(authorizedorganizations->organizations,(organizationcount+ 19))
       ENDIF
       authorizedorganizations->organizations[organizationcount].organizationid = o.organization_id,
       authorizedorganizations->organizations[organizationcount].confidentialitylevel = cv
       .collation_seq
      FOOT REPORT
       stat = alterlist(authorizedorganizations->organizations,organizationcount)
      WITH nocounter
     ;end select
    ELSE
     SELECT INTO "nl:"
      FROM organization o,
       org_type_reltn otr
      PLAN (o
       WHERE o.active_ind=true
        AND o.logical_domain_id=organizationlogicaldomainid)
       JOIN (otr
       WHERE otr.organization_id=o.organization_id
        AND otr.org_type_cd=cs278_facility_cd
        AND otr.active_ind=true)
      ORDER BY o.organization_id
      DETAIL
       organizationcount += 1
       IF (mod(organizationcount,20)=1)
        stat = alterlist(authorizedorganizations->organizations,(organizationcount+ 19))
       ENDIF
       authorizedorganizations->organizations[organizationcount].organizationid = o.organization_id,
       authorizedorganizations->organizations[organizationcount].confidentialitylevel = 99
      FOOT REPORT
       stat = alterlist(authorizedorganizations->organizations,organizationcount)
      WITH nocounter
     ;end select
    ENDIF
    CALL echo(format(cnvtdatetime(sysdate),"hhmmsscc;3;M"))
    CALL logmessage("getAuthorizedOrganizations","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(getauthorizedprofitorganizations)))
  SUBROUTINE (getauthorizedprofitorganizations(authorizedorganizations=vc(ref)) =i2)
    CALL logmessage("getAuthorizedProFitOrganizations","Entering...",log_debug)
    DECLARE organizationlogicaldomainid = f8 WITH protect, noconstant(0.0)
    DECLARE isorgsecurityon = i2 WITH protect, constant(isorganizationsecurityon(0))
    DECLARE organizationcount = i4 WITH protect, noconstant(0)
    IF ( NOT (getlogicaldomain(ld_concept_organization,organizationlogicaldomainid)))
     CALL logmessage("getAuthorizedProFitOrganizations","Failed to retrieve logical domain ID...",
      log_error)
     RETURN(false)
    ENDIF
    CALL echo(format(cnvtdatetime(sysdate),"hhmmsscc;3;M"))
    IF (isorgsecurityon)
     SELECT INTO "nl:"
      FROM billing_entity be,
       be_org_reltn bor,
       organization o,
       prsnl_org_reltn por,
       code_value cv
      PLAN (be
       WHERE be.active_ind=true)
       JOIN (bor
       WHERE bor.billing_entity_id=be.billing_entity_id
        AND bor.active_ind=true)
       JOIN (o
       WHERE o.organization_id=bor.organization_id
        AND o.active_ind=true
        AND o.logical_domain_id=organizationlogicaldomainid)
       JOIN (por
       WHERE por.organization_id=o.organization_id
        AND (por.person_id=reqinfo->updt_id)
        AND por.active_ind=true
        AND por.beg_effective_dt_tm <= cnvtdatetime(sysdate)
        AND por.end_effective_dt_tm > cnvtdatetime(sysdate))
       JOIN (cv
       WHERE cv.code_value=por.confid_level_cd)
      ORDER BY o.organization_id
      DETAIL
       organizationcount += 1
       IF (mod(organizationcount,20)=1)
        stat = alterlist(authorizedorganizations->organizations,(organizationcount+ 19))
       ENDIF
       authorizedorganizations->organizations[organizationcount].organizationid = o.organization_id,
       authorizedorganizations->organizations[organizationcount].confidentialitylevel = cv
       .collation_seq
      FOOT REPORT
       stat = alterlist(authorizedorganizations->organizations,organizationcount)
      WITH nocounter
     ;end select
    ELSE
     SELECT INTO "nl:"
      FROM billing_entity be,
       be_org_reltn bor,
       organization o
      PLAN (be
       WHERE be.active_ind=true)
       JOIN (bor
       WHERE bor.billing_entity_id=be.billing_entity_id
        AND bor.active_ind=true)
       JOIN (o
       WHERE o.organization_id=bor.organization_id
        AND o.active_ind=true
        AND o.logical_domain_id=organizationlogicaldomainid)
      ORDER BY o.organization_id
      DETAIL
       organizationcount += 1
       IF (mod(organizationcount,20)=1)
        stat = alterlist(authorizedorganizations->organizations,(organizationcount+ 19))
       ENDIF
       authorizedorganizations->organizations[organizationcount].organizationid = o.organization_id,
       authorizedorganizations->organizations[organizationcount].confidentialitylevel = 99
      FOOT REPORT
       stat = alterlist(authorizedorganizations->organizations,organizationcount)
      WITH nocounter
     ;end select
    ENDIF
    CALL echo(format(cnvtdatetime(sysdate),"hhmmsscc;3;M"))
    CALL logmessage("getAuthorizedProFitOrganizations","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(getauthorizedclientorganizations)))
  SUBROUTINE (getauthorizedclientorganizations(authorizedorganizations=vc(ref)) =i2)
    CALL logmessage("getAuthorizedClientOrganizations","Entering...",log_debug)
    DECLARE organizationlogicaldomainid = f8 WITH protect, noconstant(0.0)
    DECLARE isorgsecurityon = i2 WITH protect, constant(isorganizationsecurityon(0))
    DECLARE organizationcount = i4 WITH protect, noconstant(0)
    IF ( NOT (getlogicaldomain(ld_concept_organization,organizationlogicaldomainid)))
     CALL logmessage("getAuthorizedClientOrganizations","Failed to retrieve logical domain ID...",
      log_error)
     RETURN(false)
    ENDIF
    CALL echo(format(cnvtdatetime(sysdate),"hhmmsscc;3;M"))
    IF (isorgsecurityon)
     SELECT INTO "nl:"
      FROM billing_entity be,
       account a,
       pft_acct_reltn par,
       organization o,
       prsnl_org_reltn por,
       code_value cv
      PLAN (be
       WHERE be.active_ind=true)
       JOIN (a
       WHERE a.billing_entity_id=be.billing_entity_id
        AND a.active_ind=true
        AND a.acct_sub_type_cd=cs20849_client_cd)
       JOIN (par
       WHERE par.acct_id=a.acct_id
        AND par.active_ind=true
        AND par.parent_entity_name="ORGANIZATION")
       JOIN (o
       WHERE o.organization_id=par.parent_entity_id
        AND o.active_ind=true
        AND o.logical_domain_id=organizationlogicaldomainid)
       JOIN (por
       WHERE por.organization_id=o.organization_id
        AND (por.person_id=reqinfo->updt_id)
        AND por.active_ind=true
        AND por.beg_effective_dt_tm <= cnvtdatetime(sysdate)
        AND por.end_effective_dt_tm > cnvtdatetime(sysdate))
       JOIN (cv
       WHERE cv.code_value=por.confid_level_cd)
      ORDER BY o.organization_id
      HEAD o.organization_id
       organizationcount += 1
       IF (mod(organizationcount,20)=1)
        stat = alterlist(authorizedorganizations->organizations,(organizationcount+ 19))
       ENDIF
       authorizedorganizations->organizations[organizationcount].organizationid = o.organization_id,
       authorizedorganizations->organizations[organizationcount].confidentialitylevel = cv
       .collation_seq
      FOOT REPORT
       stat = alterlist(authorizedorganizations->organizations,organizationcount)
      WITH nocounter
     ;end select
    ELSE
     SELECT INTO "nl:"
      FROM billing_entity be,
       account a,
       pft_acct_reltn par,
       organization o
      PLAN (be
       WHERE be.active_ind=true)
       JOIN (a
       WHERE a.billing_entity_id=be.billing_entity_id
        AND a.active_ind=true
        AND a.acct_sub_type_cd=cs20849_client_cd)
       JOIN (par
       WHERE par.acct_id=a.acct_id
        AND par.active_ind=true
        AND par.parent_entity_name="ORGANIZATION")
       JOIN (o
       WHERE o.organization_id=par.parent_entity_id
        AND o.active_ind=true
        AND o.logical_domain_id=organizationlogicaldomainid)
      ORDER BY o.organization_id
      HEAD o.organization_id
       organizationcount += 1
       IF (mod(organizationcount,20)=1)
        stat = alterlist(authorizedorganizations->organizations,(organizationcount+ 19))
       ENDIF
       authorizedorganizations->organizations[organizationcount].organizationid = o.organization_id,
       authorizedorganizations->organizations[organizationcount].confidentialitylevel = 99
      FOOT REPORT
       stat = alterlist(authorizedorganizations->organizations,organizationcount)
      WITH nocounter
     ;end select
    ENDIF
    CALL echo(format(cnvtdatetime(sysdate),"hhmmsscc;3;M"))
    CALL logmessage("getAuthorizedClientOrganizations","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(getauthorizedprofitandclientorganizations)))
  SUBROUTINE (getauthorizedprofitandclientorganizations(authorizedclientorganizations=vc(ref),
   authorizedprofitorganizations=vc(ref)) =i2)
    CALL logmessage("getAuthorizedProFitAndClientOrganizations","Entering...",log_debug)
    FREE RECORD combinedorganizations
    RECORD combinedorganizations(
      1 organizations[*]
        2 organizationid = f8
        2 confidentialitylevel = i4
    )
    DECLARE num = i4 WITH protect, noconstant(0)
    DECLARE organizationcount = i4 WITH protect, noconstant(0)
    DECLARE startidx = i4 WITH protect, noconstant(0)
    DECLARE combinedorgcnt = i4 WITH protect, noconstant(0)
    DECLARE clientorgcnt = i4 WITH protect, noconstant(size(authorizedclientorganizations->
      organizations,5))
    DECLARE profitorgcnt = i4 WITH protect, noconstant(size(authorizedprofitorganizations->
      organizations,5))
    IF (profitorgcnt=0)
     CALL logmessage("getAuthorizedProFitAndClientOrganizations","No ProFit org to merge, exiting...",
      log_debug)
     RETURN(true)
    ELSEIF (clientorgcnt=0)
     SET stat = initrec(authorizedclientorganizations)
     SET stat = moverec(authorizedprofitorganizations,authorizedclientorganizations)
     CALL logmessage("getAuthorizedProFitAndClientOrganizations","No Client org to merge, exiting...",
      log_debug)
     RETURN(true)
    ENDIF
    SET stat = moverec(authorizedclientorganizations,combinedorganizations)
    FOR (loopidx = 1 TO profitorgcnt)
      IF (locateval(num,1,clientorgcnt,authorizedprofitorganizations->organizations[loopidx].
       organizationid,authorizedclientorganizations->organizations[num].organizationid)=0)
       SET combinedorgcnt = (size(combinedorganizations->organizations,5)+ 1)
       SET stat = alterlist(combinedorganizations->organizations,combinedorgcnt)
       SET combinedorganizations->organizations[combinedorgcnt].organizationid =
       authorizedprofitorganizations->organizations[loopidx].organizationid
       SET combinedorganizations->organizations[combinedorgcnt].confidentialitylevel =
       authorizedprofitorganizations->organizations[loopidx].confidentialitylevel
      ENDIF
    ENDFOR
    SET stat = initrec(authorizedclientorganizations)
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = value(size(combinedorganizations->organizations,5)))
     PLAN (d1
      WHERE (combinedorganizations->organizations[d1.seq].organizationid > 0.0))
     ORDER BY combinedorganizations->organizations[d1.seq].organizationid
     DETAIL
      organizationcount += 1
      IF (mod(organizationcount,20)=1)
       stat = alterlist(authorizedclientorganizations->organizations,(organizationcount+ 19))
      ENDIF
      authorizedclientorganizations->organizations[organizationcount].organizationid =
      combinedorganizations->organizations[d1.seq].organizationid, authorizedclientorganizations->
      organizations[organizationcount].confidentialitylevel = combinedorganizations->organizations[d1
      .seq].confidentialitylevel
     FOOT REPORT
      stat = alterlist(authorizedclientorganizations->organizations,organizationcount)
     WITH nocounter
    ;end select
    FREE RECORD combinedorganizations
    CALL logmessage("getAuthorizedProFitAndClientOrganizations","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(getbillingentities)))
  SUBROUTINE (getbillingentities(billingentities=vc(ref)) =i2)
    CALL logmessage("getBillingEntities","Entering...",log_debug)
    DECLARE organizationlogicaldomainid = f8 WITH protect, noconstant(0.0)
    IF ( NOT (getlogicaldomain(ld_concept_organization,organizationlogicaldomainid)))
     CALL logmessage("getBillingEntities","Failed to retrieve logical domain ID...",log_error)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM billing_entity be,
      organization o
     PLAN (be
      WHERE be.active_ind=true)
      JOIN (o
      WHERE o.organization_id=be.organization_id
       AND o.active_ind=true
       AND o.logical_domain_id=organizationlogicaldomainid)
     ORDER BY be.billing_entity_id
     HEAD REPORT
      billingentitycount = 0
     DETAIL
      billingentitycount += 1, stat = alterlist(billingentities->billingentities,billingentitycount),
      billingentities->billingentities[billingentitycount].billingentityid = be.billing_entity_id
     WITH nocounter
    ;end select
    IF (validate(debug,0))
     CALL echorecord(billingentities)
    ENDIF
    CALL logmessage("getBillingEntities","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(getauthorizedbillingentities)))
  SUBROUTINE (getauthorizedbillingentities(billingentities=vc(ref)) =i2)
    CALL logmessage("getAuthorizedBillingEntities","Entering...",log_debug)
    DECLARE organizationlogicaldomainid = f8 WITH protect, noconstant(0.0)
    DECLARE billingentitycount = i4 WITH protect, noconstant(0)
    DECLARE isorgsecurityon = i2 WITH protect, constant(isorganizationsecurityon(0))
    IF ( NOT (getlogicaldomain(ld_concept_organization,organizationlogicaldomainid)))
     CALL logmessage("getAuthorizedBillingEntities","Failed to retrieve logical domain ID...",
      log_error)
     RETURN(false)
    ENDIF
    CALL echorecord(billingentities)
    IF (isorgsecurityon)
     SELECT INTO "nl:"
      FROM billing_entity be,
       organization o,
       prsnl_org_reltn por,
       code_value cv
      PLAN (be
       WHERE be.active_ind=true)
       JOIN (o
       WHERE o.organization_id=be.organization_id
        AND o.active_ind=true
        AND o.logical_domain_id=organizationlogicaldomainid)
       JOIN (por
       WHERE por.organization_id=o.organization_id
        AND (por.person_id=reqinfo->updt_id)
        AND por.active_ind=true
        AND por.beg_effective_dt_tm <= cnvtdatetime(sysdate)
        AND por.end_effective_dt_tm > cnvtdatetime(sysdate))
       JOIN (cv
       WHERE cv.code_value=por.confid_level_cd)
      ORDER BY be.billing_entity_id
      HEAD be.billing_entity_id
       billingentitycount += 1
       IF (mod(billingentitycount,20)=1)
        stat = alterlist(billingentities->billingentities,(billingentitycount+ 19))
       ENDIF
       billingentities->billingentities[billingentitycount].billingentityid = be.billing_entity_id
      FOOT REPORT
       stat = alterlist(billingentities->billingentities,billingentitycount)
      WITH nocounter
     ;end select
    ELSE
     IF ( NOT (getbillingentities(billingentities)))
      CALL logmessage("getAuthorizedBillingEntities","Failed to retrieve Billing Entity ID's...",
       log_error)
      RETURN(false)
     ENDIF
    ENDIF
    IF (validate(debug,0))
     CALL echorecord(billingentities)
    ENDIF
    CALL logmessage("getAuthorizedBillingEntities","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(getauthorizedbillingentitiesbyuserid)))
  SUBROUTINE (getauthorizedbillingentitiesbyuserid(billingentities=vc(ref)) =i2)
    CALL logmessage("getAuthorizedBillingEntitiesByUserId","Entering...",log_debug)
    DECLARE billingentitycount = i4 WITH protect, noconstant(0)
    DECLARE isbillingentitysecurityon = i2 WITH protect, constant(isbillingentitysecurityon(0))
    DECLARE organizationlogicaldomainid = f8 WITH protect, noconstant(0.0)
    IF ( NOT (getlogicaldomain(ld_concept_organization,organizationlogicaldomainid)))
     CALL logmessage("getAuthorizedBillingEntitiesByUserId","Failed to retrieve logical domain ID...",
      log_error)
     RETURN(false)
    ENDIF
    IF (isbillingentitysecurityon)
     SELECT DISTINCT
      be.billing_entity_id
      FROM billing_entity be,
       be_org_reltn bor,
       organization o,
       be_prsnl_group_r bg,
       pft_prsnl_group_r pg
      PLAN (pg
       WHERE (pg.prsnl_id=reqinfo->updt_id)
        AND pg.active_ind=true)
       JOIN (bg
       WHERE bg.pft_prsnl_group_id=pg.pft_prsnl_group_id
        AND bg.active_ind=true)
       JOIN (be
       WHERE be.billing_entity_id=bg.billing_entity_id
        AND be.active_ind=true)
       JOIN (bor
       WHERE bor.billing_entity_id=be.billing_entity_id
        AND bor.active_ind=true)
       JOIN (o
       WHERE o.organization_id=bor.organization_id
        AND o.active_ind=true
        AND o.logical_domain_id=organizationlogicaldomainid)
      ORDER BY be.billing_entity_id
      DETAIL
       billingentitycount += 1
       IF (mod(billingentitycount,20)=1)
        stat = alterlist(billingentities->billingentities,(billingentitycount+ 19))
       ENDIF
       billingentities->billingentities[billingentitycount].billingentityid = be.billing_entity_id
      FOOT REPORT
       stat = alterlist(billingentities->billingentities,billingentitycount)
      WITH nocounter
     ;end select
    ELSE
     IF ( NOT (getbillingentities(billingentities)))
      CALL logmessage("getAuthorizedBillingEntities","Failed to retrieve Billing Entity ID's...",
       log_error)
      RETURN(false)
     ENDIF
    ENDIF
    IF (validate(debug,0))
     CALL echorecord(billingentities)
    ENDIF
    CALL logmessage("getAuthorizedBillingEntitiesByUserId","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(isorganizationsecurityon)))
  DECLARE isorganizationsecurityon(null) = i2
  SUBROUTINE isorganizationsecurityon(null)
    CALL logmessage("isOrganizationSecurityOn","Entering...",log_debug)
    DECLARE isorgsecurityon = i2 WITH protect, noconstant(false)
    IF (validate(ccldminfo->mode,0))
     IF ((ccldminfo->sec_org_reltn > 0))
      SET isorgsecurityon = true
     ENDIF
    ELSE
     SELECT INTO "nl:"
      FROM dm_info di
      WHERE di.info_name="SEC_ORG_RELTN"
       AND di.info_domain="SECURITY"
       AND di.info_number > 0.0
      DETAIL
       isorgsecurityon = true
      WITH nocounter
     ;end select
    ENDIF
    CALL logmessage("isOrganizationSecurityOn",build2("Organization security is ",evaluate(
       isorgsecurityon,true,"on","off")),log_debug)
    CALL logmessage("isOrganizationSecurityOn","Exiting...",log_debug)
    RETURN(isorgsecurityon)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(isbillingentitysecurityon)))
  DECLARE isbillingentitysecurityon(null) = i2
  SUBROUTINE isbillingentitysecurityon(null)
    CALL logmessage("isBillingEntitySecurityOn","Entering...",log_debug)
    DECLARE isbillingentitysecurityon = i2 WITH protect, noconstant(false)
    DECLARE organizationlogicaldomainid = f8 WITH protect, noconstant(0.0)
    IF ( NOT (getlogicaldomain(ld_concept_organization,organizationlogicaldomainid)))
     CALL logmessage("isBillingEntitySecurityOn","Failed to retrieve logical domain ID...",log_error)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM dm_info di
     WHERE di.info_name="SEC_BE_RELTN"
      AND di.info_domain="SECURITY"
      AND di.info_domain_id=organizationlogicaldomainid
      AND di.info_number > 0.0
     DETAIL
      isbillingentitysecurityon = true
     WITH nocounter
    ;end select
    CALL logmessage("isBillingEntitySecurityOn",build2("Billing Entity security is ",evaluate(
       isbillingentitysecurityon,true,"on","off")),log_debug)
    CALL logmessage("isBillingEntitynSecurityOn","Exiting...",log_debug)
    RETURN(isbillingentitysecurityon)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(isconfidentialitysecurityon)))
  DECLARE isconfidentialitysecurityon(null) = i2
  SUBROUTINE isconfidentialitysecurityon(null)
    CALL logmessage("isConfidentialitySecurityOn","Entering...",log_debug)
    DECLARE isconfidsecurityon = i2 WITH protect, noconstant(false)
    IF (validate(ccldminfo->mode,0))
     IF ((ccldminfo->sec_confid > 0))
      SET isconfidsecurityon = true
     ENDIF
    ELSE
     SELECT INTO "nl:"
      FROM dm_info di
      WHERE di.info_name="SEC_CONFID"
       AND di.info_domain="SECURITY"
       AND di.info_number > 0.0
      DETAIL
       isconfidsecurityon = true
      WITH nocounter
     ;end select
    ENDIF
    CALL logmessage("isConfidentialitySecurityOn",build2("Confidentiality level security is ",
      evaluate(isconfidsecurityon,true,"on","off")),log_debug)
    CALL logmessage("isConfidentialitySecurityOn","Exiting...",log_debug)
    RETURN(isconfidsecurityon)
  END ;Subroutine
 ENDIF
 SUBROUTINE (getauthorizedprofitorgsforbe(billingentityids=vc,authorizedorganizations=vc(ref)) =i2)
   CALL logmessage("getAuthorizedProFitOrgsForBe","Entering...",log_debug)
   DECLARE organizationlogicaldomainid = f8 WITH protect, noconstant(0.0)
   DECLARE isorgsecurityon = i2 WITH protect, constant(isorganizationsecurityon(0))
   DECLARE organizationcount = i4 WITH protect, noconstant(0)
   DECLARE iidx = i4 WITH protect, noconstant(0)
   IF ( NOT (getlogicaldomain(ld_concept_organization,organizationlogicaldomainid)))
    CALL logmessage("getAuthorizedProFitOrgsForBe","Failed to retrieve logical domain ID...",
     log_error)
    RETURN(false)
   ENDIF
   IF (isorgsecurityon)
    SELECT INTO "nl:"
     FROM billing_entity be,
      be_org_reltn bor,
      organization o,
      prsnl_org_reltn por,
      code_value cv
     PLAN (be
      WHERE expand(iidx,1,size(billingentityids->billingentities,5),be.billing_entity_id,
       billingentityids->billingentities[iidx].billingentityid)
       AND be.active_ind=true)
      JOIN (bor
      WHERE bor.billing_entity_id=be.billing_entity_id
       AND bor.active_ind=true)
      JOIN (o
      WHERE o.organization_id=bor.organization_id
       AND o.active_ind=true
       AND o.logical_domain_id=organizationlogicaldomainid)
      JOIN (por
      WHERE por.organization_id=o.organization_id
       AND (por.person_id=reqinfo->updt_id)
       AND por.active_ind=true
       AND por.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND por.end_effective_dt_tm > cnvtdatetime(sysdate))
      JOIN (cv
      WHERE cv.code_value=por.confid_level_cd)
     ORDER BY o.organization_id
     HEAD o.organization_id
      organizationcount += 1
      IF (mod(organizationcount,20)=1)
       stat = alterlist(authorizedorganizations->organizations,(organizationcount+ 19))
      ENDIF
      authorizedorganizations->organizations[organizationcount].organizationid = o.organization_id,
      authorizedorganizations->organizations[organizationcount].confidentialitylevel = cv
      .collation_seq
     FOOT REPORT
      stat = alterlist(authorizedorganizations->organizations,organizationcount)
     WITH nocounter
    ;end select
   ELSE
    SELECT INTO "nl:"
     FROM billing_entity be,
      be_org_reltn bor,
      organization o
     PLAN (be
      WHERE expand(iidx,1,size(billingentityids->billingentities,5),be.billing_entity_id,
       billingentityids->billingentities[iidx].billingentityid)
       AND be.active_ind=true)
      JOIN (bor
      WHERE bor.billing_entity_id=be.billing_entity_id
       AND bor.active_ind=true)
      JOIN (o
      WHERE o.organization_id=bor.organization_id
       AND o.active_ind=true
       AND o.logical_domain_id=organizationlogicaldomainid)
     ORDER BY o.organization_id
     HEAD o.organization_id
      organizationcount += 1
      IF (mod(organizationcount,20)=1)
       stat = alterlist(authorizedorganizations->organizations,(organizationcount+ 19))
      ENDIF
      authorizedorganizations->organizations[organizationcount].organizationid = o.organization_id,
      authorizedorganizations->organizations[organizationcount].confidentialitylevel = 99
     FOOT REPORT
      stat = alterlist(authorizedorganizations->organizations,organizationcount)
     WITH nocounter
    ;end select
   ENDIF
   CALL echo(format(cnvtdatetime(sysdate),"hhmmsscc;3;M"))
   CALL logmessage("getAuthorizedProFitOrgsForBe","Exiting...",log_debug)
   RETURN(true)
 END ;Subroutine
 CALL beginservice("565928.005")
 IF (validate(getprofitauthorizedbillingentities,char(128))=char(128))
  SUBROUTINE (getprofitauthorizedbillingentities(authorizedgrpbillingenitities=vc(ref)) =i2)
    CALL logmessage("getProfitAuthorizedBillingEntities","Entering...",log_debug)
    DECLARE becount = i4 WITH protect, noconstant(0)
    SELECT DISTINCT INTO "nl:"
     FROM be_prsnl_group_r bpg,
      billing_entity be,
      pft_prsnl_group_r pgr
     PLAN (pgr
      WHERE (pgr.prsnl_id=reqinfo->updt_id)
       AND pgr.active_ind=true)
      JOIN (bpg
      WHERE bpg.pft_prsnl_group_id=pgr.pft_prsnl_group_id
       AND bpg.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=bpg.billing_entity_id
       AND be.active_ind=true)
     DETAIL
      becount += 1, stat = alterlist(authorizedgrpbillingenitities->billingentities,becount),
      authorizedgrpbillingenitities->billingentities[becount].billingentityid = be.billing_entity_id
     WITH nocounter
    ;end select
    CALL logmessage("getProfitAuthorizedBillingEntities","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getuserauthorizedbillingentities,char(128))=char(128))
  SUBROUTINE (getuserauthorizedbillingentities(authorizedbillingentities=vc(ref)) =i2)
    CALL logmessage("getUserAuthorizedBillingEntities","Entering...",log_debug)
    DECLARE bcnt = i4 WITH protect, noconstant(0)
    DECLARE rcnt = i4 WITH protect, noconstant(0)
    DECLARE lidx = i4 WITH protect, noconstant(0)
    DECLARE bposition = i4 WITH protect, noconstant(0)
    RECORD userauthorizedbillingentities(
      1 billingentities[*]
        2 billingentityid = f8
    ) WITH protect
    RECORD profitauthorizedbillingentities(
      1 billingentities[*]
        2 billingentityid = f8
    ) WITH protect
    IF ( NOT (getauthorizedbillingentities(userauthorizedbillingentities)))
     CALL exitservicefailure("Unable to retrieve Authorized Biling Entity ID's",true)
    ENDIF
    IF ( NOT (getprofitauthorizedbillingentities(profitauthorizedbillingentities)))
     CALL exitservicefailure("Unable to retrieve Logical Biling Entity ID's",true)
    ENDIF
    FOR (bcnt = 1 TO size(profitauthorizedbillingentities->billingentities,5))
     SET bposition = locateval(lidx,1,size(userauthorizedbillingentities->billingentities,5),
      profitauthorizedbillingentities->billingentities[bcnt].billingentityid,
      userauthorizedbillingentities->billingentities[lidx].billingentityid)
     IF (bposition > 0)
      SET rcnt += 1
      SET stat = alterlist(authorizedbillingentities->billingentities,rcnt)
      SET authorizedbillingentities->billingentities[rcnt].billingentityid =
      profitauthorizedbillingentities->billingentities[bcnt].billingentityid
     ENDIF
    ENDFOR
    CALL logmessage("getUserAuthorizedBillingEntities","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(validatemultiaccountencountersexist,char(128))=char(128))
  SUBROUTINE (validatemultiaccountencountersexist(pencounterid=f8) =i2)
    CALL logmessage("validateMultiAccountEncountersExist","Enter",log_debug)
    DECLARE cs20849_acct_sub_type_cd_patient = f8 WITH protect, constant(getcodevalue(20849,"PATIENT",
      0))
    DECLARE multiaccountcount = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      account a
     PLAN (pe
      WHERE pe.encntr_id=pencounterid
       AND pe.active_ind=true)
      JOIN (a
      WHERE a.acct_id=pe.acct_id
       AND a.acct_sub_type_cd=cs20849_acct_sub_type_cd_patient
       AND a.active_ind=true)
     ORDER BY pe.acct_id
     HEAD pe.acct_id
      multiaccountcount += 1
     WITH nocounter
    ;end select
    CALL logmessage("validateMultiAccountEncountersExist","Exit",log_debug)
    IF (multiaccountcount > 1)
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(isbedifferentforencandfinancialenc,char(128))=char(128))
  SUBROUTINE (isbedifferentforencandfinancialenc(pencounterid=f8) =i2)
    CALL logmessage("isBEDifferentForEncAndFinancialEnc","Enter",log_debug)
    DECLARE isbillingentitydiff = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM encounter e,
      pft_encntr pe,
      be_org_reltn bor
     PLAN (e
      WHERE e.encntr_id=pencounterid
       AND e.active_ind=true)
      JOIN (pe
      WHERE pe.encntr_id=e.encntr_id
       AND pe.active_ind=true)
      JOIN (bor
      WHERE bor.organization_id=e.organization_id
       AND bor.active_ind=true)
     DETAIL
      IF (pe.billing_entity_id != bor.billing_entity_id)
       isbillingentitydiff = true
      ENDIF
     WITH nocounter
    ;end select
    CALL logmessage("isBEDifferentForEncAndFinancialEnc","Exit",log_debug)
    RETURN(isbillingentitydiff)
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 CALL echo("Begin PFT_RCA_CONTEXT_CONSTANTS.INC, version [700704.011]")
 DECLARE entity_type_patient_account = i4 WITH protect, constant(1)
 DECLARE entity_type_encounter = i4 WITH protect, constant(2)
 DECLARE entity_type_financial_encounter = i4 WITH protect, constant(3)
 DECLARE entity_type_insurance_balance = i4 WITH protect, constant(5)
 DECLARE entity_type_self_pay_balance = i4 WITH protect, constant(6)
 DECLARE entity_type_statement = i4 WITH protect, constant(7)
 DECLARE entity_type_consolidated_statement = i4 WITH protect, constant(8)
 DECLARE entity_type_claim = i4 WITH protect, constant(9)
 DECLARE entity_type_charge = i4 WITH protect, constant(10)
 DECLARE entity_type_itrans_balance = i4 WITH protect, constant(11)
 DECLARE entity_type_itrans_claim = i4 WITH protect, constant(12)
 DECLARE entity_type_itrans_charge = i4 WITH protect, constant(13)
 DECLARE entity_type_sptrans_statement = i4 WITH protect, constant(14)
 DECLARE entity_type_sptrans_charge = i4 WITH protect, constant(15)
 DECLARE entity_type_sptrans_balance = i4 WITH protect, constant(16)
 DECLARE entity_type_denial_claim = i4 WITH protect, constant(17)
 DECLARE entity_type_denial_charge = i4 WITH protect, constant(18)
 DECLARE entity_type_personnel = i4 WITH protect, constant(19)
 DECLARE entity_type_guarantor = i4 WITH protect, constant(20)
 DECLARE entity_type_charge_batch = i4 WITH protect, constant(21)
 DECLARE entity_type_client_account = i4 WITH protect, constant(22)
 DECLARE entity_type_client_invoice = i4 WITH protect, constant(23)
 DECLARE entity_type_transaction_batch = i4 WITH protect, constant(24)
 DECLARE entity_type_general_ar = i4 WITH protect, constant(25)
 DECLARE entity_type_prsnl_workflow_entity = i4 WITH protect, constant(26)
 DECLARE entity_type_patient = i4 WITH protect, constant(27)
 DECLARE entity_type_visit = i4 WITH protect, constant(28)
 DECLARE entity_type_remittance = i4 WITH protect, constant(29)
 DECLARE entity_type_general_account = i4 WITH protect, constant(31)
 DECLARE entity_type_ime_claim = i4 WITH protect, constant(32)
 DECLARE entity_type_eob = i4 WITH protect, constant(33)
 DECLARE entity_type_pending_transaction = i4 WITH protect, constant(34)
 DECLARE entity_type_modify_eob_detail = i4 WITH protect, constant(35)
 DECLARE entity_type_person = i4 WITH protect, constant(36)
 DECLARE entity_type_multi_acct_encounter = i4 WITH protect, constant(37)
 DECLARE entity_type_insurance_pending_transaction = i4 WITH protect, constant(39)
 DECLARE entity_type_invoice_transaction = i4 WITH protect, constant(40)
 DECLARE entity_type_claim_line_item = i4 WITH protect, constant(41)
 DECLARE entity_type_research_account = i4 WITH protect, constant(42)
 DECLARE entity_type_invoice = i4 WITH protect, constant(43)
 DECLARE entity_type_guarantor_account = i4 WITH protect, constant(44)
 DECLARE entity_type_billing_hold = i4 WITH protect, constant(45)
 CALL echo("End PFT_RCA_CONTEXT_CONSTANTS.INC")
 IF ( NOT (validate(cs354_selfpay_cd)))
  DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
 ENDIF
 IF (validate(getbillingentitybyencounter,char(128))=char(128))
  SUBROUTINE (getbillingentitybyencounter(pencntrid=f8,prbillingentityid=f8(ref)) =i2)
    DECLARE facilitycd = f8 WITH protect, noconstant(0.0)
    SET prbillingentityid = 0.0
    SELECT INTO "nl:"
     FROM encounter e
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
     DETAIL
      facilitycd = e.loc_facility_cd
     WITH nocounter
    ;end select
    IF (curqual=0)
     SELECT INTO "nl:"
      FROM encntr_pending e
      PLAN (e
       WHERE e.encntr_id=pencntrid
        AND e.active_ind=true)
      DETAIL
       facilitycd = e.pend_facility_cd
      WITH nocounter
     ;end select
    ENDIF
    SELECT INTO "nl:"
     FROM location l,
      be_org_reltn bor,
      billing_entity be
     PLAN (l
      WHERE l.location_cd=facilitycd
       AND l.active_ind=true
       AND l.location_cd > 0.0)
      JOIN (bor
      WHERE bor.organization_id=l.organization_id
       AND bor.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=bor.billing_entity_id
       AND be.active_ind=true)
     DETAIL
      prbillingentityid = be.billing_entity_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getaccountbillingentityforfinancialencounter,char(128))=char(128))
  SUBROUTINE (getaccountbillingentityforfinancialencounter(ppftencntrid=f8,prbeid=f8(ref)) =i2)
    SET prbeid = 0.0
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      account a,
      billing_entity be
     PLAN (pe
      WHERE pe.pft_encntr_id=ppftencntrid
       AND pe.active_ind=true)
      JOIN (a
      WHERE a.acct_id=pe.acct_id
       AND a.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=a.billing_entity_id
       AND be.active_ind=true)
     ORDER BY be.billing_entity_id
     HEAD be.billing_entity_id
      prbeid = be.billing_entity_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getaccountbillingentityforencounter,char(128))=char(128))
  SUBROUTINE (getaccountbillingentityforencounter(pencntrid=f8,prbeid=f8(ref)) =i2)
    SET prbeid = 0.0
    SELECT INTO "nl:"
     FROM encounter e,
      pft_encntr pe,
      account a,
      billing_entity be
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
      JOIN (pe
      WHERE pe.encntr_id=e.encntr_id
       AND pe.active_ind=true)
      JOIN (a
      WHERE a.acct_id=pe.acct_id
       AND a.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=a.billing_entity_id
       AND be.active_ind=true)
     ORDER BY be.billing_entity_id
     HEAD be.billing_entity_id
      prbeid = be.billing_entity_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getbillingentitiesforencounterwithmultipleaccounts,char(128))=char(128))
  SUBROUTINE (getbillingentitiesforencounterwithmultipleaccounts(pencntrid=f8,prbes=vc(ref)) =i2)
    DECLARE becnt = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM encounter e,
      pft_encntr pe,
      account a,
      billing_entity be
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
      JOIN (pe
      WHERE pe.encntr_id=e.encntr_id
       AND pe.active_ind=true)
      JOIN (a
      WHERE a.acct_id=pe.acct_id
       AND a.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=a.billing_entity_id
       AND be.active_ind=true)
     ORDER BY be.billing_entity_id
     HEAD be.billing_entity_id
      becnt += 1, stat = alterlist(prbes->billingentities,becnt), prbes->billingentities[becnt].
      billingentityid = be.billing_entity_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getbillingentityforaccount,char(128))=char(128))
  SUBROUTINE (getbillingentityforaccount(pacctid=f8,prbeid=f8(ref)) =i2)
    SET prbeid = 0.0
    SELECT INTO "nl:"
     FROM account a,
      billing_entity be
     PLAN (a
      WHERE a.acct_id=pacctid
       AND a.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=a.billing_entity_id
       AND be.active_ind=true)
     ORDER BY be.billing_entity_id
     HEAD be.billing_entity_id
      prbeid = be.billing_entity_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getbillingentitiesforperson,char(128))=char(128))
  SUBROUTINE (getbillingentitiesforperson(ppersonid=f8,prbes=vc(ref)) =i2)
    DECLARE becnt = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM person p,
      encounter e,
      pft_encntr pe,
      account a,
      billing_entity be
     PLAN (p
      WHERE p.person_id=ppersonid
       AND p.active_ind=true)
      JOIN (e
      WHERE e.person_id=p.person_id
       AND e.active_ind=true)
      JOIN (pe
      WHERE pe.encntr_id=e.encntr_id
       AND pe.active_ind=true)
      JOIN (a
      WHERE a.acct_id=pe.acct_id
       AND a.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=a.billing_entity_id
       AND be.active_ind=true)
     ORDER BY be.billing_entity_id
     HEAD be.billing_entity_id
      becnt += 1, stat = alterlist(prbes->billingentities,becnt), prbes->billingentities[becnt].
      billingentityid = be.billing_entity_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getviewablebillingentitiesforentity,char(128))=char(128))
  SUBROUTINE (getviewablebillingentitiesforentity(pentityid=f8,pentitytype=i4,prbes=vc(ref)) =i2)
    RECORD entitybes(
      1 billingentities[*]
        2 billingentityid = f8
    ) WITH protect
    RECORD authorizedbes(
      1 billingentities[*]
        2 billingentityid = f8
    ) WITH protect
    DECLARE beid = f8 WITH protect, noconstant(0.0)
    DECLARE beidx = i4 WITH protect, noconstant(0)
    DECLARE authbeidx = i4 WITH protect, noconstant(0)
    DECLARE becnt = i4 WITH protect, noconstant(0)
    IF ( NOT (getuserauthorizedbillingentities(authorizedbes)))
     CALL exitservicefailure("Unable to retrieve authorized biling entity ids",true)
    ENDIF
    CASE (pentitytype)
     OF entity_type_person:
      SET stat = getbillingentitiesforperson(pentityid,entitybes)
     OF entity_type_patient_account:
      SET stat = getbillingentityforaccount(pentityid,beid)
     OF entity_type_multi_acct_encounter:
      SET stat = getbillingentitiesforencounterwithmultipleaccounts(pentityid,entitybes)
     OF entity_type_encounter:
      SET stat = getaccountbillingentityforencounter(pentityid,beid)
     OF entity_type_financial_encounter:
      SET stat = getaccountbillingentityforfinancialencounter(pentityid,beid)
     ELSE
      RETURN(false)
    ENDCASE
    IF (beid > 0.0)
     SET stat = alterlist(entitybes->billingentities,1)
     SET entitybes->billingentities[1].billingentityid = beid
    ENDIF
    FOR (beidx = 1 TO size(entitybes->billingentities,5))
     SET bepos = locateval(authbeidx,1,size(authorizedbes->billingentities,5),entitybes->
      billingentities[beidx].billingentityid,authorizedbes->billingentities[authbeidx].
      billingentityid)
     IF (bepos > 0)
      SET becnt += 1
      SET stat = alterlist(prbes->billingentities,becnt)
      SET prbes->billingentities[becnt].billingentityid = entitybes->billingentities[beidx].
      billingentityid
     ENDIF
    ENDFOR
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(facilitylist->facilities)))
  RECORD facilitylist(
    1 facilities[*]
      2 billingentityid = f8
      2 timezoneindex = i4
      2 logicaldomainid = f8
      2 activity_flag = i2
  )
  CALL initializefacilitytimezone(null)
 ENDIF
 IF (validate(initializefacilitytimezone,char(128))=char(128))
  DECLARE initializefacilitytimezone(null) = null
  SUBROUTINE initializefacilitytimezone(null)
    DECLARE cs222_facility_cd = f8 WITH noconstant(uar_get_code_by("MEANING",222,"FACILITY")),
    protect
    DECLARE billingentiycount = i4 WITH noconstant(0), protect
    SELECT INTO "nl:"
     FROM billing_entity be,
      organization o,
      location l,
      time_zone_r tzr
     PLAN (be
      WHERE be.billing_entity_id > 0.0
       AND be.active_ind=1)
      JOIN (o
      WHERE o.organization_id=be.organization_id
       AND o.active_ind=1)
      JOIN (l
      WHERE l.organization_id=o.organization_id
       AND l.location_type_cd=cs222_facility_cd
       AND l.active_ind=1
       AND l.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND l.end_effective_dt_tm > cnvtdatetime(sysdate))
      JOIN (tzr
      WHERE (tzr.parent_entity_id= Outerjoin(l.location_cd))
       AND (tzr.parent_entity_name= Outerjoin("LOCATION")) )
     ORDER BY be.billing_entity_id
     DETAIL
      billingentiycount += 1, stat = alterlist(facilitylist->facilities,billingentiycount),
      facilitylist->facilities[billingentiycount].billingentityid = be.billing_entity_id,
      facilitylist->facilities[billingentiycount].activity_flag = be.gl_date_activity_flag
      IF (tzr.parent_entity_id != 0.0)
       facilitylist->facilities[billingentiycount].timezoneindex = datetimezonebyname(tzr.time_zone)
      ELSE
       facilitylist->facilities[billingentiycount].timezoneindex = curtimezoneapp
      ENDIF
      facilitylist->facilities[billingentiycount].logicaldomainid = o.logical_domain_id
     WITH nocounter
    ;end select
    IF (validate(debug))
     CALL echorecord(facilitylist)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(getfacilitytimezoneidx,char(128))=char(128))
  SUBROUTINE (getfacilitytimezoneidx(pbillingentityid=f8) =i4)
    DECLARE timezoneindex = i4 WITH protect, noconstant(0)
    DECLARE billingentitypos = i4 WITH protect, noconstant(0)
    DECLARE billingentitylidx = i4 WITH protect, noconstant(0)
    IF (pbillingentityid <= 0.0)
     SET timezoneindex = curtimezoneapp
    ELSE
     SET billingentitypos = locatevalsort(billingentitylidx,1,size(facilitylist->facilities,5),
      pbillingentityid,facilitylist->facilities[billingentitylidx].billingentityid)
     IF (billingentitypos > 0)
      SET timezoneindex = facilitylist->facilities[billingentitypos].timezoneindex
     ELSE
      SET timezoneindex = curtimezoneapp
     ENDIF
    ENDIF
    RETURN(timezoneindex)
  END ;Subroutine
 ENDIF
 IF (validate(getfacilitybeginningofday,char(128))=char(128))
  SUBROUTINE (getfacilitybeginningofday(pbillingentityid=f8,pdatetimeutc=dq8) =dq8)
    DECLARE timezoneindex = i4 WITH protect, noconstant(0)
    DECLARE billingentitypos = i4 WITH protect, noconstant(0)
    DECLARE billingentitylidx = i4 WITH protect, noconstant(0)
    IF (pbillingentityid <= 0.0)
     SET timezoneindex = curtimezoneapp
    ELSE
     SET billingentitypos = locatevalsort(billingentitylidx,1,size(facilitylist->facilities,5),
      pbillingentityid,facilitylist->facilities[billingentitylidx].billingentityid)
     IF (billingentitypos > 0)
      SET timezoneindex = facilitylist->facilities[billingentitypos].timezoneindex
     ELSE
      SET timezoneindex = curtimezoneapp
     ENDIF
    ENDIF
    DECLARE intdate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect
    SET facilitydate = cnvtdatetimeutc(pdatetimeutc,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET intdate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate),"##;P0"
       ),year(facilitydate)))
    SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(intdate),0),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getfacilityendofday,char(128))=char(128))
  SUBROUTINE (getfacilityendofday(pbillingentityid=f8,pdatetimeutc=dq8) =dq8)
    DECLARE timezoneindex = i4 WITH protect, noconstant(0)
    DECLARE billingentitypos = i4 WITH protect, noconstant(0)
    DECLARE billingentitylidx = i4 WITH protect, noconstant(0)
    IF (pbillingentityid <= 0.0)
     SET timezoneindex = curtimezoneapp
    ELSE
     SET billingentitypos = locatevalsort(billingentitylidx,1,size(facilitylist->facilities,5),
      pbillingentityid,facilitylist->facilities[billingentitylidx].billingentityid)
     IF (billingentitypos > 0)
      SET timezoneindex = facilitylist->facilities[billingentitypos].timezoneindex
     ELSE
      SET timezoneindex = curtimezoneapp
     ENDIF
    ENDIF
    DECLARE intdate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect
    SET facilitydate = cnvtdatetimeutc(pdatetimeutc,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET intdate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate),"##;P0"
       ),year(facilitydate)))
    SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(intdate),235959),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getfacilityendofpreviousday,char(128))=char(128))
  SUBROUTINE (getfacilityendofpreviousday(pbillingentityid=f8,pdatetimeutc=dq8) =dq8)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0.0)
    IF (curutc)
     DECLARE timezoneindex = i4 WITH protect, noconstant(0)
     DECLARE billingentitypos = i4 WITH protect, noconstant(0)
     DECLARE billingentitylidx = i4 WITH protect, noconstant(0)
     IF (pbillingentityid <= 0.0)
      SET timezoneindex = curtimezoneapp
     ELSE
      SET billingentitypos = locatevalsort(billingentitylidx,1,size(facilitylist->facilities,5),
       pbillingentityid,facilitylist->facilities[billingentitylidx].billingentityid)
      IF (billingentitypos > 0)
       SET timezoneindex = facilitylist->facilities[billingentitypos].timezoneindex
      ENDIF
      IF (timezoneindex <= 0)
       SET timezoneindex = curtimezoneapp
      ENDIF
     ENDIF
     DECLARE intdate = i4 WITH protect, noconstant(0)
     DECLARE juliandate = i4 WITH protect, noconstant(0)
     SET facilitydate = cnvtdatetimeutc(pdatetimeutc,2,timezoneindex)
     SET facilitydate = cnvtdatetimeutc(facilitydate,1)
     SET intdate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate),
        "##;P0"),year(facilitydate)))
     SET juliandate = cnvtdate(intdate)
     SET juliandate -= 1
     SET facilitydate = cnvtdatetimeutc(cnvtdatetime(juliandate,235959),2)
     SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
     RETURN(facilitydate)
    ENDIF
    IF (curutc=0)
     SET facilitydate = cnvtdatetime(datetimeadd(pdatetimeutc,- (1)),235959)
     RETURN(facilitydate)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(getfacilitycurrenttimeofday,char(128))=char(128))
  SUBROUTINE (getfacilitycurrenttimeofday(pbillingentityid=f8,pdatetimeutc=dq8) =dq8)
    DECLARE timezoneindex = i4 WITH protect, noconstant(0)
    DECLARE billingentitypos = i4 WITH protect, noconstant(0)
    DECLARE billingentitylidx = i4 WITH protect, noconstant(0)
    IF (pbillingentityid <= 0.0)
     SET timezoneindex = curtimezoneapp
    ELSE
     SET billingentitypos = locatevalsort(billingentitylidx,1,size(facilitylist->facilities,5),
      pbillingentityid,facilitylist->facilities[billingentitylidx].billingentityid)
     IF (billingentitypos > 0)
      SET timezoneindex = facilitylist->facilities[billingentitypos].timezoneindex
     ELSE
      SET timezoneindex = curtimezoneapp
     ENDIF
    ENDIF
    DECLARE intdate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect
    SET facilitydate = cnvtdatetimeutc(pdatetimeutc,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET intdate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate),"##;P0"
       ),year(facilitydate)))
    SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(intdate),curtime3),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  IF (validate(getcodevalue,char(128))=char(128))
   EXECUTE NULL ;noop
  ENDIF
  IF (validate(s_cdf_meaning,char(128))=char(128))
   DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
  ENDIF
  IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
   DECLARE s_code_value = f8 WITH public, noconstant(0.0)
  ENDIF
  DECLARE pa_table_name = vc WITH protect, noconstant("")
  SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
    SET s_cdf_meaning = cdf_meaning
    SET s_code_value = 0.0
    SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
    IF (((stat != 0) OR (s_code_value <= 0.0)) )
     SET s_code_value = 0.0
     CASE (option_flag)
      OF 0:
       SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
        '"',",",option_flag,") not found, CURPROG [",curprog,
        "]")
       CALL echo(pa_table_name)
       SET pft_failed = uar_error
       EXECUTE pft_log "getcodevalue", pa_table_name, 0
       GO TO exit_script
      OF 1:
       SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
        '"',",",option_flag,") not found, CURPROG [",curprog,
        "]")
       CALL echo(pa_table_name)
      OF 2:
       SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
        '"',",",option_flag,") not found, CURPROG [",curprog,
        "]")
       CALL echo(pa_table_name)
       EXECUTE pft_log "getcodevalue", pa_table_name, 3
      OF 3:
       SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
        '"',",",option_flag,") not found, CURPROG [",curprog,
        "]")
       CALL echo(pa_table_name)
       CALL err_add_message(pa_table_name)
       SET pft_failed = uar_error
     ENDCASE
    ELSE
     CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") CODE_VALUE [",s_code_value,
       "]"))
    ENDIF
    RETURN(s_code_value)
  END ;Subroutine
 ENDIF
 CALL echo("Begin pft_get_guarantor_subs.inc, version [RCBACM-21889.058]")
 IF ( NOT (validate(rawguarresponsibilities->begindate)))
  RECORD rawguarresponsibilities(
    1 billingentityid = f8
    1 patientid = f8
    1 begindate = dq8
    1 enddate = dq8
    1 guarantors[*]
      2 guarantorid1 = f8
      2 guarantorid2 = f8
      2 guarorgid = f8
      2 coguarantortypecd = f8
      2 begineffectivedate = dq8
      2 endeffectivedate = dq8
      2 guarfinancialrespid = f8
      2 guarrespacctid = f8
      2 finrespcd = f8
      2 finrespvalue = f8
      2 activeind = i2
      2 updatedate = dq8
  ) WITH protect
 ENDIF
 IF ( NOT (validate(prencounterlist)))
  RECORD prencounterlist(
    1 encounters[*]
      2 encntrid = f8
  ) WITH protect
 ENDIF
 IF ( NOT (validate(guarantors->guarantorresps.guarid1)))
  RECORD guarantors(
    1 billingentityid = f8
    1 guarantorresps[*]
      2 guarname = vc
      2 guarid1 = f8
      2 guarid2 = f8
      2 guarorgid = f8
      2 guaraccts[*]
        3 acctid = f8
        3 patientid = f8
  ) WITH protect
 ENDIF
 IF ( NOT (validate(cs351_defguar_cd)))
  DECLARE cs351_defguar_cd = f8 WITH protect, constant(getcodevalue(351,"DEFGUAR",0))
 ENDIF
 IF ( NOT (validate(cs352_guarantor)))
  DECLARE cs352_guarantor = f8 WITH protect, constant(getcodevalue(352,"GUARANTOR",0))
 ENDIF
 IF ( NOT (validate(cs20790_priorityseq)))
  DECLARE cs20790_priorityseq = f8 WITH protect, constant(getcodevalue(20790,"PRIORITY_SEQ",0))
 ENDIF
 IF ( NOT (validate(cs18736_ar)))
  DECLARE cs18736_ar = f8 WITH protect, constant(getcodevalue(18736,"A/R",0))
 ENDIF
 IF ( NOT (validate(cs20849_patient)))
  DECLARE cs20849_patient = f8 WITH noconstant(getcodevalue(20849,"PATIENT",0))
 ENDIF
 IF ( NOT (validate(cs354_selfpay_cd)))
  DECLARE cs354_selfpay_cd = f8 WITH protect, noconstant(getcodevalue(354,"SELFPAY",1))
 ENDIF
 IF ( NOT (validate(cs24451_cancelled_cd)))
  DECLARE cs24451_cancelled_cd = f8 WITH protect, noconstant(getcodevalue(24451,"CANCELLED",1))
 ENDIF
 IF ( NOT (validate(cs24451_invalid_cd)))
  DECLARE cs24451_invalid_cd = f8 WITH protect, noconstant(getcodevalue(24451,"INVALID",1))
 ENDIF
 IF ( NOT (validate(cs24451_complete_cd)))
  DECLARE cs24451_complete_cd = f8 WITH protect, noconstant(getcodevalue(24451,"COMPLETE",1))
 ENDIF
 IF ( NOT (validate(cs387573_dailyamount_cd)))
  DECLARE cs387573_dailyamount_cd = f8 WITH protect, constant(getcodevalue(387573,"DAILYAMOUNT",1))
 ENDIF
 IF ( NOT (validate(cs4092002_transfer_cd)))
  DECLARE cs4092002_transfer_cd = f8 WITH protect, constant(getcodevalue(4092002,"TRANSFER",0))
 ENDIF
 IF ( NOT (validate(cs20509_posted_cd)))
  DECLARE cs20509_posted_cd = f8 WITH protect, constant(getcodevalue(20509,"POSTED",0))
 ENDIF
 IF ( NOT (validate(cs387572_joint)))
  DECLARE cs387572_joint = f8 WITH protect, constant(getcodevalue(387572,"JOINT",0))
 ENDIF
 IF ( NOT (validate(cs18936_guarantor)))
  DECLARE cs18936_guarantor = f8 WITH protect, constant(getcodevalue(18936,"GUARANTOR",0))
 ENDIF
 IF ( NOT (validate(cs20849_guarantor)))
  DECLARE cs20849_guarantor = f8 WITH protect, constant(getcodevalue(20849,"GUARANTOR",0))
 ENDIF
 IF (validate(uar_error,0)=0
  AND validate(uar_error,1)=1)
  DECLARE uar_error = i2 WITH public, constant(20)
 ENDIF
 IF (validate(getguarantorbyencounter,char(128))=char(128))
  SUBROUTINE (getguarantorbyencounter(pencntrid=f8,prguarantorid=f8(ref),pencountermodsflag=i2(value,
    false)) =i2)
    DECLARE adt_constant = i4 WITH protect, constant(99)
    DECLARE primaryguarantorseq = i4 WITH protect, noconstant(0)
    DECLARE primaryguarantor = f8 WITH protect, noconstant(0.0)
    DECLARE externalguarantor = f8 WITH protect, noconstant(0.0)
    DECLARE pftencounterid = f8 WITH protect, noconstant(0.0)
    DECLARE orgguarantorid = f8 WITH protect, noconstant(0.0)
    SET prguarantorid = 0.0
    SELECT INTO "nl:"
     FROM encounter e,
      pft_encntr p
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
      JOIN (p
      WHERE p.encntr_id=e.encntr_id
       AND p.active_ind=true)
     DETAIL
      pftencounterid = p.pft_encntr_id
     WITH nocounter
    ;end select
    SET stat = getprimaryguarantorsequence(primaryguarantorseq)
    SELECT INTO "nl:"
     FROM encntr_person_reltn epr,
      person p
     PLAN (epr
      WHERE epr.encntr_id=pencntrid
       AND epr.person_reltn_type_cd=cs351_defguar_cd
       AND epr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND epr.end_effective_dt_tm > cnvtdatetime(sysdate)
       AND epr.active_ind=true
       AND epr.priority_seq IN (primaryguarantorseq, adt_constant))
      JOIN (p
      WHERE p.person_id=epr.related_person_id
       AND p.active_ind=true)
     DETAIL
      IF (epr.priority_seq=primaryguarantorseq)
       primaryguarantor = p.person_id
      ELSEIF (epr.priority_seq=adt_constant)
       externalguarantor = p.person_id
      ENDIF
     WITH nocounter
    ;end select
    IF (primaryguarantor > 0.0)
     SET prguarantorid = primaryguarantor
    ELSEIF (externalguarantor > 0.0)
     SET prguarantorid = externalguarantor
     IF (pencountermodsflag=true)
      IF ( NOT (publishguarantorworkflowevent(pftencounterid)))
       CALL exitservicefailure("publishGuarantorWorkflowEvent did not return success",
        go_to_exit_script)
      ENDIF
     ENDIF
    ENDIF
    IF (prguarantorid=0.0)
     SET stat = getorgguarantorbyencounter(pencntrid,orgguarantorid)
     IF (pencountermodsflag=true
      AND orgguarantorid=0.0)
      IF ( NOT (publishguarantorworkflowevent(pftencounterid)))
       CALL exitservicefailure("publishGuarantorWorkflowEvent did not return success",
        go_to_exit_script)
      ENDIF
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorbyfinencounter,char(128))=char(128))
  SUBROUTINE (getguarantorbyfinencounter(ppftencntrid=f8,prguarantorid=f8(ref)) =i2)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    DECLARE status = i2 WITH protect, noconstant(0)
    SET status = getencounterbyfinancialencounter(ppftencntrid,encntrid)
    SET status = getguarantorbyencounter(encntrid,prguarantorid)
    RETURN(status)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantoratpatientlevel,char(128))=char(128))
  SUBROUTINE (getguarantoratpatientlevel(ppersonid=f8,prguarantorid=f8(ref)) =i2)
    DECLARE primaryguarantorseq = i4 WITH protect, noconstant(0)
    SET prguarantorid = 0.0
    SET stat = getprimaryguarantorsequence(primaryguarantorseq)
    SELECT INTO "nl:"
     FROM person_person_reltn ppr
     WHERE ppr.person_id=ppersonid
      AND ppr.active_ind=true
      AND ppr.person_reltn_type_cd=cs351_defguar_cd
      AND ppr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND ppr.end_effective_dt_tm > cnvtdatetime(sysdate)
      AND ppr.active_ind=true
      AND ppr.priority_seq=primaryguarantorseq
     DETAIL
      prguarantorid = ppr.related_person_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorbyappointment,char(128))=char(128))
  SUBROUTINE (getguarantorbyappointment(pscheventid=f8,prguarantorid=f8(ref)) =i2)
    DECLARE patientid = f8 WITH protect, noconstant(0.0)
    DECLARE encounterid = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM sch_event_patient sep
     WHERE sep.sch_event_id=pscheventid
      AND sep.active_ind=true
      AND sep.version_dt_tm=cnvtdatetime("31-DEC-2100 00:00:00")
     DETAIL
      patientid = sep.person_id, encounterid = sep.encntr_id
     WITH nocounter
    ;end select
    IF (encounterid > 0.0)
     RETURN(getguarantorbyencounter(encounterid,prguarantorid))
    ELSEIF (patientid > 0.0)
     RETURN(getguarantoratpatientlevel(patientid,prguarantorid))
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorfinancialresp,char(128))=char(128))
  SUBROUTINE (getguarantorfinancialresp(ppftencntrid=f8,pencntrid=f8,ppftdate=dq8,prrawguarresp=vc(
    ref),pskipcreateacct=i2) =i2)
    DECLARE guarindex = i4 WITH protect, noconstant(0)
    DECLARE guarantorid1 = f8 WITH protect, noconstant(0.0)
    DECLARE respactive = i2 WITH protect, noconstant(0)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    DECLARE pewhere = vc WITH protect, noconstant("1 = 1")
    DECLARE ebegindate = dq8 WITH protect, noconstant(cnvtdatetime(0.0))
    DECLARE eenddate = dq8 WITH protect, noconstant(cnvtdatetime("31-dec-2100 23:59:59"))
    DECLARE gtype = f8 WITH protect, noconstant(0.0)
    DECLARE gbegdate = dq8 WITH protect, noconstant(cnvtdatetime(0.0))
    DECLARE genddate = dq8 WITH protect, noconstant(cnvtdatetime(0.0))
    DECLARE addguarantor = i2 WITH protect, noconstant(0)
    DECLARE patientid = f8 WITH protect, noconstant(0.0)
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    DECLARE responsibilitytype = f8 WITH protect, noconstant(0.0)
    SET stat = initrec(prrawguarresp)
    SET guarindex = size(prrawguarresp->guarantors,5)
    IF (ppftencntrid <= 0.0
     AND pencntrid <= 0.0)
     SET rtnval = false
    ELSE
     IF (ppftencntrid > 0.0)
      CALL getfinancialservicedatesforguarresps(ppftencntrid,encntrid,ebegindate,eenddate)
      SET prrawguarresp->begindate = ebegindate
      SET prrawguarresp->enddate = eenddate
      SET pewhere = build2("pe.pft_encntr_id = ",ppftencntrid)
     ELSE
      SET encntrid = pencntrid
     ENDIF
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       account a,
       encounter e,
       encntr_org_reltn er,
       guar_fin_resp_reltn gr,
       guar_financial_resp gf
      PLAN (e
       WHERE e.encntr_id=encntrid
        AND e.active_ind=true)
       JOIN (er
       WHERE er.encntr_id=e.encntr_id
        AND er.encntr_org_reltn_cd=cs352_guarantor)
       JOIN (gr
       WHERE gr.parent_entity_id=er.encntr_org_reltn_id
        AND gr.parent_entity_name="ENCNTR_ORG_RELTN")
       JOIN (gf
       WHERE gf.guar_financial_resp_id=gr.guar_financial_resp_id)
       JOIN (pe
       WHERE (pe.encntr_id= Outerjoin(e.encntr_id))
        AND (pe.active_ind= Outerjoin(true))
        AND parser(pewhere))
       JOIN (a
       WHERE (a.acct_id= Outerjoin(pe.acct_id))
        AND (a.active_ind= Outerjoin(true)) )
      ORDER BY a.billing_entity_id, e.person_id, gr.guar_financial_resp_id,
       er.organization_id
      HEAD a.billing_entity_id
       prrawguarresp->billingentityid = a.billing_entity_id
      HEAD e.person_id
       prrawguarresp->patientid = e.person_id
      HEAD gr.guar_financial_resp_id
       respactive = band(er.active_ind,band(gr.active_ind,gf.active_ind)), gtype = evaluate(gf
        .guar_financial_resp_type_cd,0.0,gr.guar_financial_resp_type_cd,gf
        .guar_financial_resp_type_cd), gbegdate = evaluate(gf.guar_financial_resp_type_cd,0.0,gr
        .beg_effective_dt_tm,gf.beg_effective_dt_tm),
       genddate = evaluate(gf.guar_financial_resp_type_cd,0.0,gr.end_effective_dt_tm,gf
        .end_effective_dt_tm), orgguarantorid = er.organization_id, addguarantor = true
      DETAIL
       respactive = band(respactive,er.active_ind)
       IF (respactive=true
        AND responsibilitytype=0.0)
        responsibilitytype = gf.fin_resp_qual_cd
       ENDIF
       IF (responsibilitytype != gf.fin_resp_qual_cd
        AND responsibilitytype != 0.0)
        CALL addtracemessage("getGuarantorFinancialResp",
        "Guarantor Responsibility only supports one type at the time. (Daily Amount OR Percentage)"),
        rtnval = false
       ENDIF
       IF (((ppftencntrid=0.0) OR (ebegindate <= genddate
        AND gbegdate <= eenddate)) )
        IF (addguarantor)
         guarindex += 1, stat = alter3(prrawguarresp->guarantors,guarindex), stat = assign(validate(
           prrawguarresp->guarantors[guarindex].guarorgid),orgguarantorid),
         prrawguarresp->guarantors[guarindex].coguarantortypecd = gtype, prrawguarresp->guarantors[
         guarindex].begineffectivedate = gbegdate, prrawguarresp->guarantors[guarindex].
         endeffectivedate = genddate,
         prrawguarresp->guarantors[guarindex].guarfinancialrespid = gr.guar_financial_resp_id,
         prrawguarresp->guarantors[guarindex].finrespcd = gf.fin_resp_qual_cd, addguarantor = false
        ENDIF
        prrawguarresp->guarantors[guarindex].finrespvalue = evaluate(respactive,true,gf
         .fin_resp_value,0.0), prrawguarresp->guarantors[guarindex].activeind = respactive
       ENDIF
      FOOT  gr.guar_financial_resp_id
       respactive = true, orgguarantorid = 0.0, addguarantor = false
      WITH nocounter
     ;end select
     SET guarindex = size(prrawguarresp->guarantors,5)
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       account a,
       encounter e,
       encntr_person_reltn er,
       guar_fin_resp_reltn gr,
       guar_financial_resp gf
      PLAN (e
       WHERE e.encntr_id=encntrid
        AND e.active_ind=true)
       JOIN (er
       WHERE er.encntr_id=e.encntr_id
        AND er.person_reltn_type_cd=cs351_defguar_cd)
       JOIN (gr
       WHERE gr.parent_entity_id=er.encntr_person_reltn_id
        AND gr.parent_entity_name="ENCNTR_PERSON_RELTN")
       JOIN (gf
       WHERE gf.guar_financial_resp_id=gr.guar_financial_resp_id)
       JOIN (pe
       WHERE (pe.encntr_id= Outerjoin(e.encntr_id))
        AND (pe.active_ind= Outerjoin(true))
        AND parser(pewhere))
       JOIN (a
       WHERE (a.acct_id= Outerjoin(pe.acct_id))
        AND (a.active_ind= Outerjoin(true)) )
      ORDER BY a.billing_entity_id, e.person_id, gr.guar_financial_resp_id,
       er.related_person_id
      HEAD a.billing_entity_id
       prrawguarresp->billingentityid = a.billing_entity_id
      HEAD e.person_id
       prrawguarresp->patientid = e.person_id
      HEAD gr.guar_financial_resp_id
       respactive = band(er.active_ind,band(gr.active_ind,gf.active_ind)), gtype = evaluate(gf
        .guar_financial_resp_type_cd,0.0,gr.guar_financial_resp_type_cd,gf
        .guar_financial_resp_type_cd), gbegdate = evaluate(gf.guar_financial_resp_type_cd,0.0,gr
        .beg_effective_dt_tm,gf.beg_effective_dt_tm),
       genddate = evaluate(gf.guar_financial_resp_type_cd,0.0,gr.end_effective_dt_tm,gf
        .end_effective_dt_tm), guarantorid1 = er.related_person_id, addguarantor = true
      DETAIL
       respactive = band(respactive,er.active_ind)
       IF (respactive=true
        AND responsibilitytype=0.0)
        responsibilitytype = gf.fin_resp_qual_cd
       ENDIF
       IF (responsibilitytype != gf.fin_resp_qual_cd
        AND responsibilitytype != 0.0)
        CALL addtracemessage("getGuarantorFinancialResp",
        "Guarantor Responsibility only supports one type at the time. (Daily Amount OR Percentage)"),
        rtnval = false
       ENDIF
       IF (((ppftencntrid=0.0) OR (ebegindate <= genddate
        AND gbegdate <= eenddate)) )
        IF (addguarantor)
         guarindex += 1, stat = alter3(prrawguarresp->guarantors,guarindex), prrawguarresp->
         guarantors[guarindex].guarantorid1 = guarantorid1,
         prrawguarresp->guarantors[guarindex].coguarantortypecd = gtype, prrawguarresp->guarantors[
         guarindex].begineffectivedate = gbegdate, prrawguarresp->guarantors[guarindex].
         endeffectivedate = genddate,
         prrawguarresp->guarantors[guarindex].guarfinancialrespid = gr.guar_financial_resp_id,
         prrawguarresp->guarantors[guarindex].finrespcd = gf.fin_resp_qual_cd, addguarantor = false
        ENDIF
        prrawguarresp->guarantors[guarindex].finrespvalue = evaluate(respactive,true,gf
         .fin_resp_value,0.0), prrawguarresp->guarantors[guarindex].activeind = respactive
        IF (guarantorid1 != er.related_person_id)
         prrawguarresp->guarantors[guarindex].guarantorid2 = er.related_person_id
        ENDIF
       ENDIF
      FOOT  gr.guar_financial_resp_id
       respactive = true, guarantorid1 = 0.0, addguarantor = false
      WITH nocounter
     ;end select
     FOR (guarindex = 1 TO size(prrawguarresp->guarantors,5))
      SET prrawguarresp->guarantors[guarindex].guarrespacctid = getguarantorrespaccountid(
       prrawguarresp->guarantors[guarindex].guarantorid1,prrawguarresp->guarantors[guarindex].
       guarantorid2,validate(prrawguarresp->guarantors[guarindex].guarorgid,0.0),prrawguarresp->
       patientid,prrawguarresp->billingentityid,
       pskipcreateacct)
      IF ((prrawguarresp->guarantors[guarindex].guarrespacctid <= 0.0)
       AND pskipcreateacct=false)
       SET stat = initrec(prrawguarresp)
       CALL addtracemessage("getGuarantorFinancialResp","Couldn't create guarantor account id")
       SET rtnval = false
      ENDIF
     ENDFOR
    ENDIF
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorrespaccountid,char(128))=char(128))
  SUBROUTINE (getguarantorrespaccountid(pguarantorid1=f8,pguarantorid2=f8,pguarorgid=f8,ppatientid=f8,
   pbillingentityid=f8,pskipcreateacct=i2) =f8 WITH protect)
    DECLARE guaracctid = f8 WITH protect, noconstant(0.0)
    RECORD createguarrequest(
      1 billingentityid = f8
      1 guarantorid1 = f8
      1 guarantorid2 = f8
      1 guarorgid = f8
      1 patientid = f8
      1 skipcreateacct = i2
    ) WITH protect
    RECORD createguarreply(
      1 accountid = f8
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM (dummyt d  WITH seq = value(size(rawguarresponsibilities->guarantors,5)))
     PLAN (d
      WHERE (rawguarresponsibilities->guarantors[d.seq].guarantorid1=pguarantorid1)
       AND (rawguarresponsibilities->guarantors[d.seq].guarantorid2=pguarantorid2)
       AND (rawguarresponsibilities->guarantors[d.seq].guarrespacctid != 0.0)
       AND validate(rawguarresponsibilities->guarantors[d.seq].guarorgid,0.0)=pguarorgid)
     HEAD REPORT
      guaracctid = rawguarresponsibilities->guarantors[d.seq].guarrespacctid
     WITH nocounter
    ;end select
    IF (guaracctid=0.0)
     SET createguarrequest->billingentityid = pbillingentityid
     SET createguarrequest->guarantorid1 = pguarantorid1
     SET createguarrequest->guarantorid2 = pguarantorid2
     SET createguarrequest->guarorgid = pguarorgid
     SET createguarrequest->patientid = ppatientid
     SET createguarrequest->skipcreateacct = pskipcreateacct
     IF (validate(debug,- (1)) > 0)
      CALL echorecord(createguarrequest)
     ENDIF
     EXECUTE pft_create_guarantor_acct  WITH replace("REQUEST",createguarrequest), replace("REPLY",
      createguarreply)
     IF ((createguarreply->status_data.status="S"))
      SET guaracctid = createguarreply->accountid
     ELSE
      CALL copytracemessages(createguarreply,reply)
      CALL addtracemessage("getGuarantorRespAccountId",
       "Error occured while calling the pft_create_guarantor_acct script")
     ENDIF
    ENDIF
    RETURN(guaracctid)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorbyencntrid,char(128))=char(128))
  SUBROUTINE (getguarantorbyencntrid(pencounterid=f8,prguarantors=vc(ref)) =i2)
    DECLARE gidx = i4 WITH protect, noconstant(0)
    DECLARE pos = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE p1name = vc WITH protect, noconstant("")
    DECLARE p2name = vc WITH protect, noconstant("")
    DECLARE orgname = vc WITH protect, noconstant("")
    SET gidx = size(prguarantors->guarantorresps,5)
    IF ( NOT (getguarantorfinancialresp(0.0,pencounterid,cnvtdatetime(0.0),rawguarresponsibilities,
     true)))
     CALL logmessage("getGuarantorInfo",
      "Error getting guarantors found from getGuarantorFinancialResp",log_debug)
     RETURN(false)
    ENDIF
    IF (size(rawguarresponsibilities->guarantors,5) > 0)
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = value(size(rawguarresponsibilities->guarantors,5))),
       person p1,
       person p2,
       organization o
      PLAN (d
       WHERE (rawguarresponsibilities->guarantors[d.seq].activeind=true))
       JOIN (p1
       WHERE (p1.person_id= Outerjoin(rawguarresponsibilities->guarantors[d.seq].guarantorid1)) )
       JOIN (p2
       WHERE (p2.person_id= Outerjoin(rawguarresponsibilities->guarantors[d.seq].guarantorid2)) )
       JOIN (o
       WHERE (o.organization_id= Outerjoin(rawguarresponsibilities->guarantors[d.seq].guarorgid)) )
      ORDER BY p1.name_full_formatted, p2.name_full_formatted, p1.person_id,
       p2.person_id, o.org_name, o.organization_id
      HEAD REPORT
       prguarantors->billingentityid = rawguarresponsibilities->billingentityid, prguarantors->
       patientid = rawguarresponsibilities->patientid
      HEAD p1.person_id
       p1name = p1.name_full_formatted
      HEAD p2.person_id
       p2name = evaluate(p2.person_id,0.0,"",concat("; ",p2.name_full_formatted))
      HEAD o.organization_id
       orgname = o.org_name
      DETAIL
       pos = locateval(idx,1,size(prguarantors->guarantorresps,5),rawguarresponsibilities->
        guarantors[d.seq].guarantorid1,prguarantors->guarantorresps[idx].guarantorid1,
        rawguarresponsibilities->guarantors[d.seq].guarantorid2,prguarantors->guarantorresps[idx].
        guarantorid2,rawguarresponsibilities->guarantors[d.seq].guarrespacctid,prguarantors->
        guarantorresps[idx].guarantoraccountid,rawguarresponsibilities->guarantors[d.seq].guarorgid,
        prguarantors->guarantorresps[idx].guarantororgid)
       IF (pos=0
        AND (((rawguarresponsibilities->guarantors[d.seq].guarantorid1 > 0.0)) OR ((((
       rawguarresponsibilities->guarantors[d.seq].guarantorid2 > 0.0)) OR ((rawguarresponsibilities->
       guarantors[d.seq].guarorgid > 0.0))) )) )
        gidx += 1, stat = alterlist(prguarantors->guarantorresps,gidx)
        IF (((p1.person_id > 0.0) OR (p2.person_id > 0.0)) )
         prguarantors->guarantorresps[gidx].guarantorname = trim(build2(trim(p1name,7),trim(p2name,7)
           ),3)
        ELSEIF (o.organization_id > 0.0)
         prguarantors->guarantorresps[gidx].guarantorname = trim(orgname,3)
        ENDIF
        prguarantors->guarantorresps[gidx].guarantoraccountid = rawguarresponsibilities->guarantors[d
        .seq].guarrespacctid, prguarantors->guarantorresps[gidx].guarantorid1 =
        rawguarresponsibilities->guarantors[d.seq].guarantorid1, prguarantors->guarantorresps[gidx].
        guarantorid2 = rawguarresponsibilities->guarantors[d.seq].guarantorid2,
        prguarantors->guarantorresps[gidx].guarantororgid = rawguarresponsibilities->guarantors[d.seq
        ].guarorgid
       ENDIF
      WITH nocounter
     ;end select
    ENDIF
    SET stat = initrec(rawguarresponsibilities)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorrespsforencntr,char(128))=char(128))
  SUBROUTINE (getguarantorrespsforencntr(ppftencntrid=f8,pencntrid=f8) =i2)
    DECLARE gidx = i4 WITH protect, noconstant(0)
    DECLARE aidx = i4 WITH protect, noconstant(0)
    DECLARE pos = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE p1name = vc WITH protect, noconstant("")
    DECLARE p2name = vc WITH protect, noconstant("")
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    SET gidx = size(guarantors->guarantorresps,5)
    IF ( NOT (getguarantorfinancialresp(ppftencntrid,pencntrid,cnvtdatetime(0.0),
     rawguarresponsibilities,false)))
     CALL logmessage("getGuarantorRespsForEncntr",
      "Error retrieving encounter guarantors from getGuarantorFinancialResp",log_debug)
     SET rtnval = false
    ENDIF
    IF ((guarantors->billingentityid > 0.0)
     AND (guarantors->billingentityid != rawguarresponsibilities->billingentityid))
     CALL logmessage("getGuarantorRespsForEncntr",
      "Error Encounter Billing Entity Id doesn't match Guarantors Record's Billing Entity Id",
      log_debug)
     SET rtnval = false
    ENDIF
    IF (rtnval
     AND size(rawguarresponsibilities->guarantors,5) > 0)
     SET guarantors->billingentityid = rawguarresponsibilities->billingentityid
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = value(size(rawguarresponsibilities->guarantors,5))),
       person p1,
       person p2
      PLAN (d
       WHERE (rawguarresponsibilities->guarantors[d.seq].activeind=true))
       JOIN (p1
       WHERE (p1.person_id=rawguarresponsibilities->guarantors[d.seq].guarantorid1))
       JOIN (p2
       WHERE (p2.person_id=rawguarresponsibilities->guarantors[d.seq].guarantorid2))
      ORDER BY p1.name_full_formatted, p2.name_full_formatted, p1.person_id,
       p2.person_id
      HEAD p1.person_id
       p1name = p1.name_full_formatted
      HEAD p2.person_id
       p2name = evaluate(p2.person_id,0.0,"",concat("; ",p2.name_full_formatted))
      DETAIL
       IF ((((rawguarresponsibilities->guarantors[d.seq].guarantorid1 > 0.0)) OR ((
       rawguarresponsibilities->guarantors[d.seq].guarantorid2 > 0.0))) )
        pos = locateval(idx,1,size(guarantors->guarantorresps,5),rawguarresponsibilities->guarantors[
         d.seq].guarantorid1,guarantors->guarantorresps[idx].guarid1,
         rawguarresponsibilities->guarantors[d.seq].guarantorid2,guarantors->guarantorresps[idx].
         guarid2)
        IF (pos=0)
         gidx = (size(guarantors->guarantorresps,5)+ 1), stat = alterlist(guarantors->guarantorresps,
          gidx), guarantors->guarantorresps[gidx].guarname = trim(build2(trim(p1name,7),trim(p2name,7
            )),3),
         guarantors->guarantorresps[gidx].guarid1 = rawguarresponsibilities->guarantors[d.seq].
         guarantorid1, guarantors->guarantorresps[gidx].guarid2 = rawguarresponsibilities->
         guarantors[d.seq].guarantorid2
        ELSE
         gidx = pos
        ENDIF
        IF (gidx > 0)
         pos = locateval(idx,1,size(guarantors->guarantorresps[gidx].guaraccts,5),
          rawguarresponsibilities->guarantors[d.seq].guarrespacctid,guarantors->guarantorresps[gidx].
          guaraccts[idx].acctid,
          rawguarresponsibilities->patientid,guarantors->guarantorresps[gidx].guaraccts[idx].
          patientid)
         IF (pos=0)
          aidx = (size(guarantors->guarantorresps[gidx].guaraccts,5)+ 1), stat = alterlist(guarantors
           ->guarantorresps[gidx].guaraccts,aidx), guarantors->guarantorresps[gidx].guaraccts[aidx].
          acctid = rawguarresponsibilities->guarantors[d.seq].guarrespacctid,
          guarantors->guarantorresps[gidx].guaraccts[aidx].patientid = rawguarresponsibilities->
          patientid
         ENDIF
        ENDIF
       ENDIF
      WITH nocounter
     ;end select
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = value(size(rawguarresponsibilities->guarantors,5))),
       organization o
      PLAN (d
       WHERE (rawguarresponsibilities->guarantors[d.seq].activeind=true))
       JOIN (o
       WHERE (o.organization_id=rawguarresponsibilities->guarantors[d.seq].guarorgid))
      ORDER BY o.org_name, o.organization_id
      HEAD o.organization_id
       IF ((rawguarresponsibilities->guarantors[d.seq].guarorgid > 0.0))
        pos = locateval(idx,1,size(guarantors->guarantorresps,5),rawguarresponsibilities->guarantors[
         d.seq].guarorgid,guarantors->guarantorresps[idx].guarorgid)
        IF (pos=0)
         gidx = (size(guarantors->guarantorresps,5)+ 1), stat = alterlist(guarantors->guarantorresps,
          gidx), guarantors->guarantorresps[gidx].guarname = trim(o.org_name,3),
         guarantors->guarantorresps[gidx].guarorgid = rawguarresponsibilities->guarantors[d.seq].
         guarorgid
        ELSE
         gidx = pos
        ENDIF
        IF (gidx > 0)
         pos = locateval(idx,1,size(guarantors->guarantorresps,5),rawguarresponsibilities->
          guarantors[d.seq].guarrespacctid,guarantors->guarantorresps[gidx].guaraccts[idx].acctid,
          rawguarresponsibilities->patientid,guarantors->guarantorresps[gidx].guaraccts[idx].
          patientid)
         IF (pos=0)
          aidx = (size(guarantors->guarantorresps[gidx].guaraccts,5)+ 1), stat = alterlist(guarantors
           ->guarantorresps[gidx].guaraccts,aidx), guarantors->guarantorresps[gidx].guaraccts[aidx].
          acctid = rawguarresponsibilities->guarantors[d.seq].guarrespacctid,
          guarantors->guarantorresps[gidx].guaraccts[aidx].patientid = rawguarresponsibilities->
          patientid
         ENDIF
        ENDIF
       ENDIF
      WITH nocounter
     ;end select
    ENDIF
    IF (size(guarantors->guarantorresps,5) <= 0)
     SET rtnval = false
    ENDIF
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(getfinancialservicedatesforguarresps,char(128))=char(128))
  SUBROUTINE (getfinancialservicedatesforguarresps(ppftencntrid=f8,prencntrid=f8(ref),prbegdate=dq8(
    ref),prenddate=dq8(ref)) =i2)
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    IF (ppftencntrid <= 0.0)
     SET rtnval = false
    ELSE
     SELECT INTO "nl:"
      e.encntr_id, e.reg_dt_tm, e.disch_dt_tm,
      pe.recur_current_month, pe.recur_current_year, a.billing_entity_id,
      tmp_getfinsrvdt4guarresps_cmaxdate = max(c.service_dt_tm), tmp_getfinsrvdt4guarresps_cmindate
       = min(c.service_dt_tm)
      FROM pft_encntr pe,
       encounter e,
       account a,
       pft_charge pc,
       charge c
      PLAN (pe
       WHERE pe.pft_encntr_id=ppftencntrid
        AND pe.active_ind=true)
       JOIN (e
       WHERE e.encntr_id=pe.encntr_id
        AND e.active_ind=true)
       JOIN (a
       WHERE a.acct_id=pe.acct_id
        AND a.active_ind=true)
       JOIN (pc
       WHERE (pc.pft_encntr_id= Outerjoin(pe.pft_encntr_id))
        AND (pc.active_ind= Outerjoin(true)) )
       JOIN (c
       WHERE (c.charge_item_id= Outerjoin(pc.charge_item_id))
        AND (c.active_ind= Outerjoin(true)) )
      GROUP BY e.reg_dt_tm, e.disch_dt_tm, pe.recur_current_month,
       pe.recur_current_year, a.billing_entity_id, e.encntr_id
      FOOT  e.reg_dt_tm
       prencntrid = e.encntr_id, rtnval = calculatefinancialservicedatesforguarresps(e.reg_dt_tm,e
        .disch_dt_tm,pe.recur_current_month,pe.recur_current_year,tmp_getfinsrvdt4guarresps_cmaxdate,
        tmp_getfinsrvdt4guarresps_cmindate,prbegdate,prenddate), prbegdate =
       getfacilitybeginningofday(a.billing_entity_id,prbegdate),
       prenddate = getfacilityendofday(a.billing_entity_id,prenddate)
      WITH nocounter
     ;end select
    ENDIF
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(calculatefinancialservicedatesforguarresps,char(128))=char(128))
  SUBROUTINE (calculatefinancialservicedatesforguarresps(pregdate=dq8,pdisdate=dq8,precurmonth=i4,
   precuryear=i4,pchrgmaxdate=dq8,pchrgmindate=dq8,prbegdate=dq8(ref),prenddate=dq8(ref)) =i2)
    DECLARE startdate = vc WITH noconstant("")
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    IF (validate(debug,- (1)) > 0)
     CALL echo("Before Calculating Service Dates")
     CALL echo(build2("    pRegDate: ",format(pregdate,"MM/dd/yy HH:MM;;d"),"     pDisDate: ",format(
        pdisdate,"MM/dd/yy HH:MM;;d")," pRecurMonth: ",
       precurmonth," pRecurYear: ",precuryear))
     CALL echo(build2("pChrgMaxDate: ",format(pchrgmaxdate,"MM/dd/yy HH:MM;;d")," pChrgMinDate: ",
       format(pchrgmindate,"MM/dd/yy HH:MM;;d")," prBegDate: ",
       format(prbegdate,"MM/dd/yy HH:MM;;d")," prEndDate: ",format(prenddate,"MM/dd/yy HH:MM;;d")))
    ENDIF
    SET prbegdate = pregdate
    SET prenddate = pdisdate
    IF (precurmonth > 0
     AND precuryear > 0)
     IF (((month(prbegdate) != precurmonth) OR (year(prbegdate) != precuryear)) )
      SET startdate = concat(cnvtstring(precurmonth,2,0,r),"01",cnvtstring(precuryear))
      SET prbegdate = cnvtdatetime(cnvtdate(startdate),0)
     ENDIF
     IF (((precurmonth != month(prenddate)) OR (precuryear != year(prenddate))) )
      SET prenddate = datetimefind(cnvtdatetime(cnvtdate(prbegdate),0),"M","E","E")
     ENDIF
    ENDIF
    SET prenddate = evaluate(prenddate,0.0,cnvtdatetime("31-dec-2100 23:59:59"),prenddate)
    IF (((pchrgmindate > 0.0
     AND pchrgmindate < prbegdate) OR (prbegdate=0.0
     AND pchrgmindate > 0.0)) )
     SET prbegdate = pchrgmindate
    ENDIF
    IF (pchrgmaxdate > prenddate)
     SET prenddate = pchrgmaxdate
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL echo("After Calculating Service Dates")
     CALL echo(build2("    pRegDate: ",format(pregdate,"MM/dd/yy HH:MM;;d"),"     pDisDate: ",format(
        pdisdate,"MM/dd/yy HH:MM;;d")," pRecurMonth: ",
       precurmonth," pRecurYear: ",precuryear))
     CALL echo(build2("pChrgMaxDate: ",format(pchrgmaxdate,"MM/dd/yy HH:MM;;d")," pChrgMinDate: ",
       format(pchrgmindate,"MM/dd/yy HH:MM;;d")," prBegDate: ",
       format(prbegdate,"MM/dd/yy HH:MM;;d")," prEndDate: ",format(prenddate,"MM/dd/yy HH:MM;;d")))
    ENDIF
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(ismultiguarantor2match,char(128))=char(128))
  SUBROUTINE (ismultiguarantor2match(ptablepersonid=f8,precordpersonid=f8) =i2)
   IF (((ptablepersonid <= 0.0
    AND precordpersonid <= 0.0) OR (ptablepersonid=precordpersonid
    AND precordpersonid > 0.0)) )
    RETURN(true)
   ENDIF
   RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(publishguarantorworkflowevent,char(128))=char(128))
  SUBROUTINE (publishguarantorworkflowevent(ppftencntrid=f8) =i2)
    IF (checkprg("PFT_PUBLISH_EVENT")=0)
     RETURN(true)
    ENDIF
    IF ( NOT (validate(cs23369_wfevent)))
     DECLARE cs23369_wfevent = f8 WITH protect, noconstant(getcodevalue(23369,"WFEVENT",1))
    ENDIF
    IF ( NOT (validate(cs29322_guarnotfound)))
     DECLARE cs29322_guarnotfound = f8 WITH protect, constant(getcodevalue(29322,"GUARNOTFOUND",1))
    ENDIF
    RECORD publisheventrequest(
      1 eventlist[*]
        2 entitytypekey = vc
        2 entityid = f8
        2 eventtypecd = f8
        2 eventcd = f8
        2 params[*]
          3 paramcd = f8
          3 paramvalue = f8
    ) WITH protect
    RECORD publisheventreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET stat = alterlist(publisheventrequest->eventlist,1)
    SET publisheventrequest->eventlist[1].entitytypekey = "PFTENCNTR"
    SET publisheventrequest->eventlist[1].entityid = ppftencntrid
    SET publisheventrequest->eventlist[1].eventcd = cs29322_guarnotfound
    SET publisheventrequest->eventlist[1].eventtypecd = cs23369_wfevent
    EXECUTE pft_publish_event  WITH replace("REQUEST",publisheventrequest), replace("REPLY",
     publisheventreply)
    IF ((publisheventreply->status_data.status != "S"))
     CALL logmessage("publishGuarantorWorkflowEvent","Call to pft_publish_event failed",log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getprimaryguarantorsequence,char(128))=char(128))
  SUBROUTINE (getprimaryguarantorsequence(prprimaryguarseq=i4(ref)) =i2)
   SELECT INTO "nl:"
    FROM code_value_extension cve
    PLAN (cve
     WHERE cve.code_value=cs20790_priorityseq
      AND cve.code_set=20790
      AND cve.field_name="OPTION")
    DETAIL
     prprimaryguarseq = cnvtint(cve.field_value)
    WITH nocounter
   ;end select
   RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getorgguarantorbyencounter,char(128))=char(128))
  SUBROUTINE (getorgguarantorbyencounter(pencntrid=f8,prguarantorid=f8(ref)) =i2)
    DECLARE adt_constant = i4 WITH protect, constant(99)
    DECLARE primaryguarseq = i4 WITH protect, noconstant(0)
    DECLARE internalguarind = i4 WITH protect, noconstant(false)
    SET prguarantorid = 0.0
    SET stat = getprimaryguarantorsequence(primaryguarseq)
    SELECT INTO "nl:"
     FROM encntr_org_reltn eor,
      organization o
     PLAN (eor
      WHERE eor.encntr_id=pencntrid
       AND eor.encntr_org_reltn_cd=cs352_guarantor
       AND eor.priority_seq IN (primaryguarseq, adt_constant)
       AND eor.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND eor.end_effective_dt_tm > cnvtdatetime(sysdate)
       AND eor.active_ind=true)
      JOIN (o
      WHERE o.organization_id=eor.organization_id
       AND o.active_ind=true)
     DETAIL
      IF (eor.priority_seq=primaryguarseq)
       prguarantorid = o.organization_id, internalguarind = true
      ELSEIF (eor.priority_seq=adt_constant
       AND  NOT (internalguarind))
       prguarantorid = o.organization_id
      ENDIF
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getorgguarantorbyfinencounter,char(128))=char(128))
  SUBROUTINE (getorgguarantorbyfinencounter(ppftencntrid=f8,prguarantorid=f8(ref)) =i2)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    SET stat = getencounterbyfinancialencounter(ppftencntrid,encntrid)
    SET stat = getorgguarantorbyencounter(encntrid,prguarantorid)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getencounterbyfinancialencounter,char(128))=char(128))
  SUBROUTINE (getencounterbyfinancialencounter(ppftencntrid=f8,prencntrid=f8(ref)) =i2)
    SET prencntrid = 0.0
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE pe.pft_encntr_id=ppftencntrid
       AND pe.active_ind=true)
     ORDER BY pe.encntr_id
     HEAD pe.encntr_id
      prencntrid = pe.encntr_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfinanciallyresponsiblepersonguarantorsforencounter,char(128))=char(128))
  SUBROUTINE (getfinanciallyresponsiblepersonguarantorsforencounter(prencounterlist=vc(ref),prguars=
   vc(ref)) =i2)
    DECLARE guarcnt = i4 WITH protect, noconstant(size(prguars->guarlist,5))
    DECLARE cboscnt = i4 WITH protect, noconstant(size(prencounterlist->encounters,5))
    DECLARE encntridx = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM encounter e,
      encntr_person_reltn epr,
      person p,
      guar_fin_resp_reltn gfrr,
      guar_financial_resp gfr
     PLAN (e
      WHERE expand(encntridx,1,cboscnt,e.encntr_id,prencounterlist->encounters[encntridx].encntrid)
       AND e.active_ind=true)
      JOIN (epr
      WHERE epr.encntr_id=e.encntr_id
       AND epr.person_reltn_type_cd=cs351_defguar_cd
       AND epr.active_ind=true)
      JOIN (p
      WHERE p.person_id=epr.related_person_id
       AND p.active_ind=true)
      JOIN (gfrr
      WHERE gfrr.parent_entity_id=epr.encntr_person_reltn_id
       AND gfrr.parent_entity_name="ENCNTR_PERSON_RELTN"
       AND gfrr.active_ind=true)
      JOIN (gfr
      WHERE gfr.guar_financial_resp_id=gfrr.guar_financial_resp_id
       AND gfr.fin_resp_value >= 0.0
       AND gfr.active_ind=true)
     ORDER BY p.person_id
     HEAD p.person_id
      guarcnt += 1, stat = alterlist(prguars->guarlist,guarcnt), prguars->guarlist[guarcnt].personid
       = p.person_id
      IF (gfr.guar_financial_resp_type_cd=cs387572_joint)
       prguars->guarlist[guarcnt].jointresponsibilityind = true
      ENDIF
     WITH nocounter, expand = 1
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfinanciallyresponsibleorganizationguarantorsforencounter,char(128))=char(128))
  SUBROUTINE (getfinanciallyresponsibleorganizationguarantorsforencounter(prencounterlist=vc(ref),
   prguars=vc(ref)) =i2)
    DECLARE guarcnt = i4 WITH protect, noconstant(size(prguars->guarlist,5))
    DECLARE cboscnt = i4 WITH protect, noconstant(size(prencounterlist->encounters,5))
    DECLARE encntridx = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM encounter e,
      encntr_org_reltn eor,
      organization o,
      guar_fin_resp_reltn gfrr,
      guar_financial_resp gfr
     PLAN (e
      WHERE expand(encntridx,1,cboscnt,e.encntr_id,prencounterlist->encounters[encntridx].encntrid)
       AND e.encntr_id > 0.0
       AND e.active_ind=true)
      JOIN (eor
      WHERE eor.encntr_id=e.encntr_id
       AND eor.encntr_org_reltn_cd=cs352_guarantor
       AND eor.active_ind=true)
      JOIN (o
      WHERE o.organization_id=eor.organization_id
       AND o.active_ind=true)
      JOIN (gfrr
      WHERE gfrr.parent_entity_id=eor.encntr_org_reltn_id
       AND gfrr.parent_entity_name="ENCNTR_ORG_RELTN"
       AND gfrr.active_ind=true)
      JOIN (gfr
      WHERE gfr.guar_financial_resp_id=gfrr.guar_financial_resp_id
       AND gfr.fin_resp_value >= 0.0
       AND gfr.active_ind=true)
     ORDER BY o.organization_id
     HEAD o.organization_id
      guarcnt += 1, stat = alterlist(prguars->guarlist,guarcnt), prguars->guarlist[guarcnt].orgid = o
      .organization_id
      IF (gfr.guar_financial_resp_type_cd=cs387572_joint)
       prguars->guarlist[guarcnt].jointresponsibilityind = true
      ENDIF
     WITH nocounter, expand = 1
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfinanciallyresponsibleguarantorsforencounter,char(128))=char(128))
  SUBROUTINE (getfinanciallyresponsibleguarantorsforencounter(pencntrid=f8,prguars=vc(ref)) =i2)
    SET stat = alterlist(prencounterlist->encounters,1)
    SET prencounterlist->encounters[1].encntrid = pencntrid
    SET stat = getfinanciallyresponsiblepersonguarantorsforencounter(prencounterlist,prguars)
    SET stat = getfinanciallyresponsibleorganizationguarantorsforencounter(prencounterlist,prguars)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfinanciallyresponsibleguarantorsforencounterlist,char(128))=char(128))
  SUBROUTINE (getfinanciallyresponsibleguarantorsforencounterlist(prguars=vc(ref),prencounterlist=vc(
    ref)) =i2)
    SET stat = getfinanciallyresponsiblepersonguarantorsforencounter(prencounterlist,prguars)
    SET stat = getfinanciallyresponsibleorganizationguarantorsforencounter(prencounterlist,prguars)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfinanciallyresponsibleguarantorsforfinancialencounter,char(128))=char(128))
  SUBROUTINE (getfinanciallyresponsibleguarantorsforfinancialencounter(ppftencntrid=f8,prguars=vc(ref
    )) =i2)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    SET stat = getencounterbyfinancialencounter(ppftencntrid,encntrid)
    SET stat = getfinanciallyresponsibleguarantorsforencounter(encntrid,prguars)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getprimarypersonguarantorforencounter,char(128))=char(128))
  SUBROUTINE (getprimarypersonguarantorforencounter(pencntrid=f8,prguarantorid=f8(ref),prexternalind=
   i2(ref)) =i2)
    DECLARE adt_constant = i4 WITH protect, constant(99)
    DECLARE primaryguarantorseq = i4 WITH protect, noconstant(0)
    SET prguarantorid = 0.0
    SET prexternalind = false
    SET stat = getprimaryguarantorsequence(primaryguarantorseq)
    SELECT INTO "nl:"
     FROM encounter e,
      encntr_person_reltn epr,
      person p
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
      JOIN (epr
      WHERE epr.encntr_id=pencntrid
       AND epr.person_reltn_type_cd=cs351_defguar_cd
       AND epr.priority_seq IN (primaryguarantorseq, adt_constant)
       AND epr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND epr.end_effective_dt_tm > cnvtdatetime(sysdate)
       AND epr.active_ind=true)
      JOIN (p
      WHERE p.person_id=epr.related_person_id
       AND p.active_ind=true)
     ORDER BY p.person_id
     HEAD p.person_id
      IF (epr.priority_seq=adt_constant
       AND prguarantorid <= 0.0)
       prguarantorid = p.person_id, prexternalind = true
      ENDIF
      IF (epr.priority_seq=primaryguarantorseq)
       prguarantorid = p.person_id, prexternalind = false
      ENDIF
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getprimaryorganizationguarantorforencounter,char(128))=char(128))
  SUBROUTINE (getprimaryorganizationguarantorforencounter(pencntrid=f8,prguarantorid=f8(ref),
   prexternalind=i2(ref)) =i2)
    DECLARE adt_constant = i4 WITH protect, constant(99)
    DECLARE primaryguarantorseq = i4 WITH protect, noconstant(0)
    SET prguarantorid = 0.0
    SET prexternalind = false
    SET stat = getprimaryguarantorsequence(primaryguarantorseq)
    SELECT INTO "nl:"
     FROM encounter e,
      encntr_org_reltn eor,
      organization o
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
      JOIN (eor
      WHERE eor.encntr_id=pencntrid
       AND eor.encntr_org_reltn_cd=cs352_guarantor
       AND eor.priority_seq IN (primaryguarantorseq, adt_constant)
       AND eor.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND eor.end_effective_dt_tm > cnvtdatetime(sysdate)
       AND eor.active_ind=true)
      JOIN (o
      WHERE o.organization_id=eor.organization_id
       AND o.active_ind=true)
     ORDER BY o.organization_id
     HEAD o.organization_id
      IF (eor.priority_seq=adt_constant
       AND prguarantorid <= 0.0)
       prguarantorid = o.organization_id, prexternalind = true
      ENDIF
      IF (eor.priority_seq=primaryguarantorseq)
       prguarantorid = o.organization_id, prexternalind = false
      ENDIF
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getprimaryguarantorforencounter,char(128))=char(128))
  SUBROUTINE (getprimaryguarantorforencounter(pencntrid=f8,prguarantorid=f8(ref),prpersonind=i2(ref)
   ) =i2)
    DECLARE externalguarantorind = i2 WITH protect, noconstant(false)
    DECLARE personguarantorid = f8 WITH protect, noconstant(0.0)
    SET prguarantorid = 0.0
    SET prpersonind = false
    SET stat = getprimarypersonguarantorforencounter(pencntrid,prguarantorid,externalguarantorind)
    IF (prguarantorid > 0.0)
     SET personguarantorid = prguarantorid
     SET prpersonind = true
     IF ( NOT (externalguarantorind))
      RETURN(true)
     ENDIF
    ENDIF
    SET prguarantorid = 0.0
    SET stat = getprimaryorganizationguarantorforencounter(pencntrid,prguarantorid,
     externalguarantorind)
    IF (prguarantorid > 0.0)
     SET prpersonind = false
     IF ( NOT (externalguarantorind))
      RETURN(true)
     ELSE
      IF (personguarantorid > 0.0)
       SET prguarantorid = personguarantorid
       SET prpersonind = true
       RETURN(true)
      ENDIF
     ENDIF
    ELSE
     IF (personguarantorid > 0.0)
      SET prguarantorid = personguarantorid
      SET prpersonind = true
      RETURN(true)
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getprimaryguarantorforfinancialencounter,char(128))=char(128))
  SUBROUTINE (getprimaryguarantorforfinancialencounter(ppftencntrid=f8,prguarantorid=f8(ref),
   prpersonind=i2(ref)) =i2)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    SET prguarantorid = 0.0
    SET prpersonind = false
    SET stat = getencounterbyfinancialencounter(ppftencntrid,encntrid)
    SET stat = getprimaryguarantorforencounter(encntrid,prguarantorid,prpersonind)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(ismultipleguarantorencounter,char(128))=char(128))
  SUBROUTINE (ismultipleguarantorencounter(pencntrid=f8) =i2)
    RECORD encntrguars(
      1 guarlist[*]
        2 personid = f8
        2 orgid = f8
        2 jointresponsibilityind = i2
    ) WITH protect
    SET stat = getfinanciallyresponsibleguarantorsforencounter(pencntrid,encntrguars)
    RETURN(evaluate(size(encntrguars->guarlist,5),0,false,true))
  END ;Subroutine
 ENDIF
 IF (validate(ismultipleguarantorencounterlist,char(128))=char(128))
  SUBROUTINE (ismultipleguarantorencounterlist(prencounterlist=vc(ref)) =i2)
    RECORD encntrguars(
      1 guarlist[*]
        2 personid = f8
        2 orgid = f8
        2 jointresponsibilityind = i2
    ) WITH protect
    SET stat = getfinanciallyresponsibleguarantorsforencounterlist(encntrguars,prencounterlist)
    RETURN(evaluate(size(encntrguars->guarlist,5),0,false,true))
  END ;Subroutine
 ENDIF
 IF (validate(ismultipleguarantorfinancialencounter,char(128))=char(128))
  SUBROUTINE (ismultipleguarantorfinancialencounter(ppftencntrid=f8) =i2)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    SET stat = getencounterbyfinancialencounter(ppftencntrid,encntrid)
    RETURN(ismultipleguarantorencounter(encntrid))
  END ;Subroutine
 ENDIF
 IF (validate(isuserauthorizedtoviewencounter,char(128))=char(128))
  SUBROUTINE (isuserauthorizedtoviewencounter(pencntrid=f8) =i2)
    RECORD authorizedbes(
      1 billingentities[*]
        2 billingentityid = f8
    ) WITH protect
    DECLARE beidx = i4 WITH protect, noconstant(0)
    DECLARE becnt = i4 WITH protect, noconstant(0)
    DECLARE userauthind = i2 WITH protect, noconstant(false)
    IF ( NOT (getuserauthorizedbillingentities(authorizedbes)))
     CALL exitservicefailure("Unable to retrieve authorized biling entity ids",true)
    ENDIF
    SET becnt = size(authorizedbes->billingentities,5)
    SELECT INTO "nl:"
     FROM encounter e,
      be_org_reltn bor
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
      JOIN (bor
      WHERE bor.organization_id=e.organization_id
       AND bor.active_ind=true
       AND expand(beidx,1,becnt,bor.billing_entity_id,authorizedbes->billingentities[beidx].
       billingentityid))
     ORDER BY e.encntr_id
     HEAD e.encntr_id
      userauthind = true
     WITH nocounter
    ;end select
    RETURN(userauthind)
  END ;Subroutine
 ENDIF
 IF (validate(getviewableguarantoraccountsforencounters,char(128))=char(128))
  SUBROUTINE (getviewableguarantoraccountsforencounters(pentityid=f8,pentitytype=i4,prencntrs=vc(ref),
   prguars=vc(ref)) =i2)
    RECORD viewablebes(
      1 billingentities[*]
        2 billingentityid = f8
    ) WITH protect
    DECLARE encntridx = i4 WITH protect, noconstant(0)
    SET stat = getviewablebillingentitiesforentity(pentityid,pentitytype,viewablebes)
    FOR (encntridx = 1 TO size(prencntrs->encntrs,5))
     SET stat = getpersonguarantoraccounts(prencntrs->encntrs[encntridx].encntrid,prencntrs->encntrs[
      encntridx].multiguarantorencntrind,viewablebes,prguars)
     SET stat = getorganizationguarantoraccounts(viewablebes,prguars)
    ENDFOR
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getpersonguarantoraccounts,char(128))=char(128))
  SUBROUTINE (getpersonguarantoraccounts(pencntrid=f8,pfinrespind=i2,prbes=vc(ref),prguars=vc(ref)) =
   i2)
    DECLARE beidx = i4 WITH protect, noconstant(0)
    DECLARE becnt = i4 WITH protect, noconstant(size(prbes->billingentities,5))
    DECLARE acctidx = i4 WITH protect, noconstant(0)
    DECLARE acctcnt = i4 WITH protect, noconstant(0)
    DECLARE acctloc = i4 WITH protect, noconstant(0)
    IF (pfinrespind)
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = size(prguars->guarlist,5)),
       person p1,
       pft_acct_reltn par1,
       account a,
       pft_acct_reltn par2,
       person p2,
       cbos_pe_reltn cpr,
       pft_encntr pe,
       encounter e
      PLAN (d
       WHERE (prguars->guarlist[d.seq].personid > 0.0))
       JOIN (p1
       WHERE (p1.person_id=prguars->guarlist[d.seq].personid)
        AND p1.active_ind=true)
       JOIN (par1
       WHERE par1.parent_entity_id=p1.person_id
        AND par1.parent_entity_name="GUARANTOR"
        AND par1.role_type_cd=cs18936_guarantor
        AND par1.active_ind=true)
       JOIN (a
       WHERE a.acct_id=par1.acct_id
        AND a.acct_type_cd=cs18736_ar
        AND a.acct_sub_type_cd=cs20849_guarantor
        AND expand(beidx,1,becnt,a.billing_entity_id,prbes->billingentities[beidx].billingentityid)
        AND a.active_ind=true)
       JOIN (par2
       WHERE (par2.acct_id= Outerjoin(par1.acct_id))
        AND (par2.parent_entity_id!= Outerjoin(par1.parent_entity_id))
        AND (par2.parent_entity_name= Outerjoin(par1.parent_entity_name))
        AND (par2.role_type_cd= Outerjoin(par1.role_type_cd))
        AND (par2.active_ind= Outerjoin(true)) )
       JOIN (p2
       WHERE (p2.person_id= Outerjoin(par2.parent_entity_id))
        AND (p2.active_ind= Outerjoin(true)) )
       JOIN (cpr
       WHERE cpr.acct_id=a.acct_id
        AND cpr.active_ind=true)
       JOIN (pe
       WHERE pe.pft_encntr_id=cpr.pft_encntr_id
        AND pe.active_ind=true)
       JOIN (e
       WHERE e.encntr_id=pe.encntr_id
        AND e.encntr_id=pencntrid
        AND e.active_ind=true)
      ORDER BY d.seq, a.acct_id
      HEAD d.seq
       acctcnt = size(prguars->guarlist[d.seq].accounts,5)
      HEAD a.acct_id
       acctloc = locateval(acctidx,1,acctcnt,a.acct_id,prguars->guarlist[d.seq].accounts[acctidx].
        accountid)
       IF (acctloc=0)
        acctcnt += 1, stat = alterlist(prguars->guarlist[d.seq].accounts,acctcnt), prguars->guarlist[
        d.seq].accounts[acctcnt].accountid = a.acct_id,
        prguars->guarlist[d.seq].accounts[acctcnt].accountnumber = trim(a.ext_acct_id_txt,3)
        IF (p2.person_id > 0.0)
         prguars->guarlist[d.seq].accounts[acctcnt].jointaccountind = true, prguars->guarlist[d.seq].
         accounts[acctcnt].jointentityname = trim(p2.name_full_formatted,3), prguars->guarlist[d.seq]
         .accounts[acctcnt].jointentityid = p2.person_id
        ENDIF
       ENDIF
      WITH nocounter
     ;end select
    ELSE
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = size(prguars->guarlist,5)),
       person p,
       pft_acct_reltn par,
       account a
      PLAN (d
       WHERE (prguars->guarlist[d.seq].personid > 0.0))
       JOIN (p
       WHERE (p.person_id=prguars->guarlist[d.seq].personid)
        AND p.active_ind=true)
       JOIN (par
       WHERE par.parent_entity_id=p.person_id
        AND par.parent_entity_name="GUARANTOR"
        AND par.role_type_cd=cs18936_guarantor
        AND par.active_ind=true
        AND  NOT ( EXISTS (
       (SELECT
        1
        FROM pft_acct_reltn par1
        WHERE par1.acct_id=par.acct_id
         AND par1.parent_entity_id != par.parent_entity_id
         AND par1.parent_entity_name=par.parent_entity_name
         AND par1.role_type_cd=par.role_type_cd
         AND par1.active_ind=par.active_ind))))
       JOIN (a
       WHERE a.acct_id=par.acct_id
        AND a.acct_type_cd=cs18736_ar
        AND a.acct_sub_type_cd=cs20849_guarantor
        AND expand(beidx,1,becnt,a.billing_entity_id,prbes->billingentities[beidx].billingentityid)
        AND a.active_ind=true)
      ORDER BY d.seq, a.acct_id
      HEAD d.seq
       acctcnt = size(prguars->guarlist[d.seq].accounts,5)
      HEAD a.acct_id
       acctloc = locateval(acctidx,1,acctcnt,a.acct_id,prguars->guarlist[d.seq].accounts[acctidx].
        accountid)
       IF (acctloc=0)
        acctcnt += 1, stat = alterlist(prguars->guarlist[d.seq].accounts,acctcnt), prguars->guarlist[
        d.seq].accounts[acctcnt].accountid = a.acct_id,
        prguars->guarlist[d.seq].accounts[acctcnt].accountnumber = trim(a.ext_acct_id_txt,3)
       ENDIF
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getorganizationguarantoraccounts,char(128))=char(128))
  SUBROUTINE (getorganizationguarantoraccounts(prbes=vc(ref),prguars=vc(ref)) =i2)
    DECLARE beidx = i4 WITH protect, noconstant(0)
    DECLARE becnt = i4 WITH protect, noconstant(size(prbes->billingentities,5))
    DECLARE acctcnt = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM (dummyt d  WITH seq = size(prguars->guarlist,5)),
      organization o,
      pft_acct_reltn par,
      account a
     PLAN (d
      WHERE (prguars->guarlist[d.seq].orgid > 0.0))
      JOIN (o
      WHERE (o.organization_id=prguars->guarlist[d.seq].orgid)
       AND o.active_ind=true)
      JOIN (par
      WHERE par.parent_entity_id=o.organization_id
       AND par.parent_entity_name="ORGANIZATION"
       AND par.role_type_cd=cs18936_guarantor
       AND par.active_ind=true)
      JOIN (a
      WHERE a.acct_id=par.acct_id
       AND a.acct_type_cd=cs18736_ar
       AND a.acct_sub_type_cd=cs20849_guarantor
       AND expand(beidx,1,becnt,a.billing_entity_id,prbes->billingentities[beidx].billingentityid)
       AND a.active_ind=true)
     ORDER BY d.seq, a.acct_id
     HEAD d.seq
      acctcnt = 0
     HEAD a.acct_id
      acctcnt += 1, stat = alterlist(prguars->guarlist[d.seq].accounts,acctcnt), prguars->guarlist[d
      .seq].accounts[acctcnt].accountid = a.acct_id,
      prguars->guarlist[d.seq].accounts[acctcnt].accountnumber = trim(a.ext_acct_id_txt,3)
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getdefaultguarantorbyencntrid,char(128))=char(128))
  SUBROUTINE (getdefaultguarantorbyencntrid(pencounterid=f8,prguarantors=vc(ref)) =i2)
    DECLARE gidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE pos = i4 WITH protect, noconstant(0)
    SET gidx = size(prguarantors->guarantorresps,5)
    SELECT INTO "nl:"
     FROM encounter e,
      pft_encntr pe,
      cbos_pe_reltn cper,
      cbos_person_reltn cpr,
      person p,
      organization o,
      account a
     PLAN (e
      WHERE e.encntr_id=pencounterid
       AND e.active_ind=true)
      JOIN (pe
      WHERE pe.encntr_id=e.encntr_id
       AND pe.active_ind=true)
      JOIN (cper
      WHERE cper.pft_encntr_id=pe.pft_encntr_id
       AND cper.active_ind=true)
      JOIN (cpr
      WHERE cpr.cons_bo_sched_id=cper.cons_bo_sched_id
       AND cpr.active_ind=true)
      JOIN (p
      WHERE (p.person_id= Outerjoin(cpr.person_id))
       AND (p.active_ind= Outerjoin(true)) )
      JOIN (o
      WHERE (o.organization_id= Outerjoin(cpr.organization_id))
       AND (o.active_ind= Outerjoin(true)) )
      JOIN (a
      WHERE a.acct_id=pe.acct_id
       AND a.active_ind=true)
     ORDER BY e.person_id, a.billing_entity_id
     HEAD e.person_id
      prguarantors->patientid = e.person_id
     HEAD a.billing_entity_id
      prguarantors->billingentityid = a.billing_entity_id
     DETAIL
      pos = locateval(idx,1,size(prguarantors->guarantorresps,5),p.person_id,prguarantors->
       guarantorresps[idx].guarantorid1,
       cper.acct_id,prguarantors->guarantorresps[idx].guarantoraccountid,o.organization_id,
       prguarantors->guarantorresps[idx].guarantororgid)
      IF (pos=0
       AND ((p.person_id > 0.0) OR (o.organization_id > 0.0)) )
       gidx += 1, stat = alterlist(prguarantors->guarantorresps,gidx)
       IF (p.person_id > 0.0)
        prguarantors->guarantorresps[gidx].guarantorname = trim(p.name_full_formatted,3)
       ELSEIF (o.organization_id > 0.0)
        prguarantors->guarantorresps[gidx].guarantorname = trim(o.org_name,3)
       ENDIF
       prguarantors->guarantorresps[gidx].guarantoraccountid = cper.acct_id, prguarantors->
       guarantorresps[gidx].guarantorid1 = p.person_id, prguarantors->guarantorresps[gidx].
       guarantororgid = o.organization_id
      ENDIF
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorsforguarantoraccount,char(128))=char(128))
  SUBROUTINE (getguarantorsforguarantoraccount(pguaracctid=f8,prguars=vc(ref)) =i2)
    SET stat = initrec(prguars)
    DECLARE gcnt = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM account a,
      pft_acct_reltn paro,
      organization o,
      pft_acct_reltn parp,
      person p,
      pft_acct_reltn parp2,
      person p2
     PLAN (a
      WHERE a.acct_id=pguaracctid
       AND a.acct_type_cd=cs18736_ar
       AND a.acct_sub_type_cd=cs20849_guarantor
       AND a.active_ind=true)
      JOIN (parp
      WHERE (parp.acct_id= Outerjoin(a.acct_id))
       AND (parp.parent_entity_name= Outerjoin("GUARANTOR"))
       AND (parp.role_type_cd= Outerjoin(cs18936_guarantor))
       AND (parp.active_ind= Outerjoin(true)) )
      JOIN (p
      WHERE (p.person_id= Outerjoin(parp.parent_entity_id))
       AND (p.active_ind= Outerjoin(true)) )
      JOIN (parp2
      WHERE (parp2.acct_id= Outerjoin(parp.acct_id))
       AND (parp2.parent_entity_id!= Outerjoin(parp.parent_entity_id))
       AND (parp2.parent_entity_name= Outerjoin(parp.parent_entity_name))
       AND (parp2.role_type_cd= Outerjoin(parp.role_type_cd))
       AND (parp2.active_ind= Outerjoin(true)) )
      JOIN (p2
      WHERE (p2.person_id= Outerjoin(parp2.parent_entity_id))
       AND (p2.active_ind= Outerjoin(true)) )
      JOIN (paro
      WHERE (paro.acct_id= Outerjoin(a.acct_id))
       AND (paro.parent_entity_name= Outerjoin("ORGANIZATION"))
       AND (paro.role_type_cd= Outerjoin(cs18936_guarantor))
       AND (paro.active_ind= Outerjoin(true)) )
      JOIN (o
      WHERE (o.organization_id= Outerjoin(paro.parent_entity_id))
       AND (o.active_ind= Outerjoin(true)) )
     ORDER BY p.person_id, o.organization_id
     HEAD p.person_id
      IF (p.person_id > 0.0)
       gcnt = (size(prguars->guarlist,5)+ 1), stat = alterlist(prguars->guarlist,gcnt), prguars->
       guarlist[gcnt].personid = p.person_id,
       stat = alterlist(prguars->guarlist[gcnt].accounts,1), prguars->guarlist[gcnt].accounts[1].
       accountid = pguaracctid, prguars->guarlist[gcnt].accounts[1].guaracctbalance = evaluate(a
        .dr_cr_flag,2,(a.acct_balance * - (1.0)),a.acct_balance),
       prguars->guarlist[gcnt].accounts[1].accountnumber = trim(a.ext_acct_id_txt,3), prguars->
       guarlist[gcnt].accounts[1].acctstatus = uar_get_code_display(a.acct_status_cd)
       IF (p2.person_id > 0.0)
        prguars->guarlist[gcnt].accounts[1].jointaccountind = true, prguars->guarlist[gcnt].accounts[
        1].jointentityname = trim(p2.name_full_formatted,3), prguars->guarlist[gcnt].accounts[1].
        jointentityid = p2.person_id
       ENDIF
      ENDIF
     HEAD o.organization_id
      IF (o.organization_id > 0.0)
       gcnt = (size(prguars->guarlist,5)+ 1), stat = alterlist(prguars->guarlist,gcnt), prguars->
       guarlist[gcnt].orgid = o.organization_id,
       stat = alterlist(prguars->guarlist[gcnt].accounts,1), prguars->guarlist[gcnt].accounts[1].
       accountid = pguaracctid, prguars->guarlist[gcnt].accounts[1].guaracctbalance = evaluate(a
        .dr_cr_flag,2,(a.acct_balance * - (1.0)),a.acct_balance),
       prguars->guarlist[gcnt].accounts[1].accountnumber = trim(a.ext_acct_id_txt,3), prguars->
       guarlist[gcnt].accounts[1].acctstatus = uar_get_code_display(a.acct_status_cd)
      ENDIF
     WITH nocounter
    ;end select
    IF (validate(debug,0) > 0)
     CALL echorecord(prguars)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(createbohpcbos,char(128))=char(128))
  SUBROUTINE (createbohpcbos(pencntrid=f8,ppftencntrid=f8,pacctid=f8) =i2)
    RECORD cbosrequest(
      1 encntr_id = f8
      1 acct_id = f8
      1 pft_encntr_id = f8
      1 cons_bo_sched_id = f8
    ) WITH protect
    RECORD cbosreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET cbosrequest->encntr_id = pencntrid
    SET cbosrequest->pft_encntr_id = ppftencntrid
    SET cbosrequest->acct_id = pacctid
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(cbosrequest)
    ENDIF
    EXECUTE pft_bo_hp_cbos  WITH replace("REQUEST",cbosrequest), replace("REPLY",cbosreply)
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(cbosreply)
    ENDIF
    IF ((cbosreply->status_data.status != "S"))
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorbyschedulingentry,char(128))=char(128))
  SUBROUTINE (getguarantorbyschedulingentry(pschentryid=f8,prguarantorid=f8(ref)) =i2)
    DECLARE patientid = f8 WITH protect, noconstant(0.0)
    DECLARE encounterid = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM sch_entry se
     WHERE se.sch_entry_id=pschentryid
      AND se.active_ind=true
      AND se.version_dt_tm=cnvtdatetime("31-DEC-2100 00:00:00")
     DETAIL
      patientid = se.person_id, encounterid = se.encntr_id
     WITH nocounter
    ;end select
    IF (encounterid > 0.0)
     RETURN(getguarantorbyencounter(encounterid,prguarantorid))
    ELSEIF (patientid > 0.0)
     RETURN(getguarantoratpatientlevel(patientid,prguarantorid))
    ELSE
     RETURN(false)
    ENDIF
  END ;Subroutine
 ENDIF
 CALL echo("Begin including pft_get_cob_subs.inc, version [CHARGSRV-15779.023]")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 CALL echo("Begin PFT_NT_GLOBAL_CONSTANTS.INC, version [CHARGSRV-14113.013]")
 IF ( NOT (validate(gconstants->posting_error_unknown_cd)))
  RECORD gconstants(
    1 interim_bill_flag_initial = i2
    1 interim_bill_flag_continuing = i2
    1 interim_bill_flag_final = i2
    1 suppress_flag_none = i2
    1 suppress_flag_claim_only = i2
    1 suppress_flag_bill_only = i2
    1 suppress_flag_claim_and_bill = i2
    1 process_flag_pending = i2
    1 process_flag_suspended = i2
    1 process_flag_posted = i2
    1 process_flag_abn_required = i2
    1 process_flag_absorbed = i2
    1 process_flag_interfaced = i2
    1 recur_bill_opt_flag_episode = i2
    1 recur_bill_opt_flag_month = i2
    1 recur_bill_opt_flag_flex = i2
    1 recur_wait_coding_flag_first = i2
    1 recur_wait_coding_flag_all = i2
    1 debit_flag = i2
    1 credit_flag = i2
    1 zero_flag = i2
    1 cs_4
      2 person_alias_type_account_cd = f8
      2 person_alias_type_cmrn_cd = f8
      2 person_alias_type_mrn_cd = f8
    1 cs_8
      2 data_status_authenticated_cd = f8
    1 cs_69
      2 encounter_type_class_recurring_cd = f8
    1 cs_319
      2 encntr_alias_type_financial_number_cd = f8
    1 cs_354
      2 financial_class_selfpay_cd = f8
    1 cs_370
      2 org_plan_reltn_type_carrier_cd = f8
    1 cs_13016
      2 charge_entry_cd = f8
    1 cs_13019
      2 charge_mod_type_bill_code_cd = f8
      2 charge_mod_type_suspense_cd = f8
      2 charge_mod_type_other_cd = f8
      2 charge_mod_type_financial_combine_cd = f8
      2 charge_mod_type_financial_uncombine_cd = f8
      2 charge_mod_type_noncovered_cd = f8
    1 cs_13028
      2 charge_type_credit_cd = f8
      2 charge_type_debit_cd = f8
    1 cs_13030
      2 cs_suspense_reason_posting_error_cd = f8
      2 cs_suspense_reason_no_icd9_cd = f8
      2 cs_suspense_reason_posting_error_disp = c40
    1 cs_18649
      2 transaction_type_charge_cd = f8
    1 cs_18734
      2 account_status_reason_auto_create_cd = f8
    1 cs_18735
      2 account_status_open_cd = f8
    1 cs_18736
      2 account_type_ar_cd = f8
    1 cs_18935
      2 bill_status_canceled_cd = f8
      2 bill_status_canceled_submitted_cd = f8
      2 bill_status_canceled_ready_submit_cd = f8
      2 bill_status_converted_print_image_cd = f8
      2 bill_status_rejected_cd = f8
      2 bill_status_submitted_cd = f8
      2 bill_status_transmitted_cd = f8
      2 bill_status_zero_bal_billed_cd = f8
      2 bill_status_zero_bal_not_billed_cd = f8
      2 bill_status_denied_cd = f8
      2 bill_status_deniedreview_cd = f8
      2 bill_status_transmitted_by_xover_cd = f8
      2 bill_status_submitted_by_asb_cd = f8
      2 bill_status_transmitted_by_asb_cd = f8
    1 cs_18936
      2 role_type_client_cd = f8
      2 role_type_patient_cd = f8
      2 role_type_guarantor_cd = f8
      2 role_type_guarantorpatient_cd = f8
      2 role_type_client_related_cd = f8
    1 cs_18937
      2 transaction_reason_late_charge_proc_cd = f8
    1 cs_18938
      2 transaction_status_active_cd = f8
    1 cs_20509
      2 journal_status_posted_cd = f8
    1 cs_20849
      2 account_sub_type_client_cd = f8
      2 account_sub_type_patient_cd = f8
      2 account_sub_type_guarantor_cd = f8
      2 account_sub_type_research_cd = f8
    1 cs_21749
      2 bill_type_hcfa_1450_cd = f8
      2 bill_type_hcfa_1500_cd = f8
    1 cs_21849
      2 bill_class_claim_cd = f8
    1 cs_22449
      2 profit_type_client_account_cd = f8
      2 profit_type_client_bill_only_cd = f8
      2 profit_type_client_bill_and_ar_cd = f8
    1 cs_24269
      2 pft_encntr_status_active_cd = f8
      2 pft_encntr_status_pending_cd = f8
    1 cs_24429
      2 be_domain_type_acute_care_cd = f8
    1 cs_24450
      2 pe_status_reason_72_hour_rule_cd = f8
      2 pe_status_reason_bill_combine_hold_cd = f8
      2 pe_status_reason_wait_discharge_hold_cd = f8
      2 pe_status_reason_wait_for_coding_hold_cd = f8
      2 pe_status_reason_standard_delay_hold_cd = f8
      2 pe_status_reason_no_rug_code_hold_cd = f8
      2 pe_status_reason_bad_rug_code_days_hold_cd = f8
      2 pe_status_reason_rug_code_error_hold_cd = f8
      2 pe_status_reason_diagnosis_assoc_hold_cd = f8
    1 cs_24451
      2 bo_hp_status_in_process_cd = f8
      2 bo_hp_status_invalid_cd = f8
      2 bo_hp_status_ready_to_bill_cd = f8
      2 bo_hp_status_transmitted_by_xover_cd = f8
      2 bo_hp_status_generated_cd = f8
      2 bo_hp_status_wait_for_prior_cd = f8
    1 cs_25872
      2 hold_reason_bill_combine_cd = f8
      2 hold_reason_charge_evaluation_cd = f8
      2 hold_reason_end_of_period_cd = f8
      2 hold_reason_package_pricing_cd = f8
      2 hold_reason_suspended_charges_cd = f8
      2 hold_reason_standard_delay_cd = f8
      2 hold_reason_skilled_nursing_cd = f8
    1 cs_26032
      2 account_number_type_cmrn_cd = f8
      2 account_number_type_mrn_cd = f8
    1 cs_26052
      2 hold_criteria_combine_from_cd = f8
      2 hold_criteria_combine_to_cd = f8
      2 hold_criteria_encntr_type_cd = f8
      2 hold_criteria_end_of_period_date_cd = f8
      2 hold_criteria_health_plan_cd = f8
      2 hold_criteria_fin_class_cd = f8
      2 hold_criteria_payer_cd = f8
      2 hold_criteria_excfacility_cd = f8
    1 cs_28422
      2 adjudicated_status_none_cd = f8
    1 cs_28640
      2 bts_criteria_charge_group_cd = f8
      2 bts_criteria_billing_entity_cd = f8
      2 bts_criteria_encntr_type_cd = f8
      2 bts_criteria_financial_class_cd = f8
      2 bts_criteria_health_plan_cd = f8
      2 bts_criteria_insurance_org_cd = f8
    1 cs_29320
      2 entity_type_claim_cd = f8
      2 entity_type_pft_encntr_cd = f8
    1 cs_29322
      2 queue_event_late_charge_cd = f8
      2 queue_event_diagnosis_review_comp_cd = f8
    1 cs_29920
      2 proration_type_payer_cd = f8
    1 cs_323570
      2 bill_activity_type_charge_cd = f8
    1 cs_325570
      2 amount_type_charge_cd = f8
    1 cs_4001910
      2 posting_error_unknown_cd = f8
      2 posting_error_invalid_charge_cd = f8
      2 posting_error_service_date_cd = f8
      2 posting_error_no_debit_cd = f8
      2 posting_error_no_ar_account_cd = f8
      2 posting_error_no_rev_account_cd = f8
      2 posting_error_billing_entity_cd = f8
      2 posting_error_no_cpt_cd = f8
      2 posting_error_no_cdm_cd = f8
      2 posting_error_no_rev_cd = f8
      2 posting_error_no_mrn_acct_nbr_cd = f8
      2 posting_error_no_cmrn_acct_nbr_cd = f8
      2 posting_error_in_bad_debt_cd = f8
      2 posting_error_pend_reg_mod_cd = f8
      2 posting_error_dx_mapping_cd = f8
      2 posting_error_charge_wo_cd = f8
      2 posting_error_invalid_cob_cd = f8
      2 cs_suspense_reason_posting_cg_dt_qual = f8
      2 posting_error_invalid_encntr_type_cd = f8
    1 cs_22089
      2 bill_status_reason_voided_cd = f8
  )
  SET gconstants->interim_bill_flag_initial = 1
  SET gconstants->interim_bill_flag_continuing = 2
  SET gconstants->interim_bill_flag_final = 3
  SET gconstants->suppress_flag_none = 0
  SET gconstants->suppress_flag_claim_only = 1
  SET gconstants->suppress_flag_bill_only = 2
  SET gconstants->suppress_flag_claim_and_bill = 3
  SET gconstants->process_flag_pending = 0
  SET gconstants->process_flag_suspended = 1
  SET gconstants->process_flag_posted = 100
  SET gconstants->process_flag_abn_required = 8
  SET gconstants->process_flag_absorbed = 7
  SET gconstants->process_flag_interfaced = 999
  SET gconstants->recur_bill_opt_flag_episode = 1
  SET gconstants->recur_bill_opt_flag_month = 2
  SET gconstants->recur_bill_opt_flag_flex = 3
  SET gconstants->recur_wait_coding_flag_first = 1
  SET gconstants->recur_wait_coding_flag_all = 2
  SET gconstants->zero_flag = 0
  SET gconstants->debit_flag = 1
  SET gconstants->credit_flag = 2
  SET gconstants->person_alias_type_account_cd = getcodevalue(4,"ACCOUNT",1)
  SET gconstants->person_alias_type_cmrn_cd = getcodevalue(4,"CMRN",1)
  SET gconstants->person_alias_type_mrn_cd = getcodevalue(4,"MRN",1)
  SET gconstants->data_status_authenticated_cd = getcodevalue(8,"AUTH",1)
  SET gconstants->encounter_type_class_recurring_cd = getcodevalue(69,"RECURRING",1)
  SET gconstants->encntr_alias_type_financial_number_cd = getcodevalue(319,"FIN NBR",1)
  SET gconstants->financial_class_selfpay_cd = getcodevalue(354,"SELFPAY",1)
  SET gconstants->org_plan_reltn_type_carrier_cd = getcodevalue(370,"CARRIER",1)
  SET gconstants->charge_entry_cd = getcodevalue(13016,"CHARGE ENTRY",1)
  SET gconstants->charge_mod_type_bill_code_cd = getcodevalue(13019,"BILL CODE",1)
  SET gconstants->charge_mod_type_suspense_cd = getcodevalue(13019,"SUSPENSE",1)
  SET gconstants->charge_mod_type_other_cd = getcodevalue(13019,"OTHER",1)
  SET gconstants->charge_mod_type_financial_combine_cd = getcodevalue(13019,"FIN CMB",1)
  SET gconstants->charge_mod_type_financial_uncombine_cd = getcodevalue(13019,"FIN UNCMB",1)
  SET gconstants->charge_mod_type_noncovered_cd = getcodevalue(13019,"NONCOVERED",1)
  SET gconstants->charge_type_credit_cd = getcodevalue(13028,"CR",1)
  SET gconstants->charge_type_debit_cd = getcodevalue(13028,"DR",1)
  SET gconstants->cs_suspense_reason_posting_error_cd = getcodevalue(13030,"POSTING",1)
  SET gconstants->cs_suspense_reason_no_icd9_cd = getcodevalue(13030,"NOICD9",1)
  SET gconstants->cs_suspense_reason_posting_error_disp = uar_get_code_display(gconstants->
   cs_suspense_reason_posting_error_cd)
  SET gconstants->transaction_type_charge_cd = getcodevalue(18649,"CHARGE",1)
  SET gconstants->account_status_reason_auto_create_cd = getcodevalue(18734,"AUTO CREATE",1)
  SET gconstants->account_status_open_cd = getcodevalue(18735,"OPEN",1)
  SET gconstants->account_type_ar_cd = getcodevalue(18736,"A/R",1)
  SET gconstants->bill_status_canceled_cd = getcodevalue(18935,"CANCELED",1)
  SET gconstants->bill_status_canceled_submitted_cd = getcodevalue(18935,"CNCLSBMTED",1)
  SET gconstants->bill_status_canceled_ready_submit_cd = getcodevalue(18935,"RTS CANCEL",1)
  SET gconstants->bill_status_converted_print_image_cd = getcodevalue(18935,"CONVERTED",1)
  SET gconstants->bill_status_rejected_cd = getcodevalue(18935,"REJECTED",1)
  SET gconstants->bill_status_submitted_cd = getcodevalue(18935,"SUBMITTED",1)
  SET gconstants->bill_status_transmitted_cd = getcodevalue(18935,"TRANSMITTED",1)
  SET gconstants->bill_status_zero_bal_billed_cd = getcodevalue(18935,"ZEROBILL",1)
  SET gconstants->bill_status_zero_bal_not_billed_cd = getcodevalue(18935,"ZERONOTBILL",1)
  SET gconstants->bill_status_denied_cd = getcodevalue(18935,"DENIED",1)
  SET gconstants->bill_status_deniedreview_cd = getcodevalue(18935,"DENIEDREVIEW",1)
  SET gconstants->bill_status_transmitted_by_xover_cd = getcodevalue(18935,"TRANSXOVRPAY",1)
  SET gconstants->bill_status_submitted_by_asb_cd = getcodevalue(18935,"SUBMITBYASB",1)
  SET gconstants->bill_status_transmitted_by_asb_cd = getcodevalue(18935,"TRANSBYASB",1)
  SET gconstants->role_type_client_cd = getcodevalue(18936,"CLIENT",1)
  SET gconstants->role_type_patient_cd = getcodevalue(18936,"PATIENT",1)
  SET gconstants->role_type_guarantor_cd = getcodevalue(18936,"GUARANTOR",1)
  SET gconstants->role_type_guarantorpatient_cd = getcodevalue(18936,"GUARANTORPAT",1)
  SET gconstants->role_type_client_related_cd = getcodevalue(18936,"RELATEDCLT",1)
  SET gconstants->transaction_reason_late_charge_proc_cd = getcodevalue(18937,"LT CHRG PROC",1)
  SET gconstants->transaction_status_active_cd = getcodevalue(18938,"ACTIVE",1)
  SET gconstants->journal_status_posted_cd = getcodevalue(20509,"POSTED",1)
  SET gconstants->account_sub_type_client_cd = getcodevalue(20849,"CLIENT",1)
  SET gconstants->account_sub_type_patient_cd = getcodevalue(20849,"PATIENT",1)
  SET gconstants->account_sub_type_guarantor_cd = getcodevalue(20849,"GUARANTOR",1)
  SET gconstants->account_sub_type_research_cd = getcodevalue(20849,"RESEARCH",1)
  SET gconstants->account_sub_type_research_cd = getcodevalue(20849,"RESEARCH",1)
  SET gconstants->bill_type_hcfa_1450_cd = getcodevalue(21749,"HCFA_1450",1)
  SET gconstants->bill_type_hcfa_1500_cd = getcodevalue(21749,"HCFA_1500",1)
  SET gconstants->bill_class_claim_cd = getcodevalue(21849,"CLAIM",1)
  SET gconstants->profit_type_client_account_cd = getcodevalue(22449,"PFTCLTACCT",1)
  SET gconstants->profit_type_client_bill_only_cd = getcodevalue(22449,"PFTCLTBILL",1)
  SET gconstants->profit_type_client_bill_and_ar_cd = getcodevalue(22449,"PFTPTACCT",1)
  SET gconstants->pft_encntr_status_active_cd = getcodevalue(24269,"ACTIVE",1)
  SET gconstants->pft_encntr_status_pending_cd = getcodevalue(24269,"PENDING",1)
  SET gconstants->be_domain_type_acute_care_cd = getcodevalue(24429,"ACUTE CARE",1)
  SET gconstants->pe_status_reason_72_hour_rule_cd = getcodevalue(24450,"72HOURRULE",1)
  SET gconstants->pe_status_reason_bill_combine_hold_cd = getcodevalue(24450,"BILLCOMBHOLD",1)
  SET gconstants->pe_status_reason_wait_discharge_hold_cd = getcodevalue(24450,"WAITDISCH",1)
  SET gconstants->pe_status_reason_wait_for_coding_hold_cd = getcodevalue(24450,"WAITCODING",1)
  SET gconstants->pe_status_reason_standard_delay_hold_cd = getcodevalue(24450,"STDDELAY",1)
  SET gconstants->pe_status_reason_no_rug_code_hold_cd = getcodevalue(24450,"NORUGCODE",1)
  SET gconstants->pe_status_reason_bad_rug_code_days_hold_cd = getcodevalue(24450,"BADRUGCDDAYS",1)
  SET gconstants->pe_status_reason_rug_code_error_hold_cd = getcodevalue(24450,"ERR_RUGCD",1)
  SET gconstants->pe_status_reason_diagnosis_assoc_hold_cd = getcodevalue(24450,"DXASSOCINC",1)
  SET gconstants->bo_hp_status_in_process_cd = getcodevalue(24451,"INPROCESS",1)
  SET gconstants->bo_hp_status_invalid_cd = getcodevalue(24451,"INVALID",1)
  SET gconstants->bo_hp_status_ready_to_bill_cd = getcodevalue(24451,"READYTOBILL",1)
  SET gconstants->bo_hp_status_transmitted_by_xover_cd = getcodevalue(24451,"TRANSXOVRPAY",1)
  SET gconstants->bo_hp_status_generated_cd = getcodevalue(24451,"GENERATED",1)
  SET gconstants->bo_hp_status_wait_for_prior_cd = getcodevalue(24451,"WAITBOCOMPL",1)
  SET gconstants->hold_reason_bill_combine_cd = getcodevalue(25872,"BILL_COMBINE",1)
  SET gconstants->hold_reason_charge_evaluation_cd = getcodevalue(25872,"CHARGEEVAL",1)
  SET gconstants->hold_reason_end_of_period_cd = getcodevalue(25872,"ENDOFPERIOD",1)
  SET gconstants->hold_reason_package_pricing_cd = getcodevalue(25872,"PKGPRICING",1)
  SET gconstants->hold_reason_suspended_charges_cd = getcodevalue(25872,"SUSPENDCHRGS",1)
  SET gconstants->hold_reason_standard_delay_cd = getcodevalue(25872,"STND_DELAY",1)
  SET gconstants->hold_reason_skilled_nursing_cd = getcodevalue(25872,"SKLD_NRSNG",1)
  SET gconstants->account_number_type_cmrn_cd = getcodevalue(26032,"CMRN",1)
  SET gconstants->account_number_type_mrn_cd = getcodevalue(26032,"MRN",1)
  SET gconstants->hold_criteria_combine_from_cd = getcodevalue(26052,"CMBFRMENCTYP",1)
  SET gconstants->hold_criteria_combine_to_cd = getcodevalue(26052,"CMBTOENCTYPE",1)
  SET gconstants->hold_criteria_encntr_type_cd = getcodevalue(26052,"ENCNTR_TYPE",1)
  SET gconstants->hold_criteria_end_of_period_date_cd = getcodevalue(26052,"ENDOFPERDT",1)
  SET gconstants->hold_criteria_health_plan_cd = getcodevalue(26052,"HEALTHPLAN",1)
  SET gconstants->hold_criteria_fin_class_cd = getcodevalue(26052,"FINCLASS",1)
  SET gconstants->hold_criteria_payer_cd = getcodevalue(26052,"PAYER",1)
  SET gconstants->hold_criteria_excfacility_cd = getcodevalue(26052,"EXCFACILITY",1)
  SET gconstants->adjudicated_status_none_cd = getcodevalue(28422,"NONE",1)
  SET gconstants->bts_criteria_charge_group_cd = getcodevalue(28640,"CHARGEGROUP",1)
  SET gconstants->bts_criteria_billing_entity_cd = getcodevalue(28640,"BILLENTITY",1)
  SET gconstants->bts_criteria_encntr_type_cd = getcodevalue(28640,"ENCNTRTYPE",1)
  SET gconstants->bts_criteria_financial_class_cd = getcodevalue(28640,"FINCLASS",1)
  SET gconstants->bts_criteria_health_plan_cd = getcodevalue(28640,"HEALTHPLAN",1)
  SET gconstants->bts_criteria_insurance_org_cd = getcodevalue(28640,"INSURANCEORG",1)
  SET gconstants->entity_type_claim_cd = getcodevalue(29320,"CLAIM",1)
  SET gconstants->entity_type_pft_encntr_cd = getcodevalue(29320,"PFTENCNTR",1)
  SET gconstants->queue_event_late_charge_cd = getcodevalue(29322,"LATECHARGE",1)
  SET gconstants->queue_event_diagnosis_review_comp_cd = getcodevalue(29322,"DXASSOCCOMP",1)
  SET gconstants->proration_type_payer_cd = getcodevalue(29920,"PAYER",1)
  SET gconstants->bill_activity_type_charge_cd = getcodevalue(323570,"CHARGE",1)
  SET gconstants->amount_type_charge_cd = getcodevalue(325570,"CHARGE",1)
  SET gconstants->posting_error_unknown_cd = getcodevalue(4001910,"UNKNOWN",1)
  SET gconstants->posting_error_invalid_charge_cd = getcodevalue(4001910,"INVALIDCHRG",1)
  SET gconstants->posting_error_service_date_cd = getcodevalue(4001910,"INVALIDSRVDT",1)
  SET gconstants->posting_error_no_debit_cd = getcodevalue(4001910,"NODEBIT",1)
  SET gconstants->posting_error_no_ar_account_cd = getcodevalue(4001910,"NOARACCOUNT",1)
  SET gconstants->posting_error_no_rev_account_cd = getcodevalue(4001910,"NOREVACCOUNT",1)
  SET gconstants->posting_error_billing_entity_cd = getcodevalue(4001910,"NOBILLENTITY",1)
  SET gconstants->posting_error_no_cpt_cd = getcodevalue(4001910,"NOCPT",1)
  SET gconstants->posting_error_no_cdm_cd = getcodevalue(4001910,"NOCDM",1)
  SET gconstants->posting_error_no_rev_cd = getcodevalue(4001910,"NOREV",1)
  SET gconstants->posting_error_no_mrn_acct_nbr_cd = getcodevalue(4001910,"NOMRNACTNBR",1)
  SET gconstants->posting_error_no_cmrn_acct_nbr_cd = getcodevalue(4001910,"NOCMRNACTNBR",1)
  SET gconstants->posting_error_in_bad_debt_cd = getcodevalue(4001910,"INBADDEBT",1)
  SET gconstants->posting_error_pend_reg_mod_cd = getcodevalue(4001910,"PENDREGMOD",1)
  SET gconstants->posting_error_dx_mapping_cd = getcodevalue(4001910,"DXMAPFAILED",1)
  SET gconstants->posting_error_charge_wo_cd = getcodevalue(4001910,"CHRGWOFAILED",1)
  SET gconstants->posting_error_invalid_cob_cd = getcodevalue(4001910,"INVALIDCOB",1)
  SET gconstants->cs_suspense_reason_posting_cg_dt_qual = getcodevalue(4001910,"OUTSIDEQALDT",1)
  SET gconstants->posting_error_invalid_encntr_type_cd = getcodevalue(4001910,"INVALIDENCTP",1)
  SET gconstants->bill_status_reason_voided_cd = getcodevalue(22089,"VOIDED",1)
 ENDIF
 CALL echo("End PFT_NT_GLOBAL_CONSTANTS.INC")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF (validate(getcgfacilitytimezoneidx,char(128))=char(128))
  SUBROUTINE (getcgfacilitytimezoneidx(pbillingentityid=f8) =i4)
    CALL logmessage("getCGFacilityTimeZoneIdx","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, noconstant(curtimezonesys)
    DECLARE cs222_facility_cd = f8 WITH protect, constant(getcodevalue(222,"FACILITY",0))
    SELECT INTO "nl:"
     FROM billing_entity be,
      organization o,
      location l,
      time_zone_r tzr
     PLAN (be
      WHERE be.billing_entity_id=pbillingentityid
       AND be.active_ind=true)
      JOIN (o
      WHERE o.organization_id=be.organization_id
       AND o.active_ind=true)
      JOIN (l
      WHERE l.organization_id=o.organization_id
       AND l.location_type_cd=cs222_facility_cd
       AND l.active_ind=true
       AND l.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND l.end_effective_dt_tm > cnvtdatetime(sysdate))
      JOIN (tzr
      WHERE (tzr.parent_entity_id= Outerjoin(l.location_cd))
       AND (tzr.parent_entity_name= Outerjoin("LOCATION")) )
     DETAIL
      IF (tzr.parent_entity_id != 0.0)
       timezoneindex = datetimezonebyname(tzr.time_zone)
      ENDIF
     WITH nocounter
    ;end select
    CALL logmessage("getCGFacilityTimeZoneIdx","Exiting...",log_debug)
    RETURN(timezoneindex)
  END ;Subroutine
 ENDIF
 IF (validate(getcgfacilitybeginningofday,char(128))=char(128))
  SUBROUTINE (getcgfacilitybeginningofday(pbillingentityid=f8,pdatetime=dq8) =dq8)
    CALL logmessage("getCGFacilityBeginningOfDay","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, constant(getcgfacilitytimezoneidx(pbillingentityid))
    DECLARE calcfacilitydate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    DECLARE chargeservicedate = i4 WITH protect, noconstant(0)
    SET chargeservicedate = cnvtint(build2(format(month(pdatetime),"##;P0"),format(day(pdatetime),
       "##;P0"),year(pdatetime)))
    SET facilitydate = cnvtdatetimeutc(pdatetime,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET calcfacilitydate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate
        ),"##;P0"),year(facilitydate)))
    SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(calcfacilitydate),0),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    CALL logmessage("getCGFacilityBeginningOfDay","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getcgfacilityendofday,char(128))=char(128))
  SUBROUTINE (getcgfacilityendofday(pbillingentityid=f8,pdatetime=dq8) =dq8)
    CALL logmessage("getCGFacilityEndOfDay","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, constant(getcgfacilitytimezoneidx(pbillingentityid))
    DECLARE calcfacilitydate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    DECLARE chargeservicedate = i4 WITH protect, noconstant(0)
    SET chargeservicedate = cnvtint(build2(format(month(pdatetime),"##;P0"),format(day(pdatetime),
       "##;P0"),year(pdatetime)))
    SET facilitydate = cnvtdatetimeutc(pdatetime,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET calcfacilitydate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate
        ),"##;P0"),year(facilitydate)))
    SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(calcfacilitydate),235959),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    CALL logmessage("getCGFacilityEndOfDay","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getcgfacilitybeginningofweek,char(128))=char(128))
  SUBROUTINE (getcgfacilitybeginningofweek(pbillingentityid=f8,pdatetime=dq8) =dq8)
    CALL logmessage("getCGFacilityBeginningOfWeek","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, constant(getcgfacilitytimezoneidx(pbillingentityid))
    DECLARE calcfacilitydate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    DECLARE chargeservicedate = i4 WITH protect, noconstant(0)
    DECLARE serviceweekday = i4 WITH protect, noconstant(0)
    DECLARE servicemonth = i4 WITH protect, noconstant(0)
    SET chargeservicedate = cnvtint(build2(format(month(pdatetime),"##;P0"),format(day(pdatetime),
       "##;P0"),year(pdatetime)))
    SET facilitydate = cnvtdatetimeutc(pdatetime,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET serviceweekday = weekday(facilitydate)
    SET servicemonth = month(facilitydate)
    SET calcfacilitydate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate
        ),"##;P0"),year(facilitydate)))
    SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(cnvtlookbehind(concat(trim(cnvtstring(
           serviceweekday),3),",D"),cnvtdatetime(cnvtdate(calcfacilitydate),0))),0),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    IF (month(facilitydate) != servicemonth)
     SET facilitydate = getcgfacilitybeginningofmonth(pbillingentityid,pdatetime)
    ENDIF
    CALL logmessage("getCGFacilityBeginningOfWeek","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getcgfacilityendofweek,char(128))=char(128))
  SUBROUTINE (getcgfacilityendofweek(pbillingentityid=f8,pdatetime=dq8) =dq8)
    CALL logmessage("getCGFacilityEndOfWeek","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, constant(getcgfacilitytimezoneidx(pbillingentityid))
    DECLARE calcfacilitydate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    DECLARE chargeservicedate = i4 WITH protect, noconstant(0)
    DECLARE serviceweekday = i4 WITH protect, noconstant(0)
    DECLARE servicemonth = i4 WITH protect, noconstant(0)
    SET chargeservicedate = cnvtint(build2(format(month(pdatetime),"##;P0"),format(day(pdatetime),
       "##;P0"),year(pdatetime)))
    SET facilitydate = cnvtdatetimeutc(pdatetime,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET serviceweekday = weekday(facilitydate)
    SET servicemonth = month(facilitydate)
    SET calcfacilitydate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate
        ),"##;P0"),year(facilitydate)))
    SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(cnvtlookahead(concat(trim(cnvtstring((6
            - serviceweekday)),3),",D"),cnvtdatetime(cnvtdate(calcfacilitydate),0))),235959),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    IF (month(facilitydate) != servicemonth)
     SET facilitydate = getcgfacilityendofmonth(pbillingentityid,pdatetime)
    ENDIF
    CALL logmessage("getCGFacilityEndOfWeek","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getcgfacilitybeginningofmonth,char(128))=char(128))
  SUBROUTINE (getcgfacilitybeginningofmonth(pbillingentityid=f8,pdatetime=dq8) =dq8)
    CALL logmessage("getCGFacilityBeginningOfMonth","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, constant(getcgfacilitytimezoneidx(pbillingentityid))
    DECLARE calcfacilitydate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    DECLARE chargeservicedate = i4 WITH protect, noconstant(0)
    DECLARE servicemonth = i4 WITH protect, noconstant(0)
    DECLARE serviceyear = i4 WITH protect, noconstant(0)
    SET chargeservicedate = cnvtint(build2(format(month(pdatetime),"##;P0"),format(day(pdatetime),
       "##;P0"),year(pdatetime)))
    SET facilitydate = cnvtdatetimeutc(pdatetime,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET servicemonth = month(facilitydate)
    SET serviceyear = year(facilitydate)
    SET calcfacilitydate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate
        ),"##;P0"),year(facilitydate)))
    SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate2(concat(format(servicemonth,"##;P0"),
        format(01,"##;P0"),format(serviceyear,"####;P0")),"MMDDYYYY"),0),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    CALL logmessage("getCGFacilityBeginningOfMonth","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getcgfacilityendofmonth,char(128))=char(128))
  SUBROUTINE (getcgfacilityendofmonth(pbillingentityid=f8,pdatetime=dq8) =dq8)
    CALL logmessage("getCGFacilityEndOfMonth","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, constant(getcgfacilitytimezoneidx(pbillingentityid))
    DECLARE calcfacilitydate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    DECLARE chargeservicedate = i4 WITH protect, noconstant(0)
    DECLARE servicemonth = i4 WITH protect, noconstant(0)
    DECLARE serviceyear = i4 WITH protect, noconstant(0)
    SET chargeservicedate = cnvtint(build2(format(month(pdatetime),"##;P0"),format(day(pdatetime),
       "##;P0"),year(pdatetime)))
    SET facilitydate = cnvtdatetimeutc(pdatetime,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET servicemonth = month(facilitydate)
    SET serviceyear = year(facilitydate)
    SET calcfacilitydate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate
        ),"##;P0"),year(facilitydate)))
    SET facilitydate = cnvtdatetime(cnvtdate2(concat(format(servicemonth,"##;P0"),format(01,"##;P0"),
       format(serviceyear,"####;P0")),"MMDDYYYY"),0)
    SET facilitydate = cnvtdatetimeutc(cnvtlookbehind("1,S",cnvtlookahead("1,M",facilitydate)),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    CALL logmessage("getCGFacilityEndOfMonth","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getcgfacilitytzadmitdatetime,char(128))=char(128))
  SUBROUTINE (getcgfacilitytzadmitdatetime(pbillingentityid=f8,pdatetime=dq8,pgroupbypreadmitchrgdays
   =i4) =dq8)
    CALL logmessage("getCGFacilityTZAdmitDateTime","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, constant(getcgfacilitytimezoneidx(pbillingentityid))
    DECLARE calcfacilitydate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    DECLARE admittime = vc WITH protect, noconstant("")
    SET admittime = cnvtalphanum(datetimezoneformat(pdatetime,timezoneindex,"HH:mm:ss"),1)
    SET facilitydate = cnvtdatetimeutc(pdatetime,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET calcfacilitydate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate
        ),"##;P0"),year(facilitydate)))
    IF (pgroupbypreadmitchrgdays != 0)
     SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(cnvtlookbehind(concat(trim(cnvtstring(
            pgroupbypreadmitchrgdays),3),",D"),cnvtdatetime(cnvtdate(calcfacilitydate),0))),0),2)
    ELSEIF (pgroupbypreadmitchrgdays=0)
     SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(calcfacilitydate),cnvttime2(admittime,
        "HHMMSS")),2)
    ENDIF
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    CALL logmessage("getCGFacilityTZAdmitDateTime","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getcgfacilityeopdate,char(128))=char(128))
  SUBROUTINE (getcgfacilityeopdate(pbillingentityid=f8,pdatetime=dq8,peopmonth=i4,peopday=i4) =dq8)
    CALL logmessage("getCGFacilityEOPDate","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, constant(getcgfacilitytimezoneidx(pbillingentityid))
    DECLARE calcfacilitydate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    DECLARE chargeservicedate = i4 WITH protect, noconstant(0)
    DECLARE serviceday = i4 WITH protect, noconstant(0)
    DECLARE servicemonth = i4 WITH protect, noconstant(0)
    DECLARE serviceyear = i4 WITH protect, noconstant(0)
    SET chargeservicedate = cnvtint(build2(format(month(pdatetime),"##;P0"),format(day(pdatetime),
       "##;P0"),year(pdatetime)))
    SET facilitydate = cnvtdatetimeutc(pdatetime,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET serviceday = day(facilitydate)
    SET servicemonth = month(facilitydate)
    SET serviceyear = year(facilitydate)
    SET calcfacilitydate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate
        ),"##;P0"),year(facilitydate)))
    IF (((servicemonth > peopmonth) OR (servicemonth=peopmonth
     AND serviceday > peopday)) )
     SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate2(concat(format(peopmonth,"##;P0"),
         format(peopday,"##;P0"),format((serviceyear+ 1),"####;P0")),"MMDDYYYY"),235959),2)
    ELSE
     SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate2(concat(format(peopmonth,"##;P0"),
         format(peopday,"##;P0"),format(serviceyear,"####;P0")),"MMDDYYYY"),235959),2)
    ENDIF
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    CALL logmessage("getCGFacilityEOPDate","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getcgfacilityservicedatetime,char(128))=char(128))
  SUBROUTINE (getcgfacilityservicedatetime(pbillingentityid=f8,pdatetime=dq8) =dq8)
    CALL logmessage("getCGFacilityServiceDateTime","Entering...",log_debug)
    DECLARE timezoneindex = i4 WITH protect, constant(getcgfacilitytimezoneidx(pbillingentityid))
    DECLARE calcfacilitydate = i4 WITH protect, noconstant(0)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    DECLARE chargeservicedate = i4 WITH protect, noconstant(0)
    DECLARE chargeservicetime = vc WITH protect, noconstant("")
    SET chargeservicedate = cnvtint(build2(format(month(pdatetime),"##;P0"),format(day(pdatetime),
       "##;P0"),year(pdatetime)))
    SET chargeservicetime = cnvtalphanum(datetimezoneformat(pdatetime,timezoneindex,"HH:mm:ss"),1)
    SET facilitydate = cnvtdatetimeutc(pdatetime,2,timezoneindex)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1)
    SET calcfacilitydate = cnvtint(build2(format(month(facilitydate),"##;P0"),format(day(facilitydate
        ),"##;P0"),year(facilitydate)))
    SET facilitydate = cnvtdatetimeutc(cnvtdatetime(cnvtdate(calcfacilitydate),cnvttime2(
       chargeservicetime,"HHMMSS")),2)
    SET facilitydate = cnvtdatetimeutc(facilitydate,1,timezoneindex)
    CALL logmessage("getCGFacilityServiceDateTime","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(getfacilitytimezonedatetime,char(128))=char(128))
  SUBROUTINE (getfacilitytimezonedatetime(pdatetime=dq8,pfactimezoneindex=i4) =dq8)
    CALL logmessage("getFacilityTimeZoneDateTime","Entering...",log_debug)
    DECLARE facilitydate = dq8 WITH protect, noconstant(0)
    SET facilitydate = cnvtdatetimeutc(pdatetime,1)
    SET facilitydate = cnvtdatetimeutc(facilitydate,2,pfactimezoneindex)
    CALL logmessage("getFacilityTimeZoneDateTime","Exiting...",log_debug)
    RETURN(facilitydate)
  END ;Subroutine
 ENDIF
 IF (validate(logsolutioncapability,char(128))=char(128))
  SUBROUTINE (logsolutioncapability(teamname=vc,capability_ident=vc,entityid=f8,entity_name=vc) =i2)
    RECORD capabilityrequest(
      1 teamname = vc
      1 capability_ident = vc
      1 entities[1]
        2 entity_id = f8
        2 entity_name = vc
    ) WITH protect
    RECORD capabilityreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET capabilityrequest->teamname = teamname
    SET capabilityrequest->capability_ident = capability_ident
    SET capabilityrequest->entities[1].entity_id = entityid
    SET capabilityrequest->entities[1].entity_name = entity_name
    EXECUTE pft_log_solution_capability  WITH replace("REQUEST",capabilityrequest), replace("REPLY",
     capabilityreply)
    IF ((capabilityreply->status_data.status != "S"))
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(cs354_selfpay_cd)))
  DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
 ENDIF
 IF ( NOT (validate(cs13031_hpexpire_cd)))
  DECLARE cs13031_hpexpire_cd = f8 WITH protect, constant(getcodevalue(13031,"HPEXPIRE",1))
 ENDIF
 IF ( NOT (validate(cs13031_nonrechpexpire_cd)))
  DECLARE cs13031_nonrechpexpire_cd = f8 WITH protect, constant(getcodevalue(13031,"NONRECHPEXP",0))
 ENDIF
 IF ( NOT (validate(eod_time)))
  DECLARE eod_time = f8 WITH protect, constant(cnvttime3(235959,2))
 ENDIF
 IF ( NOT (validate(cs13031_hpexp_cd)))
  DECLARE cs13031_hpexp_cd = f8 WITH protect, constant(getcodevalue(13031,"HPEXP",1))
 ENDIF
 DECLARE hp_effective_dt_tm = f8 WITH protect, noconstant(cnvtdatetime(sysdate))
 IF ( NOT (validate(mid_month_toggle_name)))
  DECLARE mid_month_toggle_name = vc WITH constant("urn:cerner:millennium:mid-month")
 ENDIF
 IF ( NOT (validate(mid_month_cap_ident)))
  DECLARE mid_month_cap_ident = vc WITH protect, constant("PJ074243.1")
 ENDIF
 IF ( NOT (validate(pa_team_name)))
  DECLARE pa_team_name = vc WITH protect, constant("PATIENT_ACCOUNTING")
 ENDIF
 IF ( NOT (validate(profit_solution_name)))
  DECLARE profit_solution_name = vc WITH protect, constant("PROFIT")
 ENDIF
 DECLARE ismidmonthpreferenceenabled = i2 WITH protect, noconstant(false)
 IF ( NOT (ismidmonthfeatureenabled(mid_month_toggle_name,ismidmonthpreferenceenabled)))
  CALL logmessage("isMidMonthFeatureEnabled",build("Failed to get Feature Toggle details : ",
    mid_month_toggle_name),log_debug)
 ENDIF
 IF (validate(getregistrationcobbyencounter,char(128))=char(128))
  SUBROUTINE (getregistrationcobbyencounter(pencntrid=f8,ploaddefaultspind=i2) =i2)
    DECLARE inscnt = i4 WITH protect, noconstant(0)
    DECLARE spcnt = i4 WITH protect, noconstant(0)
    DECLARE billingentityid = f8 WITH protect, noconstant(0.0)
    DECLARE timezoneindex = i4 WITH protect, noconstant(0)
    CALL getbillingentitybyencounter(pencntrid,billingentityid)
    SET timezoneindex = getcgfacilitytimezoneidx(billingentityid)
    IF ( NOT (validate(cobrec->cobrec)
     AND validate(cobrec->selfpays)))
     CALL logmessage("GetRegistrationCOBByEncounter",
      "cobRec is either not defined, or defined incorrectly",log_error)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM encntr_plan_cob epc,
      encntr_plan_cob_reltn epcr,
      encntr_plan_reltn epr,
      health_plan hp
     PLAN (epc
      WHERE epc.encntr_id=pencntrid
       AND epc.active_ind=true)
      JOIN (epcr
      WHERE epcr.encntr_plan_cob_id=epc.encntr_plan_cob_id
       AND epcr.active_ind=true)
      JOIN (epr
      WHERE epr.encntr_plan_reltn_id=epcr.encntr_plan_reltn_id
       AND epr.active_ind=true)
      JOIN (hp
      WHERE hp.health_plan_id=epr.health_plan_id)
     ORDER BY epc.encntr_plan_cob_id, epcr.priority_seq
     HEAD REPORT
      cobcount = 0
     HEAD epc.encntr_plan_cob_id
      cobcount += 1, inscnt = 0, spcnt = 0,
      stat = alterlist(cobrec->cobrec,cobcount), cobrec->cobrec[cobcount].encntrplancobid = epc
      .encntr_plan_cob_id, cobrec->cobrec[cobcount].begeffectivedttm = cnvtdatetimeutc(epc
       .beg_effective_dt_tm,1),
      cobrec->cobrec[cobcount].begeffectivedttm = cnvtdatetimeutc(cobrec->cobrec[cobcount].
       begeffectivedttm,2,timezoneindex), cobrec->cobrec[cobcount].endeffectivedttm = cnvtdatetimeutc
      (epc.end_effective_dt_tm,1), cobrec->cobrec[cobcount].endeffectivedttm = cnvtdatetimeutc(cobrec
       ->cobrec[cobcount].endeffectivedttm,2,timezoneindex)
     HEAD epcr.priority_seq
      IF (hp.financial_class_cd=cs354_selfpay_cd)
       spcnt += 1, stat = alterlist(cobrec->cobrec[cobcount].selfpays,spcnt), cobrec->cobrec[cobcount
       ].selfpays[spcnt].healthplanid = epr.health_plan_id,
       cobrec->cobrec[cobcount].selfpays[spcnt].begeffectivedttm = cnvtdatetimeutc(epr
        .beg_effective_dt_tm,1), cobrec->cobrec[cobcount].selfpays[spcnt].begeffectivedttm =
       cnvtdatetimeutc(cobrec->cobrec[cobcount].selfpays[spcnt].begeffectivedttm,2,timezoneindex),
       cobrec->cobrec[cobcount].selfpays[spcnt].endeffectivedttm = cnvtdatetimeutc(epr
        .end_effective_dt_tm,1),
       cobrec->cobrec[cobcount].selfpays[spcnt].endeffectivedttm = cnvtdatetimeutc(cobrec->cobrec[
        cobcount].selfpays[spcnt].endeffectivedttm,2,timezoneindex), cobrec->cobrec[cobcount].
       selfpays[spcnt].encntrplanreltnid = epr.encntr_plan_reltn_id
      ELSE
       inscnt += 1, stat = alterlist(cobrec->cobrec[cobcount].payers,inscnt), cobrec->cobrec[cobcount
       ].payers[inscnt].healthplanid = epr.health_plan_id,
       cobrec->cobrec[cobcount].payers[inscnt].prioritysequence = epcr.priority_seq, cobrec->cobrec[
       cobcount].payers[inscnt].begeffectivedttm = cnvtdatetimeutc(epr.beg_effective_dt_tm,1), cobrec
       ->cobrec[cobcount].payers[inscnt].begeffectivedttm = cnvtdatetimeutc(cobrec->cobrec[cobcount].
        payers[inscnt].begeffectivedttm,2,timezoneindex),
       cobrec->cobrec[cobcount].payers[inscnt].endeffectivedttm = cnvtdatetimeutc(epr
        .end_effective_dt_tm,1), cobrec->cobrec[cobcount].payers[inscnt].endeffectivedttm =
       cnvtdatetimeutc(cobrec->cobrec[cobcount].payers[inscnt].endeffectivedttm,2,timezoneindex),
       cobrec->cobrec[cobcount].payers[inscnt].encntrplanreltnid = epr.encntr_plan_reltn_id,
       cobrec->cobrec[cobcount].payers[inscnt].encntrplancobreltnid = epcr.encntr_plan_cob_reltn_id
      ENDIF
     WITH nocounter
    ;end select
    IF (size(cobrec->cobrec,5)=0)
     SELECT INTO "nl:"
      FROM encntr_plan_reltn epr,
       health_plan hp
      PLAN (epr
       WHERE epr.encntr_id=pencntrid
        AND epr.active_ind=true)
       JOIN (hp
       WHERE hp.health_plan_id=epr.health_plan_id)
      ORDER BY epr.priority_seq
      DETAIL
       stat = alterlist(cobrec->cobrec,1), cobrec->cobrec[1].encntrplancobid = 0.0, cobrec->cobrec[1]
       .begeffectivedttm = cnvtdatetime("01-JAN-1800 00:00"),
       cobrec->cobrec[1].endeffectivedttm = cnvtdatetime("31-DEC-2100 23:59:59")
       IF (hp.financial_class_cd=cs354_selfpay_cd)
        spcnt += 1, stat = alterlist(cobrec->cobrec[1].selfpays,spcnt), cobrec->cobrec[1].selfpays[
        spcnt].healthplanid = epr.health_plan_id,
        cobrec->cobrec[1].selfpays[spcnt].begeffectivedttm = cnvtdatetimeutc(epr.beg_effective_dt_tm,
         1), cobrec->cobrec[1].selfpays[spcnt].begeffectivedttm = cnvtdatetimeutc(cobrec->cobrec[1].
         selfpays[spcnt].begeffectivedttm,2,timezoneindex), cobrec->cobrec[1].selfpays[spcnt].
        endeffectivedttm = cnvtdatetimeutc(epr.end_effective_dt_tm,1),
        cobrec->cobrec[1].selfpays[spcnt].endeffectivedttm = cnvtdatetimeutc(cnvtdatetimeutc(epr
          .end_effective_dt_tm,1),2,timezoneindex), cobrec->cobrec[1].selfpays[spcnt].
        encntrplanreltnid = epr.encntr_plan_reltn_id
       ELSE
        inscnt += 1, stat = alterlist(cobrec->cobrec[1].payers,inscnt), cobrec->cobrec[1].payers[
        inscnt].healthplanid = epr.health_plan_id,
        cobrec->cobrec[1].payers[inscnt].prioritysequence = epr.priority_seq, cobrec->cobrec[1].
        payers[inscnt].begeffectivedttm = cnvtdatetimeutc(epr.beg_effective_dt_tm,1), cobrec->cobrec[
        1].payers[inscnt].begeffectivedttm = cnvtdatetimeutc(cobrec->cobrec[1].payers[inscnt].
         begeffectivedttm,2,timezoneindex),
        cobrec->cobrec[1].payers[inscnt].endeffectivedttm = cnvtdatetimeutc(epr.end_effective_dt_tm,1
         ), cobrec->cobrec[1].payers[inscnt].endeffectivedttm = cnvtdatetimeutc(cobrec->cobrec[1].
         payers[inscnt].endeffectivedttm,2,timezoneindex), cobrec->cobrec[1].payers[inscnt].
        encntrplanreltnid = epr.encntr_plan_reltn_id
       ENDIF
      WITH nocounter
     ;end select
    ENDIF
    IF (ploaddefaultspind)
     DECLARE defaultselfpayhpid = f8 WITH protect, noconstant(0.0)
     DECLARE defaultspcnt = i4 WITH protect, noconstant(0)
     IF (validate(gcharge->interface_billing_entity,0.0) > 0.0)
      CALL getdefaultselfpayhealthplan(gcharge->interface_billing_entity,defaultselfpayhpid)
     ELSE
      CALL getdefaultselfpayhealthplan(billingentityid,defaultselfpayhpid)
     ENDIF
     IF (defaultselfpayhpid > 0.0)
      SET defaultspcnt += 1
      SET stat = alterlist(cobrec->selfpays,defaultspcnt)
      SET cobrec->selfpays[defaultspcnt].healthplanid = defaultselfpayhpid
      SET cobrec->selfpays[defaultspcnt].begeffectivedttm = cnvtdatetime("01-JAN-1800 00:00")
      SET cobrec->selfpays[defaultspcnt].endeffectivedttm = cnvtdatetime("31-DEC-2100 23:59:59")
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getdefaultselfpayhealthplan,char(128))=char(128))
  SUBROUTINE (getdefaultselfpayhealthplan(pbillingentityid=f8,prselfpayhealthplanid=f8(ref)) =i2)
    SET prselfpayhealthplanid = 0.0
    SELECT INTO "nl:"
     FROM billing_entity be
     PLAN (be
      WHERE be.billing_entity_id=pbillingentityid
       AND be.billing_entity_id > 0.0)
     DETAIL
      prselfpayhealthplanid = be.default_selfpay_hp_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(gethealthplaneffectivedatetimeforencounter,char(128))=char(128))
  SUBROUTINE (gethealthplaneffectivedatetimeforencounter(ppftencntrid=f8) =f8)
    DECLARE datetime = f8 WITH protect, noconstant(hp_effective_dt_tm)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    DECLARE factimezoneidx = i4 WITH protect, noconstant(0)
    DECLARE billingentityid = f8 WITH protect, noconstant(0.0)
    DECLARE dischargedttm = dq8 WITH protect, noconstant(0.0)
    DECLARE recurind = i2 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE pe.pft_encntr_id=ppftencntrid)
     DETAIL
      encntrid = pe.encntr_id
     WITH nocounter
    ;end select
    CALL getbillingentitybyencounter(encntrid,billingentityid)
    SET factimezoneidx = getcgfacilitytimezoneidx(billingentityid)
    IF (cs13031_hpexpire_cd > 0.0)
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       encounter e,
       bill_org_payor bop
      PLAN (pe
       WHERE pe.pft_encntr_id=ppftencntrid
        AND pe.recur_ind=1
        AND pe.recur_current_month > 0
        AND pe.recur_current_year > 0)
       JOIN (e
       WHERE e.encntr_id=pe.encntr_id)
       JOIN (bop
       WHERE bop.bill_org_type_cd=cs13031_hpexpire_cd
        AND bop.organization_id=e.organization_id
        AND bop.bill_org_type_ind=true
        AND bop.active_ind=true)
      HEAD REPORT
       dischargedttm = cnvtdatetimeutc(cnvtdatetimeutc(e.disch_dt_tm,1),2,factimezoneidx), recurind
        = pe.recur_ind
       IF (month(dischargedttm)=pe.recur_current_month
        AND year(dischargedttm)=pe.recur_current_year)
        datetime = dischargedttm
       ELSE
        datetime = datetimefind(cnvtdatetime(cnvtdate(build(format(pe.recur_current_month,"##;P0"),
            "01",pe.recur_current_year)),0),"M","E","E"), datetime = cnvtdatetimeutc(datetime,2,
         factimezoneidx)
       ENDIF
      WITH nocounter
     ;end select
     IF (recurind=0)
      SET datetime = cnvtdatetimeutc(datetime,1)
      SET datetime = cnvtdatetimeutc(datetime,2,factimezoneidx)
     ENDIF
    ENDIF
    RETURN(datetime)
  END ;Subroutine
 ENDIF
 IF (validate(getinsurancehealthplanbydatetime,char(128))=char(128))
  SUBROUTINE (getinsurancehealthplanbydatetime(pprioritysequence=i4,pdatetime=f8,pencntrplancobid=f8,
   prhealthplanid=f8(ref),prencntrplanreltnid=f8(ref)) =i2)
    DECLARE errorind = i2 WITH protect, noconstant(false)
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE hpsize = i4 WITH protect, noconstant(0)
    DECLARE hpcnt = i4 WITH protect, noconstant(0)
    DECLARE count = i4 WITH protect, noconstant(0)
    DECLARE gapcount = i4 WITH protect, noconstant(0)
    DECLARE pencntrid = f8 WITH protect, noconstant(0.0)
    DECLARE insidx = i4 WITH protect, noconstant(0)
    DECLARE payercnt = i4 WITH protect, noconstant(0)
    SET prhealthplanid = 0.0
    SET prencntrplanreltnid = 0.0
    IF (size(cobrec->cobrec,5) > 0)
     FOR (cobrecidx = 1 TO size(cobrec->cobrec,5))
       IF ((cobrec->cobrec[cobrecidx].encntrplancobid=pencntrplancobid)
        AND (cobrec->cobrec[cobrecidx].begeffectivedttm <= pdatetime)
        AND (cobrec->cobrec[cobrecidx].endeffectivedttm >= pdatetime))
        SELECT INTO "nl:"
         FROM encntr_plan_reltn epr
         PLAN (epr
          WHERE (epr.encntr_plan_reltn_id=cobrec->cobrec[cobrecidx].payers[1].encntrplanreltnid)
           AND epr.active_ind=true)
         DETAIL
          pencntrid = epr.encntr_id
         WITH nocounter
        ;end select
        IF ( NOT (checkiforgmarkedfornonrecurringhpexpire(pencntrid)))
         CALL logmessage("GetInsuranceHealthPlanByDateTime",
          "CheckIfOrgMarkedForNonRecurringHPExpire Org not marked as NonRec",log_debug)
         SELECT INTO "nl:"
          FROM (dummyt d  WITH seq = value(size(cobrec->cobrec[cobrecidx].payers,5)))
          PLAN (d
           WHERE (cobrec->cobrec[cobrecidx].payers[d.seq].prioritysequence=pprioritysequence)
            AND (cobrec->cobrec[cobrecidx].payers[d.seq].begeffectivedttm <= pdatetime)
            AND (cobrec->cobrec[cobrecidx].payers[d.seq].endeffectivedttm >= pdatetime))
          HEAD REPORT
           cnt = 0
          DETAIL
           cnt += 1
          FOOT REPORT
           IF (cnt > 1)
            errorind = true
           ENDIF
           prhealthplanid = cobrec->cobrec[cobrecidx].payers[d.seq].healthplanid, prencntrplanreltnid
            = cobrec->cobrec[cobrecidx].payers[d.seq].encntrplanreltnid
          WITH nocounter
         ;end select
         IF (errorind)
          IF (validate(cobrec->coverageoverlapind))
           SET cobrec->coverageoverlapind = true
          ENDIF
          CALL logmessage("GetInsuranceHealthPlanByDateTime",
           "COB cannot contain multiple effective health plans for same priority sequence on a given day",
           log_error)
          RETURN(false)
         ENDIF
         IF (prhealthplanid > 0)
          RETURN(true)
         ENDIF
         SELECT INTO "nl:"
          FROM (dummyt d  WITH seq = value(size(cobrec->cobrec[cobrecidx].payers,5)))
          PLAN (d
           WHERE (cobrec->cobrec[cobrecidx].payers[d.seq].prioritysequence > pprioritysequence)
            AND (cobrec->cobrec[cobrecidx].payers[d.seq].begeffectivedttm <= pdatetime)
            AND (cobrec->cobrec[cobrecidx].payers[d.seq].endeffectivedttm >= pdatetime))
          DETAIL
           gapcount += 1
          WITH nocounter
         ;end select
         IF (gapcount > 0)
          IF (validate(cobrec->coveragegapind))
           SET cobrec->coveragegapind = true
          ENDIF
          CALL logmessage("GetInsuranceHealthPlanByDateTime",
           "COB cannot contain contain coverage gaps on a given day",log_error)
          RETURN(false)
         ENDIF
        ELSE
         CALL logmessage("GetInsuranceHealthPlanByDateTime",
          "CheckIfOrgMarkedForNonRecurringHPExpire Org is marked as NonRec",log_debug)
         RECORD hplan(
           1 payers[*]
             2 hpprioritysequence = i4
             2 hphealthplanid = f8
         ) WITH protect
         SET payercnt = size(cobrec->cobrec[cobrecidx].payers,5)
         FOR (insidx = 1 TO payercnt)
           IF ((cobrec->cobrec[cobrecidx].payers[insidx].begeffectivedttm <= pdatetime)
            AND (cobrec->cobrec[cobrecidx].payers[insidx].endeffectivedttm >= pdatetime))
            SET hpsize += 1
            SET stat = alterlist(hplan->payers,hpsize)
            SET hplan->payers[hpsize].hpprioritysequence = cobrec->cobrec[cobrecidx].payers[insidx].
            prioritysequence
            SET hplan->payers[hpsize].hphealthplanid = cobrec->cobrec[cobrecidx].payers[insidx].
            healthplanid
            IF ((cobrec->cobrec[cobrecidx].payers[insidx].prioritysequence=pprioritysequence))
             SET prhealthplanid = cobrec->cobrec[cobrecidx].payers[insidx].healthplanid
             SET prencntrplanreltnid = cobrec->cobrec[cobrecidx].payers[insidx].encntrplanreltnid
            ENDIF
           ENDIF
         ENDFOR
         IF (hpsize > 0)
          FOR (hpcnt = 1 TO hpsize)
            IF ((hplan->payers[hpcnt].hpprioritysequence != hpcnt))
             IF (validate(cobrec->coveragegapind))
              SET cobrec->coveragegapind = true
             ENDIF
             CALL logmessage("GetInsuranceHealthPlanByDateTime",
              "COB cannot contain contain coverage gaps on a given day",log_error)
             RETURN(false)
            ENDIF
          ENDFOR
         ENDIF
        ENDIF
        RETURN(true)
       ENDIF
     ENDFOR
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(checkifmultipleprimariesarepresent,char(128))=char(128))
  SUBROUTINE (checkifmultipleprimariesarepresent(pservicedatetime=f8) =f8)
    DECLARE hpsize = i4 WITH protect, noconstant(0.0)
    IF (size(cobrec->cobrec,5) > 1)
     FOR (cobrecidx = 1 TO size(cobrec->cobrec,5))
      SELECT INTO "nl:"
       FROM (dummyt d  WITH seq = value(size(cobrec->cobrec[cobrecidx].payers,5)))
       PLAN (d
        WHERE (cobrec->cobrec[cobrecidx].begeffectivedttm <= pservicedatetime)
         AND (cobrec->cobrec[cobrecidx].endeffectivedttm >= pservicedatetime)
         AND (cobrec->cobrec[cobrecidx].payers[d.seq].begeffectivedttm <= pservicedatetime)
         AND (cobrec->cobrec[cobrecidx].payers[d.seq].endeffectivedttm >= pservicedatetime)
         AND (cobrec->cobrec[cobrecidx].payers[d.seq].prioritysequence=1))
       DETAIL
        hpsize += 1
       WITH nocounter
      ;end select
      IF (hpsize > 1)
       RETURN(true)
      ENDIF
     ENDFOR
    ELSE
     RETURN(false)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(checkiforgmarkedfornonrecurringhpexpire,char(128))=char(128))
  SUBROUTINE (checkiforgmarkedfornonrecurringhpexpire(pencntrid=f8) =f8)
   DECLARE encountertypeclasscd = f8 WITH protect, noconstant(0.0)
   IF (ismidmonthpreferenceenabled)
    RETURN(checkiforgmarkedforhpexpire(pencntrid))
   ELSE
    IF (cs13031_nonrechpexpire_cd > 0.0)
     SELECT INTO "nl:"
      FROM encounter e,
       bill_org_payor bop
      PLAN (e
       WHERE e.encntr_id=pencntrid)
       JOIN (bop
       WHERE bop.organization_id=e.organization_id
        AND bop.bill_org_type_cd=cs13031_nonrechpexpire_cd
        AND bop.bill_org_type_ind=true
        AND bop.active_ind=true)
      DETAIL
       encountertypeclasscd = e.encntr_type_class_cd
      WITH nocounter
     ;end select
     IF (curqual=1
      AND (encountertypeclasscd != gconstants->encounter_type_class_recurring_cd))
      RETURN(true)
     ELSE
      RETURN(false)
     ENDIF
    ELSE
     RETURN(false)
    ENDIF
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(getselfpayhealthplanbydatetime,char(128))=char(128))
  SUBROUTINE (getselfpayhealthplanbydatetime(pdatetime=f8,prhealthplanid=f8(ref),prencntrplanreltnid=
   f8(ref)) =i2)
    DECLARE errorind = i2 WITH protect, noconstant(false)
    DECLARE cobind = i2 WITH protect, noconstant(true)
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE cobrecidx = i4 WITH protect, noconstant(0)
    DECLARE insidx = i4 WITH protect, noconstant(0)
    SET prhealthplanid = 0.0
    SET prencntrplanreltnid = 0.0
    IF (size(cobrec->cobrec,5) > 0)
     FOR (cobrecidx = 1 TO size(cobrec->cobrec,5))
       IF (cobrecidx <= size(cobrec->cobrec,5)
        AND size(cobrec->cobrec[cobrecidx].selfpays,5) > 0)
        SELECT INTO "nl:"
         FROM (dummyt d  WITH seq = value(size(cobrec->cobrec[cobrecidx].selfpays,5)))
         PLAN (d
          WHERE (cobrec->cobrec[cobrecidx].begeffectivedttm <= pdatetime)
           AND (cobrec->cobrec[cobrecidx].endeffectivedttm >= pdatetime)
           AND (cobrec->cobrec[cobrecidx].selfpays[d.seq].begeffectivedttm <= pdatetime)
           AND (cobrec->cobrec[cobrecidx].selfpays[d.seq].endeffectivedttm >= pdatetime)
           AND (cobrec->cobrec[cobrecidx].selfpays[d.seq].encntrplanreltnid > 0.0))
         HEAD REPORT
          cnt = 0
         DETAIL
          cnt += 1
         FOOT REPORT
          IF (cnt > 1)
           errorind = true
          ENDIF
          prhealthplanid = cobrec->cobrec[cobrecidx].selfpays[d.seq].healthplanid,
          prencntrplanreltnid = cobrec->cobrec[cobrecidx].selfpays[d.seq].encntrplanreltnid
         WITH nocounter
        ;end select
        IF (errorind)
         CALL logmessage("GetSelfpayHealthPlanByDateTime",
          "COB cannot contain multiple effective selfpay health plans for a given day",log_error)
         RETURN(false)
        ENDIF
        IF (prhealthplanid > 0.0)
         RETURN(true)
        ENDIF
       ENDIF
     ENDFOR
    ENDIF
    IF (size(cobrec->selfpays,5) > 0)
     FOR (insidx = 1 TO size(cobrec->selfpays,5))
       SET prhealthplanid = cobrec->selfpays[insidx].healthplanid
     ENDFOR
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getinsurancehealthplan,char(128))=char(128))
  SUBROUTINE (getinsurancehealthplan(ppftencntrid=f8,pprioritysequence=i4,prhealthplanid=f8(ref),
   prencntrplanreltnid=f8(ref)) =i2)
    SET prhealthplanid = 0.0
    SET prencntrplanreltnid = 0.0
    DECLARE gencntrid = f8 WITH protect, noconstant(0.0)
    DECLARE pencntrplancobid = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE pe.pft_encntr_id=ppftencntrid)
     DETAIL
      gencntrid = pe.encntr_id, pencntrplancobid = pe.encntr_plan_cob_id
     WITH nocounter
    ;end select
    DECLARE hpdttm = f8 WITH protect, noconstant(gethealthplaneffectivedatetimeforencounter(
      ppftencntrid))
    FREE RECORD cobrec
    RECORD cobrec(
      1 cobrec[*]
        2 encntrplancobid = f8
        2 payers[*]
          3 healthplanid = f8
          3 prioritysequence = i4
          3 begeffectivedttm = dq8
          3 endeffectivedttm = dq8
          3 encntrplanreltnid = f8
          3 encntrplancobreltnid = f8
        2 selfpays[*]
          3 healthplanid = f8
          3 begeffectivedttm = dq8
          3 endeffectivedttm = dq8
          3 encntrplanreltnid = f8
        2 begeffectivedttm = dq8
        2 endeffectivedttm = dq8
      1 selfpays[*]
        2 healthplanid = f8
        2 begeffectivedttm = dq8
        2 endeffectivedttm = dq8
        2 encntrplanreltnid = f8
    )
    IF ( NOT (getregistrationcobbyencounter(gencntrid,false)))
     CALL logmessage("GetRegistrationCOBByEncounter",build2(
       "Cannot get the registration COB for encntr_id = ",gencntrid),log_error)
     RETURN(false)
    ENDIF
    IF ( NOT (getinsurancehealthplanbydatetime(pprioritysequence,hpdttm,pencntrplancobid,
     prhealthplanid,prencntrplanreltnid)))
     CALL logmessage("GetInsuranceHealthPlan",build2(
       "Cannot retrieve insurance health plan for pft_encntr_id = ",ppftencntrid),log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(checkiforgmarkedforhpexpire,char(128))=char(128))
  SUBROUTINE (checkiforgmarkedforhpexpire(pencntrid=f8) =i2)
    IF ( NOT (logsolutioncapability(pa_team_name,mid_month_cap_ident,pencntrid,"CLINICAL_ENCOUNTER"))
    )
     CALL logmessage("logSolutioncapability",
      "logSolutioncapability:pft_log_solution_capability failed to insert value",log_debug)
    ENDIF
    SELECT INTO "nl:"
     FROM encounter e,
      bill_org_payor bop
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
      JOIN (bop
      WHERE bop.organization_id=e.organization_id
       AND bop.bill_org_type_cd=cs13031_hpexp_cd
       AND bop.bill_org_type_ind=true
       AND bop.active_ind=true)
    ;end select
    IF (curqual=1)
     RETURN(true)
    ELSE
     RETURN(false)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(ismidmonthfeatureenabled,char(128))=char(128))
  SUBROUTINE (ismidmonthfeatureenabled(togglename=vc,prisfeatureenabled=i2(ref)) =i2)
    RECORD featuretogglerequest(
      1 togglename = vc
      1 username = vc
      1 positioncd = f8
      1 systemidentifier = vc
      1 solutionname = vc
    ) WITH protect
    RECORD featuretogglereply(
      1 togglename = vc
      1 isenabled = i2
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET featuretogglerequest->togglename = togglename
    SET featuretogglerequest->solutionname = profit_solution_name
    EXECUTE sys_check_feature_toggle  WITH replace("REQUEST",featuretogglerequest), replace("REPLY",
     featuretogglereply)
    IF ((featuretogglereply->status_data.status="S"))
     SET prisfeatureenabled = featuretogglereply->isenabled
     CALL logmessage("isMidMonthFeatureEnabled",build("Fetched Feature Toggle details for : ",
       togglename),log_debug)
    ELSE
     CALL logmessage("isMidMonthFeatureEnabled","Call to sys_check_feature_toggle failed",log_debug)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo("Begin PFT_RM_I18N_CONSTANTS.INC, version [645142.024]")
 IF (validate(i18nuar_def,999)=999)
  CALL echo("Declaring i18nuar_def")
  DECLARE i18nuar_def = i2 WITH persist
  SET i18nuar_def = 1
  DECLARE uar_i18nlocalizationinit(p1=i4,p2=vc,p3=vc,p4=f8) = i4 WITH persist
  DECLARE uar_i18ngetmessage(p1=i4,p2=vc,p3=vc) = vc WITH persist
  DECLARE uar_i18nbuildmessage() = vc WITH persist
  DECLARE uar_i18ngethijridate(imonth=i2(val),iday=i2(val),iyear=i2(val),sdateformattype=vc(ref)) =
  c50 WITH image_axp = "shri18nuar", image_aix = "libi18n_locale.a(libi18n_locale.o)", uar =
  "uar_i18nGetHijriDate",
  persist
  DECLARE uar_i18nbuildfullformatname(sfirst=vc(ref),slast=vc(ref),smiddle=vc(ref),sdegree=vc(ref),
   stitle=vc(ref),
   sprefix=vc(ref),ssuffix=vc(ref),sinitials=vc(ref),soriginal=vc(ref)) = c250 WITH image_axp =
  "shri18nuar", image_aix = "libi18n_locale.a(libi18n_locale.o)", uar = "i18nBuildFullFormatName",
  persist
  DECLARE uar_i18ngetarabictime(ctime=vc(ref)) = c20 WITH image_axp = "shri18nuar", image_aix =
  "libi18n_locale.a(libi18n_locale.o)", uar = "i18n_GetArabicTime",
  persist
 ENDIF
 DECLARE hi18n = i4 WITH protect, noconstant(0)
 SET stat = uar_i18nlocalizationinit(hi18n,curprog,"",curcclrev)
 DECLARE i18n_apply_health_plan_mod_on_encounter_in_bad_debt_comment = vc WITH protect, constant(
  uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Health plan modification performed on an encounter in bad debt",
   "Health plan modification performed on an encounter in bad debt"))
 DECLARE i18n_apply_health_plan_mod_on_encounter_in_history_comment = vc WITH protect, constant(
  uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Health plan modification performed after encounter moved to history",
   "Health plan modification performed after encounter moved to history"))
 DECLARE i18n_apply_guarantor_added_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Added guarantor","Added guarantor"))
 DECLARE i18n_apply_guarantor_removed_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Removed guarantor","Removed guarantor"))
 DECLARE i18n_apply_guarantor_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Changed guarantor from","Changed guarantor from"))
 DECLARE i18n_encntr_type_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Encounter type changed","Encounter type changed"))
 DECLARE i18n_to = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"PFT_RM_I18N_CONSTANTS. to",
   " to"))
 DECLARE i18n_from = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"PFT_RM_I18N_CONSTANTS. from",
   " from"))
 DECLARE i18n_apply_formal_pay_plan_removed_comment = vc WITH protect, constant(uar_i18ngetmessage(
   hi18n,"PFT_RM_I18N_CONSTANTS.Encounter removed from formal payment plan",
   "Encounter removed from formal payment plan"))
 DECLARE i18n_added = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Added ","Added "))
 DECLARE i18n_removed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Removed ","Removed "))
 DECLARE i18n_changed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Changed ","Changed "))
 DECLARE i18n_insurance = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. insurance "," insurance "))
 DECLARE i18n_primary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. primary "," primary "))
 DECLARE i18n_secondary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. secondary "," secondary "))
 DECLARE i18n_tertiary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. tertiary "," tertiary "))
 DECLARE i18n_fourth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. fourth "," fourth "))
 DECLARE i18n_fifth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. fifth "," fifth "))
 DECLARE i18n_sixth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. sixth "," sixth "))
 DECLARE i18n_seventh = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. seventh "," seventh "))
 DECLARE i18n_eighth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. eighth "," eighth "))
 DECLARE i18n_ninth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. ninth "," ninth "))
 DECLARE i18n_tenth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. tenth "," tenth "))
 DECLARE i18n_eleventh = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. eleventh "," eleventh "))
 DECLARE i18n_twelfth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. twelfth "," twelfth "))
 DECLARE i18n_thirteenth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. thirteenth "," thirteenth "))
 DECLARE i18n_fourteenth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. forteenth "," forteenth "))
 DECLARE i18n_fifteenth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. fifteenth "," fifteenth "))
 DECLARE i18n_sixteenth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. sixteenth "," sixteenth "))
 DECLARE i18n_seventeenth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. seventeenth "," seventeenth "))
 DECLARE i18n_eighteenth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. eighteenth "," eighteenth "))
 DECLARE i18n_nineteenth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. nineteenth "," nineteenth "))
 DECLARE i18n_twentieth = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. twentieth "," twentieth "))
 DECLARE i18n_beyondtwenty = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS. beyondtwenty "," Health Plan "))
 DECLARE i18n_encntr_not_locked_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.The encounter was not able to be locked while processing the registration modifications",
   build(
    "The encounter was not able to be locked while processing the registration modifications. The modifications can ",
    " be reevaluated when other services have finished processing this encounter")))
 DECLARE i18n_invalid_cob_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Invalid coordination of benefits found for this encounter",
   "Invalid coordination of benefits found for this encounter"))
 DECLARE i18n_encntr_in_bad_debt_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Encounter in bad debt","Encounter in bad debt"))
 DECLARE i18n_encntr_in_history_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Encounter in history","Encounter in history"))
 DECLARE i18n_em_failed_to_suspended_charges_message = vc WITH protect, constant(uar_i18ngetmessage(
   hi18n,"PFT_RM_I18N_CONSTANTS.Encounter modification evaluation failed due to suspended charges ",
   "Encounter modification evaluation failed due to suspended charges "))
 DECLARE i18n_em_failed_to_lock_error_message = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Encounter modification evaluation failed due to lock error",
   "Encounter modification evaluation failed due to lock error"))
 DECLARE i18n_em_failed_general_message = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Encounter modification evaluation failed ",
   "Encounter modification evaluation failed "))
 DECLARE i18n_em_succeeded_general_message = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Encounter modification was successfully evaluated",
   "Encounter modification was successfully evaluated"))
 DECLARE i18n_recurring_etc_pmcharge_message = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Encounter type change occurred moving from or to a recurring encounter type",
   "Encounter type change occurred moving from or to a recurring encounter type on an encounter with room and bed charges"
   ))
 DECLARE i18n_skip_rebill_event_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.The encounter modification had additional modifications",build(
    "The encounter modification had additional modifications beyond ",
    "the primary health plan. The modification cannot bypass re-billing with this condition.")))
 DECLARE i18n_skip_rebill_chrg_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.The encounter had charges that re-tiered, had bill code changes, or were unable to process",
   build(
    "The encounter had charges that re-tiered, had bill code changes, or were unable to process. ",
    "The modification cannot bypass re-billing with these conditions.")))
 DECLARE i18n_admit_date_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Admit date changed","Admit date changed"))
 DECLARE i18n_cross_hp_fail_835_posting_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Crossover HP Failed During 835 Posting",
   "Crossover HP Failed During 835 Posting"))
 DECLARE i18n_authorization_beg_date_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(
   hi18n,"PFT_RM_I18N_CONSTANTS.Service begin date changed","service begin date changed"))
 DECLARE i18n_authorization_info_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Authorization","Authorization"))
 DECLARE i18n_authorization_end_date_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(
   hi18n,"PFT_RM_I18N_CONSTANTS.Service end date changed","service end date changed"))
 DECLARE i18n_authorization_type_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Type changed","type changed"))
 DECLARE i18n_authorization_deleted_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.is deleted","is deleted"))
 DECLARE i18n_authorization_newly_added_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.is added","is added"))
 DECLARE i18n_authorization_status_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(
   hi18n,"PFT_RM_I18N_CONSTANTS.status changed","status changed"))
 DECLARE i18n_authorization_service_date_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.service date","service date"))
 DECLARE i18n_skip_financial_encounter_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Encounter was bypassed during encounter modifications because it was in bad debt or history",
   "Encounter was bypassed during encounter modifications because it was in bad debt or history"))
 DECLARE i18n_reg_date_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Registration date changed","Registration date changed"))
 DECLARE i18n_facility_changed_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.This encounter was transferred","This encounter was transferred"))
 DECLARE i18n_facility_trans_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.The transfer","The transfer"))
 DECLARE i18n_facility_cancel_trans_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.was canceled for this encounter","was canceled for this encounter"))
 DECLARE i18n_profile_conversion_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Profile Conversion",
   "Encounter was converted to using profiles with additional changes necessitating billing to be reset."
   ))
 DECLARE i18n_unable_to_determine_guarantor = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Unable to determine guarantor","Unable to determine guarantor"))
 DECLARE i18n_unable_to_determine_enctype = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Unable to determine encounter type","Unable to determine encounter type"))
 DECLARE i18n_surcharge_reprocessing_evaluation_comment = vc WITH protect, constant(
  uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Non-primary surcharge exempt evaluations performed due to health plan modifications.",
   "Non-primary surcharge exempt evaluations performed due to health plan modifications."))
 DECLARE i18n_add_guar_resp = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.A guarantor responsibility has been added",
   "A guarantor responsibility has been added"))
 DECLARE i18n_remove_guar_resp = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.A guarantor responsibility has been removed",
   "A guarantor responsibility has been removed"))
 DECLARE i18n_change_guar_resp = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.A guarantor responsibility has been changed",
   "A guarantor responsibility has been changed"))
 DECLARE i18n_guar_supr_corsp_timeline_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Guarantor Information Mismatch Present for Correspondence",
   "Guarantor Information Mismatch Present for Correspondence"))
 DECLARE i18n_guar_supr_corsp_hold = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "PFT_RM_I18N_CONSTANTS.Automatic Correspondence Suppression",
   "Automatic Correspondence Suppression"))
 DECLARE i18n_guar_supr_stmt_hold = vc WITH protect, constant(uar_i18ngetmessage(hi18n,build(
    "PFT_RM_I18N_CONSTANTS.Hold Applied on statement as the Guarantor details on statement does not match with",
    "Person Management Guarantor"),
   "Statement suppression hold applied due to mismatching guarantor information"))
 IF ( NOT (validate(i18n_guarmismatch)))
  DECLARE i18n_guarmismatch = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RM_I18N_CONSTANTS.I18N_GUARMISMATCH",
    "The guarantor information does not match the guarantor entered during registration"))
 ENDIF
 IF ( NOT (validate(i18n_autostmtsuppression)))
  DECLARE i18n_autostmtsuppression = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RM_I18N_CONSTANTS.I18N_AUTOSTMTSUPPRESSION","Automatic Statement Suppression"))
 ENDIF
 CALL echo("End PFT_RM_I18N_CONSTANTS.INC")
 CALL echo("Begin PFT_RM_STATUS_DETAIL_CONSTANTS.INC, version [545118.007]")
 IF ( NOT (validate(status_detail_lock_error)))
  DECLARE status_detail_lock_error = i4 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(status_detail_suspended_charges)))
  DECLARE status_detail_suspended_charges = i4 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(status_detail_invalid_cob)))
  DECLARE status_detail_invalid_cob = i4 WITH protect, constant(3)
 ENDIF
 IF ( NOT (validate(status_detail_encounter_in_history)))
  DECLARE status_detail_encounter_in_history = i4 WITH protect, constant(4)
 ENDIF
 IF ( NOT (validate(status_detail_encounter_in_baddebt)))
  DECLARE status_detail_encounter_in_baddebt = i4 WITH protect, constant(5)
 ENDIF
 IF ( NOT (validate(status_detail_skip_rebill_event_error)))
  DECLARE status_detail_skip_rebill_event_error = i4 WITH protect, constant(6)
 ENDIF
 IF ( NOT (validate(status_detail_skip_rebill_chrg_error)))
  DECLARE status_detail_skip_rebill_chrg_error = i4 WITH protect, constant(7)
 ENDIF
 IF ( NOT (validate(status_detail_hp_add_fail_835_posting)))
  DECLARE status_detail_hp_add_fail_835_posting = i4 WITH protect, constant(10)
 ENDIF
 IF ( NOT (validate(status_detail_guarantor_error)))
  DECLARE status_detail_guarantor_error = i4 WITH protect, constant(11)
 ENDIF
 IF ( NOT (validate(status_detail_enctype_error)))
  DECLARE status_detail_enctype_error = i4 WITH protect, constant(12)
 ENDIF
 RECORD regdata(
   1 dmg
     2 encountertype
       3 encntrtypecd = f8
       3 encntrtypeclasscd = f8
     2 guarantor
       3 guarid = f8
       3 guartype = vc
     2 multiguarantors[*]
       3 personid1 = f8
       3 personid2 = f8
       3 organizationid = f8
       3 guarantorresps[*]
         4 guarantorfinrespid = f8
         4 begineffectivedate = dq8
         4 endeffectivedate = dq8
         4 activeind = i2
     2 cob
       3 cobrec[*]
         4 encntrplancobid = f8
         4 payers[*]
           5 healthplanid = f8
           5 prioritysequence = i4
           5 begeffectivedttm = dq8
           5 endeffectivedttm = dq8
           5 encntrplanreltnid = f8
           5 encntrplancobreltnid = f8
         4 selfpays[*]
           5 healthplanid = f8
           5 begeffectivedttm = dq8
           5 endeffectivedttm = dq8
           5 encntrplanreltnid = f8
         4 begeffectivedttm = dq8
         4 endeffectivedttm = dq8
       3 selfpays[*]
         4 healthplanid = f8
         4 begeffectivedttm = dq8
         4 endeffectivedttm = dq8
         4 encntrplanreltnid = f8
     2 facility
       3 facilitycd = f8
 ) WITH protect
 RECORD findata(
   1 dmg
     2 encountertype
       3 encntrtypecd = f8
       3 encntrtypeclasscd = f8
     2 guarantor
       3 guarid = f8
       3 guartype = vc
     2 begindate = dq8
     2 enddate = dq8
     2 multiguarantors[*]
       3 personid1 = f8
       3 personid2 = f8
       3 organizationid = f8
       3 guarantorresps[*]
         4 guarantorfinrespid = f8
         4 begineffectivedate = dq8
         4 endeffectivedate = dq8
     2 cob
       3 cobrec[*]
         4 encntrplancobid = f8
         4 payers[*]
           5 healthplanid = f8
           5 prioritysequence = i4
           5 begeffectivedttm = dq8
           5 endeffectivedttm = dq8
           5 encntrplanreltnid = f8
           5 encntrplancobreltnid = f8
         4 selfpays[*]
           5 healthplanid = f8
           5 begeffectivedttm = dq8
           5 endeffectivedttm = dq8
           5 encntrplanreltnid = f8
         4 begeffectivedttm = dq8
         4 endeffectivedttm = dq8
       3 selfpays[*]
         4 healthplanid = f8
         4 begeffectivedttm = dq8
         4 endeffectivedttm = dq8
         4 encntrplanreltnid = f8
     2 facility
       3 facilitycd = f8
 ) WITH protect
 RECORD postedchargecoverageevalresults(
   1 evalcomplete = i2
   1 pftencntrs[*]
     2 pftencntrid = f8
     2 chrgcovevalflag = i4
     2 insbo[*]
       3 benefitorderid = f8
       3 minservicedttm = f8
       3 maxservicedttm = f8
       3 chrgcovevalflag = i2
       3 insbal[*]
         4 bohpreltnid = f8
         4 healthplanid = f8
         4 prioritysequence = i4
         4 chrgcovevalflag = i2
       3 charges[*]
         4 chargeitemid = f8
         4 servicedttm = f8
     2 spbenefitorderid = f8
     2 sphealthplanid = f8
     2 spchrgcovevalflag = i2
     2 spbocharges[*]
       3 chargeitemid = f8
       3 servicedttm = f8
       3 chrgcovevalflag = i2
   1 chargestoreprocess[*]
     2 chargeitemid = f8
 ) WITH protect
 IF ( NOT (validate(cs354_selfpay_cd)))
  DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
 ENDIF
 IF ( NOT (validate(cs24451_cancelled_cd)))
  DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
 ENDIF
 IF ( NOT (validate(cs24451_invalid_cd)))
  DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
 ENDIF
 IF ( NOT (validate(cs24450_pendregmod)))
  DECLARE cs24450_pendregmod = f8 WITH protect, constant(getcodevalue(24450,"PENDREGMOD",0))
 ENDIF
 IF ( NOT (validate(cs48_combined_cd)))
  DECLARE cs48_combined_cd = f8 WITH protect, constant(getcodevalue(48,"COMBINED",0))
 ENDIF
 IF ( NOT (validate(cs69_recurring_class_cd)))
  DECLARE cs69_recurring_class_cd = f8 WITH protect, constant(getcodevalue(69,"RECURRING",0))
 ENDIF
 IF ( NOT (validate(cs18736_ar_cd)))
  DECLARE cs18736_ar_cd = f8 WITH protect, constant(getcodevalue(18736,"A/R",0))
 ENDIF
 IF ( NOT (validate(cs20849_client_cd)))
  DECLARE cs20849_client_cd = f8 WITH protect, constant(getcodevalue(20849,"CLIENT",0))
 ENDIF
 IF ( NOT (validate(cs20849_patient_cd)))
  DECLARE cs20849_patient_cd = f8 WITH protect, constant(getcodevalue(20849,"PATIENT",0))
 ENDIF
 IF ( NOT (validate(cs24269_history_cd)))
  DECLARE cs24269_history_cd = f8 WITH protect, constant(getcodevalue(24269,"HISTORY",0))
 ENDIF
 DECLARE flag_chrg_cov_dates_reprocess_none = i4 WITH protect, constant(1)
 DECLARE flag_chrg_cov_dates_reprocess_partial = i4 WITH protect, constant(2)
 DECLARE flag_chrg_cov_dates_reprocess_full = i4 WITH protect, constant(3)
 DECLARE pft_rm_person = vc WITH protect, constant("PERSON")
 DECLARE pft_rm_organization = vc WITH protect, constant("ORGANIZATION")
 IF (validate(getfinancialencounterbyclinicalencounter,char(128))=char(128))
  SUBROUTINE (getfinancialencounterbyclinicalencounter(pencntrid=f8,prpftencntrid=f8(ref)) =i2)
    DECLARE pecnt = i4 WITH protect, noconstant(0)
    SET prpftencntrid = 0.0
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE pe.encntr_id=pencntrid
       AND pe.active_ind=true)
     ORDER BY pe.pft_encntr_id
     HEAD pe.pft_encntr_id
      pecnt += 1, prpftencntrid = pe.pft_encntr_id
     WITH nocounter
    ;end select
    IF (pecnt <= 0)
     RETURN(false)
    ENDIF
    IF (pecnt > 1)
     SET prpftencntrid = 0.0
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getregistrationdata,char(128))=char(128))
  SUBROUTINE (getregistrationdata(encntrid=f8,encntrvalues=vc(ref)) =i2)
    DECLARE pftencntrid = f8 WITH protect, noconstant(0.0)
    DECLARE msgdetail = vc WITH protect, noconstant("")
    SET stat = initrec(regdata)
    SET stat = getfinancialencounterbyclinicalencounter(encntrid,pftencntrid)
    IF ( NOT (retrieveregguarantor(encntrid)))
     SET msgdetail = build2(i18n_unable_to_determine_guarantor," encntr_id: ",encntrid)
     CALL addstatusdetail(pftencntrid,status_detail_guarantor_error,msgdetail)
     RETURN(false)
    ENDIF
    IF ( NOT (retrieveregcob(encntrid)))
     SET msgdetail = build2(i18n_invalid_cob_comment," encntr_id: ",encntrid)
     CALL addstatusdetail(pftencntrid,status_detail_invalid_cob,msgdetail)
     RETURN(false)
    ENDIF
    IF ( NOT (retrieveregencountertype(encntrid,encntrvalues)))
     SET msgdetail = build2(i18n_unable_to_determine_enctype," encntr_id: ",encntrid)
     CALL addstatusdetail(pftencntrid,status_detail_enctype_error,msgdetail)
     RETURN(false)
    ENDIF
    IF ( NOT (retrieveregguarantorresps(encntrid)))
     CALL addtracemessage("getRegistrationData","retrieveRegGuarantorResps did not return success")
    ENDIF
    IF ( NOT (retrieveregfacility(encntrid,encntrvalues)))
     CALL addtracemessage("getRegistrationData","retrieveRegFacility did not return success")
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfinancialdata,char(128))=char(128))
  SUBROUTINE (getfinancialdata(pftencntrid=f8,encntrvalues=vc(ref)) =i2)
    SET stat = initrec(findata)
    IF ( NOT (retrievefinguarantor(pftencntrid)))
     CALL addstatusdetail(pftencntrid,status_detail_guarantor_error,
      i18n_unable_to_determine_guarantor)
     RETURN(false)
    ENDIF
    IF ( NOT (retrievefincob(pftencntrid)))
     CALL addstatusdetail(pftencntrid,status_detail_invalid_cob,i18n_invalid_cob_comment)
     RETURN(false)
    ENDIF
    IF ( NOT (retrievefinencountertype(pftencntrid,encntrvalues)))
     CALL addstatusdetail(pftencntrid,status_detail_enctype_error,i18n_unable_to_determine_enctype)
     RETURN(false)
    ENDIF
    IF ( NOT (retrievefinguarantorresps(pftencntrid)))
     CALL addtracemessage("getFinancialData","retrieveFinGuarantorResps did not return success")
     RETURN(false)
    ENDIF
    IF ( NOT (retrievefinservicedates(pftencntrid)))
     CALL addtracemessage("getFinancialData","retrieveFinServiceDates did not return success")
     RETURN(false)
    ENDIF
    IF ( NOT (retrievefinfacility(pftencntrid,encntrvalues)))
     CALL addtracemessage("retrieveFinFacility","retrieveFinFacility did not return success")
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(retrievefinguarantor,char(128))=char(128))
  SUBROUTINE (retrievefinguarantor(pftencntrid=f8) =i2)
    DECLARE guarcnt = i4 WITH protect, noconstant(0)
    SELECT DISTINCT INTO "nl:"
     cbos.person_id
     FROM benefit_order bo,
      cons_bo_sched cbos
     PLAN (bo
      WHERE bo.pft_encntr_id=pftencntrid
       AND bo.active_ind=true
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
      JOIN (cbos
      WHERE cbos.cons_bo_sched_id=bo.cons_bo_sched_id
       AND cbos.active_ind=true)
     DETAIL
      guarcnt += 1
      IF (cbos.person_id > 0.0)
       findata->dmg.guarantor.guarid = cbos.person_id, findata->dmg.guarantor.guartype =
       pft_rm_person
      ELSEIF (cbos.organization_id > 0.0)
       findata->dmg.guarantor.guarid = cbos.organization_id, findata->dmg.guarantor.guartype =
       pft_rm_organization
      ENDIF
     WITH nocounter
    ;end select
    IF (guarcnt > 1)
     CALL logmessage("retrieveFinGuarantor",build("Financial encounter [",pftencntrid,"]",
       " cannot be related to more than one guarantor"),log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(retrievefinservicedates,char(128))=char(128))
  SUBROUTINE (retrievefinservicedates(ppftencntrid=f8) =i2)
    DECLARE pebegindate = dq8 WITH protect, noconstant(cnvtdatetime(0.0))
    DECLARE peenddate = dq8 WITH protect, noconstant(cnvtdatetime(0.0))
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    IF ( NOT (getfinancialservicedatesforguarresps(ppftencntrid,encntrid,pebegindate,peenddate)))
     CALL logmessage("retrieveFinServiceDates",build(
       "Failed to populate finDate Service Dates for financial encounter [",ppftencntrid,"]"),
      log_debug)
     RETURN(false)
    ELSE
     SET findata->dmg.begindate = pebegindate
     SET findata->dmg.enddate = peenddate
     RETURN(true)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(retrievefinguarantorresps,char(128))=char(128))
  SUBROUTINE (retrievefinguarantorresps(pftencntrid=f8) =i2)
    DECLARE num = i4 WITH protect, noconstant(0)
    DECLARE length = i4 WITH protect, noconstant(0)
    DECLARE gcnt = i4 WITH protect, noconstant(0)
    DECLARE mgcnt = i4 WITH protect, noconstant(0)
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(findata)
    ENDIF
    SELECT DISTINCT INTO "nl:"
     FROM benefit_order bo,
      cbos_pe_reltn cper,
      cbos_activity_reltn car,
      cbos_person_reltn cpr,
      cons_bo_sched cbs
     PLAN (bo
      WHERE bo.pft_encntr_id=pftencntrid
       AND bo.active_ind=true
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
      JOIN (cper
      WHERE cper.pft_encntr_id=bo.pft_encntr_id
       AND cper.active_ind=true)
      JOIN (cbs
      WHERE cbs.cons_bo_sched_id=cper.cons_bo_sched_id
       AND cbs.active_ind=true)
      JOIN (cpr
      WHERE cpr.cons_bo_sched_id=cbs.cons_bo_sched_id
       AND cpr.active_ind=true)
      JOIN (car
      WHERE car.cbos_pe_reltn_id=cper.cbos_pe_reltn_id
       AND car.parent_entity_name="GUAR_FINANCIAL_RESP"
       AND car.active_ind=true)
     ORDER BY cper.cons_bo_sched_id, car.parent_entity_id, cpr.person_id,
      cpr.organization_id
     HEAD REPORT
      gcnt = size(findata->dmg.multiguarantors,5)
     HEAD cper.cons_bo_sched_id
      gcnt += 1, stat = alterlist(findata->dmg.multiguarantors,gcnt), mgcnt = 0
     HEAD car.parent_entity_id
      IF (car.parent_entity_id > 0.0)
       mgcnt += 1, stat = alterlist(findata->dmg.multiguarantors[gcnt].guarantorresps,mgcnt), findata
       ->dmg.multiguarantors[gcnt].guarantorresps[mgcnt].guarantorfinrespid = car.parent_entity_id,
       findata->dmg.multiguarantors[gcnt].guarantorresps[mgcnt].begineffectivedate = car
       .beg_effective_dt_tm, findata->dmg.multiguarantors[gcnt].guarantorresps[mgcnt].
       endeffectivedate = car.end_effective_dt_tm
      ENDIF
     HEAD cpr.person_id
      IF ((findata->dmg.multiguarantors[gcnt].personid1=0.0)
       AND cpr.person_id > 0.0)
       findata->dmg.multiguarantors[gcnt].personid1 = cpr.person_id
      ELSEIF ((findata->dmg.multiguarantors[gcnt].personid2=0.0)
       AND (cpr.person_id != findata->dmg.multiguarantors[gcnt].personid1)
       AND cpr.person_id > 0.0)
       findata->dmg.multiguarantors[gcnt].personid2 = cpr.person_id
      ENDIF
     HEAD cpr.organization_id
      IF ((findata->dmg.multiguarantors[gcnt].organizationid=0.0))
       findata->dmg.multiguarantors[gcnt].organizationid = cpr.organization_id
      ENDIF
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("retrieveFinGuarantorResps",build(
       "No Multiple Guarantor Info exists for financial encounter [",pftencntrid,"]"),log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveregguarantorresps,char(128))=char(128))
  SUBROUTINE (hasguarantorresp(void=i2) =i2)
   IF (((size(regdata->dmg.multiguarantors,5) > 0) OR (size(findata->dmg.multiguarantors,5) > 0)) )
    RETURN(true)
   ENDIF
   RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveregguarantorresps,char(128))=char(128))
  SUBROUTINE (retrieveregguarantorresps(pencounterid=f8) =i2)
    CALL logmessage("retrieveRegGuarantorResps","Enter",log_debug)
    DECLARE mgidx = i4 WITH protect, noconstant(0)
    DECLARE gridx = i4 WITH protect, noconstant(0)
    DECLARE num = i4 WITH protect, noconstant(0)
    DECLARE rgidx = i4 WITH protect, noconstant(0)
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    IF ( NOT (getguarantorfinancialresp(0.0,pencounterid,cnvtdatetime(0.0),rawguarresponsibilities,
     true)))
     CALL logmessage("getGuarantorInfo",
      "Error getting guarantors found from getGuarantorFinancialResp",log_debug)
     SET rtnval = false
    ELSE
     FOR (rgidx = 1 TO size(rawguarresponsibilities->guarantors,5))
       IF ((rawguarresponsibilities->guarantors[rgidx].guarantorid1 > 0.0))
        SET mgidx = locateval(num,1,size(regdata->dmg.multiguarantors,5),rawguarresponsibilities->
         guarantors[rgidx].guarantorid1,regdata->dmg.multiguarantors[num].personid1,
         rawguarresponsibilities->guarantors[rgidx].guarantorid2,regdata->dmg.multiguarantors[num].
         personid2)
        IF (mgidx=0)
         SET mgidx = (size(regdata->dmg.multiguarantors,5)+ 1)
         SET stat = alterlist(regdata->dmg.multiguarantors,mgidx)
         SET regdata->dmg.multiguarantors[mgidx].personid1 = rawguarresponsibilities->guarantors[
         rgidx].guarantorid1
         SET regdata->dmg.multiguarantors[mgidx].personid2 = rawguarresponsibilities->guarantors[
         rgidx].guarantorid2
        ENDIF
       ELSE
        SET mgidx = locateval(num,1,size(regdata->dmg.multiguarantors,5),rawguarresponsibilities->
         guarantors[rgidx].guarorgid,regdata->dmg.multiguarantors[num].organizationid)
        IF (mgidx=0)
         SET mgidx = (size(regdata->dmg.multiguarantors,5)+ 1)
         SET stat = alterlist(regdata->dmg.multiguarantors,mgidx)
         SET regdata->dmg.multiguarantors[mgidx].organizationid = rawguarresponsibilities->
         guarantors[rgidx].guarorgid
        ENDIF
       ENDIF
       SET gridx = locateval(num,1,size(regdata->dmg.multiguarantors[mgidx].guarantorresps,5),
        rawguarresponsibilities->guarantors[rgidx].guarfinancialrespid,regdata->dmg.multiguarantors[
        mgidx].guarantorresps[num].guarantorfinrespid)
       IF (gridx=0)
        SET gridx = (size(regdata->dmg.multiguarantors[mgidx].guarantorresps,5)+ 1)
        SET stat = alterlist(regdata->dmg.multiguarantors[mgidx].guarantorresps,gridx)
        SET regdata->dmg.multiguarantors[mgidx].guarantorresps[gridx].guarantorfinrespid =
        rawguarresponsibilities->guarantors[rgidx].guarfinancialrespid
        SET regdata->dmg.multiguarantors[mgidx].guarantorresps[gridx].begineffectivedate =
        rawguarresponsibilities->guarantors[rgidx].begineffectivedate
        SET regdata->dmg.multiguarantors[mgidx].guarantorresps[gridx].endeffectivedate =
        rawguarresponsibilities->guarantors[rgidx].endeffectivedate
        SET regdata->dmg.multiguarantors[mgidx].guarantorresps[gridx].activeind =
        rawguarresponsibilities->guarantors[rgidx].activeind
       ENDIF
     ENDFOR
    ENDIF
    SET stat = initrec(rawguarresponsibilities)
    CALL logmessage("retrieveRegGuarantorResps","Exit",log_debug)
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveregguarantor,char(128))=char(128))
  SUBROUTINE (retrieveregguarantor(encntrid=f8) =i2)
    DECLARE guarantorid = f8 WITH protect, noconstant(0.0)
    DECLARE encountermodsflag = i2 WITH protect, noconstant(true)
    SET stat = getguarantorbyencounter(encntrid,guarantorid,encountermodsflag)
    IF (guarantorid > 0.0)
     SET regdata->dmg.guarantor.guarid = guarantorid
     SET regdata->dmg.guarantor.guartype = pft_rm_person
    ELSE
     SET stat = getorgguarantorbyencounter(encntrid,guarantorid)
     IF (guarantorid > 0.0)
      SET regdata->dmg.guarantor.guarid = guarantorid
      SET regdata->dmg.guarantor.guartype = pft_rm_organization
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(retrievefincob,char(128))=char(128))
  SUBROUTINE (retrievefincob(pftencntrid=f8) =i2)
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      benefit_order bo,
      bo_hp_reltn bhr
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid
       AND pe.active_ind=true)
      JOIN (bo
      WHERE bo.pft_encntr_id=pe.pft_encntr_id
       AND bo.active_ind=true
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
     ORDER BY bhr.priority_seq
     HEAD REPORT
      inscnt = 0, slfpcnt = 0, stat = alterlist(findata->dmg.cob.cobrec,1)
     HEAD bhr.priority_seq
      findata->dmg.cob.cobrec[1].encntrplancobid = pe.encntr_plan_cob_id, findata->dmg.cob.cobrec[1].
      begeffectivedttm = cnvtdatetime("01-JAN-1800 00:00"), findata->dmg.cob.cobrec[1].
      endeffectivedttm = cnvtdatetime("31-DEC-2100 23:59:59")
      IF (bo.fin_class_cd=cs354_selfpay_cd)
       slfpcnt += 1, stat = alterlist(findata->dmg.cob.cobrec[1].selfpays,slfpcnt), findata->dmg.cob.
       cobrec[1].selfpays[slfpcnt].healthplanid = bhr.health_plan_id,
       findata->dmg.cob.cobrec[1].selfpays[slfpcnt].begeffectivedttm = cnvtdatetime(
        "01-JAN-1800 00:00"), findata->dmg.cob.cobrec[1].selfpays[slfpcnt].endeffectivedttm =
       cnvtdatetime("31-DEC-2100 23:59:59"), findata->dmg.cob.cobrec[1].selfpays[slfpcnt].
       encntrplanreltnid = bhr.encntr_plan_reltn_id
      ELSE
       inscnt += 1, stat = alterlist(findata->dmg.cob.cobrec[1].payers,inscnt), findata->dmg.cob.
       cobrec[1].payers[inscnt].healthplanid = bhr.health_plan_id,
       findata->dmg.cob.cobrec[1].payers[inscnt].prioritysequence = bhr.priority_seq, findata->dmg.
       cob.cobrec[1].payers[inscnt].begeffectivedttm = cnvtdatetime("01-JAN-1800 00:00"), findata->
       dmg.cob.cobrec[1].payers[inscnt].endeffectivedttm = cnvtdatetime("31-DEC-2100 23:59:59"),
       findata->dmg.cob.cobrec[1].payers[inscnt].encntrplanreltnid = bhr.encntr_plan_reltn_id
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bhr
     PLAN (bo
      WHERE bo.pft_encntr_id=pftencntrid
       AND bo.fin_class_cd=cs354_selfpay_cd
       AND bo.active_ind=true
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
     HEAD REPORT
      stat = alterlist(findata->dmg.cob.selfpays,1), findata->dmg.cob.selfpays[1].healthplanid = bhr
      .health_plan_id, findata->dmg.cob.selfpays[1].begeffectivedttm = cnvtdatetime(
       "01-JAN-1800 00:00"),
      findata->dmg.cob.selfpays[1].endeffectivedttm = cnvtdatetime("31-DEC-2100 23:59:59"), findata->
      dmg.cob.selfpays[1].encntrplanreltnid = bhr.encntr_plan_reltn_id
     WITH maxread(bo,1)
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveregcob,char(128))=char(128))
  SUBROUTINE (retrieveregcob(encntrid=f8) =i2)
    SET curalias cobrec regdata->dmg.cob
    IF ( NOT (getregistrationcobbyencounter(encntrid,true)))
     SET curalias cobrec off
     CALL logmessage("retrieveRegCOB",build("GetRegistrationCOBByEncounter did not return success",
       " for encounter [",encntrid,"]"),log_error)
     RETURN(false)
    ENDIF
    SET curalias cobrec off
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(istrueselfpayfincob,char(128))=char(128))
  SUBROUTINE (istrueselfpayfincob(pftencntrid=f8) =i2)
    DECLARE fininshpidforencounter = f8 WITH protect, noconstant(0.0)
    DECLARE hpprioritysequence = i4 WITH protect, noconstant(1)
    DECLARE encntrplanreltnid = f8 WITH protect, noconstant(0.0)
    IF ( NOT (getfinancialinsurancehpforencounter(pftencntrid,hpprioritysequence,
     fininshpidforencounter,encntrplanreltnid)))
     CALL addtracemessage("getFinancialInsuranceHPForEncounter",
      "getFinancialInsuranceHPForEncounter did not return success")
     RETURN(false)
    ELSEIF (fininshpidforencounter > 0.00)
     RETURN(false)
    ELSEIF (fininshpidforencounter=0.00)
     RETURN(true)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(istrueselfpayregcob,char(128))=char(128))
  SUBROUTINE (istrueselfpayregcob(pftencntrid=f8) =i2)
    DECLARE reginshpidforencounter = f8 WITH protect, noconstant(0.0)
    DECLARE hpprioritysequence = i4 WITH protect, noconstant(1)
    DECLARE encntrplanreltnid = f8 WITH protect, noconstant(0.0)
    IF ( NOT (getregistrationinsurancehpforencounter(pftencntrid,hpprioritysequence,
     reginshpidforencounter,encntrplanreltnid)))
     CALL addtracemessage("getRegistrationInsuranceHPForEncntr",
      "getRegistrationInsuranceHPForEncounter did not return success")
     RETURN(false)
    ELSEIF (reginshpidforencounter > 0.00)
     RETURN(false)
    ELSEIF (reginshpidforencounter=0.00)
     RETURN(true)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(retrievefinencountertype,char(128))=char(128))
  SUBROUTINE (retrievefinencountertype(pftencntrid=f8,encntrvalues=vc(ref)) =i2)
    DECLARE finencntrtypecd = f8 WITH protect, noconstant(0.0)
    DECLARE finencntrtypeclasscd = f8 WITH protect, noconstant(0.0)
    IF ( NOT (getoldencountertypeforfinancialencounter(pftencntrid,finencntrtypecd,
     finencntrtypeclasscd,encntrvalues)))
     CALL logmessage("retrieveFinEncounterType",build(
       "getOldEncounterTypeForFinancialEncounter did not return success"," for financial encounter [",
       pftencntrid,"]"),log_error)
     RETURN(false)
    ENDIF
    SET findata->dmg.encountertype.encntrtypecd = finencntrtypecd
    SET findata->dmg.encountertype.encntrtypeclasscd = finencntrtypeclasscd
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveregencountertype,char(128))=char(128))
  SUBROUTINE (retrieveregencountertype(encntrid=f8,encntrvalues=vc(ref)) =i2)
    DECLARE regencntrtypecd = f8 WITH protect, noconstant(0.0)
    DECLARE regencntrtypeclasscd = f8 WITH protect, noconstant(0.0)
    IF ( NOT (getnewencountertypeforfinancialencounter(encntrid,regencntrtypecd,regencntrtypeclasscd,
     encntrvalues)))
     CALL logmessage("retrieveRegEncounterType",build(
       "getNewEncounterTypeForFinancialEncounter did not return success"," for encounter [",encntrid,
       "]"),log_error)
     RETURN(false)
    ENDIF
    SET regdata->dmg.encountertype.encntrtypecd = regencntrtypecd
    SET regdata->dmg.encountertype.encntrtypeclasscd = regencntrtypeclasscd
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfinancialguarantor,char(128))=char(128))
  SUBROUTINE (getfinancialguarantor(void=i2) =f8)
    RETURN(findata->dmg.guarantor.guarid)
  END ;Subroutine
 ENDIF
 IF (validate(getregistrationguarantor,char(128))=char(128))
  SUBROUTINE (getregistrationguarantor(void=i2) =f8)
    RETURN(regdata->dmg.guarantor.guarid)
  END ;Subroutine
 ENDIF
 SUBROUTINE (getfinancialguarantortype(void=i2) =vc)
   RETURN(findata->dmg.guarantor.guartype)
 END ;Subroutine
 SUBROUTINE (getregistrationguarantortype(void=i2) =vc)
   RETURN(regdata->dmg.guarantor.guartype)
 END ;Subroutine
 IF (validate(getfinancialinsurancehpforencounter,char(128))=char(128))
  SUBROUTINE (getfinancialinsurancehpforencounter(pftencntrid=f8,prioritysequence=i4,healthplanid=f8(
    ref),encntrplanreltnid=f8(ref)) =i2)
    SET curalias cobrec findata->dmg.cob
    DECLARE hpdttm = f8 WITH protect, noconstant(gethealthplaneffectivedatetimeforencounter(
      pftencntrid))
    DECLARE encntrplancobid = f8 WITH protect, noconstant(0.0)
    SET encntrplanreltnid = 0.0
    SET healthplanid = 0.0
    SELECT INTO "nl:"
     FROM pft_encntr pe
     WHERE pe.pft_encntr_id=pftencntrid
      AND pe.active_ind=true
     DETAIL
      encntrplancobid = pe.encntr_plan_cob_id
     WITH nocounter
    ;end select
    IF ( NOT (getinsurancehealthplanbydatetime(prioritysequence,hpdttm,encntrplancobid,healthplanid,
     encntrplanreltnid)))
     RETURN(false)
    ENDIF
    SET curalias cobrec off
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getregistrationinsurancehpforencounter,char(128))=char(128))
  SUBROUTINE (getregistrationinsurancehpforencounter(pftencntrid=f8,prioritysequence=i4,healthplanid=
   f8(ref),encntrplanreltnid=f8(ref)) =i2)
    SET curalias cobrec regdata->dmg.cob
    DECLARE encntrplancobid = f8 WITH protect, noconstant(0.0)
    DECLARE pencntrid = f8 WITH protect, noconstant(0.0)
    DECLARE hpdttm = f8 WITH protect, noconstant(gethealthplaneffectivedatetimeforencounter(
      pftencntrid))
    SET encntrplanreltnid = 0.0
    SET healthplanid = 0.0
    SELECT INTO "nl:"
     FROM pft_encntr pe
     WHERE pe.pft_encntr_id=pftencntrid
      AND pe.active_ind=true
     DETAIL
      encntrplancobid = pe.encntr_plan_cob_id, pencntrid = pe.encntr_id
     WITH nocounter
    ;end select
    IF (checkiforgmarkedfornonrecurringhpexpire(pencntrid))
     IF (size(regdata->dmg.cob.cobrec,5) > 0)
      FOR (cobrecidx = 1 TO size(regdata->dmg.cob.cobrec,5))
        IF ((regdata->dmg.cob.cobrec[cobrecidx].encntrplancobid=encntrplancobid)
         AND size(regdata->dmg.cob.cobrec[cobrecidx].payers,5) > 0)
         IF ((regdata->dmg.cob.cobrec[cobrecidx].encntrplancobid=0.0)
          AND size(findata->dmg.cob.cobrec[1].payers,5) > 0)
          FOR (insidx = 1 TO size(regdata->dmg.cob.cobrec[cobrecidx].payers,5))
            FOR (finidx = 1 TO size(findata->dmg.cob.cobrec[1].payers,5))
              IF ((findata->dmg.cob.cobrec[1].payers[finidx].encntrplanreltnid=regdata->dmg.cob.
              cobrec[cobrecidx].payers[insidx].encntrplanreltnid))
               IF (cnvtdatetime(hpdttm) > cnvtdatetime(regdata->dmg.cob.cobrec[cobrecidx].payers[
                insidx].endeffectivedttm))
                SET hpdttm = regdata->dmg.cob.cobrec[cobrecidx].payers[insidx].endeffectivedttm
               ENDIF
              ENDIF
            ENDFOR
          ENDFOR
         ELSE
          FOR (insidx = 1 TO size(regdata->dmg.cob.cobrec[cobrecidx].payers,5))
            IF (cnvtdatetime(hpdttm) > cnvtdatetime(regdata->dmg.cob.cobrec[cobrecidx].payers[insidx]
             .endeffectivedttm))
             SET hpdttm = regdata->dmg.cob.cobrec[cobrecidx].payers[insidx].endeffectivedttm
            ENDIF
          ENDFOR
          IF (cnvtdatetime(hpdttm) > cnvtdatetime(regdata->dmg.cob.cobrec[cobrecidx].endeffectivedttm
           ))
           SET hpdttm = regdata->dmg.cob.cobrec[cobrecidx].endeffectivedttm
          ENDIF
         ENDIF
         SET cobrecidx = (size(regdata->dmg.cob.cobrec,5)+ 1)
        ENDIF
      ENDFOR
     ENDIF
    ENDIF
    IF ( NOT (getinsurancehealthplanbydatetime(prioritysequence,hpdttm,encntrplancobid,healthplanid,
     encntrplanreltnid)))
     RETURN(false)
    ENDIF
    SET curalias cobrec off
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfinancialselfpayhpforencounter,char(128))=char(128))
  SUBROUTINE (getfinancialselfpayhpforencounter(pftencntrid=f8,healthplanid=f8(ref),eprid=f8(ref)) =
   i2)
    SET curalias cobrec findata->dmg.cob
    DECLARE hpdttm = f8 WITH protect, noconstant(gethealthplaneffectivedatetimeforencounter(
      pftencntrid))
    SET healthplanid = 0.0
    SET eprid = 0.0
    IF ( NOT (getselfpayhealthplanbydatetime(hpdttm,healthplanid,eprid)))
     RETURN(false)
    ENDIF
    SET curalias cobrec off
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getregistrationselfpayhpforencounter,char(128))=char(128))
  SUBROUTINE (getregistrationselfpayhpforencounter(pftencntrid=f8,healthplanid=f8(ref),eprid=f8(ref)
   ) =i2)
    SET curalias cobrec regdata->dmg.cob
    DECLARE hpdttm = f8 WITH protect, noconstant(gethealthplaneffectivedatetimeforencounter(
      pftencntrid))
    SET healthplanid = 0.0
    SET eprid = 0.0
    IF ( NOT (getselfpayhealthplanbydatetime(hpdttm,healthplanid,eprid)))
     RETURN(false)
    ENDIF
    SET curalias cobrec off
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfinancialencountertype,char(128))=char(128))
  SUBROUTINE (getfinancialencountertype(encntrtypecd=f8(ref),encntrtypeclasscd=f8(ref)) =i2)
    SET encntrtypecd = findata->dmg.encountertype.encntrtypecd
    SET encntrtypeclasscd = findata->dmg.encountertype.encntrtypeclasscd
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getregistrationencountertype,char(128))=char(128))
  SUBROUTINE (getregistrationencountertype(encntrtypecd=f8(ref),encntrtypeclasscd=f8(ref)) =i2)
    SET encntrtypecd = regdata->dmg.encountertype.encntrtypecd
    SET encntrtypeclasscd = regdata->dmg.encountertype.encntrtypeclasscd
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getnewencountertypeforfinancialencounter,char(128))=char(128))
  SUBROUTINE (getnewencountertypeforfinancialencounter(encntrid=f8,newencntrtypecd=f8(ref),
   newencntrtypeclasscd=f8(ref),encvalues=vc(ref)) =i2)
    SET newencntrtypecd = 0.0
    SET newencntrtypeclasscd = 0.0
    IF (validate(encvalues->newenctype,0.0) > 0.0)
     SET newencntrtypecd = encvalues->newenctype
     IF (validate(encvalues->isdenormalized,false)
      AND validate(encvalues->newencounterclass,0.0) > 0.0)
      SET newencntrtypeclasscd = encvalues->newencounterclass
      RETURN(true)
     ENDIF
    ENDIF
    IF (newencntrtypecd=0.0)
     SELECT INTO "nl:"
      FROM encounter e
      PLAN (e
       WHERE e.encntr_id=encntrid
        AND e.active_ind=true)
      DETAIL
       newencntrtypecd = e.encntr_type_cd
      WITH nocounter
     ;end select
    ENDIF
    SELECT INTO "nl:"
     FROM code_value_group cvg,
      code_value cv
     PLAN (cvg
      WHERE cvg.child_code_value=newencntrtypecd)
      JOIN (cv
      WHERE cv.code_value=cvg.parent_code_value
       AND cv.code_set=69)
     HEAD REPORT
      newencntrtypeclasscd = cv.code_value
     WITH nocounter
    ;end select
    IF (((newencntrtypecd=0.0) OR (newencntrtypeclasscd=0.0)) )
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getoldencountertypeforfinancialencounter,char(128))=char(128))
  SUBROUTINE (getoldencountertypeforfinancialencounter(pftencntrid=f8,oldencntrtypecd=f8(ref),
   oldencntrtypeclasscd=f8(ref),encvalue=vc(ref)) =i2)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    DECLARE activityevaldatetime = dq8 WITH protect, noconstant(0.0)
    DECLARE nencntrtypecd = f8 WITH protect, noconstant(0.0)
    DECLARE nencntrtypeclasscd = f8 WITH protect, noconstant(0.0)
    DECLARE latestpftencntrid = f8 WITH protect, noconstant(0.0)
    IF (validate(encvalue->isdenormalized,false)
     AND validate(encvalue->oldenctype,0.0) > 0.0
     AND validate(encvalue->oldencounterclass,0.0) > 0.0)
     SET oldencntrtypecd = encvalue->oldenctype
     SET oldencntrtypeclasscd = encvalue->oldencounterclass
     RETURN(true)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_reg_mod prm,
      pft_encntr pe
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid
       AND pe.active_ind=true)
      JOIN (prm
      WHERE prm.encntr_id=pe.encntr_id
       AND prm.active_ind=true
       AND prm.transaction_type != "CMB")
     ORDER BY prm.create_dt_tm DESC
     DETAIL
      oldencntrtypecd = prm.encntr_type_cd, oldencntrtypeclasscd = prm.encntr_type_class_cd
     WITH nocounter, maxrec = 1
    ;end select
    IF (((curqual > 0) OR (((oldencntrtypecd != 0.0) OR (oldencntrtypeclasscd != 0.0)) )) )
     RETURN(true)
    ENDIF
    IF (validate(encvalue->oldenctype,0.0) > 0.0)
     SET oldencntrtypecd = encvalue->oldenctype
     SELECT INTO "nl:"
      FROM code_value_group cvg,
       code_value cv
      PLAN (cvg
       WHERE cvg.child_code_value=oldencntrtypecd)
       JOIN (cv
       WHERE cv.code_value=cvg.parent_code_value
        AND cv.code_set=69)
      HEAD REPORT
       oldencntrtypeclasscd = cv.code_value
      WITH nocounter
     ;end select
     RETURN(true)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_encntr pe
     WHERE pe.pft_encntr_id=pftencntrid
      AND pe.active_ind=true
     DETAIL
      encntrid = pe.encntr_id
     WITH nocounter, maxrec = 1
    ;end select
    IF (curqual=0)
     RETURN(false)
    ENDIF
    SET oldencntrtypecd = 0.0
    SET oldencntrtypeclasscd = 0.0
    SELECT INTO "nl:"
     FROM encounter e
     WHERE e.encntr_id=encntrid
      AND e.active_ind=true
     DETAIL
      nencntrtypecd = e.encntr_type_cd, oldencntrtypecd = e.encntr_type_cd
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM code_value_group cvg,
      code_value cv
     PLAN (cvg
      WHERE cvg.child_code_value=nencntrtypecd)
      JOIN (cv
      WHERE cv.code_value=cvg.parent_code_value
       AND cv.code_set=69)
     HEAD REPORT
      nencntrtypeclasscd = cv.code_value
     WITH nocounter
    ;end select
    IF (((encntrid=0.0) OR (((nencntrtypecd=0.0) OR (nencntrtypeclasscd=0.0)) )) )
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM encntr_loc_hist elh,
      pft_date pd
     PLAN (elh
      WHERE elh.encntr_id=encntrid
       AND elh.active_ind=true)
      JOIN (pd
      WHERE pd.parent_entity_id=elh.encntr_loc_hist_id
       AND pd.parent_entity_name="ENCNTR_LOC_HIST"
       AND pd.active_ind=true)
     ORDER BY pd.date_value_dt_tm DESC
     HEAD REPORT
      IF (elh.active_status_cd != cs48_combined_cd)
       oldencntrtypecd = elh.encntr_type_cd
      ENDIF
     WITH nocounter
    ;end select
    IF (curqual > 0)
     SELECT INTO "nl:"
      FROM code_value_group cvg,
       code_value cv
      PLAN (cvg
       WHERE cvg.child_code_value=oldencntrtypecd)
       JOIN (cv
       WHERE cv.code_value=cvg.parent_code_value
        AND cv.code_set=69)
      HEAD REPORT
       oldencntrtypeclasscd = cv.code_value
      WITH nocounter
     ;end select
     IF (oldencntrtypeclasscd <= 0.0)
      RETURN(false)
     ENDIF
     RETURN(true)
    ENDIF
    IF (pftencntrid=0.0)
     SELECT INTO "nl:"
      FROM pft_encntr pe
      WHERE pe.encntr_id=encntrid
       AND pe.active_ind=true
      DETAIL
       latestpftencntrid = pe.pft_encntr_id
      WITH nocounter
     ;end select
    ELSE
     SET latestpftencntrid = pftencntrid
    ENDIF
    IF (latestpftencntrid > 0.0)
     SELECT INTO "nl:"
      FROM benefit_order bo,
       bo_hp_reltn bhr,
       pft_proration pp
      PLAN (bo
       WHERE bo.pft_encntr_id=latestpftencntrid
        AND bo.active_ind=true
        AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
        AND bo.benefit_order_id > 0)
       JOIN (bhr
       WHERE bhr.benefit_order_id=bo.benefit_order_id
        AND bhr.fin_class_cd != cs354_selfpay_cd
        AND bhr.active_ind=true)
       JOIN (pp
       WHERE pp.bo_hp_reltn_id=bhr.bo_hp_reltn_id
        AND pp.active_ind=true)
      ORDER BY bhr.priority_seq, pp.beg_effective_dt_tm
      HEAD REPORT
       activityevaldatetime = cnvtdatetime(pp.beg_effective_dt_tm)
      WITH nocounter
     ;end select
     IF (activityevaldatetime <= 0)
      SELECT INTO "nl:"
       FROM pe_status_reason psr
       WHERE psr.pft_encntr_id=latestpftencntrid
        AND psr.pe_status_reason_cd=cs24450_pendregmod
       ORDER BY psr.pe_hold_dt_tm
       DETAIL
        activityevaldatetime = psr.pe_hold_dt_tm
       WITH nocounter, maxqual(psr,1)
      ;end select
      IF (curqual=0)
       RETURN(false)
      ENDIF
     ENDIF
     SELECT INTO "nl:"
      FROM encntr_loc_hist elh
      PLAN (elh
       WHERE elh.encntr_id=encntrid
        AND elh.beg_effective_dt_tm <= cnvtdatetime(sysdate)
        AND elh.activity_dt_tm <= cnvtdatetime(activityevaldatetime))
      ORDER BY elh.activity_dt_tm DESC
      HEAD REPORT
       oldencntrtypecd = elh.encntr_type_cd
      WITH nocounter
     ;end select
     IF (curqual=0)
      RETURN(false)
     ENDIF
     SELECT INTO "nl:"
      FROM code_value_group cvg,
       code_value cv
      PLAN (cvg
       WHERE cvg.child_code_value=oldencntrtypecd)
       JOIN (cv
       WHERE cv.code_value=cvg.parent_code_value
        AND cv.code_set=69)
      HEAD REPORT
       oldencntrtypeclasscd = cv.code_value
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(persistpftregmods,char(128))=char(128))
  SUBROUTINE (persistpftregmods(pencntrid=f8,ptransactiontype=vc) =i2)
    RECORD pftregmodsreq(
      1 objarray[*]
        2 pft_reg_mod_id = f8
        2 encntr_id = f8
        2 encntr_type_cd = f8
        2 encntr_type_class_cd = f8
        2 inpatient_admit_dt_tm = dq8
        2 inpatient_admit_dt_tm_null = i2
        2 disch_dt_tm = dq8
        2 disch_dt_tm_null = i2
        2 transaction_type = vc
        2 loc_nurse_unit_cd = f8
        2 health_plan_id = f8
        2 priority_seq = i4
        2 guarantor_id = f8
        2 create_dt_tm = dq8
        2 create_dt_tm_null = i2
        2 create_prsnl_id = f8
        2 active_ind = i2
        2 active_status_cd = f8
        2 updt_cnt = i4
        2 reg_dt_tm = dq8
        2 reg_dt_tm_null = i2
        2 loc_facility_cd = f8
    ) WITH protect
    RECORD pftregmodsrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    DECLARE encountercnt = i4 WITH protect, noconstant(0)
    IF (((pencntrid=0.0) OR (trim(ptransactiontype)="")) )
     RETURN(false)
    ENDIF
    IF (ptransactiontype="ADMT")
     IF ( NOT (retrieveregguarantor(pencntrid)))
      CALL logmessage("getRegistrationData",build(
        "retrieveRegGuarantor did not return success for encounter [",pencntrid,"]"),log_error)
     ENDIF
     SELECT INTO "nl:"
      FROM pft_reg_mod prm
      WHERE prm.encntr_id=pencntrid
       AND prm.encntr_id != 0.0
      WITH nocounter
     ;end select
     IF (curqual > 0)
      RETURN(true)
     ENDIF
    ENDIF
    SELECT INTO "nl:"
     FROM encounter e
     WHERE e.encntr_id=pencntrid
      AND e.active_ind=true
      AND e.encntr_id != 0.0
     DETAIL
      encountercnt += 1, stat = alterlist(pftregmodsreq->objarray,encountercnt), pftregmodsreq->
      objarray[encountercnt].encntr_id = e.encntr_id,
      pftregmodsreq->objarray[encountercnt].encntr_type_cd = e.encntr_type_cd, pftregmodsreq->
      objarray[encountercnt].encntr_type_class_cd = e.encntr_type_class_cd, pftregmodsreq->objarray[
      encountercnt].inpatient_admit_dt_tm = e.inpatient_admit_dt_tm,
      pftregmodsreq->objarray[encountercnt].loc_nurse_unit_cd = e.loc_nurse_unit_cd, pftregmodsreq->
      objarray[encountercnt].disch_dt_tm = e.disch_dt_tm, pftregmodsreq->objarray[encountercnt].
      transaction_type = ptransactiontype,
      pftregmodsreq->objarray[encountercnt].reg_dt_tm = e.reg_dt_tm, pftregmodsreq->objarray[
      encountercnt].active_ind = true, pftregmodsreq->objarray[encountercnt].loc_facility_cd = e
      .loc_facility_cd
     WITH nocounter
    ;end select
    IF (encountercnt > 0
     AND (regdata->dmg.guarantor.guartype=pft_rm_person))
     SET pftregmodsreq->objarray[1].guarantor_id = regdata->dmg.guarantor.guarid
    ENDIF
    IF (size(pftregmodsreq->objarray,5) > 0)
     EXECUTE pft_da_add_pft_reg_mod  WITH replace("REQUEST",pftregmodsreq), replace("REPLY",
      pftregmodsrep)
     IF ((pftregmodsrep->status_data.status != "S"))
      CALL addtracemessage("persistPftRegMods","pft_da_add_pft_reg_mod did not return success")
      IF (validate(debug,- (1)) > 0)
       CALL echorecord(reply)
      ENDIF
      RETURN(false)
     ENDIF
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(retrievefinfacility,char(128))=char(128))
  SUBROUTINE (retrievefinfacility(pftencntrid=f8,encntrvalues=vc(ref)) =i2)
    CALL logmessage("retrieveFinFacility","Entering",log_debug)
    IF (validate(encntrvalues->newfacilitycd,0.0)
     AND validate(encntrvalues->oldfacilitycd,0.0))
     IF ((encntrvalues->oldfacilitycd > 0.0))
      SET findata->dmg.facility.facilitycd = encntrvalues->oldfacilitycd
     ENDIF
    ENDIF
    IF ((findata->dmg.facility.facilitycd=0.0))
     SELECT INTO "nl:"
      FROM pft_reg_mod prm,
       pft_encntr pe
      PLAN (pe
       WHERE pe.pft_encntr_id=pftencntrid)
       JOIN (prm
       WHERE prm.encntr_id=pe.encntr_id
        AND prm.active_ind=true
        AND prm.transaction_type != "CMB")
      ORDER BY prm.create_dt_tm DESC
      DETAIL
       findata->dmg.facility.facilitycd = prm.loc_facility_cd
      WITH nocounter, maxrec = 1
     ;end select
    ENDIF
    IF ((findata->dmg.facility.facilitycd=0.0))
     RETURN(false)
    ENDIF
    CALL logmessage("retrieveFinFacility","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveregfacility,char(128))=char(128))
  SUBROUTINE (retrieveregfacility(encntrid=f8,encntrvalues=vc(ref)) =i2)
    CALL logmessage("retrieveRegFacility","Entering",log_debug)
    IF (validate(encntrvalues->newfacilitycd)
     AND validate(encntrvalues->oldfacilitycd))
     IF ((encntrvalues->newfacilitycd > 0.0))
      SET regdata->dmg.facility.facilitycd = encntrvalues->newfacilitycd
     ENDIF
    ENDIF
    IF ((regdata->dmg.facility.facilitycd=0.0))
     SELECT INTO "nl:"
      FROM encounter e
      PLAN (e
       WHERE e.encntr_id=encntrid
        AND e.active_ind=true)
      DETAIL
       regdata->dmg.facility.facilitycd = e.loc_facility_cd
      WITH nocounter
     ;end select
    ENDIF
    IF ((regdata->dmg.facility.facilitycd=0.0))
     RETURN(false)
    ENDIF
    CALL logmessage("retrieveRegFacility","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(matchregenccobtofincob,char(128))=char(128))
  SUBROUTINE (matchregenccobtofincob(prregdata=vc(ref),prfindata=vc(ref)) =i2)
    DECLARE bcobmatch = i2 WITH protect, noconstant(false)
    DECLARE binterimmatch = i2 WITH protect, noconstant(false)
    DECLARE bpayermatch = i2 WITH protect, noconstant(true)
    DECLARE regcobrecidx = i4 WITH protect, noconstant(0)
    DECLARE regpayeridx = i4 WITH protect, noconstant(0)
    DECLARE finpayeridx = i4 WITH protect, noconstant(0)
    DECLARE regcobrecsize = i4 WITH protect, noconstant(0)
    DECLARE regpayersize = i4 WITH protect, noconstant(0)
    DECLARE finpayersize = i4 WITH protect, noconstant(0)
    SET regcobrecsize = size(prregdata->dmg.cob.cobrec,5)
    FOR (regcobrecidx = 1 TO regcobrecsize)
      SET regpayersize = size(prregdata->dmg.cob.cobrec[regcobrecidx].payers,5)
      SET finpayersize = size(prfindata->dmg.cob.cobrec[1].payers,5)
      IF (regpayersize != finpayersize)
       CALL logmessage("matchRegEncCobToFinCob",build2(
         "Unequal Payer Sizes on the Fin. & Reg. side for Reg. COB Index:",regcobrecidx),log_debug)
      ELSE
       FOR (regpayeridx = 1 TO regpayersize)
        FOR (finpayeridx = 1 TO finpayersize)
          IF ((prregdata->dmg.cob.cobrec[regcobrecidx].payers[regpayeridx].healthplanid=prfindata->
          dmg.cob.cobrec[1].payers[finpayeridx].healthplanid)
           AND (prregdata->dmg.cob.cobrec[regcobrecidx].payers[regpayeridx].prioritysequence=
          prfindata->dmg.cob.cobrec[1].payers[finpayeridx].prioritysequence)
           AND (prregdata->dmg.cob.cobrec[regcobrecidx].payers[regpayeridx].encntrplanreltnid=
          prfindata->dmg.cob.cobrec[1].payers[finpayeridx].encntrplanreltnid))
           SET binterimmatch = true
           SET finpayeridx = (finpayersize+ 1)
          ENDIF
        ENDFOR
        IF ( NOT (binterimmatch))
         CALL logmessage("matchRegEncCobToFinCob",build2(
           "Payer Mismatch on the Financial & Registration side."),log_debug)
         SET bpayermatch = false
         SET regpayeridx = (regpayersize+ 1)
        ELSE
         SET binterimmatch = false
        ENDIF
       ENDFOR
       IF ( NOT (bpayermatch))
        CALL logmessage("matchRegEncCobToFinCob",build2(
          "Payer Mismatch on the Financial & Registration side."),log_debug)
        SET bcobmatch = false
       ELSE
        SET prfindata->dmg.cob.cobrec[1].encntrplancobid = prregdata->dmg.cob.cobrec[regcobrecidx].
        encntrplancobid
        SET bcobmatch = true
        SET regcobrecidx = (regcobrecsize+ 1)
       ENDIF
      ENDIF
    ENDFOR
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(prfindata)
     CALL echorecord(prregdata)
     CALL echo(build2("bCOBMatch:",bcobmatch))
    ENDIF
    RETURN(bcobmatch)
  END ;Subroutine
 ENDIF
 IF (validate(getfinancialfacilitycd,char(128))=char(128))
  SUBROUTINE (getfinancialfacilitycd(finencntrfacilitycd=f8(ref)) =i2)
   SET finencntrfacilitycd = findata->dmg.facility.facilitycd
   RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getregistrationfacilitycd,char(128))=char(128))
  SUBROUTINE (getregistrationfacilitycd(regencntrfacilitycd=f8(ref)) =i2)
   SET regencntrfacilitycd = regdata->dmg.facility.facilitycd
   RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(evaluatepostedchargehpcoveragechanges,char(128))=char(128))
  SUBROUTINE (evaluatepostedchargehpcoveragechanges(pencntrid=f8,prencntrvalues=vc(ref),prevaldata=vc
   (ref)) =i2)
    DECLARE bregdatahasinspayers = i2 WITH protect, noconstant(false)
    DECLARE bfindatahasinspayers = i2 WITH protect, noconstant(false)
    DECLARE pftidx = i4 WITH protect, noconstant(0)
    DECLARE regcobidx = i4 WITH protect, noconstant(0)
    DECLARE locvalidx = i4 WITH protect, noconstant(0)
    DECLARE reprocallflag = i2 WITH protect, noconstant(0)
    DECLARE nonrecurhpexpireflag = i2 WITH protect, constant(checkiforgmarkedfornonrecurringhpexpire(
      pencntrid))
    IF (prevaldata->evalcomplete)
     RETURN(true)
    ENDIF
    IF ( NOT (ismidmonthpreferenceenabled))
     SELECT INTO "nl:"
      FROM encounter e
      PLAN (e
       WHERE e.encntr_id=pencntrid
        AND e.encntr_type_class_cd=cs69_recurring_class_cd)
      WITH nocounter
     ;end select
     IF (curqual > 0)
      RETURN(true)
     ENDIF
    ENDIF
    CALL populatechargecoverageevaldataforencntr(pencntrid,prevaldata)
    IF ( NOT (getregistrationdata(pencntrid,prencntrvalues)))
     CALL addtracemessage("populateImpactedChargeGroups",
      "Failed to get registration data for encounter")
     RETURN(false)
    ENDIF
    IF (size(regdata->dmg.cob.cobrec,5) > 0)
     SET bregdatahasinspayers = true
    ENDIF
    FOR (pftidx = 1 TO size(prevaldata->pftencntrs,5))
      SET reprocallflag = false
      SET regcobidx = 0.0
      IF ( NOT (getfinancialdata(prevaldata->pftencntrs[pftidx].pftencntrid,prencntrvalues)))
       CALL addtracemessage("evaluatePostedChargeHPCoverageChanges",
        "Failed to get registration data for encounter")
       RETURN(false)
      ENDIF
      IF (size(findata->dmg.cob.cobrec,5) > 0)
       SET bfindatahasinspayers = true
      ENDIF
      IF (bfindatahasinspayers
       AND bregdatahasinspayers)
       IF ((findata->dmg.cob.cobrec[1].encntrplancobid=0)
        AND (regdata->dmg.cob.cobrec[1].encntrplancobid != 0))
        SET stat = matchregenccobtofincob(regdata,findata)
       ENDIF
       SET regcobidx = locateval(locvalidx,1,size(regdata->dmg.cob.cobrec,5),findata->dmg.cob.cobrec[
        1].encntrplancobid,regdata->dmg.cob.cobrec[locvalidx].encntrplancobid)
       IF (regcobidx=0
        AND  NOT (matchspregcobtofincob(regdata,findata,nonrecurhpexpireflag,prevaldata->pftencntrs[
        pftidx].pftencntrid)))
        SET reprocallflag = true
       ENDIF
      ELSEIF ( NOT (bfindatahasinspayers)
       AND bregdatahasinspayers)
       IF ((regdata->dmg.cob.cobrec[1].encntrplancobid > 0))
        SET reprocallflag = true
       ENDIF
      ELSE
       CALL logmessage("evaluatePostedChargeHPCoverageChanges","No payers in reg structures",
        log_debug)
      ENDIF
      IF (((nonrecurhpexpireflag) OR (reprocallflag)) )
       CALL evalchargecoverageforfinencntr(pftidx,regcobidx,reprocallflag,prevaldata)
      ENDIF
    ENDFOR
    SET prevaldata->evalcomplete = true
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(populatechargecoverageevaldataforencntr,char(128))=char(128))
  SUBROUTINE (populatechargecoverageevaldataforencntr(pencntrid=f8,prevaldata=vc(ref)) =i2)
    DECLARE bocnt = i4 WITH protect, noconstant(0)
    DECLARE bhrcnt = i4 WITH protect, noconstant(0)
    DECLARE chrgcnt = i4 WITH protect, noconstant(0)
    DECLARE pecnt = i4 WITH protect, noconstant(0)
    DECLARE pftidx = i4 WITH protect, noconstant(0)
    DECLARE ppeidx = i4 WITH protect, noconstant(0)
    DECLARE chargeidx = i4 WITH protect, noconstant(0)
    DECLARE searchidx = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM encounter e,
      pft_encntr pe,
      account a
     PLAN (e
      WHERE e.encntr_id=pencntrid)
      JOIN (pe
      WHERE pe.encntr_id=e.encntr_id
       AND pe.active_ind=true
       AND pe.pft_encntr_status_cd != cs24269_history_cd)
      JOIN (a
      WHERE a.acct_id=pe.acct_id
       AND a.acct_type_cd=cs18736_ar_cd
       AND a.acct_sub_type_cd=cs20849_patient_cd)
     ORDER BY pe.pft_encntr_id
     HEAD pe.pft_encntr_id
      pecnt += 1, stat = alterlist(prevaldata->pftencntrs,pecnt), prevaldata->pftencntrs[pecnt].
      pftencntrid = pe.pft_encntr_id,
      prevaldata->pftencntrs[pecnt].chrgcovevalflag = flag_chrg_cov_dates_reprocess_none, prevaldata
      ->pftencntrs[pecnt].spchrgcovevalflag = flag_chrg_cov_dates_reprocess_none
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bhr,
      pft_charge_bo_reltn pcbr,
      pft_charge pc,
      charge c
     PLAN (bo
      WHERE expand(pftidx,1,size(prevaldata->pftencntrs,5),bo.pft_encntr_id,prevaldata->pftencntrs[
       pftidx].pftencntrid)
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo.active_ind=true
       AND bo.fin_class_cd != cs354_selfpay_cd
       AND  NOT ( EXISTS (
      (SELECT
       pcbr.benefit_order_id
       FROM pft_charge_bo_reltn pcbr,
        pft_charge pc
       WHERE pcbr.benefit_order_id=bo.benefit_order_id
        AND pcbr.active_ind=true
        AND pc.pft_charge_id=pcbr.pft_charge_id
        AND pc.active_ind=true
        AND pc.ext_billed_ind=true))))
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.active_ind=true
       AND bhr.fin_class_cd != cs354_selfpay_cd)
      JOIN (pcbr
      WHERE pcbr.benefit_order_id=bo.benefit_order_id
       AND pcbr.active_ind=true)
      JOIN (pc
      WHERE pc.pft_charge_id=pcbr.pft_charge_id
       AND pc.active_ind=true)
      JOIN (c
      WHERE c.charge_item_id=pc.charge_item_id
       AND c.offset_charge_item_id=0.0
       AND c.active_ind=true)
     ORDER BY bo.pft_encntr_id, bo.benefit_order_id, bhr.bo_hp_reltn_id
     HEAD bo.pft_encntr_id
      bocnt = 0, ppeidx = locateval(searchidx,1,size(prevaldata->pftencntrs,5),bo.pft_encntr_id,
       prevaldata->pftencntrs[searchidx].pftencntrid)
     HEAD bo.benefit_order_id
      chrgcnt = 0, bhrcnt = 0, bocnt += 1,
      stat = alterlist(prevaldata->pftencntrs[ppeidx].insbo,bocnt), prevaldata->pftencntrs[ppeidx].
      insbo[bocnt].benefitorderid = bo.benefit_order_id
     HEAD bhr.bo_hp_reltn_id
      bhrcnt += 1, stat = alterlist(prevaldata->pftencntrs[ppeidx].insbo[bocnt].insbal,bhrcnt),
      prevaldata->pftencntrs[ppeidx].insbo[bocnt].insbal[bhrcnt].bohpreltnid = bhr.bo_hp_reltn_id,
      prevaldata->pftencntrs[ppeidx].insbo[bocnt].insbal[bhrcnt].healthplanid = bhr.health_plan_id,
      prevaldata->pftencntrs[ppeidx].insbo[bocnt].insbal[bhrcnt].prioritysequence = bhr.priority_seq
     DETAIL
      chargeidx = locateval(searchidx,1,size(prevaldata->pftencntrs[ppeidx].insbo[bocnt].charges,5),c
       .charge_item_id,prevaldata->pftencntrs[ppeidx].insbo[bocnt].charges[searchidx].chargeitemid)
      IF (chargeidx=0)
       chrgcnt += 1, stat = alterlist(prevaldata->pftencntrs[ppeidx].insbo[bocnt].charges,chrgcnt),
       prevaldata->pftencntrs[ppeidx].insbo[bocnt].charges[chrgcnt].chargeitemid = c.charge_item_id,
       prevaldata->pftencntrs[ppeidx].insbo[bocnt].charges[chrgcnt].servicedttm = c.service_dt_tm
       IF ((((prevaldata->pftencntrs[ppeidx].insbo[bocnt].minservicedttm=0)) OR ((prevaldata->
       pftencntrs[ppeidx].insbo[bocnt].minservicedttm > c.service_dt_tm))) )
        prevaldata->pftencntrs[ppeidx].insbo[bocnt].minservicedttm = c.service_dt_tm
       ENDIF
       IF ((prevaldata->pftencntrs[ppeidx].insbo[bocnt].maxservicedttm < c.service_dt_tm))
        prevaldata->pftencntrs[ppeidx].insbo[bocnt].maxservicedttm = c.service_dt_tm
       ENDIF
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bhr,
      pft_charge_bo_reltn pcbr,
      pft_charge pc,
      charge c
     PLAN (bo
      WHERE expand(pftidx,1,size(prevaldata->pftencntrs,5),bo.pft_encntr_id,prevaldata->pftencntrs[
       pftidx].pftencntrid)
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo.active_ind=true
       AND bo.fin_class_cd=cs354_selfpay_cd)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.active_ind=true
       AND bhr.fin_class_cd=cs354_selfpay_cd)
      JOIN (pcbr
      WHERE pcbr.benefit_order_id=bo.benefit_order_id
       AND pcbr.active_ind=true)
      JOIN (pc
      WHERE pc.pft_charge_id=pcbr.pft_charge_id
       AND pc.active_ind=true
       AND  NOT ( EXISTS (
      (SELECT
       pcbr2.pft_charge_id
       FROM pft_charge_bo_reltn pcbr2,
        benefit_order bo2
       WHERE pcbr2.pft_charge_id=pc.pft_charge_id
        AND pcbr2.active_ind=true
        AND bo2.benefit_order_id=pcbr2.benefit_order_id
        AND bo2.fin_class_cd != cs354_selfpay_cd
        AND  NOT (bo2.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
        AND bo2.active_ind=true))))
      JOIN (c
      WHERE c.charge_item_id=pc.charge_item_id
       AND c.offset_charge_item_id=0.0
       AND c.active_ind=true)
     ORDER BY bo.pft_encntr_id, c.charge_item_id
     HEAD bo.pft_encntr_id
      chrgcnt = 0, ppeidx = locateval(searchidx,1,size(prevaldata->pftencntrs,5),bo.pft_encntr_id,
       prevaldata->pftencntrs[searchidx].pftencntrid), prevaldata->pftencntrs[ppeidx].
      spbenefitorderid = bo.benefit_order_id,
      prevaldata->pftencntrs[ppeidx].sphealthplanid = bhr.health_plan_id
     HEAD c.charge_item_id
      chrgcnt += 1, stat = alterlist(prevaldata->pftencntrs[ppeidx].spbocharges,chrgcnt), prevaldata
      ->pftencntrs[ppeidx].spbocharges[chrgcnt].chargeitemid = c.charge_item_id,
      prevaldata->pftencntrs[ppeidx].spbocharges[chrgcnt].servicedttm = c.service_dt_tm
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(evalchargecoverageforfinencntr,char(128))=char(128))
  SUBROUTINE (evalchargecoverageforfinencntr(ppeidx=i4,pregcobidx=i4,pforceallflag=i2,prevaldata=vc(
    ref)) =i2)
    DECLARE boidx = i4 WITH protect, noconstant(0)
    DECLARE hpidx = i4 WITH protect, noconstant(0)
    DECLARE regidx = i4 WITH protect, noconstant(0)
    DECLARE chrgidx = i4 WITH protect, noconstant(0)
    DECLARE searchidx = i4 WITH protect, noconstant(0)
    DECLARE lvalidx = i4 WITH protect, noconstant(0)
    DECLARE lvalidx2 = i4 WITH protect, noconstant(0)
    DECLARE minservicedate = dq8 WITH protect, noconstant(0.0)
    DECLARE maxservicedate = dq8 WITH protect, noconstant(0.0)
    DECLARE chrgservicedate = f8 WITH protect, noconstant(0.0)
    DECLARE tmpaddspchrg = i2 WITH protect, noconstant(false)
    DECLARE reprocallflag = i2 WITH protect, noconstant(true)
    DECLARE mpwithsamehpind = i2 WITH protect, noconstant(false)
    DECLARE cobreccnt = i4 WITH protect, noconstant(0)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    DECLARE hpexpireind = i2 WITH protect, noconstant(false)
    DECLARE payerscnt = i4 WITH protect, noconstant(0)
    DECLARE payerscnt2 = i4 WITH protect, noconstant(0)
    DECLARE nonactivempwithsamehp = i2 WITH protect, noconstant(false)
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("evalChargeCoverageForFinEncntr",build("pPEIdx is: ",ppeidx,", pRegCobIdx is: ",
       pregcobidx,", pForceAllFlag is: ",
       pforceallflag),log_debug)
     CALL echorecord(prevaldata)
     CALL echorecord(regdata)
    ENDIF
    RECORD tempregdata(
      1 mpind = i2
      1 cobrec[*]
        2 encntrplancobid = f8
        2 healthplanid = f8
        2 prioritysequence = i4
        2 begeffectivedttm = dq8
        2 endeffectivedttm = dq8
        2 encntrplanreltnid = f8
        2 encntrplancobreltnid = f8
    ) WITH protect
    RECORD tempregdata2(
      1 cobrec[*]
        2 mpind = i2
        2 healthplanid = f8
        2 prioritysequence = i4
        2 begeffectivedttm = dq8
        2 endeffectivedttm = dq8
    ) WITH protect
    RECORD tempregdata3(
      1 payersrec[*]
        2 mpind = i2
        2 healthplanid = f8
        2 prioritysequence = i4
        2 begeffectivedttm = dq8
        2 endeffectivedttm = dq8
        2 encntrplanreltnid = f8
    ) WITH protect
    RECORD tempregdata4(
      1 payersrec[*]
        2 mpind = i2
        2 healthplanid = f8
        2 prioritysequence = i4
        2 begeffectivedttm = dq8
        2 endeffectivedttm = dq8
        2 encntrplanreltnid = f8
    ) WITH protect
    SET stat = initrec(tempregdata)
    SET stat = initrec(tempregdata2)
    SET stat = initrec(tempregdata3)
    SET stat = initrec(tempregdata4)
    IF (size(regdata->dmg.cob.cobrec,5) > 1)
     FOR (regidx = 1 TO size(regdata->dmg.cob.cobrec,5))
       SELECT INTO "nl:"
        FROM (dummyt d  WITH seq = size(regdata->dmg.cob.cobrec[regidx].payers,5))
        PLAN (d
         WHERE (regdata->dmg.cob.cobrec[regidx].payers[d.seq].prioritysequence=1))
        DETAIL
         cobreccnt = (size(tempregdata->cobrec,5)+ 1), stat = alterlist(tempregdata->cobrec,cobreccnt
          ), tempregdata->cobrec[cobreccnt].encntrplancobid = regdata->dmg.cob.cobrec[regidx].
         encntrplancobid,
         tempregdata->cobrec[cobreccnt].healthplanid = regdata->dmg.cob.cobrec[regidx].payers[d.seq].
         healthplanid, tempregdata->cobrec[cobreccnt].prioritysequence = regdata->dmg.cob.cobrec[
         regidx].payers[d.seq].prioritysequence, tempregdata->cobrec[cobreccnt].begeffectivedttm =
         regdata->dmg.cob.cobrec[regidx].payers[d.seq].begeffectivedttm,
         tempregdata->cobrec[cobreccnt].endeffectivedttm = regdata->dmg.cob.cobrec[regidx].payers[d
         .seq].endeffectivedttm, tempregdata->cobrec[cobreccnt].encntrplanreltnid = regdata->dmg.cob.
         cobrec[regidx].payers[d.seq].encntrplanreltnid, tempregdata->cobrec[cobreccnt].
         encntrplancobreltnid = regdata->dmg.cob.cobrec[regidx].payers[d.seq].encntrplancobreltnid
        WITH nocounter
       ;end select
     ENDFOR
    ENDIF
    IF (size(tempregdata->cobrec,5) > 1)
     SET cobreccnt = 0
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = size(tempregdata->cobrec,5))
      PLAN (d
       WHERE (tempregdata->cobrec[d.seq].healthplanid > 0.0))
      ORDER BY tempregdata->cobrec[d.seq].healthplanid, tempregdata->cobrec[d.seq].begeffectivedttm,
       tempregdata->cobrec[d.seq].endeffectivedttm
      DETAIL
       IF (cobreccnt=0)
        cobreccnt = (size(tempregdata2->cobrec,5)+ 1), stat = alterlist(tempregdata2->cobrec,
         cobreccnt), tempregdata2->cobrec[cobreccnt].healthplanid = tempregdata->cobrec[d.seq].
        healthplanid,
        tempregdata2->cobrec[cobreccnt].prioritysequence = tempregdata->cobrec[d.seq].
        prioritysequence, tempregdata2->cobrec[cobreccnt].begeffectivedttm = tempregdata->cobrec[d
        .seq].begeffectivedttm, tempregdata2->cobrec[cobreccnt].endeffectivedttm = tempregdata->
        cobrec[d.seq].endeffectivedttm
       ELSEIF ((tempregdata2->cobrec[cobreccnt].healthplanid=tempregdata->cobrec[d.seq].healthplanid)
       )
        IF (datetimediff(tempregdata2->cobrec[cobreccnt].endeffectivedttm,tempregdata->cobrec[d.seq].
         begeffectivedttm,1,0) <= 0.0)
         mpwithsamehpind = 1, tempregdata2->cobrec[cobreccnt].mpind = 1, tempregdata2->cobrec[
         cobreccnt].endeffectivedttm = tempregdata->cobrec[d.seq].endeffectivedttm
        ENDIF
       ELSEIF ((tempregdata2->cobrec[cobreccnt].healthplanid != tempregdata->cobrec[d.seq].
       healthplanid))
        cobreccnt = (size(tempregdata2->cobrec,5)+ 1), stat = alterlist(tempregdata2->cobrec,
         cobreccnt), tempregdata2->cobrec[cobreccnt].healthplanid = tempregdata->cobrec[d.seq].
        healthplanid,
        tempregdata2->cobrec[cobreccnt].prioritysequence = tempregdata->cobrec[d.seq].
        prioritysequence, tempregdata2->cobrec[cobreccnt].begeffectivedttm = tempregdata->cobrec[d
        .seq].begeffectivedttm, tempregdata2->cobrec[cobreccnt].endeffectivedttm = tempregdata->
        cobrec[d.seq].endeffectivedttm
       ENDIF
      WITH nocounter
     ;end select
    ELSE
     SET payerscnt = 0
     SET payerscnt2 = 0
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = value(size(regdata->dmg.cob.cobrec[pregcobidx].payers,5)))
      PLAN (d
       WHERE (regdata->dmg.cob.cobrec[pregcobidx].payers[d.seq].healthplanid > 0.0))
      ORDER BY regdata->dmg.cob.cobrec[pregcobidx].payers[d.seq].endeffectivedttm DESC
      DETAIL
       IF ((regdata->dmg.cob.cobrec[pregcobidx].payers[d.seq].endeffectivedttm >= cnvtdatetime(
        sysdate)))
        payerscnt = (size(tempregdata3->payersrec,5)+ 1), stat = alterlist(tempregdata3->payersrec,
         payerscnt), tempregdata3->payersrec[payerscnt].healthplanid = regdata->dmg.cob.cobrec[
        pregcobidx].payers[d.seq].healthplanid,
        tempregdata3->payersrec[payerscnt].prioritysequence = regdata->dmg.cob.cobrec[pregcobidx].
        payers[d.seq].prioritysequence, tempregdata3->payersrec[payerscnt].begeffectivedttm = regdata
        ->dmg.cob.cobrec[pregcobidx].payers[d.seq].begeffectivedttm, tempregdata3->payersrec[
        payerscnt].endeffectivedttm = regdata->dmg.cob.cobrec[pregcobidx].payers[d.seq].
        endeffectivedttm,
        tempregdata3->payersrec[payerscnt].encntrplanreltnid = regdata->dmg.cob.cobrec[pregcobidx].
        payers[d.seq].encntrplanreltnid
       ELSE
        payerscnt2 = (size(tempregdata4->payersrec,5)+ 1), stat = alterlist(tempregdata4->payersrec,
         payerscnt2), tempregdata4->payersrec[payerscnt2].healthplanid = regdata->dmg.cob.cobrec[
        pregcobidx].payers[d.seq].healthplanid,
        tempregdata4->payersrec[payerscnt2].prioritysequence = regdata->dmg.cob.cobrec[pregcobidx].
        payers[d.seq].prioritysequence, tempregdata4->payersrec[payerscnt2].begeffectivedttm =
        regdata->dmg.cob.cobrec[pregcobidx].payers[d.seq].begeffectivedttm, tempregdata4->payersrec[
        payerscnt2].endeffectivedttm = regdata->dmg.cob.cobrec[pregcobidx].payers[d.seq].
        endeffectivedttm,
        tempregdata4->payersrec[payerscnt2].encntrplanreltnid = regdata->dmg.cob.cobrec[pregcobidx].
        payers[d.seq].encntrplanreltnid
       ENDIF
     ;end select
     SELECT INTO "nl:"
      FROM (dummyt d1  WITH seq = value(size(tempregdata3->payersrec,5))),
       (dummyt d2  WITH seq = value(size(tempregdata4->payersrec,5)))
      PLAN (d1)
       JOIN (d2
       WHERE (tempregdata3->payersrec[d1.seq].healthplanid=tempregdata4->payersrec[d2.seq].
       healthplanid))
      DETAIL
       nonactivempwithsamehp = true
     ;end select
    ENDIF
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE (pe.pft_encntr_id=prevaldata->pftencntrs[ppeidx].pftencntrid))
     DETAIL
      encntrid = pe.encntr_id
     WITH nocounter
    ;end select
    SET hpexpireind = checkiforgmarkedfornonrecurringhpexpire(encntrid)
    FOR (boidx = 1 TO size(prevaldata->pftencntrs[ppeidx].insbo,5))
     IF (pforceallflag=true)
      SET prevaldata->pftencntrs[ppeidx].insbo[boidx].chrgcovevalflag =
      flag_chrg_cov_dates_reprocess_full
     ELSE
      SET prevaldata->pftencntrs[ppeidx].insbo[boidx].chrgcovevalflag =
      flag_chrg_cov_dates_reprocess_none
      SET minservicedate = prevaldata->pftencntrs[ppeidx].insbo[boidx].minservicedttm
      SET maxservicedate = prevaldata->pftencntrs[ppeidx].insbo[boidx].maxservicedttm
      FOR (hpidx = 1 TO size(regdata->dmg.cob.cobrec[pregcobidx].payers,5))
        IF ((regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].begeffectivedttm <= minservicedate)
         AND (regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].endeffectivedttm >= minservicedate)
         AND (regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].begeffectivedttm <= maxservicedate)
         AND (regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].endeffectivedttm >= maxservicedate))
         CALL logmessage("evalChargeCoverageForFinEncntr",build2("Date within range for payer index:",
           hpidx),log_debug)
         SET lvalidx = locateval(searchidx,1,size(prevaldata->pftencntrs[ppeidx].insbo[boidx].insbal,
           5),regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].healthplanid,prevaldata->pftencntrs[
          ppeidx].insbo[boidx].insbal[searchidx].healthplanid,
          regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].prioritysequence,prevaldata->pftencntrs[
          ppeidx].insbo[boidx].insbal[searchidx].prioritysequence)
         IF (lvalidx=0)
          IF ((regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].prioritysequence > 1))
           CALL logmessage("evalChargeCoverageForFinEncntr",
            "Skipping benefit order and charge reprocess, no action",log_debug)
          ELSE
           SET prevaldata->pftencntrs[ppeidx].chrgcovevalflag = flag_chrg_cov_dates_reprocess_partial
           SET prevaldata->pftencntrs[ppeidx].insbo[boidx].chrgcovevalflag =
           flag_chrg_cov_dates_reprocess_full
           CALL logmessage("evalChargeCoverageForFinEncntr",build2(
             "No financial balance for payer index:",hpidx,
             ". Marking benefit order for full reprocess:",boidx),log_debug)
          ENDIF
         ENDIF
        ELSEIF (mpwithsamehpind=1)
         SET lvalidx2 = locateval(searchidx,1,size(tempregdata2->cobrec,5),regdata->dmg.cob.cobrec[
          pregcobidx].payers[hpidx].healthplanid,tempregdata2->cobrec[searchidx].healthplanid,
          regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].prioritysequence,tempregdata2->cobrec[
          searchidx].prioritysequence)
         IF ((tempregdata2->cobrec[lvalidx2].begeffectivedttm <= minservicedate)
          AND (tempregdata2->cobrec[lvalidx2].endeffectivedttm >= minservicedate)
          AND (tempregdata2->cobrec[lvalidx2].begeffectivedttm <= maxservicedate)
          AND (tempregdata2->cobrec[lvalidx2].endeffectivedttm >= maxservicedate))
          CALL logmessage("evalChargeCoverageForFinEncntr",build2(
            "Date within range for payer index:",hpidx),log_debug)
          SET lvalidx = locateval(searchidx,1,size(prevaldata->pftencntrs[ppeidx].insbo[boidx].insbal,
            5),regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].healthplanid,prevaldata->pftencntrs[
           ppeidx].insbo[boidx].insbal[searchidx].healthplanid,
           regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].prioritysequence,prevaldata->pftencntrs[
           ppeidx].insbo[boidx].insbal[searchidx].prioritysequence)
          IF (lvalidx=0)
           SET prevaldata->pftencntrs[ppeidx].chrgcovevalflag = flag_chrg_cov_dates_reprocess_partial
           SET prevaldata->pftencntrs[ppeidx].insbo[boidx].chrgcovevalflag =
           flag_chrg_cov_dates_reprocess_full
           CALL logmessage("evalChargeCoverageForFinEncntr",build2(
             "No financial balance for payer index:",hpidx,
             ". Marking benefit order for full reprocess:",boidx),log_debug)
          ENDIF
         ENDIF
        ELSEIF (nonactivempwithsamehp=1)
         SET lvalidx2 = locateval(searchidx,1,size(tempregdata3->payersrec,5),regdata->dmg.cob.
          cobrec[pregcobidx].payers[hpidx].healthplanid,tempregdata3->payersrec[searchidx].
          healthplanid,
          regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].prioritysequence,tempregdata3->payersrec[
          searchidx].prioritysequence)
         IF ((tempregdata3->payersrec[lvalidx2].begeffectivedttm <= minservicedate)
          AND (tempregdata3->payersrec[lvalidx2].endeffectivedttm >= minservicedate)
          AND (tempregdata3->payersrec[lvalidx2].begeffectivedttm <= maxservicedate)
          AND (tempregdata3->payersrec[lvalidx2].endeffectivedttm >= maxservicedate))
          CALL logmessage("evalChargeCoverageForFinEncntr",build2(
            "Date within range for payer index:",hpidx),log_debug)
          SET lvalidx = locateval(searchidx,1,size(prevaldata->pftencntrs[ppeidx].insbo[boidx].insbal,
            5),regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].healthplanid,prevaldata->pftencntrs[
           ppeidx].insbo[boidx].insbal[searchidx].healthplanid,
           regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].prioritysequence,prevaldata->pftencntrs[
           ppeidx].insbo[boidx].insbal[searchidx].prioritysequence)
          IF (lvalidx=0)
           SET prevaldata->pftencntrs[ppeidx].chrgcovevalflag = flag_chrg_cov_dates_reprocess_partial
           SET prevaldata->pftencntrs[ppeidx].insbo[boidx].chrgcovevalflag =
           flag_chrg_cov_dates_reprocess_full
           CALL logmessage("evalChargeCoverageForFinEncntr",build2(
             "No financial balance for payer index:",hpidx,
             ". Marking benefit order for full reprocess:",boidx),log_debug)
          ENDIF
         ENDIF
        ELSE
         SET lvalidx = locateval(searchidx,1,size(prevaldata->pftencntrs[ppeidx].insbo[boidx].insbal,
           5),regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].healthplanid,prevaldata->pftencntrs[
          ppeidx].insbo[boidx].insbal[searchidx].healthplanid)
         IF (lvalidx > 0
          AND hpexpireind)
          SET prevaldata->pftencntrs[ppeidx].chrgcovevalflag = flag_chrg_cov_dates_reprocess_partial
          SET prevaldata->pftencntrs[ppeidx].insbo[boidx].chrgcovevalflag =
          flag_chrg_cov_dates_reprocess_partial
          SET prevaldata->pftencntrs[ppeidx].insbo[boidx].insbal[lvalidx].chrgcovevalflag =
          flag_chrg_cov_dates_reprocess_partial
          FOR (chrgidx = 1 TO size(prevaldata->pftencntrs[ppeidx].insbo[boidx].charges,5))
            IF ((((prevaldata->pftencntrs[ppeidx].insbo[boidx].charges[chrgidx].servicedttm < regdata
            ->dmg.cob.cobrec[pregcobidx].payers[hpidx].begeffectivedttm)) OR ((prevaldata->
            pftencntrs[ppeidx].insbo[boidx].charges[chrgidx].servicedttm > regdata->dmg.cob.cobrec[
            pregcobidx].payers[hpidx].endeffectivedttm))) )
             CALL markchargeforreprocessing(prevaldata->pftencntrs[ppeidx].insbo[boidx].charges[
              chrgidx].chargeitemid,prevaldata)
            ENDIF
          ENDFOR
         ELSEIF (lvalidx > 0)
          SET prevaldata->pftencntrs[ppeidx].chrgcovevalflag = flag_chrg_cov_dates_reprocess_partial
          SET prevaldata->pftencntrs[ppeidx].insbo[boidx].chrgcovevalflag =
          flag_chrg_cov_dates_reprocess_full
          SET prevaldata->pftencntrs[ppeidx].insbo[boidx].insbal[lvalidx].chrgcovevalflag =
          flag_chrg_cov_dates_reprocess_full
         ELSEIF (lvalidx=0
          AND (regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].prioritysequence=1)
          AND (regdata->dmg.cob.cobrec[pregcobidx].encntrplancobid != 0))
          SET prevaldata->pftencntrs[ppeidx].chrgcovevalflag = flag_chrg_cov_dates_reprocess_partial
          SET prevaldata->pftencntrs[ppeidx].insbo[boidx].chrgcovevalflag =
          flag_chrg_cov_dates_reprocess_full
         ELSE
          CALL logmessage("evalChargeCoverageForFinEncntr","No balance found for payer, no action",
           log_debug)
         ENDIF
        ENDIF
      ENDFOR
     ENDIF
     IF ((prevaldata->pftencntrs[ppeidx].insbo[boidx].chrgcovevalflag=
     flag_chrg_cov_dates_reprocess_full))
      FOR (chrgidx = 1 TO size(prevaldata->pftencntrs[ppeidx].insbo[boidx].charges,5))
        CALL markchargeforreprocessing(prevaldata->pftencntrs[ppeidx].insbo[boidx].charges[chrgidx].
         chargeitemid,prevaldata)
      ENDFOR
     ELSE
      SET reprocallflag = false
     ENDIF
    ENDFOR
    IF (reprocallflag=true
     AND size(prevaldata->pftencntrs[ppeidx].insbo,5) > 0)
     SET prevaldata->pftencntrs[ppeidx].chrgcovevalflag = flag_chrg_cov_dates_reprocess_full
    ENDIF
    SET reprocallflag = true
    FOR (chrgidx = 1 TO size(prevaldata->pftencntrs[ppeidx].spbocharges,5))
     IF (pforceallflag=true)
      SET tmpaddspchrg = true
     ELSE
      SET prevaldata->pftencntrs[ppeidx].spbocharges[chrgidx].chrgcovevalflag =
      flag_chrg_cov_dates_reprocess_none
      SET chrgservicedate = prevaldata->pftencntrs[ppeidx].spbocharges[chrgidx].servicedttm
      SET tmpaddspchrg = false
      FOR (hpidx = 1 TO size(regdata->dmg.cob.cobrec[pregcobidx].payers,5))
        IF ((regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].begeffectivedttm <= chrgservicedate)
         AND (regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].endeffectivedttm >= chrgservicedate)
         AND (regdata->dmg.cob.cobrec[pregcobidx].payers[hpidx].prioritysequence=1))
         SET tmpaddspchrg = true
        ENDIF
      ENDFOR
     ENDIF
     IF (tmpaddspchrg=true)
      CALL markchargeforreprocessing(prevaldata->pftencntrs[ppeidx].spbocharges[chrgidx].chargeitemid,
       prevaldata)
      SET prevaldata->pftencntrs[ppeidx].spbocharges[chrgidx].chrgcovevalflag =
      flag_chrg_cov_dates_reprocess_full
      SET prevaldata->pftencntrs[ppeidx].spchrgcovevalflag = flag_chrg_cov_dates_reprocess_partial
     ELSE
      SET reprocallflag = false
     ENDIF
    ENDFOR
    IF (reprocallflag=true
     AND size(prevaldata->pftencntrs[ppeidx].spbocharges,5) > 0)
     SET prevaldata->pftencntrs[ppeidx].spchrgcovevalflag = flag_chrg_cov_dates_reprocess_full
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL echo("Exiting evalChargeCoverageForFinEncntr.")
     CALL echorecord(prevaldata)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(markchargeforreprocessing,char(128))=char(128))
  SUBROUTINE (markchargeforreprocessing(pchargeitemid=f8,prevaldata=vc(ref)) =i2)
    DECLARE chrgcnt = i4 WITH protect, noconstant(0)
    SET chrgcnt = (size(prevaldata->chargestoreprocess,5)+ 1)
    SET stat = alterlist(prevaldata->chargestoreprocess,chrgcnt)
    SET prevaldata->chargestoreprocess[chrgcnt].chargeitemid = pchargeitemid
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(matchspregcobtofincob,char(128))=char(128))
  SUBROUTINE (matchspregcobtofincob(prrgdata=vc(ref),prfndata=vc(ref),nonrcrhpexprflag=i2,
   prpftenctrid=f8) =i2)
    DECLARE bspcobmatch = i2 WITH protect, noconstant(false)
    IF (nonrcrhpexprflag)
     DECLARE finspsize = i4 WITH protect, noconstant(0)
     DECLARE finpyrsize = i4 WITH protect, noconstant(0)
     DECLARE regspsize = i4 WITH protect, noconstant(0)
     DECLARE regpyrsize = i4 WITH protect, noconstant(0)
     DECLARE regcobrcsize = i4 WITH protect, noconstant(0)
     DECLARE cobrcidx = i4 WITH protect, noconstant(0)
     SET regcobrcsize = size(prrgdata->dmg.cob.cobrec,5)
     SET finspsize = size(prfndata->dmg.cob.cobrec[1].selfpays,5)
     SET finpyrsize = size(prfndata->dmg.cob.cobrec[1].payers,5)
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       benefit_order bo,
       bo_hp_reltn bhr
      PLAN (pe
       WHERE pe.pft_encntr_id=prpftenctrid
        AND pe.fin_class_cd=cs354_selfpay_cd
        AND pe.active_ind=true)
       JOIN (bo
       WHERE bo.pft_encntr_id=pe.pft_encntr_id
        AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
        AND bo.fin_class_cd=cs354_selfpay_cd
        AND bo.active_ind=true)
       JOIN (bhr
       WHERE bhr.benefit_order_id=bo.benefit_order_id
        AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
        AND bhr.active_ind=true
        AND bhr.priority_seq=1
        AND bhr.fin_class_cd=cs354_selfpay_cd)
      WITH nocounter
     ;end select
     IF (curqual=1)
      IF (finspsize > 0
       AND finpyrsize=0)
       FOR (cobrcidx = 1 TO regcobrcsize)
         SET regspsize = size(prrgdata->dmg.cob.cobrec[cobrcidx].selfpays,5)
         SET regpyrsize = size(prrgdata->dmg.cob.cobrec[cobrcidx].payers,5)
         IF (regspsize > 0
          AND regpyrsize=0)
          IF ((prrgdata->dmg.cob.cobrec[cobrcidx].selfpays[1].healthplanid=prfndata->dmg.cob.cobrec[1
          ].selfpays[1].healthplanid))
           SET bspcobmatch = true
          ENDIF
         ELSE
          SET bspcobmatch = false
          RETURN(bspcobmatch)
         ENDIF
         IF (bspcobmatch)
          SET prfndata->dmg.cob.cobrec[1].encntrplancobid = prrgdata->dmg.cob.cobrec[cobrcidx].
          encntrplancobid
          RETURN(bspcobmatch)
         ENDIF
       ENDFOR
      ENDIF
     ENDIF
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(prfndata)
     CALL echorecord(prrgdata)
     CALL echo(build2("bSpCOBMatch:",bspcobmatch))
    ENDIF
    RETURN(bspcobmatch)
  END ;Subroutine
 ENDIF
 CALL echo("End PFT_RM_GET_REG_MODS_DATA_SUBS.INC")
 CALL echo("Begin including pft_get_encntr_service_dates.inc, version [RCBACM-20402.012]")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(cs354_selfpay)))
  DECLARE cs354_selfpay = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
 ENDIF
 IF ( NOT (validate(cs24451_cancelled)))
  DECLARE cs24451_cancelled = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
 ENDIF
 IF ( NOT (validate(cs24451_invalid)))
  DECLARE cs24451_invalid = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
 ENDIF
 IF (validate(calculateencounterservicedates,char(128))=char(128))
  SUBROUTINE (calculateencounterservicedates(pregdatetime=dq8,pdischargedatetime=dq8,precurringmonth=
   i2,precurringyear=i4,prservicefromdate=dq8(ref),prservicetodate=dq8(ref)) =i2)
    CALL echo(
"DEPRECATED SUBROUTINE!!! THIS SUBROUTINE DOES NOT RETURN THE EXACT TIME FOR NON-RECURRING ENCOUNTERS.USE                  \
         calculateServiceDatesForEncounter FOR EXACT TIME\
")
    DECLARE startdatemonth = vc WITH protect
    DECLARE startdate = vc WITH protect
    IF (precurringmonth > 0)
     IF (((precurringyear <= 0) OR (pregdatetime=null)) )
      RETURN(false)
     ENDIF
    ENDIF
    IF (precurringyear > 0)
     IF (((precurringmonth <= 0) OR (pregdatetime=null)) )
      RETURN(false)
     ENDIF
    ENDIF
    IF (precurringmonth > 0
     AND precurringyear > 0)
     IF (month(pregdatetime)=precurringmonth
      AND year(pregdatetime)=precurringyear)
      SET prservicefromdate = cnvtdatetime(cnvtdate(pregdatetime),0)
     ELSE
      IF (precurringmonth < 10)
       SET startdatemonth = concat("0",cnvtstring(precurringmonth,1))
      ELSE
       SET startdatemonth = cnvtstring(precurringmonth,2)
      ENDIF
      SET startdate = concat(cnvtstring(startdatemonth,2),"01",cnvtstring(precurringyear,4))
      SET prservicefromdate = cnvtdatetime(cnvtdate(startdate),0)
     ENDIF
     IF (precurringmonth=month(pdischargedatetime)
      AND precurringyear=year(pdischargedatetime))
      SET prservicetodate = cnvtdatetime(cnvtdate(pdischargedatetime),0)
     ELSE
      SET prservicetodate = cnvtdatetime(datetimefind(cnvtdatetime(cnvtdate(prservicefromdate),0),"M",
        "E","B"))
     ENDIF
    ELSE
     SET prservicefromdate = cnvtdatetime(cnvtdate(pregdatetime),0)
     SET prservicetodate = cnvtdatetime(cnvtdate(pdischargedatetime),0)
    ENDIF
    IF (cnvtdatetime(cnvtdate(prservicetodate),0) > cnvtdatetime(curdate,0))
     SET prservicetodate = 0.0
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getencounterservicedates,char(128))=char(128))
  SUBROUTINE (getencounterservicedates(ppftencntrid=f8,prservicefromdate=dq8(ref),prservicetodate=dq8
   (ref)) =i2)
    DECLARE pregdatetime = dq8 WITH protect
    DECLARE pdischargedatetime = dq8 WITH protect
    DECLARE precurringmonth = i2 WITH protect
    DECLARE precurringyear = i4 WITH protect
    DECLARE status = i2 WITH protect
    IF (ppftencntrid <= 0)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      encounter e
     PLAN (pe
      WHERE pe.pft_encntr_id=ppftencntrid
       AND pe.active_ind=1)
      JOIN (e
      WHERE e.encntr_id=pe.encntr_id
       AND e.active_ind=1)
     DETAIL
      pregdatetime = e.reg_dt_tm, pdischargedatetime = e.disch_dt_tm, precurringmonth = pe
      .recur_current_month,
      precurringyear = pe.recur_current_year
     WITH nocounter
    ;end select
    IF (curqual=0)
     RETURN(false)
    ENDIF
    SET status = calculateservicedatesforencounter(pregdatetime,pdischargedatetime,precurringmonth,
     precurringyear,prservicefromdate,
     prservicetodate)
    RETURN(status)
  END ;Subroutine
 ENDIF
 IF (validate(calculatebalanceservicedates,char(128))=char(128))
  SUBROUTINE (calculatebalanceservicedates(pregdatetime=dq8,pdischargedatetime=dq8,precurringmonth=i2,
   precurringyear=i4,pchargegroupbeginservicedate=dq8,pchargegroupendservicedate=dq8,pendofperioddttm
   =dq8,singlechargeperchargegroupind=i2,prservicefromdate=dq8(ref),prservicetodate=dq8(ref)) =i2)
    DECLARE eopfromdttm = dq8 WITH protect, noconstant(0.0)
    DECLARE eoptodttm = dq8 WITH protect, noconstant(0.0)
    DECLARE magicendoftimestartrange = dq8 WITH protect, noconstant(cnvtdatetime(
      "31-DEC-2100 00:00:00.00"))
    DECLARE magicendoftimeendrange = dq8 WITH protect, noconstant(cnvtdatetime(
      "31-DEC-2100 23:59:59.00"))
    DECLARE hpeffectivetodate = dq8 WITH protect, noconstant(prservicetodate)
    IF (singlechargeperchargegroupind=true)
     SET prservicefromdate = pchargegroupbeginservicedate
     SET prservicetodate = pchargegroupendservicedate
     RETURN(true)
    ENDIF
    IF ( NOT (calculateencounterservicedates(pregdatetime,pdischargedatetime,precurringmonth,
     precurringyear,prservicefromdate,
     prservicetodate)))
     RETURN(false)
    ENDIF
    IF (pchargegroupendservicedate BETWEEN magicendoftimestartrange AND magicendoftimeendrange)
     SET pchargegroupendservicedate = null
    ENDIF
    IF (pchargegroupendservicedate != null)
     IF (prservicefromdate > 0.0)
      IF (cnvtdatetime(cnvtdate(pchargegroupbeginservicedate),0) > cnvtdatetime(cnvtdate(
        prservicefromdate),0))
       SET prservicefromdate = pchargegroupbeginservicedate
      ENDIF
     ELSE
      SET prservicefromdate = pchargegroupbeginservicedate
     ENDIF
     IF (prservicetodate > 0.0)
      IF (cnvtdatetime(cnvtdate(pchargegroupendservicedate),0) < cnvtdatetime(cnvtdate(
        prservicetodate),0))
       SET prservicetodate = pchargegroupendservicedate
      ENDIF
     ELSE
      SET prservicetodate = pchargegroupendservicedate
     ENDIF
     IF (hpeffectivetodate > 0.0
      AND cnvtdatetime(cnvtdate(hpeffectivetodate),0) < cnvtdatetime(cnvtdate(prservicetodate),0))
      SET prservicetodate = hpeffectivetodate
     ENDIF
    ELSE
     IF (pendofperioddttm > 0.0
      AND cnvtdate(pendofperioddttm) < cnvtdate2("30-DEC-2100","DD-MMM-YYYY"))
      SET eopfromdttm = cnvtdatetime((cnvtdate(cnvtlookbehind("1,Y",pendofperioddttm))+ 1),0)
      SET eoptodttm = pendofperioddttm
     ENDIF
     IF (eopfromdttm > 0.0)
      IF (((eoptodttm < prservicetodate) OR (prservicetodate=0.0)) )
       SET prservicetodate = cnvtdatetime(cnvtdate(eoptodttm),0)
      ENDIF
      IF (hpeffectivetodate > 0.0
       AND cnvtdatetime(cnvtdate(hpeffectivetodate),0) < cnvtdatetime(cnvtdate(prservicetodate),0))
       SET prservicetodate = hpeffectivetodate
      ENDIF
      IF (eopfromdttm > prservicefromdate)
       SET prservicefromdate = cnvtdatetime(cnvtdate(eopfromdttm),0)
      ENDIF
     ENDIF
    ENDIF
    IF (cnvtdatetime(cnvtdate(prservicetodate),0) > cnvtdatetime(curdate,0)
     AND hpeffectivetodate=0.0)
     SET prservicetodate = 0.0
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getbalanceservicedates,char(128))=char(128))
  SUBROUTINE (getbalanceservicedates(pbenefitorderid=f8,prservicefromdate=dq8(ref),prservicetodate=
   dq8(ref)) =i2)
    DECLARE pregdatetime = dq8 WITH protect
    DECLARE pdischargedatetime = dq8 WITH protect
    DECLARE pchargegroupbeginservicedate = dq8 WITH protect
    DECLARE pchargegroupendservicedate = dq8 WITH protect
    DECLARE peopdttm = dq8 WITH protect
    DECLARE precurringmonth = i2 WITH protect
    DECLARE precurringyear = i4 WITH protect
    DECLARE status = i2 WITH protect
    DECLARE singlechargeperchargegroupind = i2 WITH protect
    IF (pbenefitorderid <= 0)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM benefit_order bo,
      pft_encntr pe,
      encounter e,
      bt_condition bt
     PLAN (bo
      WHERE bo.benefit_order_id=pbenefitorderid
       AND bo.active_ind=1)
      JOIN (pe
      WHERE pe.pft_encntr_id=bo.pft_encntr_id
       AND pe.active_ind=1)
      JOIN (e
      WHERE e.encntr_id=pe.encntr_id
       AND e.active_ind=1)
      JOIN (bt
      WHERE bt.bt_condition_id=bo.bt_condition_id)
     DETAIL
      pregdatetime = e.reg_dt_tm, pdischargedatetime = e.disch_dt_tm, precurringmonth = pe
      .recur_current_month,
      precurringyear = pe.recur_current_year, pchargegroupbeginservicedate = bo.beg_service_dt_tm,
      pchargegroupendservicedate = bo.end_service_dt_tm,
      peopdttm = bo.eop_dt_tm, singlechargeperchargegroupind = bt.single_chrg_ind
     WITH nocounter
    ;end select
    IF (curqual=0)
     RETURN(false)
    ENDIF
    SET status = calculatebalanceservicedates(pregdatetime,pdischargedatetime,precurringmonth,
     precurringyear,pchargegroupbeginservicedate,
     pchargegroupendservicedate,peopdttm,singlechargeperchargegroupind,prservicefromdate,
     prservicetodate)
    RETURN(status)
  END ;Subroutine
 ENDIF
 IF (validate(calculateservicedatesforencounter,char(128))=char(128))
  SUBROUTINE (calculateservicedatesforencounter(pregdatetime=dq8,pdischargedatetime=dq8,
   precurringmonth=i2,precurringyear=i4,prservicefromdate=dq8(ref),prservicetodate=dq8(ref)) =i2)
    DECLARE startdatemonth = vc WITH protect
    DECLARE startdate = vc WITH protect
    IF (precurringmonth > 0)
     IF (((precurringyear <= 0) OR (pregdatetime=null)) )
      RETURN(false)
     ENDIF
    ENDIF
    IF (precurringyear > 0)
     IF (((precurringmonth <= 0) OR (pregdatetime=null)) )
      RETURN(false)
     ENDIF
    ENDIF
    IF (precurringmonth > 0
     AND precurringyear > 0)
     IF (month(pregdatetime)=precurringmonth
      AND year(pregdatetime)=precurringyear)
      SET prservicefromdate = pregdatetime
     ELSE
      IF (precurringmonth < 10)
       SET startdatemonth = concat("0",cnvtstring(precurringmonth,1))
      ELSE
       SET startdatemonth = cnvtstring(precurringmonth,2)
      ENDIF
      SET startdate = concat(cnvtstring(startdatemonth,2),"01",cnvtstring(precurringyear,4))
      SET prservicefromdate = cnvtdatetime(cnvtdate(startdate),0)
     ENDIF
     IF (precurringmonth=month(pdischargedatetime)
      AND precurringyear=year(pdischargedatetime))
      SET prservicetodate = pdischargedatetime
     ELSE
      SET prservicetodate = cnvtdatetime(datetimefind(cnvtdatetime(cnvtdate(prservicefromdate),0),"M",
        "E","B"))
      SET prservicetodate = cnvtdatetime(cnvtdate(prservicetodate),235959)
     ENDIF
    ELSE
     SET prservicefromdate = pregdatetime
     SET prservicetodate = pdischargedatetime
    ENDIF
    IF (cnvtdatetime(cnvtdate(prservicetodate),0) > cnvtdatetime(curdate,0))
     SET prservicetodate = 0.0
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(calculatemidmonthservicedates,char(128))=char(128))
  SUBROUTINE (calculatemidmonthservicedates(pftencntrid=f8,prservicefromdate=dq8(ref),prservicetodate
   =dq8(ref)) =i2)
    DECLARE hpendeffectivedate = dq8 WITH protect, noconstant(0.0)
    DECLARE hpbegineffectivedate = dq8 WITH protect, noconstant(0.0)
    DECLARE encntrregdate = dq8 WITH protect, noconstant(0.0)
    DECLARE encntrdischargedate = dq8 WITH protect, noconstant(0.0)
    DECLARE recurmonth = i2 WITH protect, noconstant(0)
    DECLARE recuryear = i4 WITH protect, noconstant(0)
    DECLARE tempdate = dq8 WITH protect, noconstant(0.0)
    IF (((pftencntrid <= 0.0) OR (prservicefromdate=0.0)) )
     RETURN(false)
    ENDIF
    SET hpendeffectivedate = 0.0
    SET hpbegineffectivedate = 0.0
    SELECT DISTINCT INTO "nl:"
     FROM pft_encntr pe,
      encounter e,
      benefit_order bo,
      bo_hp_reltn bhr,
      encntr_plan_reltn epr,
      encntr_plan_cob epc
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid)
      JOIN (e
      WHERE e.encntr_id=pe.encntr_id
       AND e.active_ind=true)
      JOIN (bo
      WHERE bo.pft_encntr_id=pe.pft_encntr_id
       AND  NOT (bo.bo_status_cd IN (cs24451_invalid, cs24451_cancelled))
       AND bo.fin_class_cd != cs354_selfpay
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_invalid, cs24451_cancelled))
       AND bhr.active_ind=true)
      JOIN (epr
      WHERE epr.encntr_id=pe.encntr_id
       AND epr.health_plan_id=bhr.health_plan_id
       AND epr.active_ind=true)
      JOIN (epc
      WHERE (epc.encntr_plan_cob_id= Outerjoin(pe.encntr_plan_cob_id))
       AND (epc.encntr_id= Outerjoin(pe.encntr_id))
       AND (epc.active_ind= Outerjoin(true)) )
     DETAIL
      encntrregdate = e.reg_dt_tm, encntrdischargedate = e.disch_dt_tm, recurmonth = pe
      .recur_current_month,
      recuryear = pe.recur_current_year
      IF (epc.encntr_plan_cob_id > 0.0)
       hpbegineffectivedate = epc.beg_effective_dt_tm, hpendeffectivedate = epc.end_effective_dt_tm
      ELSE
       hpbegineffectivedate = epr.beg_effective_dt_tm, hpendeffectivedate = epr.end_effective_dt_tm
      ENDIF
     WITH nocounter
    ;end select
    IF (curqual <= 0)
     RETURN(false)
    ENDIF
    IF (hpendeffectivedate != 0.0
     AND hpbegineffectivedate != 0.0)
     IF (prservicefromdate < hpbegineffectivedate)
      SET prservicefromdate = hpbegineffectivedate
     ENDIF
     IF (prservicetodate=0.0)
      IF (recurmonth > 0
       AND recuryear > 0)
       IF (recurmonth=month(encntrdischargedate)
        AND recuryear=year(encntrdischargedate))
        SET tempdate = encntrdischargedate
       ELSE
        SET tempdate = cnvtdatetime(datetimefind(cnvtdatetime(cnvtdate(prservicefromdate),0),"M","E",
          "B"))
        SET tempdate = cnvtdatetime(cnvtdate(tempdate),235959)
       ENDIF
       IF (tempdate > hpendeffectivedate
        AND hpendeffectivedate < cnvtdatetime(curdate,0))
        SET prservicetodate = hpendeffectivedate
       ENDIF
      ELSE
       IF (encntrdischargedate IN (0.0, null)
        AND hpendeffectivedate < cnvtdatetime(curdate,0))
        SET prservicetodate = hpendeffectivedate
       ELSEIF (encntrdischargedate > hpendeffectivedate
        AND hpendeffectivedate < cnvtdatetime(curdate,0))
        SET prservicetodate = hpendeffectivedate
       ENDIF
      ENDIF
     ELSEIF (prservicetodate != 0.0
      AND prservicetodate > hpendeffectivedate)
      SET prservicetodate = hpendeffectivedate
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(cs24450_pending_reg_mod_cd)))
  DECLARE cs24450_pending_reg_mod_cd = f8 WITH protect, constant(getcodevalue(24450,"PENDREGMOD",0))
 ENDIF
 IF ( NOT (validate(cs4002129_authtype_cd)))
  DECLARE cs4002129_authtype_cd = f8 WITH protect, constant(getcodevalue(4002129,"AUTH",0))
 ENDIF
 IF ( NOT (validate(cs24451_cancelled_cd)))
  DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
 ENDIF
 IF ( NOT (validate(cs24451_invalid_cd)))
  DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
 ENDIF
 IF ( NOT (validate(cs14949_authtype_cd)))
  DECLARE cs14949_authtype_cd = f8 WITH protect, constant(getcodevalue(14949,"AUTH",0))
 ENDIF
 IF ( NOT (validate(cs4002129_weekly_type_cd)))
  DECLARE cs4002129_weekly_type_cd = f8 WITH protect, constant(getcodevalue(4002129,"WEEKLY",0))
 ENDIF
 IF ( NOT (validate(cs4002129_monthly_type_cd)))
  DECLARE cs4002129_monthly_type_cd = f8 WITH protect, constant(getcodevalue(4002129,"MONTHLY",0))
 ENDIF
 IF ( NOT (validate(cs4002129_custom_type_cd)))
  DECLARE cs4002129_custom_type_cd = f8 WITH protect, constant(getcodevalue(4002129,"CUSTOM",0))
 ENDIF
 IF ( NOT (validate(cs4002129_all_type_cd)))
  DECLARE cs4002129_all_type_cd = f8 WITH protect, constant(getcodevalue(4002129,"ALL",0))
 ENDIF
 IF ( NOT (validate(cs24269_history_cd)))
  DECLARE cs24269_history_cd = f8 WITH protect, constant(getcodevalue(24269,"HISTORY",0))
 ENDIF
 IF ( NOT (validate(cs69_recurring_cd)))
  DECLARE cs69_recurring_cd = f8 WITH protect, constant(getcodevalue(69,"RECURRING",0))
 ENDIF
 IF ( NOT (validate(cs21849_claim_cd)))
  DECLARE cs21849_claim_cd = f8 WITH protect, constant(getcodevalue(21849,"CLAIM",0))
 ENDIF
 IF ( NOT (validate(cs18935_transmitted_cd)))
  DECLARE cs18935_transmitted_cd = f8 WITH protect, constant(getcodevalue(18935,"TRANSMITTED",0))
 ENDIF
 IF ( NOT (validate(cs18935_submitted_cd)))
  DECLARE cs18935_submitted_cd = f8 WITH protect, constant(getcodevalue(18935,"SUBMITTED",0))
 ENDIF
 IF ( NOT (validate(mods_disrete_timer)))
  DECLARE mods_disrete_timer = vc WITH protect, constant("ENG:RCA.FINANCIALS-PROCESS_REG_MODS")
 ENDIF
 IF (validate(isrecurringencountertypechange,char(128))=char(128))
  SUBROUTINE (isrecurringencountertypechange(oencntrtypecd=f8,nencntrtypecd=f8,pftencntrid=f8) =i2)
    DECLARE isrecurringchange = i2 WITH protect, noconstant(false)
    DECLARE oclassmeaning = vc WITH protect, noconstant("")
    DECLARE nclassmeaning = vc WITH protect, noconstant("")
    SELECT INTO "nl:"
     FROM code_value_group cvg1,
      code_value cv1
     PLAN (cvg1
      WHERE cvg1.child_code_value=oencntrtypecd)
      JOIN (cv1
      WHERE cv1.code_value=cvg1.parent_code_value
       AND cv1.code_set=69)
     HEAD REPORT
      oclassmeaning = cnvtupper(trim(uar_get_code_meaning(cv1.code_value)))
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM code_value_group cvg2,
      code_value cv2
     PLAN (cvg2
      WHERE cvg2.child_code_value=nencntrtypecd)
      JOIN (cv2
      WHERE cv2.code_value=cvg2.parent_code_value
       AND cv2.code_set=69)
     HEAD REPORT
      nclassmeaning = cnvtupper(trim(uar_get_code_meaning(cv2.code_value)))
     WITH nocounter
    ;end select
    IF (((oclassmeaning="RECURRING") OR (nclassmeaning="RECURRING"))
     AND oclassmeaning != nclassmeaning)
     SET isrecurringchange = true
    ENDIF
    IF ( NOT (isrecurringchange))
     RETURN(false)
    ENDIF
    IF (oclassmeaning="RECURRING")
     SELECT INTO "nl:"
      FROM pft_encntr pe
      PLAN (pe
       WHERE pe.pft_encntr_id=pftencntrid
        AND pe.recur_current_year > 0)
      WITH nocounter
     ;end select
     IF (curqual > 0)
      RETURN(true)
     ENDIF
     RETURN(false)
    ENDIF
    IF (nclassmeaning="RECURRING")
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       billing_entity be
      PLAN (pe
       WHERE pe.pft_encntr_id=pftencntrid)
       JOIN (be
       WHERE be.billing_entity_id=pe.billing_entity_id
        AND be.recur_bill_opt_flag != 1)
      WITH nocounter
     ;end select
     IF (curqual > 0)
      RETURN(true)
     ENDIF
     RETURN(false)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveadmitdatestocompare,char(128))=char(128))
  SUBROUTINE (retrieveadmitdatestocompare(pftencntrid=f8,prnewadmitdt=f8(ref),proldadmitdt=f8(ref),
   prregmodrequest=vc(ref)) =i2)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    DECLARE pftdatevaluedt = f8 WITH protect, noconstant(0.0)
    SET proldadmitdt = 0.0
    SET prnewadmitdt = 0.0
    IF (validate(prregmodrequest->isdenormalized,false)
     AND validate(prregmodrequest->newadmitdttm,0.0) > 0.0
     AND validate(prregmodrequest->oldadmitdttm,0.0) > 0.0)
     SET proldadmitdt = prregmodrequest->oldadmitdttm
     SET prnewadmitdt = prregmodrequest->newadmitdttm
     RETURN(true)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      encounter e
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid
       AND pe.active_ind=true)
      JOIN (e
      WHERE e.encntr_id=pe.encntr_id
       AND e.active_ind=true)
     DETAIL
      prnewadmitdt = cnvtdatetime(e.inpatient_admit_dt_tm), encntrid = e.encntr_id
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("retrieveAdmitDatesToCompare","Current Admit Date not found",log_debug)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_reg_mod prm
     WHERE prm.encntr_id=encntrid
      AND prm.active_ind=true
      AND prm.transaction_type != "CMB"
     ORDER BY prm.create_dt_tm DESC
     DETAIL
      proldadmitdt = cnvtdatetime(prm.inpatient_admit_dt_tm)
     WITH nocounter, maxrec = 1
    ;end select
    IF (curqual > 0)
     RETURN(true)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_date pd,
      encntr_loc_hist elh
     PLAN (elh
      WHERE elh.encntr_id=encntrid
       AND elh.active_ind=true)
      JOIN (pd
      WHERE pd.parent_entity_id=elh.encntr_loc_hist_id
       AND pd.parent_entity_name="ENCNTR_LOC_HIST"
       AND pd.active_ind=true)
     ORDER BY pd.date_value_dt_tm DESC
     HEAD pd.date_value_dt_tm
      pftdatevaluedt = cnvtdatetime(pd.date_value_dt_tm)
     WITH maxrec = 1, nocounter
    ;end select
    IF (curqual=0)
     SELECT INTO "nl:"
      FROM pm_hist_tracking pht,
       encntr_flex_hist efh
      PLAN (pht
       WHERE pht.encntr_id=encntrid)
       JOIN (efh
       WHERE efh.pm_hist_tracking_id=pht.pm_hist_tracking_id
        AND efh.encntr_id=pht.encntr_id
        AND efh.active_ind=true)
      ORDER BY pht.pm_hist_tracking_id
      HEAD pht.pm_hist_tracking_id
       proldadmitdt = cnvtdatetime(efh.inpatient_admit_dt_tm)
      WITH maxrec = 1, nocounter
     ;end select
     IF (curqual=0)
      CALL logmessage("retrieveAdmitDatesToCompare","Previous Admit Date not found",log_debug)
      RETURN(false)
     ENDIF
    ELSE
     SELECT INTO "nl:"
      FROM pm_hist_tracking pht,
       encntr_flex_hist efh
      PLAN (pht
       WHERE pht.encntr_id=encntrid
        AND pht.create_dt_tm <= cnvtdatetime(pftdatevaluedt))
       JOIN (efh
       WHERE efh.pm_hist_tracking_id=pht.pm_hist_tracking_id
        AND efh.encntr_id=pht.encntr_id)
      ORDER BY pht.pm_hist_tracking_id DESC
      HEAD pht.pm_hist_tracking_id
       proldadmitdt = cnvtdatetime(efh.inpatient_admit_dt_tm)
      WITH maxrec = 1, nocounter
     ;end select
     IF (curqual=0)
      SELECT INTO "nl:"
       FROM pm_hist_tracking pht,
        encntr_flex_hist efh
       PLAN (pht
        WHERE pht.encntr_id=encntrid
         AND pht.create_dt_tm <= cnvtdatetime(pftdatevaluedt))
        JOIN (efh
        WHERE efh.pm_hist_tracking_id=pht.pm_hist_tracking_id)
       ORDER BY pht.pm_hist_tracking_id DESC
       HEAD pht.pm_hist_tracking_id
        proldadmitdt = cnvtdatetime(efh.inpatient_admit_dt_tm)
       WITH maxrec = 1, nocounter
      ;end select
      IF (curqual=0)
       CALL logmessage("retrieveAdmitDatesToCompare","Previous Admit Date not found",log_debug)
       RETURN(false)
      ENDIF
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(evaluatepmhistorypreference,char(128))=char(128))
  SUBROUTINE (evaluatepmhistorypreference(dummyvar=i2) =i2)
    IF ( NOT (validate(cs20790_history_cd)))
     DECLARE cs20790_history_cd = f8 WITH protect, constant(getcodevalue(20790,"HISTORY",1))
    ENDIF
    DECLARE histind = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM code_value_extension cve
     WHERE cve.code_value=cs20790_history_cd
      AND cve.field_name="OPTION"
      AND cve.code_set=20790
     DETAIL
      IF (trim(cve.field_value,3)="1")
       histind = true
      ENDIF
     WITH nocounter
    ;end select
    IF ( NOT (histind))
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveauthorizationinfotocompare,char(128))=char(128))
  CALL logmessage("RetrieveAuthorizationInfoToCompare","Entering",log_debug)
  SUBROUTINE (retrieveauthorizationinfotocompare(pftencntrid=f8) =i2)
    DECLARE lauthhistcnt = i4 WITH protect, noconstant(0)
    DECLARE lauthcnt = i4 WITH protect, noconstant(0)
    DECLARE lbocnt = i4 WITH protect, noconstant(0)
    DECLARE isencounterauthmod = i2 WITH protect, noconstant(false)
    DECLARE isauthmodified = i2 WITH protect, noconstant(false)
    DECLARE authhistsize = i4 WITH protect, noconstant(0)
    DECLARE authmodifiedcnt = i4 WITH protect, noconstant(0)
    DECLARE isservdttminrange = i2 WITH protect, noconstant(false)
    DECLARE isservdttminrangemod = i2 WITH protect, noconstant(false)
    DECLARE isservdttmmodified = i2 WITH protect, noconstant(false)
    DECLARE isauthtypemodified = i2 WITH protect, noconstant(false)
    DECLARE isauthstatusmodified = i2 WITH protect, noconstant(false)
    DECLARE isauthnewlyadded = i2 WITH protect, noconstant(false)
    DECLARE isauthdeleted = i2 WITH protect, noconstant(false)
    DECLARE isauthdtconsecutive = i2 WITH protect, noconstant(false)
    DECLARE minbtbegeffdttm = dq8 WITH protect, noconstant(0.0)
    DECLARE lstregmodreleasedttm = dq8 WITH protect, noconstant(0.0)
    DECLARE tempauthservbegdttm = dq8 WITH protect, noconstant(0.0)
    DECLARE tempauthservenddttm = dq8 WITH protect, noconstant(0.0)
    DECLARE tempboservbegdttm = dq8 WITH protect, noconstant(0.0)
    DECLARE tempboservenddttm = dq8 WITH protect, noconstant(0.0)
    DECLARE tempbobegofweek = dq8 WITH protect, noconstant(0.0)
    DECLARE tempboendofweek = dq8 WITH protect, noconstant(0.0)
    DECLARE tempbobegofmonth = dq8 WITH protect, noconstant(0.0)
    DECLARE tempboendofmonth = dq8 WITH protect, noconstant(0.0)
    DECLARE ismultipleprimary = i2 WITH protect, noconstant(false)
    IF ( NOT (validate(end_of_time_dt_tm)))
     DECLARE end_of_time_dt_tm = f8 WITH protect, constant(cnvtdatetime("31-DEC-2100 23:59:59"))
    ENDIF
    RECORD authdetails(
      1 qual[*]
        2 pft_encntr_id = f8
        2 billing_entity_id = f8
        2 encntr_id = f8
        2 auth_id = f8
        2 auth_nbr = vc
        2 a_auth_type_cd = f8
        2 a_service_beg_dt_tm = dq8
        2 a_service_end_dt_tm = dq8
        2 a_auth_status_cd = f8
        2 a_active_ind = i2
        2 a_updt_dt_tm = dq8
        2 histqual[*]
          3 auth_hist_id = f8
          3 ah_service_beg_dt_tm = dq8
          3 ah_service_end_dt_tm = dq8
          3 ah_auth_type_cd = f8
          3 ah_auth_status_cd = f8
          3 ah_active_ind = i2
    ) WITH protect
    RECORD bodetails(
      1 qual[*]
        2 pft_encntr_id = f8
        2 service_beg_dt_tm = dq8
        2 service_end_dt_tm = dq8
        2 billing_period_type_cd = f8
        2 interval_days = i4
    ) WITH protect
    SELECT INTO "nl:"
     FROM pe_status_reason pe
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid
       AND pe.pe_status_reason_cd=cs24450_pending_reg_mod_cd
       AND pe.pe_release_dt_tm != null
       AND pe.active_ind=false)
     ORDER BY pe.pe_release_dt_tm DESC
     HEAD REPORT
      lstregmodreleasedttm = cnvtdatetime(pe.pe_release_dt_tm)
     WITH nocounter, maxrec = 1
    ;end select
    SELECT INTO "nl:"
     FROM bt_condition bt
     PLAN (bt
      WHERE bt.billing_period_type_cd=cs4002129_authtype_cd
       AND bt.active_ind=true)
     ORDER BY bt.beg_effective_dt_tm
     HEAD REPORT
      minbtbegeffdttm = cnvtdatetime(bt.beg_effective_dt_tm)
     WITH nocounter, maxrec = 1
    ;end select
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid
       AND pe.encntr_plan_cob_id > 0.0
       AND pe.active_ind=true)
     DETAIL
      ismultipleprimary = true
     WITH nocounter
    ;end select
    IF (ismultipleprimary)
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       authorization a,
       encntr_plan_auth_r ar,
       encntr_plan_reltn epr,
       encntr_plan_cob_reltn epcr,
       encntr_plan_cob epc
      PLAN (pe
       WHERE pe.pft_encntr_id=pftencntrid
        AND pe.active_ind=true)
       JOIN (a
       WHERE a.encntr_id=pe.encntr_id
        AND a.service_beg_dt_tm != null
        AND a.service_beg_dt_tm >= cnvtdatetime(minbtbegeffdttm))
       JOIN (ar
       WHERE ar.authorization_id=a.authorization_id)
       JOIN (epr
       WHERE epr.encntr_plan_reltn_id=ar.encntr_plan_reltn_id
        AND epr.active_ind=true)
       JOIN (epcr
       WHERE epcr.encntr_plan_reltn_id=epr.encntr_plan_reltn_id
        AND epcr.priority_seq=1
        AND epcr.active_ind=true)
       JOIN (epc
       WHERE epc.encntr_plan_cob_id=epcr.encntr_plan_cob_id
        AND epc.encntr_plan_cob_id=pe.encntr_plan_cob_id
        AND epc.active_ind=true)
      ORDER BY a.service_beg_dt_tm, a.service_end_dt_tm
      HEAD a.authorization_id
       lauthcnt += 1
       IF (mod(lauthcnt,10)=1)
        stat = alterlist(authdetails->qual,(lauthcnt+ 9))
       ENDIF
       authdetails->qual[lauthcnt].pft_encntr_id = pe.pft_encntr_id, authdetails->qual[lauthcnt].
       encntr_id = pe.encntr_id, authdetails->qual[lauthcnt].auth_id = a.authorization_id
       IF (a.auth_nbr=null)
        authdetails->qual[lauthcnt].auth_nbr = " "
       ELSE
        authdetails->qual[lauthcnt].auth_nbr = a.auth_nbr
       ENDIF
       authdetails->qual[lauthcnt].a_auth_type_cd = a.auth_type_cd, authdetails->qual[lauthcnt].
       a_auth_status_cd = a.cert_status_cd, authdetails->qual[lauthcnt].billing_entity_id = pe
       .billing_entity_id,
       authdetails->qual[lauthcnt].a_active_ind = a.active_ind, authdetails->qual[lauthcnt].
       a_service_beg_dt_tm = cnvtdatetime(a.service_beg_dt_tm)
       IF (((a.service_end_dt_tm=null) OR (a.service_end_dt_tm=0.0)) )
        authdetails->qual[lauthcnt].a_service_end_dt_tm = cnvtdatetime(end_of_time_dt_tm)
       ELSE
        authdetails->qual[lauthcnt].a_service_end_dt_tm = cnvtdatetime(a.service_end_dt_tm)
       ENDIF
       authdetails->qual[lauthcnt].a_updt_dt_tm = a.updt_dt_tm
      WITH nocounter
     ;end select
    ELSE
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       authorization a,
       encntr_plan_auth_r ar,
       encntr_plan_reltn epr
      PLAN (pe
       WHERE pe.pft_encntr_id=pftencntrid
        AND pe.active_ind=true)
       JOIN (a
       WHERE a.encntr_id=pe.encntr_id
        AND a.service_beg_dt_tm != null
        AND a.service_beg_dt_tm >= cnvtdatetime(minbtbegeffdttm))
       JOIN (ar
       WHERE ar.authorization_id=a.authorization_id)
       JOIN (epr
       WHERE epr.encntr_plan_reltn_id=ar.encntr_plan_reltn_id
        AND epr.active_ind=true
        AND epr.priority_seq=1)
      ORDER BY a.service_beg_dt_tm, a.service_end_dt_tm
      HEAD a.authorization_id
       lauthcnt += 1
       IF (mod(lauthcnt,10)=1)
        stat = alterlist(authdetails->qual,(lauthcnt+ 9))
       ENDIF
       authdetails->qual[lauthcnt].pft_encntr_id = pe.pft_encntr_id, authdetails->qual[lauthcnt].
       encntr_id = pe.encntr_id, authdetails->qual[lauthcnt].auth_id = a.authorization_id
       IF (a.auth_nbr=null)
        authdetails->qual[lauthcnt].auth_nbr = " "
       ELSE
        authdetails->qual[lauthcnt].auth_nbr = a.auth_nbr
       ENDIF
       authdetails->qual[lauthcnt].a_auth_type_cd = a.auth_type_cd, authdetails->qual[lauthcnt].
       a_auth_status_cd = a.cert_status_cd, authdetails->qual[lauthcnt].billing_entity_id = pe
       .billing_entity_id,
       authdetails->qual[lauthcnt].a_active_ind = a.active_ind, authdetails->qual[lauthcnt].
       a_service_beg_dt_tm = cnvtdatetime(a.service_beg_dt_tm)
       IF (((a.service_end_dt_tm=null) OR (a.service_end_dt_tm=0.0)) )
        authdetails->qual[lauthcnt].a_service_end_dt_tm = cnvtdatetime(end_of_time_dt_tm)
       ELSE
        authdetails->qual[lauthcnt].a_service_end_dt_tm = cnvtdatetime(a.service_end_dt_tm)
       ENDIF
       authdetails->qual[lauthcnt].a_updt_dt_tm = a.updt_dt_tm
      WITH nocounter
     ;end select
    ENDIF
    IF (lauthcnt > 0)
     SET stat = alterlist(authdetails->qual,lauthcnt)
    ELSE
     CALL logmessage("Exiting retrieveAuthorizationInfoToCompare","No Authorization Data Found",
      log_debug)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bt_condition bt
     PLAN (bo
      WHERE bo.pft_encntr_id=pftencntrid
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo.active_ind=true)
      JOIN (bt
      WHERE bt.bt_condition_id=bo.bt_condition_id
       AND bt.active_ind=true)
     ORDER BY bo.beg_service_dt_tm
     DETAIL
      lbocnt += 1
      IF (mod(lbocnt,10)=1)
       stat = alterlist(bodetails->qual,(lbocnt+ 9))
      ENDIF
      bodetails->qual[lbocnt].pft_encntr_id = bo.pft_encntr_id, bodetails->qual[lbocnt].
      service_beg_dt_tm = bo.beg_service_dt_tm, bodetails->qual[lbocnt].billing_period_type_cd = bt
      .billing_period_type_cd
      IF (((bo.end_service_dt_tm=null) OR (0.0)) )
       bodetails->qual[lbocnt].service_end_dt_tm = cnvtdatetime(end_of_time_dt_tm)
      ELSE
       bodetails->qual[lbocnt].service_end_dt_tm = bo.end_service_dt_tm
      ENDIF
      IF (bt.interval_days=null)
       bodetails->qual[lbocnt].interval_days = 0
      ELSE
       bodetails->qual[lbocnt].interval_days = bt.interval_days
      ENDIF
     WITH nocounter
    ;end select
    IF (lbocnt > 0)
     SET stat = alterlist(bodetails->qual,lbocnt)
    ENDIF
    IF (validate(debug)=true)
     CALL echorecord(bodetails)
    ENDIF
    FOR (authindex = 1 TO lauthcnt)
      SET authdetails->qual[authindex].a_service_beg_dt_tm = getcgfacilitybeginningofday(authdetails
       ->qual[authindex].billing_entity_id,authdetails->qual[authindex].a_service_beg_dt_tm)
      SET authdetails->qual[authindex].a_service_end_dt_tm = getcgfacilityendofday(authdetails->qual[
       authindex].billing_entity_id,authdetails->qual[authindex].a_service_end_dt_tm)
      IF (validate(debug)=true)
       CALL echorecord(authdetails)
      ENDIF
      SELECT INTO "nl"
       FROM authorization_hist ah
       WHERE (ah.authorization_id=authdetails->qual[authindex].auth_id)
        AND ah.service_beg_dt_tm != null
       ORDER BY ah.authorization_hist_id DESC
       HEAD REPORT
        lauthhistcnt = 0
       DETAIL
        lauthhistcnt += 1
        IF (mod(lauthhistcnt,10)=1)
         stat = alterlist(authdetails->qual[authindex].histqual,(lauthhistcnt+ 9))
        ENDIF
        authdetails->qual[authindex].histqual[lauthhistcnt].auth_hist_id = ah.authorization_hist_id,
        authdetails->qual[authindex].histqual[lauthhistcnt].ah_auth_type_cd = ah.auth_type_cd,
        authdetails->qual[authindex].histqual[lauthhistcnt].ah_auth_status_cd = ah.cert_status_cd,
        authdetails->qual[authindex].histqual[lauthhistcnt].ah_active_ind = ah.active_ind,
        authdetails->qual[authindex].histqual[lauthhistcnt].ah_service_beg_dt_tm = cnvtdatetime(ah
         .service_beg_dt_tm)
        IF (((ah.service_end_dt_tm=null) OR (ah.service_end_dt_tm=0.0)) )
         authdetails->qual[authindex].histqual[lauthhistcnt].ah_service_end_dt_tm = cnvtdatetime(
          end_of_time_dt_tm)
        ELSE
         authdetails->qual[authindex].histqual[lauthhistcnt].ah_service_end_dt_tm = cnvtdatetime(ah
          .service_end_dt_tm)
        ENDIF
       FOOT REPORT
        stat = alterlist(authdetails->qual[authindex].histqual,lauthhistcnt)
       WITH nocounter, maxrec = 2
      ;end select
      SET isservdttminrange = false
      SET isservdttmmodified = false
      SET isauthtypemodified = false
      SET isauthstatusmodified = false
      SET isauthnewlyadded = false
      SET isauthdeleted = false
      SET isauthmodified = false
      SET isauthdtconsecutive = false
      SET isservdttminrangemod = false
      SET tempauthservbegdttm = authdetails->qual[authindex].a_service_beg_dt_tm
      SET tempauthservenddttm = authdetails->qual[authindex].a_service_end_dt_tm
      SET authhistsize = size(authdetails->qual[authindex].histqual,5)
      IF (authhistsize > 0)
       FOR (authhistindex = 1 TO authhistsize)
        SET authdetails->qual[authindex].histqual[authhistindex].ah_service_beg_dt_tm =
        getcgfacilitybeginningofday(authdetails->qual[authindex].billing_entity_id,authdetails->qual[
         authindex].histqual[authhistindex].ah_service_beg_dt_tm)
        SET authdetails->qual[authindex].histqual[authhistindex].ah_service_end_dt_tm =
        getcgfacilityendofday(authdetails->qual[authindex].billing_entity_id,authdetails->qual[
         authindex].histqual[authhistindex].ah_service_end_dt_tm)
       ENDFOR
       FOR (boindex = 1 TO lbocnt)
         IF ( NOT (((isservdttminrange) OR (((isservdttmmodified) OR (isauthdtconsecutive)) )) ))
          SET tempboservbegdttm = bodetails->qual[boindex].service_beg_dt_tm
          SET tempboservenddttm = bodetails->qual[boindex].service_end_dt_tm
          IF (tempauthservbegdttm >= tempboservbegdttm
           AND tempauthservbegdttm <= tempboservenddttm
           AND tempauthservenddttm >= tempboservbegdttm
           AND tempauthservenddttm <= tempboservenddttm)
           SET isservdttminrange = true
           IF (authdetails->qual[authindex].a_active_ind)
            IF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_authtype_cd))
             IF ( NOT (tempauthservbegdttm=tempboservbegdttm
              AND tempauthservenddttm=tempboservenddttm))
              IF (lauthcnt > 1)
               IF (authindex=1)
                IF ( NOT (tempauthservbegdttm=tempboservbegdttm
                 AND (((tempauthservenddttm >= authdetails->qual[(authindex+ 1)].a_service_beg_dt_tm)
                ) OR (datetimediff(authdetails->qual[(authindex+ 1)].a_service_beg_dt_tm,
                 cnvtlookahead("1,S",tempauthservenddttm))=0)) ))
                 SET isservdttminrangemod = true
                ENDIF
               ELSEIF (authindex=lauthcnt)
                IF ( NOT (tempauthservenddttm=tempboservenddttm
                 AND (((tempauthservbegdttm <= authdetails->qual[(authindex - 1)].a_service_end_dt_tm
                )) OR (datetimediff(tempauthservbegdttm,cnvtlookahead("1,S",authdetails->qual[(
                  authindex - 1)].a_service_end_dt_tm))=0)) ))
                 SET isservdttminrangemod = true
                ENDIF
               ELSE
                IF ( NOT (((tempauthservenddttm=tempboservenddttm) OR ((((tempauthservenddttm >=
                authdetails->qual[(authindex+ 1)].a_service_beg_dt_tm)) OR (datetimediff(authdetails
                 ->qual[(authindex+ 1)].a_service_beg_dt_tm,cnvtlookahead("1,S",tempauthservenddttm))
                =0)) ))
                 AND ((tempauthservbegdttm=tempboservbegdttm) OR ((((tempauthservbegdttm <=
                authdetails->qual[(authindex - 1)].a_service_end_dt_tm)) OR (datetimediff(
                 tempauthservbegdttm,cnvtlookahead("1,S",authdetails->qual[(authindex - 1)].
                  a_service_end_dt_tm))=0)) )) ))
                 SET isservdttminrangemod = true
                ENDIF
               ENDIF
              ELSE
               SET isservdttminrangemod = true
              ENDIF
             ENDIF
             IF ((authdetails->qual[authindex].a_auth_type_cd=cs14949_authtype_cd)
              AND evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd))
              SET isauthtypemodified = false
              SET isauthstatusmodified = false
              IF (isservdttminrangemod)
               SET isauthmodified = true
              ENDIF
             ELSE
              IF (authhistsize=2)
               IF ((authdetails->qual[authindex].histqual[authhistsize].ah_auth_type_cd=
               cs14949_authtype_cd)
                AND evaluateauthstatus(authdetails->qual[authindex].histqual[authhistsize].
                ah_auth_status_cd))
                SET isauthmodified = true
               ENDIF
              ENDIF
              IF (isauthmodified)
               IF ((authdetails->qual[authindex].a_auth_type_cd != cs14949_authtype_cd))
                SET isauthtypemodified = true
               ENDIF
               IF ( NOT (evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd)))
                SET isauthstatusmodified = true
               ENDIF
              ENDIF
             ENDIF
            ELSE
             IF (authhistsize=1)
              IF ((authdetails->qual[authindex].a_auth_type_cd=cs14949_authtype_cd)
               AND evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd))
               SET isauthmodified = true
               SET isauthnewlyadded = true
              ENDIF
             ELSEIF (authhistsize=2)
              IF ((authdetails->qual[authindex].a_auth_type_cd=cs14949_authtype_cd)
               AND evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd))
               SET isauthmodified = true
               IF ((authdetails->qual[authindex].a_auth_type_cd != authdetails->qual[authindex].
               histqual[authhistsize].ah_auth_type_cd))
                SET isauthtypemodified = true
               ENDIF
               IF ((authdetails->qual[authindex].a_auth_status_cd != authdetails->qual[authindex].
               histqual[authhistsize].ah_auth_status_cd))
                SET isauthstatusmodified = true
               ENDIF
              ENDIF
             ENDIF
            ENDIF
           ELSE
            IF ((authdetails->qual[authindex].a_auth_type_cd=cs14949_authtype_cd)
             AND evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd)
             AND (bodetails->qual[boindex].billing_period_type_cd=cs4002129_authtype_cd))
             IF ((authdetails->qual[authindex].a_updt_dt_tm > lstregmodreleasedttm))
              SET isauthdeleted = true
              SET isauthmodified = true
             ENDIF
            ENDIF
           ENDIF
          ELSEIF (((tempauthservbegdttm < tempboservbegdttm
           AND tempauthservbegdttm < tempboservenddttm
           AND tempauthservenddttm >= tempboservbegdttm
           AND tempauthservenddttm <= tempboservenddttm) OR (((tempauthservbegdttm >=
          tempboservbegdttm
           AND tempauthservbegdttm <= tempboservenddttm
           AND tempauthservenddttm > tempboservbegdttm
           AND tempauthservenddttm > tempboservenddttm) OR (tempauthservbegdttm < tempboservbegdttm
           AND tempauthservbegdttm < tempboservenddttm
           AND tempauthservenddttm > tempboservbegdttm
           AND tempauthservenddttm > tempboservenddttm)) )) )
           SET isservdttmmodified = true
           IF (authdetails->qual[authindex].a_active_ind)
            IF (authhistsize=1)
             IF ((authdetails->qual[authindex].a_auth_type_cd=cs14949_authtype_cd)
              AND evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd))
              SET isauthnewlyadded = true
              SET isauthmodified = true
             ENDIF
            ELSEIF (authhistsize=2)
             IF ((authdetails->qual[authindex].a_auth_type_cd=cs14949_authtype_cd)
              AND evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd))
              SET isauthmodified = true
              IF ((authdetails->qual[authindex].a_auth_type_cd != authdetails->qual[authindex].
              histqual[2].ah_auth_type_cd))
               SET isauthtypemodified = true
              ENDIF
              IF ((authdetails->qual[authindex].a_auth_status_cd != authdetails->qual[authindex].
              histqual[2].ah_auth_status_cd))
               SET isauthstatusmodified = true
              ENDIF
             ENDIF
            ENDIF
           ENDIF
          ELSE
           IF (tempauthservbegdttm < tempboservbegdttm
            AND tempauthservbegdttm < tempboservenddttm
            AND tempauthservenddttm < tempboservbegdttm
            AND tempauthservenddttm < tempboservenddttm)
            IF (datetimediff(tempboservbegdttm,cnvtlookahead("1,S",tempauthservenddttm))=0)
             IF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_authtype_cd))
              SET isauthdtconsecutive = true
             ELSEIF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_weekly_type_cd))
              SET tempbobegofweek = getcgfacilitybeginningofweek(authdetails->qual[authindex].
               billing_entity_id,tempboservbegdttm)
              IF ( NOT (tempbobegofweek=tempboservbegdttm))
               SET isauthdtconsecutive = true
              ENDIF
             ELSEIF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_monthly_type_cd))
              SET tempbobegofmonth = getcgfacilitybeginningofmonth(authdetails->qual[authindex].
               billing_entity_id,tempboservbegdttm)
              IF ( NOT (tempbobegofmonth=tempboservbegdttm))
               SET isauthdtconsecutive = true
              ENDIF
             ELSEIF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_custom_type_cd)
              AND (bodetails->qual[boindex].interval_days > 0))
              IF ( NOT ((datetimediff(cnvtlookahead("1,S",tempboservenddttm),tempboservbegdttm)=
              bodetails->qual[boindex].interval_days)))
               SET isauthdtconsecutive = true
              ENDIF
             ELSEIF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_all_type_cd))
              SET isauthdtconsecutive = true
             ENDIF
            ENDIF
           ENDIF
           IF (tempauthservbegdttm > tempboservbegdttm
            AND tempauthservbegdttm > tempboservenddttm
            AND tempauthservenddttm > tempboservbegdttm
            AND tempauthservenddttm > tempboservenddttm)
            IF (datetimediff(cnvtlookahead("1,S",tempboservenddttm),tempauthservbegdttm)=0)
             IF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_authtype_cd))
              SET isauthdtconsecutive = true
             ELSEIF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_weekly_type_cd))
              SET tempboendofweek = getcgfacilityendofweek(authdetails->qual[authindex].
               billing_entity_id,tempboservenddttm)
              IF ( NOT (tempboendofweek=tempboservenddttm))
               SET isauthdtconsecutive = true
              ENDIF
             ELSEIF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_monthly_type_cd))
              SET tempboendofmonth = getcgfacilityendofmonth(authdetails->qual[authindex].
               billing_entity_id,tempboservenddttm)
              IF ( NOT (tempboendofmonth=tempboservenddttm))
               SET isauthdtconsecutive = true
              ENDIF
             ELSEIF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_custom_type_cd)
              AND (bodetails->qual[boindex].interval_days > 0))
              IF ( NOT ((datetimediff(cnvtlookahead("1,S",tempboservenddttm),tempboservbegdttm)=
              bodetails->qual[boindex].interval_days)))
               SET isauthdtconsecutive = true
              ENDIF
             ELSEIF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_all_type_cd))
              SET isauthdtconsecutive = true
             ENDIF
            ENDIF
           ENDIF
           IF (isauthdtconsecutive)
            IF (authdetails->qual[authindex].a_active_ind)
             IF ((authdetails->qual[authindex].a_auth_type_cd=cs14949_authtype_cd)
              AND evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd))
              IF ((bodetails->qual[boindex].billing_period_type_cd=cs4002129_authtype_cd))
               IF (authhistsize=1)
                SET isauthnewlyadded = true
                SET isauthmodified = true
               ELSE
                SET isservdttmmodified = true
                SET isauthmodified = true
               ENDIF
              ELSE
               SET isauthdtconsecutive = false
              ENDIF
             ELSE
              IF (authhistsize=2)
               IF ((authdetails->qual[authindex].histqual[authhistsize].ah_auth_type_cd=
               cs14949_authtype_cd)
                AND evaluateauthstatus(authdetails->qual[authindex].histqual[authhistsize].
                ah_auth_status_cd))
                SET isauthmodified = true
               ELSE
                SET isauthdtconsecutive = false
               ENDIF
              ELSE
               SET isauthdtconsecutive = false
              ENDIF
              IF (isauthmodified)
               IF ((authdetails->qual[authindex].a_auth_type_cd != cs14949_authtype_cd))
                SET isauthtypemodified = true
               ENDIF
               IF ( NOT (evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd)))
                SET isauthstatusmodified = true
               ENDIF
              ENDIF
             ENDIF
            ELSE
             IF ((authdetails->qual[authindex].a_auth_type_cd=cs14949_authtype_cd)
              AND evaluateauthstatus(authdetails->qual[authindex].a_auth_status_cd))
              SET isauthdeleted = true
              SET isauthmodified = true
             ELSE
              IF (authhistsize=2)
               IF ((authdetails->qual[authindex].histqual[authhistsize].ah_auth_type_cd=
               cs14949_authtype_cd)
                AND evaluateauthstatus(authdetails->qual[authindex].histqual[authhistsize].
                ah_auth_status_cd))
                SET isauthdeleted = true
                SET isauthmodified = true
               ELSE
                SET isauthdtconsecutive = false
               ENDIF
              ELSE
               SET isauthdtconsecutive = false
              ENDIF
             ENDIF
            ENDIF
           ENDIF
          ENDIF
         ENDIF
       ENDFOR
      ENDIF
      IF (isauthmodified)
       SET isencounterauthmod = true
      ENDIF
      IF (isauthmodified)
       SET authmodifiedcnt += 1
       SET stat = alterlist(authmodifieddetails->qual,authmodifiedcnt)
       SET authmodifieddetails->qual[authmodifiedcnt].pft_encntr_id = authdetails->qual[authindex].
       pft_encntr_id
       SET authmodifieddetails->qual[authmodifiedcnt].encntr_id = authdetails->qual[authindex].
       encntr_id
       SET authmodifieddetails->qual[authmodifiedcnt].auth_id = authdetails->qual[authindex].auth_id
       SET authmodifieddetails->qual[authmodifiedcnt].auth_nbr = authdetails->qual[authindex].
       auth_nbr
       SET authmodifieddetails->qual[authmodifiedcnt].new_service_beg_dt_tm = authdetails->qual[
       authindex].a_service_beg_dt_tm
       SET authmodifieddetails->qual[authmodifiedcnt].new_service_end_dt_tm = authdetails->qual[
       authindex].a_service_end_dt_tm
       SET authmodifieddetails->qual[authmodifiedcnt].new_auth_type_cd = authdetails->qual[authindex]
       .a_auth_type_cd
       SET authmodifieddetails->qual[authmodifiedcnt].new_auth_status_cd = authdetails->qual[
       authindex].a_auth_status_cd
       SET authmodifieddetails->qual[authmodifiedcnt].old_service_beg_dt_tm = authdetails->qual[
       authindex].histqual[authhistsize].ah_service_beg_dt_tm
       SET authmodifieddetails->qual[authmodifiedcnt].old_service_end_dt_tm = authdetails->qual[
       authindex].histqual[authhistsize].ah_service_end_dt_tm
       SET authmodifieddetails->qual[authmodifiedcnt].old_auth_type_cd = authdetails->qual[authindex]
       .histqual[authhistsize].ah_auth_type_cd
       SET authmodifieddetails->qual[authmodifiedcnt].old_auth_status_cd = authdetails->qual[
       authindex].histqual[authhistsize].ah_auth_status_cd
       IF (((isservdttmmodified) OR (isservdttminrangemod)) )
        IF ((authdetails->qual[authindex].a_service_beg_dt_tm != authdetails->qual[authindex].
        histqual[authhistsize].ah_service_beg_dt_tm))
         SET authmodifieddetails->qual[authmodifiedcnt].is_auth_beg_dt_modified = true
        ELSE
         SET authmodifieddetails->qual[authmodifiedcnt].is_auth_beg_dt_modified = false
        ENDIF
        IF ((authdetails->qual[authindex].a_service_end_dt_tm != authdetails->qual[authindex].
        histqual[authhistsize].ah_service_end_dt_tm))
         SET authmodifieddetails->qual[authmodifiedcnt].is_auth_end_dt_modified = true
        ELSE
         SET authmodifieddetails->qual[authmodifiedcnt].is_auth_end_dt_modified = false
        ENDIF
       ENDIF
       IF (isauthtypemodified)
        SET authmodifieddetails->qual[authmodifiedcnt].is_auth_type_cd_modified = true
       ELSE
        SET authmodifieddetails->qual[authmodifiedcnt].is_auth_type_cd_modified = false
       ENDIF
       IF (isauthstatusmodified)
        SET authmodifieddetails->qual[authmodifiedcnt].is_auth_status_cd_modified = true
       ELSE
        SET authmodifieddetails->qual[authmodifiedcnt].is_auth_status_cd_modified = false
       ENDIF
       IF (isauthnewlyadded)
        SET authmodifieddetails->qual[authmodifiedcnt].is_auth_newly_added = true
       ELSE
        SET authmodifieddetails->qual[authmodifiedcnt].is_auth_newly_added = false
       ENDIF
       IF (isauthdeleted)
        SET authmodifieddetails->qual[authmodifiedcnt].is_auth_deleted = true
       ELSE
        SET authmodifieddetails->qual[authmodifiedcnt].is_auth_deleted = false
       ENDIF
      ENDIF
    ENDFOR
    CALL echorecord(authdetails)
    IF (validate(debug)=true)
     CALL echorecord(authmodifieddetails)
    ENDIF
    RETURN(isencounterauthmod)
  END ;Subroutine
 ENDIF
 IF (validate(getbypassedfinancials,char(128))=char(128))
  SUBROUTINE (getbypassedfinancials(pencntrid=f8,prencntrvalues=vc(ref),prbypasslist=vc(ref)) =i2)
    DECLARE bypasscnt = i4 WITH protect, noconstant(0)
    DECLARE recurind = i2 WITH protect, noconstant(false)
    DECLARE oencntrtypecd = f8 WITH protect, noconstant(0.0)
    DECLARE oencntrtypeclasscd = f8 WITH protect, noconstant(0.0)
    IF ( NOT (validate(cs24269_history_cd)))
     DECLARE cs24269_history_cd = f8 WITH protect, constant(getcodevalue(24269,"HISTORY",1))
    ENDIF
    IF ( NOT (validate(cs69_recurring_cd)))
     DECLARE cs69_recurring_cd = f8 WITH protect, constant(getcodevalue(69,"RECURRING",1))
    ENDIF
    IF (cs24269_history_cd > 0.0
     AND cs69_recurring_cd > 0.0)
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       billing_entity be,
       pft_trans_reltn p
      PLAN (pe
       WHERE pe.encntr_id=pencntrid
        AND pe.active_ind=true)
       JOIN (be
       WHERE be.billing_entity_id=pe.billing_entity_id
        AND be.active_ind=true)
       JOIN (p
       WHERE p.parent_entity_id=pe.pft_encntr_id
        AND p.parent_entity_name="PFTENCNTR"
        AND p.active_ind=true)
      ORDER BY pe.pft_encntr_id
      HEAD pe.pft_encntr_id
       IF (((pe.pft_encntr_status_cd=cs24269_history_cd
        AND be.bypass_rm_historical_ind=true) OR (pe.bad_debt_balance > 0.00
        AND be.bypass_rm_bad_debt_ind=true)) )
        bypasscnt += 1, stat = alterlist(prbypasslist->pelist,bypasscnt), prbypasslist->pelist[
        bypasscnt].pftencntrid = pe.pft_encntr_id
       ENDIF
      WITH nocounter
     ;end select
     IF (size(prbypasslist->pelist,5) > 0)
      FOR (bypasscnt = 1 TO size(prbypasslist->pelist,5))
        SET oencntrtypecd = 0.0
        SET oencntrtypeclasscd = 0.0
        IF ( NOT (getoldencountertypeforfinancialencounter(prbypasslist->pelist[bypasscnt].
         pftencntrid,oencntrtypecd,oencntrtypeclasscd,prencntrvalues)))
         RETURN(false)
        ENDIF
        IF (isrecurringencountertypechange(oencntrtypecd,prencntrvalues->newenctype,prbypasslist->
         pelist[bypasscnt].pftencntrid))
         SET recurind = true
        ENDIF
      ENDFOR
     ENDIF
    ENDIF
    IF (recurind=true)
     SET stat = initrec(prbypasslist)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveregistrationdatestocompare,char(128))=char(128))
  SUBROUTINE (retrieveregistrationdatestocompare(pftencntrid=f8,prnewregdt=f8(ref),proldregdt=f8(ref),
   prregmodrequest=vc(ref)) =i2)
    CALL logmessage("Entering retrieveRegistrationDatesToCompare",
     "Current Registration Date not found",log_debug)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    SET proldregdt = 0.0
    SET prnewregdt = 0.0
    IF (validate(prregmodrequest->isdenormalized,false)
     AND validate(prregmodrequest->newregdttm,0.0) > 0.0
     AND validate(prregmodrequest->oldregdttm,0.0) > 0.0)
     SET proldregdt = prregmodrequest->oldregdttm
     SET prnewregdt = prregmodrequest->newregdttm
     RETURN(true)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      encounter e
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid)
      JOIN (e
      WHERE e.encntr_id=pe.encntr_id
       AND e.active_ind=true)
     DETAIL
      prnewregdt = cnvtdatetime(e.reg_dt_tm), encntrid = e.encntr_id
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("retrieveRegistrationDatesToCompare","Encounter Registration Date not found",
      log_debug)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_reg_mod prm
     PLAN (prm
      WHERE prm.encntr_id=encntrid
       AND prm.active_ind=true
       AND prm.transaction_type != "CMB"
       AND prm.reg_dt_tm != null)
     ORDER BY prm.create_dt_tm DESC
     DETAIL
      proldregdt = cnvtdatetime(prm.reg_dt_tm)
     WITH nocounter, maxrec = 1
    ;end select
    IF (curqual > 0)
     CALL logmessage("Exiting retrieveRegistrationDatesToCompare","Last Registration Date found",
      log_debug)
     RETURN(true)
    ENDIF
    CALL logmessage("Exiting retrieveRegistrationDatesToCompare","Last Registration Date not found",
     log_debug)
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(evaluateauthstatus,char(128))=char(128))
  SUBROUTINE (evaluateauthstatus(authstatuscd=f8) =i2)
    DECLARE codefoundind = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM code_value cv
     PLAN (cv
      WHERE cv.code_set=14155
       AND cv.active_ind=true
       AND cv.cdf_meaning="APPROVED"
       AND cv.code_value=authstatuscd)
     DETAIL
      codefoundind = true
     WITH nocounter
    ;end select
    RETURN(codefoundind)
  END ;Subroutine
 ENDIF
 IF (validate(writerowtowtp,char(128))=char(128))
  SUBROUTINE (writerowtowtp(pwtptaskrequest=vc,ptaskident=vc,pentityid=f8,pentityname=vc,pprocessdttm
   =dq8,ptaskdatatxt=vc) =i2)
    RECORD wtpsaverequest(
      1 requestjson = vc
      1 processdttm = dq8
      1 taskident = vc
      1 entityid = f8
      1 entityname = vc
      1 taskdatatxt = vc
    ) WITH protect
    RECORD wtpsavereply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF (((size(trim(pwtptaskrequest,3)) <= 0) OR (size(trim(ptaskident,3)) <= 0)) )
     CALL addtracemessage("writeRowToWTP",
      "Missing task name and/or request JSON to add task to WTP queue.")
     RETURN(false)
    ENDIF
    SET wtpsaverequest->requestjson = pwtptaskrequest
    SET wtpsaverequest->processdttm = evaluate(pprocessdttm,0.0,cnvtdatetime(sysdate),pprocessdttm)
    SET wtpsaverequest->taskident = ptaskident
    IF (pentityid > 0.0
     AND size(trim(pentityname,3)) > 0)
     SET wtpsaverequest->entityname = pentityname
     SET wtpsaverequest->entityid = pentityid
    ENDIF
    IF (size(trim(ptaskdatatxt,3)) > 0)
     SET wtpsaverequest->taskdatatxt = trim(ptaskdatatxt,3)
    ENDIF
    IF (validate(debug,0) > 0)
     CALL echorecord(wtpsaverequest)
    ENDIF
    IF (checkprg("WTP_WORKFLOW_TASK_SAVE") <= 0)
     CALL addtracemessage("writeRowToWTP",
      "WTP_WORKFLOW_TASK_SAVE script doesn't exist in CCL dictionary.")
     RETURN(false)
    ENDIF
    EXECUTE wtp_workflow_task_save  WITH replace("REQUEST",wtpsaverequest), replace("REPLY",
     wtpsavereply)
    IF ((wtpsavereply->status_data.status != "S"))
     CALL addtracemessage("writeRowToWTP","WTP_WORKFLOW_TASK_SAVE returned failure.")
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(consolidatefinencntrs,char(128))=char(128))
  SUBROUTINE (consolidatefinencntrs(encntrid=f8) =i2)
    CALL logmessage("consolidateFinEncntrs","Entering",log_debug)
    DECLARE servicefromdate = dq8 WITH protect, noconstant(0)
    DECLARE servicetodate = dq8 WITH protect, noconstant(0)
    DECLARE pftidx1 = i4 WITH protect, noconstant(0)
    DECLARE pftidx2 = i4 WITH protect, noconstant(0)
    DECLARE bhridx1 = i4 WITH protect, noconstant(0)
    DECLARE bhridx2 = i4 WITH protect, noconstant(0)
    DECLARE srcpftidx = i4 WITH protect, noconstant(0)
    DECLARE tgtpftidx = i4 WITH protect, noconstant(0)
    DECLARE markforcombineflag = i2 WITH protect, noconstant(true)
    IF ( NOT (validate(finencntreval)))
     RECORD finencntreval(
       1 encntrid = f8
       1 pftencntrs[*]
         2 pftencntrid = f8
         2 acctid = f8
         2 combineind = i2
         2 encntr_plan_cob_id = f8
         2 cobbegindate = dq8
         2 cobenddate = dq8
         2 begindate = dq8
         2 enddate = dq8
         2 activebalcnt = i4
         2 trasmitbillcnt = i4
         2 bohpreltns[*]
           3 priorityseq = i4
           3 healthplanid = f8
           3 finclasscd = f8
     ) WITH protect
    ENDIF
    RECORD wtptaskrequest(
      1 objarray[2]
        2 src_pft_encntr_id = f8
        2 tgt_pft_encntr_id = f8
    ) WITH protect
    SET finencntreval->encntrid = encntrid
    IF (encntrid > 0.0)
     SELECT INTO "nl:"
      FROM encounter e,
       pft_encntr pe,
       benefit_order bo,
       bo_hp_reltn bhr,
       bill_reltn brl,
       bill_rec br,
       encntr_plan_cob epc
      PLAN (e
       WHERE e.encntr_id=encntrid
        AND e.active_ind=true)
       JOIN (pe
       WHERE pe.encntr_id=e.encntr_id
        AND  NOT (pe.pft_encntr_status_cd IN (cs24269_history_cd))
        AND pe.active_ind=true
        AND pe.pft_encntr_id > 0.0)
       JOIN (bo
       WHERE bo.pft_encntr_id=pe.pft_encntr_id
        AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
        AND bo.active_ind=true)
       JOIN (bhr
       WHERE bhr.benefit_order_id=bo.benefit_order_id
        AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
        AND bhr.active_ind=true)
       JOIN (epc
       WHERE (epc.encntr_plan_cob_id= Outerjoin(pe.encntr_plan_cob_id))
        AND (epc.active_ind= Outerjoin(true)) )
       JOIN (brl
       WHERE (brl.parent_entity_id= Outerjoin(bhr.bo_hp_reltn_id))
        AND (brl.parent_entity_name= Outerjoin("BO_HP_RELTN"))
        AND (brl.active_ind= Outerjoin(true)) )
       JOIN (br
       WHERE (br.corsp_activity_id= Outerjoin(brl.corsp_activity_id))
        AND (br.active_ind= Outerjoin(true))
        AND (br.bill_class_cd= Outerjoin(cs21849_claim_cd))
        AND (((br.bill_status_cd= Outerjoin(cs18935_submitted_cd)) ) OR ((br.bill_status_cd=
        Outerjoin(cs18935_transmitted_cd)) )) )
      ORDER BY pe.pft_encntr_id, bhr.bo_hp_reltn_id, br.corsp_activity_id
      HEAD REPORT
       enccnt = 0
      HEAD pe.pft_encntr_id
       bhrcnt = 0, enccnt += 1, stat = alterlist(finencntreval->pftencntrs,enccnt),
       finencntreval->pftencntrs[enccnt].pftencntrid = pe.pft_encntr_id, finencntreval->pftencntrs[
       enccnt].acctid = pe.acct_id, finencntreval->pftencntrs[enccnt].combineind = false,
       finencntreval->pftencntrs[enccnt].encntr_plan_cob_id = pe.encntr_plan_cob_id, finencntreval->
       pftencntrs[enccnt].cobbegindate = epc.beg_effective_dt_tm, finencntreval->pftencntrs[enccnt].
       cobenddate = epc.end_effective_dt_tm
       IF (e.encntr_type_class_cd=cs69_recurring_cd)
        status = calculateservicedatesforencounter(e.reg_dt_tm,e.disch_dt_tm,pe.recur_current_month,
         pe.recur_current_year,servicefromdate,
         servicetodate), finencntreval->pftencntrs[enccnt].begindate = servicefromdate, finencntreval
        ->pftencntrs[enccnt].enddate = servicetodate
       ELSE
        finencntreval->pftencntrs[enccnt].begindate = pe.beg_effective_dt_tm, finencntreval->
        pftencntrs[enccnt].enddate = pe.end_effective_dt_tm
       ENDIF
      HEAD bhr.bo_hp_reltn_id
       bhrcnt += 1, stat = alterlist(finencntreval->pftencntrs[enccnt].bohpreltns,bhrcnt),
       finencntreval->pftencntrs[enccnt].bohpreltns[bhrcnt].priorityseq = bhr.priority_seq,
       finencntreval->pftencntrs[enccnt].bohpreltns[bhrcnt].healthplanid = bhr.health_plan_id,
       finencntreval->pftencntrs[enccnt].bohpreltns[bhrcnt].finclasscd = bhr.fin_class_cd,
       finencntreval->pftencntrs[enccnt].activebalcnt = bhrcnt
      HEAD br.corsp_activity_id
       IF (br.corsp_activity_id > 0.0)
        finencntreval->pftencntrs[enccnt].trasmitbillcnt += 1
       ENDIF
      WITH nocounter
     ;end select
     IF (validate(debug)=true)
      CALL echorecord(finencntreval)
     ENDIF
     IF (curqual=0)
      CALL logmessage("finEncntrEval","No financial encounters to consolidate",log_debug)
      RETURN(true)
     ENDIF
    ELSE
     CALL addtracemessage("finEncntrEval",
      "Invalid encntrId passed into registration modifications request")
     RETURN(false)
    ENDIF
    FOR (pftidx1 = 1 TO size(finencntreval->pftencntrs,5))
     SET pftidx2 = (pftidx1+ 1)
     WHILE (pftidx2 <= size(finencntreval->pftencntrs,5)
      AND (finencntreval->pftencntrs[pftidx1].combineind=false))
       SET markforcombineflag = true
       IF ((finencntreval->pftencntrs[pftidx2].combineind=false)
        AND (finencntreval->pftencntrs[pftidx2].acctid=finencntreval->pftencntrs[pftidx1].acctid))
        IF (((cnvtdate(finencntreval->pftencntrs[pftidx1].begindate) != cnvtdate(finencntreval->
         pftencntrs[pftidx2].begindate)) OR (cnvtdate(finencntreval->pftencntrs[pftidx1].enddate) !=
        cnvtdate(finencntreval->pftencntrs[pftidx2].enddate))) )
         SET markforcombineflag = false
        ENDIF
        IF (markforcombineflag=true
         AND (finencntreval->pftencntrs[pftidx1].encntr_plan_cob_id > 0)
         AND (finencntreval->pftencntrs[pftidx2].encntr_plan_cob_id > 0)
         AND ((abs(datetimediff(finencntreval->pftencntrs[pftidx1].cobbegindate,finencntreval->
          pftencntrs[pftidx2].cobbegindate,1,0)) >= 1) OR (abs(datetimediff(finencntreval->
          pftencntrs[pftidx1].cobenddate,finencntreval->pftencntrs[pftidx2].cobenddate,1,0)) >= 1)) )
         SET markforcombineflag = false
        ENDIF
        SET bhridx1 = 1
        WHILE ((bhridx1 <= finencntreval->pftencntrs[pftidx1].activebalcnt)
         AND markforcombineflag=true)
         IF ( NOT (locateval(bhridx2,1,finencntreval->pftencntrs[pftidx2].activebalcnt,finencntreval
          ->pftencntrs[pftidx1].bohpreltns[bhridx1].priorityseq,finencntreval->pftencntrs[pftidx2].
          bohpreltns[bhridx2].priorityseq,
          finencntreval->pftencntrs[pftidx1].bohpreltns[bhridx1].healthplanid,finencntreval->
          pftencntrs[pftidx2].bohpreltns[bhridx2].healthplanid,finencntreval->pftencntrs[pftidx1].
          bohpreltns[bhridx1].finclasscd,finencntreval->pftencntrs[pftidx2].bohpreltns[bhridx2].
          finclasscd)))
          SET markforcombineflag = false
         ENDIF
         SET bhridx1 += 1
        ENDWHILE
       ELSE
        SET markforcombineflag = false
       ENDIF
       IF (markforcombineflag)
        IF ((finencntreval->pftencntrs[pftidx1].trasmitbillcnt >= finencntreval->pftencntrs[pftidx2].
        trasmitbillcnt))
         SET srcpftidx = pftidx2
         SET tgtpftidx = pftidx1
        ELSE
         SET srcpftidx = pftidx1
         SET tgtpftidx = pftidx2
        ENDIF
        SET wtptaskrequest->objarray[1].src_pft_encntr_id = finencntreval->pftencntrs[srcpftidx].
        pftencntrid
        SET wtptaskrequest->objarray[1].tgt_pft_encntr_id = finencntreval->pftencntrs[tgtpftidx].
        pftencntrid
        SET wtptaskrequest->objarray[2].src_pft_encntr_id = finencntreval->pftencntrs[tgtpftidx].
        pftencntrid
        SET wtptaskrequest->objarray[2].tgt_pft_encntr_id = finencntreval->pftencntrs[tgtpftidx].
        pftencntrid
        IF (validate(debug)=true)
         CALL echorecord(wtptaskrequest)
        ENDIF
        IF ( NOT (writerowtowtp(cnvtrectojson(wtptaskrequest),"PFT_COMBINE_FINANCIAL_ENCNTR",
         finencntreval->pftencntrs[tgtpftidx].pftencntrid,"PFTENCNTR",cnvtdatetime(sysdate),
         "")))
         CALL addtracemessage("consolidateFinEncntrs",
          "Error while attempting to queue financial encounter combine to WTP server")
         RETURN(false)
        ENDIF
        SET finencntreval->pftencntrs[srcpftidx].combineind = true
       ENDIF
       SET pftidx2 += 1
     ENDWHILE
    ENDFOR
    CALL logmessage("consolidateFinEncntrs","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
  IF (validate(adddiscretetimerevent,char(128))=char(128))
   SUBROUTINE (adddiscretetimerevent(ptimername=vc,psubtimername=vc,pstartdttm=dm12,pmetadata1=vc,
    pmetadata2=vc,pmetadata3=vc,prdtevents=vc(ref)) =i2)
     DECLARE elapsedtime = f8 WITH protect, noconstant(timestampdiff(systimestamp,pstartdttm))
     DECLARE eventcnt = i4 WITH protect, noconstant((size(prdtevents->timerevents,5)+ 1))
     SET stat = alterlist(prdtevents->timerevents,eventcnt)
     SET prdtevents->timerevents[eventcnt].elapsedtime = elapsedtime
     SET prdtevents->timerevents[eventcnt].timername = ptimername
     SET prdtevents->timerevents[eventcnt].subtimername = psubtimername
     SET prdtevents->timerevents[eventcnt].metadata1 = pmetadata1
     SET prdtevents->timerevents[eventcnt].metadata2 = pmetadata2
     SET prdtevents->timerevents[eventcnt].metadata3 = pmetadata3
     IF (eventcnt >= 100)
      IF (logdiscretetimers(prdtevents))
       SET stat = alterlist(prdtevents->timerevents,0)
      ENDIF
     ENDIF
     RETURN(true)
   END ;Subroutine
  ENDIF
  IF (validate(logdiscretetimers,char(128))=char(128))
   SUBROUTINE (logdiscretetimers(prdtevents=vc(ref)) =i2)
     IF (validate(debug,false)=true)
      CALL echorecord(prdtevents)
     ENDIF
     DECLARE app_name_revenuecycle = vc WITH protect, constant("REVENUECYCLE")
     DECLARE currusernamestr = vc WITH protect, noconstant(" ")
     DECLARE eventcnt = i4 WITH protect, constant(size(prdtevents->timerevents,5))
     DECLARE eventidx = i4 WITH protect, noconstant(0)
     IF (eventcnt=0)
      CALL logmessage("logDiscreteTimers","No events to log",log_audit)
      RETURN(true)
     ENDIF
     SELECT INTO "nl:"
      FROM prsnl p
      WHERE (p.person_id=reqinfo->updt_id)
       AND p.active_ind=1
       AND p.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime)
       AND p.end_effective_dt_tm >= cnvtdatetime(curdate,curtime)
      DETAIL
       currusernamestr = p.username
      WITH nocounter
     ;end select
     DECLARE timer_transaction = i4 WITH protect, constant(6800)
     DECLARE timer_message = i4 WITH protect, noconstant(0)
     DECLARE timer_request = i4 WITH protect, noconstant(0)
     DECLARE timer_reply = i4 WITH protect, noconstant(0)
     DECLARE timer_list = i4 WITH protect, noconstant(0)
     DECLARE detail_list = i4 WITH protect, noconstant(0)
     DECLARE timer_status = vc WITH protect, noconstant("")
     DECLARE subtimer_str = vc WITH protect, noconstant("")
     DECLARE metadata1_str = vc WITH protect, noconstant("")
     DECLARE metadata2_str = vc WITH protect, noconstant("")
     DECLARE metadata3_str = vc WITH protect, noconstant("")
     IF (size(trim(currusernamestr,3),1)=0)
      DECLARE username_str = vc WITH protect, constant(nullterm('""'))
     ELSE
      DECLARE username_str = vc WITH protect, constant(nullterm(trim(currusernamestr,3)))
     ENDIF
     SET timer_message = uar_srvselectmessage(timer_transaction)
     SET timer_request = uar_srvcreaterequest(timer_message)
     SET timer_reply = uar_srvcreatereply(timer_message)
     SET stat = uar_srvsetstringfixed(timer_request,"node",nullterm(curnode),size(curnode,1))
     FOR (eventidx = 1 TO eventcnt)
       SET subtimer_str = nullterm(concat('"',trim(prdtevents->timerevents[eventidx].subtimername,3),
         '"'))
       SET metadata1_str = nullterm(concat('"',trim(substring(1,48,prdtevents->timerevents[eventidx].
           metadata1),3),'"'))
       SET metadata2_str = nullterm(concat('"',trim(substring(1,48,prdtevents->timerevents[eventidx].
           metadata2),3),'"'))
       SET metadata3_str = nullterm(concat('"',trim(substring(1,48,prdtevents->timerevents[eventidx].
           metadata3),3),'"'))
       SET timer_list = uar_srvadditem(timer_request,"timerList")
       SET stat = uar_srvsetstringfixed(timer_list,"timerName",nullterm(prdtevents->timerevents[
         eventidx].timername),size(prdtevents->timerevents[eventidx].timername,1))
       SET stat = uar_srvsetdate(timer_list,"timerDate",cnvtdatetime(curdate,curtime))
       SET stat = uar_srvsetdouble(timer_list,"elapsedTime",prdtevents->timerevents[eventidx].
        elapsedtime)
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("applicationName"),15)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",nullterm(app_name_revenuecycle),size(
         app_name_revenuecycle,1))
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("x1"),2)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",nullterm(cnvtstring(0)),1)
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("x2"),2)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",nullterm(cnvtstring(0)),1)
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("userName"),8)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",username_str,size(username_str,1))
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("nodeName"),8)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",nullterm(curnode),size(curnode,1))
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("ipAdress"),8)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",nullterm(cnvtstring(0)),1)
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("x3"),2)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",nullterm(cnvtstring(0)),1)
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("subtimerName"),8)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",subtimer_str,size(subtimer_str,1))
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("x4"),2)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",nullterm(cnvtstring(0)),1)
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("metaData1"),8)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",metadata1_str,size(metadata1_str,1))
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("metaData2"),8)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",metadata2_str,size(metadata2_str,1))
       SET detail_list = uar_srvadditem(timer_list,"additionalValues")
       SET stat = uar_srvsetstringfixed(detail_list,"itemName",nullterm("metaData3"),8)
       SET stat = uar_srvsetstringfixed(detail_list,"itemValue",metadata3_str,size(metadata3_str,1))
     ENDFOR
     SET stat = uar_srvexecute(timer_message,timer_request,timer_reply)
     IF (stat != 0)
      CALL logmessage("logDiscreteTimers","Failed to call service 6800 - UAR_SRVEXECUTE",log_error)
      RETURN(false)
     ENDIF
     RETURN(true)
   END ;Subroutine
  ENDIF
 ENDIF
 CALL echo("Begin PFT_GET_CHRG_COVERAGE_SUBS.INC, version [RCBACM-17722.002]")
 RECORD chargecoveragerec(
   1 charges[*]
     2 pftchargeid = f8
     2 coveragebitmap = i4
 ) WITH protect
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(cs354_selfpay_cd)))
  DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
 ENDIF
 IF ( NOT (validate(cs13019_noncovered_cd)))
  DECLARE cs13019_noncovered_cd = f8 WITH protect, constant(getcodevalue(13019,"NONCOVERED",1))
 ENDIF
 IF ( NOT (validate(cs24451_invalid_cd)))
  DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
 ENDIF
 IF (validate(getchargecoverages))
  SUBROUTINE (getchargecoverages(dummyvar=i2) =i2)
    CALL logmessage("getChargeCoverages","Entering...",log_debug)
    DECLARE allcoveredbitmap = i4 WITH protect, noconstant(0)
    DECLARE lidx = i4 WITH protect, noconstant(0)
    DECLARE eidx = i4 WITH protect, noconstant(0)
    DECLARE cidx = i4 WITH protect, noconstant(0)
    DECLARE hpidx = i4 WITH protect, noconstant(0)
    DECLARE oaidx = i4 WITH protect, noconstant(0)
    DECLARE chunkidx = i4 WITH protect, noconstant(0)
    DECLARE pbmcnt = i4 WITH protect, noconstant(0)
    DECLARE pbm_chunck_size = i2 WITH protect, constant(1000)
    DECLARE chunkcnt = i4 WITH protect, noconstant(0)
    DECLARE origsize = i4 WITH protect, noconstant(size(chargecoveragerec->charges,5))
    IF (origsize=0)
     CALL logmessage("getChargeCoverages","No charges to process",log_warning)
     RETURN(false)
    ENDIF
    IF (origsize > 1)
     DECLARE batchsize = i4 WITH protect, noconstant(25)
    ELSE
     DECLARE batchsize = i4 WITH protect, noconstant(1)
    ENDIF
    DECLARE startidx = i4 WITH protect, noconstant(1)
    DECLARE loopcnt = i4 WITH protect, noconstant(ceil((cnvtreal(origsize)/ batchsize)))
    DECLARE newsize = i4 WITH protect, noconstant((loopcnt * batchsize))
    IF (batchsize > 1)
     SET stat = alterlist(chargecoveragerec->charges,newsize)
     FOR (cidx = (origsize+ 1) TO newsize)
       SET chargecoveragerec->charges[cidx].pftchargeid = chargecoveragerec->charges[origsize].
       pftchargeid
     ENDFOR
    ENDIF
    CALL logmessage("getChargeCoverages","Evaluate non-covered price schedule rules",log_debug)
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = loopcnt),
      pft_charge pc,
      pft_charge_bo_reltn pcbr,
      benefit_order bo,
      bo_hp_reltn bhr
     PLAN (d1
      WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ batchsize))))
      JOIN (pc
      WHERE expand(eidx,startidx,(startidx+ (batchsize - 1)),pc.pft_charge_id,chargecoveragerec->
       charges[eidx].pftchargeid)
       AND pc.active_ind=true)
      JOIN (pcbr
      WHERE pcbr.pft_charge_id=pc.pft_charge_id
       AND pcbr.active_ind=true)
      JOIN (bo
      WHERE bo.benefit_order_id=pcbr.benefit_order_id
       AND bo.bo_status_cd != cs24451_invalid_cd
       AND bo.fin_class_cd != cs354_selfpay_cd
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true)
     ORDER BY pc.pft_charge_id
     HEAD pc.pft_charge_id
      cidx = locateval(lidx,1,origsize,pc.pft_charge_id,chargecoveragerec->charges[lidx].pftchargeid)
     DETAIL
      chargecoveragerec->charges[cidx].coveragebitmap = bor(chargecoveragerec->charges[cidx].
       coveragebitmap,(2** (bhr.priority_seq - 1)))
     WITH nocounter
    ;end select
    SET startidx = 1
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = value(loopcnt)),
      pft_charge pc,
      pft_charge_bo_reltn pcbr,
      benefit_order bo,
      bo_hp_reltn bhr,
      charge c,
      pft_encntr pe,
      encounter e,
      billing_entity be,
      delivery_system ds,
      pft_hp_cov_sch_reltn phcsr,
      bill_item_modifier bim
     PLAN (d1
      WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ batchsize))))
      JOIN (pc
      WHERE expand(eidx,startidx,(startidx+ (batchsize - 1)),pc.pft_charge_id,chargecoveragerec->
       charges[eidx].pftchargeid)
       AND pc.active_ind=true)
      JOIN (pcbr
      WHERE pcbr.pft_charge_id=pc.pft_charge_id
       AND pcbr.active_ind=true)
      JOIN (bo
      WHERE bo.benefit_order_id=pcbr.benefit_order_id
       AND bo.bo_status_cd != cs24451_invalid_cd
       AND bo.fin_class_cd != cs354_selfpay_cd
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true)
      JOIN (c
      WHERE c.charge_item_id=pc.charge_item_id
       AND c.active_ind=true)
      JOIN (pe
      WHERE pe.pft_encntr_id=pc.pft_encntr_id
       AND pe.active_ind=true)
      JOIN (e
      WHERE e.encntr_id=pe.encntr_id
       AND e.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=pe.billing_entity_id
       AND be.active_ind=true)
      JOIN (ds
      WHERE ds.billing_entity_id=be.parent_be_id)
      JOIN (phcsr
      WHERE ((phcsr.health_plan_id=bhr.health_plan_id) OR (phcsr.health_plan_id=0))
       AND ((phcsr.encntr_type_cd=e.encntr_type_cd) OR (phcsr.encntr_type_cd=0))
       AND ((phcsr.billing_entity_id=pe.billing_entity_id) OR (phcsr.billing_entity_id=ds
      .billing_entity_id
       AND ds.billing_entity_id > 0))
       AND phcsr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND phcsr.end_effective_dt_tm > cnvtdatetime(sysdate)
       AND phcsr.active_ind=true)
      JOIN (bim
      WHERE bim.bill_item_id=c.bill_item_id
       AND bim.bill_item_type_cd=cs13019_noncovered_cd
       AND bim.key1_id=phcsr.schedule_cd
       AND bim.active_ind=true)
     ORDER BY pc.pft_charge_id
     HEAD pc.pft_charge_id
      cidx = locateval(lidx,1,origsize,pc.pft_charge_id,chargecoveragerec->charges[lidx].pftchargeid)
     DETAIL
      IF (bim.bim_ind != 0)
       IF (btest(chargecoveragerec->charges[cidx].coveragebitmap,(bhr.priority_seq - 1))=1)
        chargecoveragerec->charges[cidx].coveragebitmap = bxor(chargecoveragerec->charges[cidx].
         coveragebitmap,(2** (bhr.priority_seq - 1)))
       ENDIF
      ENDIF
     WITH nocounter
    ;end select
    SET stat = alterlist(chargecoveragerec->charges,origsize)
    CALL logmessage("getChargeCoverages","Evaluate Charge Coverage PBM Rules",log_debug)
    FREE RECORD pbmrequest
    RECORD pbmrequest(
      1 eventkey = vc
      1 categorykey = vc
      1 htask = i4
      1 objarray[*]
        2 corspactivityid = f8
        2 activityid = f8
        2 pftchargeid = f8
        2 pftencntrid = f8
        2 encounterid = f8
        2 insurancebalanceid = f8
        2 scheventid = f8
        2 referralid = f8
        2 eventid = f8
        2 eventparams[*]
          3 paramkey = vc
          3 doublevalue = f8
          3 stringvalue = vc
          3 datevalue = dq8
          3 parententityname = vc
          3 parententityid = f8
          3 paramgroup = i4
        2 eventparamgroupcount = i4
        2 personid = f8
        2 billingentityid = f8
        2 accountid = f8
        2 schentryid = f8
    ) WITH protect
    FREE RECORD pbmreply
    RECORD pbmreply(
      1 rulesets[*]
        2 rulesetkey = vc
        2 eventkey = vc
        2 categorykey = vc
        2 objarray[*]
          3 corspactivityid = f8
          3 activityid = f8
          3 pftchargeid = f8
          3 pftencntrid = f8
          3 encounterid = f8
          3 insurancebalanceid = f8
          3 scheventid = f8
          3 referralid = f8
          3 actions[*]
            4 actionkey = vc
            4 params[*]
              5 paramkey = vc
              5 paramtype = vc
              5 paramvalue = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF (origsize < pbm_chunck_size)
     SET stat = initrec(pbmrequest)
     SET stat = initrec(pbmreply)
     SET pbmrequest->categorykey = "CHRGPOST"
     SET pbmrequest->eventkey = "CHRG_COV_EVAL"
     SET stat = alterlist(pbmrequest->objarray,origsize)
     FOR (cidx = 1 TO origsize)
       SET pbmrequest->objarray[cidx].pftchargeid = chargecoveragerec->charges[cidx].pftchargeid
     ENDFOR
     IF (validate(debug))
      CALL echorecord(pbmrequest)
     ENDIF
     EXECUTE pft_eval_pbm_rules  WITH replace("REQUEST",pbmrequest), replace("REPLY",pbmreply)
     IF (validate(debug))
      CALL echorecord(pbmreply)
     ENDIF
     IF ((pbmreply->status_data.status="F"))
      CALL logmessage("getChargeCoverages","PFT_EVAL_PBM_RULES failed",log_error)
      RETURN(false)
     ELSEIF ((pbmreply->status_data.status="Z"))
      CALL logmessage("getChargeCoverages","No Charge Coverage Rules to Evaluate",log_debug)
      RETURN(true)
     ENDIF
     IF (size(pbmreply->rulesets,5) != 1)
      CALL logmessage("getChargeCoverages",
       "Assertion failure, invalid number of rulesets items returned",log_error)
      RETURN(false)
     ENDIF
     FOR (oaidx = 1 TO size(pbmreply->rulesets[1].objarray,5))
       IF (size(pbmreply->rulesets[1].objarray[oaidx].actions,5) > 0)
        FOR (aidx = 1 TO size(pbmreply->rulesets[1].objarray[oaidx].actions,5))
          IF ((pbmreply->rulesets[1].objarray[oaidx].actions[aidx].actionkey IN ("SETNONCOV",
          "SET2NONCOV", "SET3NONCOV")))
           SET cidx = locateval(lidx,1,origsize,pbmreply->rulesets[1].objarray[oaidx].pftchargeid,
            chargecoveragerec->charges[lidx].pftchargeid)
           IF ((pbmreply->rulesets[1].objarray[oaidx].actions[aidx].actionkey="SETNONCOV"))
            IF (btest(chargecoveragerec->charges[cidx].coveragebitmap,0)=1)
             SET chargecoveragerec->charges[cidx].coveragebitmap = bxor(chargecoveragerec->charges[
              cidx].coveragebitmap,(2** 0))
            ENDIF
           ELSEIF ((pbmreply->rulesets[1].objarray[oaidx].actions[aidx].actionkey="SET2NONCOV"))
            IF (btest(chargecoveragerec->charges[cidx].coveragebitmap,1)=1)
             SET chargecoveragerec->charges[cidx].coveragebitmap = bxor(chargecoveragerec->charges[
              cidx].coveragebitmap,(2** 1))
            ENDIF
           ELSEIF ((pbmreply->rulesets[1].objarray[oaidx].actions[aidx].actionkey="SET3NONCOV"))
            IF (btest(chargecoveragerec->charges[cidx].coveragebitmap,2)=1)
             SET chargecoveragerec->charges[cidx].coveragebitmap = bxor(chargecoveragerec->charges[
              cidx].coveragebitmap,(2** 2))
            ENDIF
           ENDIF
          ENDIF
        ENDFOR
       ENDIF
     ENDFOR
    ELSE
     SET chunkcnt = (origsize/ pbm_chunck_size)
     WHILE (chunkidx <= chunkcnt)
       SET pbmcnt = 0
       SET cidx = 1
       SET stat = initrec(pbmrequest)
       SET stat = initrec(pbmreply)
       SET pbmrequest->categorykey = "CHRGPOST"
       SET pbmrequest->eventkey = "CHRG_COV_EVAL"
       IF (validate(debug,- (1)) > 0)
        CALL echo(build2("Processing Chunk::",chunkidx," of Total Chunks::",chunkcnt,
          " from Charge Index::",
          (cidx+ (chunkidx * pbm_chunck_size))," to Charge Index::",least(origsize,(pbm_chunck_size
            * (chunkidx+ 1)))))
       ENDIF
       SET stat = alterlist(pbmrequest->objarray,least((origsize - (chunkidx * pbm_chunck_size)),
         pbm_chunck_size))
       FOR (cidx = 1 TO least((origsize - (chunkidx * pbm_chunck_size)),pbm_chunck_size))
        SET pbmcnt += 1
        SET pbmrequest->objarray[pbmcnt].pftchargeid = chargecoveragerec->charges[(cidx+ (
        pbm_chunck_size * chunkidx))].pftchargeid
       ENDFOR
       IF (validate(debug))
        CALL echorecord(pbmrequest)
       ENDIF
       EXECUTE pft_eval_pbm_rules  WITH replace("REQUEST",pbmrequest), replace("REPLY",pbmreply)
       IF (validate(debug))
        CALL echorecord(pbmreply)
       ENDIF
       IF ((pbmreply->status_data.status="F"))
        CALL logmessage("getChargeCoverages","PFT_EVAL_PBM_RULES failed",log_error)
        RETURN(false)
       ELSEIF ((pbmreply->status_data.status="Z"))
        CALL logmessage("getChargeCoverages","No Charge Coverage Rules to Evaluate",log_debug)
        RETURN(true)
       ENDIF
       IF (size(pbmreply->rulesets,5) != 1)
        CALL logmessage("getChargeCoverages",
         "Assertion failure, invalid number of rulesets items returned",log_error)
        RETURN(false)
       ENDIF
       FOR (oaidx = 1 TO size(pbmreply->rulesets[1].objarray,5))
         IF (size(pbmreply->rulesets[1].objarray[oaidx].actions,5) > 0)
          FOR (aidx = 1 TO size(pbmreply->rulesets[1].objarray[oaidx].actions,5))
            IF ((pbmreply->rulesets[1].objarray[oaidx].actions[aidx].actionkey IN ("SETNONCOV",
            "SET2NONCOV", "SET3NONCOV")))
             SET cidx = locateval(lidx,1,origsize,pbmreply->rulesets[1].objarray[oaidx].pftchargeid,
              chargecoveragerec->charges[lidx].pftchargeid)
             IF ((pbmreply->rulesets[1].objarray[oaidx].actions[aidx].actionkey="SETNONCOV"))
              IF (btest(chargecoveragerec->charges[cidx].coveragebitmap,0)=1)
               SET chargecoveragerec->charges[cidx].coveragebitmap = bxor(chargecoveragerec->charges[
                cidx].coveragebitmap,(2** 0))
              ENDIF
             ELSEIF ((pbmreply->rulesets[1].objarray[oaidx].actions[aidx].actionkey="SET2NONCOV"))
              IF (btest(chargecoveragerec->charges[cidx].coveragebitmap,1)=1)
               SET chargecoveragerec->charges[cidx].coveragebitmap = bxor(chargecoveragerec->charges[
                cidx].coveragebitmap,(2** 1))
              ENDIF
             ELSEIF ((pbmreply->rulesets[1].objarray[oaidx].actions[aidx].actionkey="SET3NONCOV"))
              IF (btest(chargecoveragerec->charges[cidx].coveragebitmap,2)=1)
               SET chargecoveragerec->charges[cidx].coveragebitmap = bxor(chargecoveragerec->charges[
                cidx].coveragebitmap,(2** 2))
              ENDIF
             ENDIF
            ENDIF
          ENDFOR
         ENDIF
       ENDFOR
       SET chunkidx += 1
     ENDWHILE
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(ischargecovered))
  SUBROUTINE (ischargecovered(psequence=i4,pchargecoveragebitmap=i4) =i2)
    IF (btest(pchargecoveragebitmap,(psequence - 1))=1)
     RETURN(true)
    ELSE
     RETURN(false)
    ENDIF
  END ;Subroutine
 ENDIF
 CALL echo("End PFT_GET_CHRG_COVERAGE_SUBS.INC")
 CALL echo(build("Begin PFT_GET_ICD_PREF_SETTING_SUBS.INC, version [",nullterm("267003.001"),"]"))
 IF ( NOT (validate(dminforequest)))
  FREE RECORD dminforequest
  RECORD dminforequest(
    1 info_name_qual = i2
    1 info[*]
      2 info_name = vc
    1 info_name = vc
  )
 ENDIF
 IF ( NOT (validate(dminforeply)))
  RECORD dminforeply(
    1 dm_info_qual = i2
    1 dm_info[*]
      2 info_name = vc
      2 info_date = dq8
      2 info_char = vc
      2 info_number = f8
      2 info_long_id = f8
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c15
        3 operationstatus = c1
        3 targetobjectname = c15
        3 targetobjectvalue = vc
  )
 ENDIF
 IF (validate(geticdpreference,char(128))=char(128))
  DECLARE geticdpreference(null) = i2
  SUBROUTINE geticdpreference(null)
    SET dminforequest->info_name_qual = 4
    SET stat = alterlist(dminforequest->info,4)
    SET dminforequest->info[1].info_name = "ICD PRINCIPAL DIAGNOSIS TYPE"
    SET dminforequest->info[2].info_name = "ICD PRINCIPAL PROCEDURE TYPE"
    SET dminforequest->info[3].info_name = "SECONDARY ICD PRINCIPAL DIAGNOSIS TYPE"
    SET dminforequest->info[4].info_name = "SECONDARY ICD PRINCIPAL PROCEDURE TYPE"
    EXECUTE afc_get_dm_info  WITH replace("REQUEST",dminforequest), replace("REPLY",dminforeply)
    IF ((dminforeply->status_data.status="F"))
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(sch_rfrl_get_by_entities_req,0)))
  RECORD sch_rfrl_get_by_entities_req(
    1 entities[*]
      2 entity_id = f8
    1 entity_type = vc
    1 encounter_data_load_ind = i2
  )
 ENDIF
 IF ( NOT (validate(sch_rfrl_get_by_entities_rep,0)))
  RECORD sch_rfrl_get_by_entities_rep(
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
    1 referrals[*]
      2 admit_booking_type_cd = f8
      2 admit_booking_type_disp = vc
      2 create_dt_tm = dq8
      2 intended_booking_type_cd = f8
      2 intended_booking_type_disp = vc
      2 last_performed_action_dt_tm = dq8
      2 last_performed_action_disp = vc
      2 medical_service_cd = f8
      2 medical_service_disp = vc
      2 reason_for_removal_cd = f8
      2 reason_for_removal_disp = vc
      2 referral_comment = vc
      2 referral_ident = vc
      2 referral_priority_cd = f8
      2 referral_priority_disp = vc
      2 referral_source_cd = f8
      2 referral_source_disp = vc
      2 referral_status_cd = f8
      2 referral_status_disp = vc
      2 referral_written_dt_tm = dq8
      2 service_category_cd = f8
      2 service_category_disp = vc
      2 service_type_requested_cd = f8
      2 service_type_requested_disp = vc
      2 stand_by_cd = f8
      2 stand_by_disp = vc
      2 suspected_cancer_type_cd = f8
      2 suspected_cancer_type_disp = vc
      2 wait_list_status_cd = f8
      2 wait_list_status_disp = vc
      2 entity_id = f8
      2 guaranteed_appointment_dt_tm = dq8
      2 system_person_id = f8
      2 organization_id = f8
      2 responsible_clinician_id = f8
      2 referral_received_dt_tm = dq8
      2 refer_to_physician_id = f8
      2 sch_appt_id = f8
      2 sch_appt_beg_dt_tm = dq8
      2 sch_appt_end_dt_tm = dq8
      2 sch_event_id = f8
      2 schedule_id = f8
      2 appt_type_cd = f8
      2 problem_code_cd = f8
      2 problem_code_disp = vc
  )
 ENDIF
 CALL echo("Begin including pft_remarks_subs.inc, version [612442.001]")
 IF ( NOT (validate(cs29904_technical_cd)))
  DECLARE cs29904_technical_cd = f8 WITH protect, constant(getcodevalue(29904,"TECHNICAL",0))
 ENDIF
 IF ( NOT (validate(cs26913_remark_code_attrib_cd)))
  DECLARE cs26913_remark_code_attrib_cd = f8 WITH protect, constant(getcodevalue(26913,"DOLLARAMT",0)
   )
 ENDIF
 SUBROUTINE (istechnicaldenialexists(pclaimid=f8,plineitemid=f8) =i2)
   CALL logmessage("isTechnicalDenialExists","Entering...",log_debug)
   DECLARE technicaldenialfound = i2 WITH protect, noconstant(false)
   DECLARE remittanceid = f8 WITH noconstant(0.0)
   DECLARE totaltechdenials = f8 WITH noconstant(0.0)
   DECLARE eobparser = vc WITH protect, noconstant("1 = 1 ")
   IF (validate(plineitemid,0) > 0)
    SET eobparser = "btf.pft_line_item_id = pLineItemId"
   ENDIF
   SELECT INTO "nl:"
    FROM batch_trans_file btf,
     denial d,
     denial_detail dd
    PLAN (btf
     WHERE btf.corsp_activity_id=pclaimid
      AND parser(eobparser)
      AND btf.active_ind=true)
     JOIN (d
     WHERE d.batch_trans_file_id=btf.batch_trans_file_id
      AND d.denial_type_cd=cs29904_technical_cd
      AND d.active_ind=true)
     JOIN (dd
     WHERE dd.denial_id=d.denial_id
      AND dd.remark_code_attrib_cd=cs26913_remark_code_attrib_cd
      AND dd.active_ind=true)
    ORDER BY d.denial_id DESC
    DETAIL
     IF (remittanceid <= 0.0)
      remittanceid = btf.batch_trans_id
     ENDIF
     IF (remittanceid > 0.0
      AND btf.batch_trans_id=remittanceid)
      totaltechdenials = round((totaltechdenials+ cnvtreal(dd.remark_code_attrib_value)),2)
     ENDIF
    WITH nocounter
   ;end select
   IF (abs(totaltechdenials) > 0.0)
    SET technicaldenialfound = true
   ENDIF
   CALL logmessage("isTechnicalDenialExists","Exiting...",log_debug)
   RETURN(technicaldenialfound)
 END ;Subroutine
 CALL echo("Begin including PFT_GET_PBM_TOKEN_VALUES_SUBS.INC, version [REVCYCPAS-2302 - 188]")
 IF ( NOT (validate(cs4002352_specialauth_flex_field_cd)))
  DECLARE cs4002352_specialauth_flex_field_cd = f8 WITH protect, constant(getcodevalue(4002352,
    "SPECIALAUTH",0))
 ENDIF
 IF ( NOT (validate(cs4554012_specialauth_patient_desig_type_cd)))
  DECLARE cs4554012_specialauth_patient_desig_type_cd = f8 WITH protect, constant(getcodevalue(
    4554012,"SPECIALAUTH",0))
 ENDIF
 IF ( NOT (validate(cs4002352_svcconnected_flex_field_cd)))
  DECLARE cs4002352_svcconnected_flex_field_cd = f8 WITH protect, constant(getcodevalue(4002352,
    "SVCCONNECTED",0))
 ENDIF
 IF ( NOT (validate(cs21849_patient_stat_cd)))
  DECLARE cs21849_patient_stat_cd = f8 WITH protect, constant(getcodevalue(21849,"PATIENT STAT",0))
 ENDIF
 RECORD familybalancerec(
   1 balances[*]
     2 balanceid = f8
     2 guarantorid = f8
     2 relatedfinencounters[*]
       3 pftencntrid = f8
       3 unbillchargesind = i2
 ) WITH protect
 RECORD dyndrgrec(
   1 entityname = vc
   1 encounterdrg = f8
   1 remitdrg = f8
   1 contractdrg = f8
 ) WITH protect
 DECLARE autoerr_type = vc WITH protect, constant("AUTOERRTYPE")
 DECLARE aae_token = vc WITH protect, constant("T_AAERROR")
 DECLARE codeset_4554012 = f8 WITH protect, constant(4554012)
 IF ( NOT (validate(cs89_cparemitdrg_cd)))
  DECLARE cs89_cparemitdrg_cd = f8 WITH protect, constant(getcodevalue(89,"CPAREMITDRG",0))
 ENDIF
 IF ( NOT (validate(cs89_cpacntrctdrg_cd)))
  DECLARE cs89_cpacntrctdrg_cd = f8 WITH protect, constant(getcodevalue(89,"CPACNTRCTDRG",0))
 ENDIF
 IF ( NOT (validate(cs89_himcodingmrg)))
  DECLARE cs89_himcodingmrg = f8 WITH protect, constant(getcodevalue(89,"HIMCODINGMRG",0))
 ENDIF
 IF ( NOT (validate(cs16110_order_cd)))
  DECLARE cs16110_order_cd = f8 WITH constant(uar_get_code_by("MEANING",16110,"ORDER"))
 ENDIF
 IF ( NOT (validate(cs6003_order_cd)))
  DECLARE cs6003_order_cd = f8 WITH constant(uar_get_code_by("MEANING",6003,"ORDER"))
 ENDIF
 IF ( NOT (validate(cs6003_modify_cd)))
  DECLARE cs6003_modify_cd = f8 WITH constant(uar_get_code_by("MEANING",6003,"MODIFY"))
 ENDIF
 IF ( NOT (validate(cs6003_reschedule_cd)))
  DECLARE cs6003_reschedule_cd = f8 WITH constant(uar_get_code_by("MEANING",6003,"RESCHEDULE"))
 ENDIF
 IF ( NOT (validate(cs6003_activate_cd)))
  DECLARE cs6003_activate_cd = f8 WITH constant(uar_get_code_by("MEANING",6003,"ACTIVATE"))
 ENDIF
 IF ( NOT (validate(cs6003_futuredc_cd)))
  DECLARE cs6003_futuredc_cd = f8 WITH constant(uar_get_code_by("MEANING",6003,"FUTUREDC"))
 ENDIF
 IF ( NOT (validate(cs6003_renew_cd)))
  DECLARE cs6003_renew_cd = f8 WITH constant(uar_get_code_by("MEANING",6003,"RENEW"))
 ENDIF
 IF ( NOT (validate(cs6003_resume_renew_cd)))
  DECLARE cs6003_resume_renew_cd = f8 WITH constant(uar_get_code_by("MEANING",6003,"RESUME/RENEW"))
 ENDIF
 IF ( NOT (validate(cs6003_collection_cd)))
  DECLARE cs6003_collection_cd = f8 WITH constant(uar_get_code_by("MEANING",6003,"COLLECTION"))
 ENDIF
 DECLARE ora_parser_str = vc WITH protect, noconstant("")
 DECLARE populatescheventactionclause(null) = i2
 SUBROUTINE populatescheventactionclause(null)
   DECLARE ora_version_int = i4 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM product_component_version p
    WHERE cnvtupper(p.product)="ORACLE*"
    HEAD REPORT
     ora_version_int = cnvtint(substring(1,(findstring(".",p.version) - 1),p.version))
    WITH nocounter
   ;end select
   IF (((curqual < 1) OR (ora_version_int < 1)) )
    RETURN(false)
   ENDIF
   IF (ora_version_int < 12)
    SET ora_parser_str = build2(
"SEA.SCH_ACTION_ID = ( SELECT DISTINCT FIRST_VALUE(SEA1.SCH_ACTION_ID) OVER (ORDER BY SEA1.ACTION_DT_TM DESC, SEA1.PERFORM_\
DT_TM DESC ROWS UNBOUNDED PRECEDING) FROM SCH_EVENT_ACTION SEA1 WHERE SEA1.SCH_EVENT_ID = SE.SCH_EVENT_ID AND SEA1.ACTION_\
MEANING IN ('CONFIRM', 'CHECKIN', 'CHECKOUT', 'CANCEL', 'NOSHOW') AND SEA1.ACTIVE_IND = 1 AND SEA1.VERSION_DT_TM > TO_DATE\
('\
",format(cnvtdatetime(sysdate),"DD-MM-YYYY HH:MM:SS;;d"),"', 'DD-MM-YYYY HH24:MI:SS'))")
   ELSE
    SET ora_parser_str = build2(
"SEA.SCH_ACTION_ID = ( SELECT SEA1.SCH_ACTION_ID FROM SCH_EVENT_ACTION SEA1 WHERE SEA1.SCH_EVENT_ID = SE.SCH_EVENT_ID AND S\
EA1.ACTION_MEANING IN ('CONFIRM', 'CHECKIN', 'CHECKOUT', 'CANCEL', 'NOSHOW') AND SEA1.ACTIVE_IND = 1 AND SEA1.VERSION_DT_T\
M > TO_DATE('\
",format(cnvtdatetime(sysdate),"DD-MM-YYYY HH:MM:SS;;d"),
     "', 'DD-MM-YYYY HH24:MI:SS') ORDER BY SEA1.ACTION_DT_TM DESC, SEA1.PERFORM_DT_TM DESC FETCH FIRST ROW ONLY)"
     )
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getchargetokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   CALL logmessage("getChargeTokens","Entering...",log_debug)
   IF ( NOT (validate(cs354_selfpay_cd)))
    DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
   ENDIF
   IF ( NOT (validate(cs13019_bill_code_cd)))
    DECLARE cs13019_bill_code_cd = f8 WITH protect, constant(getcodevalue(13019,"BILL CODE",0))
   ENDIF
   IF ( NOT (validate(cs24451_invalid_cd)))
    DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
   ENDIF
   IF ( NOT (validate(cs400_icd9_cd)))
    DECLARE cs400_icd9_cd = f8 WITH protect, constant(getcodevalue(400,"ICD9",0))
   ENDIF
   IF ( NOT (validate(cs17_final_cd)))
    DECLARE cs17_final_cd = f8 WITH protect, constant(getcodevalue(17,"FINAL",0))
   ENDIF
   DECLARE startidx = i4 WITH protect, noconstant(1)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE ccnt = i4 WITH protect, noconstant(0)
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE tempidx = i4 WITH protect, noconstant(0)
   DECLARE datrecidx = i4 WITH protect, noconstant(0)
   DECLARE loopidx = i4 WITH protect, noconstant(0)
   DECLARE pftchrgidx = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE hperformqual = i4 WITH protect, noconstant(0)
   DECLARE hverifyqual = i4 WITH protect, noconstant(0)
   DECLARE sourcevocabidx = i4 WITH protect, noconstant(0)
   DECLARE sourcevocabclause = vc WITH protect, noconstant("")
   DECLARE icdpreferencestr = vc WITH protect, noconstant("")
   DECLARE rec_json = vc WITH protect, noconstant("")
   DECLARE specialtycd = f8 WITH protect, noconstant(0.0)
   RECORD ndcrequest(
     1 encounterid = f8
     1 pftchargeid = f8
   ) WITH protect
   RECORD ndcreply(
     1 chargeamount = f8
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   FREE RECORD tempndcrequest
   RECORD tempndcrequest(
     1 charges[*]
       2 pftchargeid = f8
       2 hcontextqual = i4
   )
   RECORD tempdyntokenrec(
     1 objarray[*]
       2 benefit_order_id = f8
       2 pftchrgqual[*]
         3 pftchargeid = f8
       2 json_data = vc
       2 data_record
         3 qual_cnt = i4
         3 qual[*]
           4 data_type_meaning = vc
           4 double_value = f8
           4 int_value = i4
           4 string_value = vc
   ) WITH protect
   RECORD data_rec(
     1 qual_cnt = i4
     1 qual[*]
       2 data_type_meaning = vc
       2 double_value = f8
       2 int_value = i4
       2 string_value = vc
   ) WITH protect
   CALL logmessage("getChargeTokens","Retrieving basic charge data...",log_debug)
   SELECT INTO "nl:"
    remaining_covered_days_null_ind = nullind(emm.remaining_covered_days)
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_charge pc,
     billing_entity be,
     pft_encntr pe,
     charge c,
     encounter e,
     benefit_order bo,
     bo_hp_reltn bhr,
     pft_charge_bo_reltn pcbr,
     encntr_medicare_mgmt emm
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pc
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pc.pft_charge_id,request->objarray[eidx]
      .pftchargeid)
      AND ((pc.active_ind+ 0)=true))
     JOIN (be
     WHERE be.billing_entity_id=pc.billing_entity_id)
     JOIN (pe
     WHERE pe.pft_encntr_id=pc.pft_encntr_id)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id)
     JOIN (e
     WHERE e.encntr_id=c.encntr_id)
     JOIN (pcbr
     WHERE pcbr.pft_charge_id=pc.pft_charge_id
      AND pcbr.active_ind=true)
     JOIN (bo
     WHERE bo.benefit_order_id=pcbr.benefit_order_id
      AND bo.bo_status_cd != cs24451_invalid_cd
      AND bo.fin_class_cd=cs354_selfpay_cd
      AND bo.active_ind=true)
     JOIN (bhr
     WHERE bhr.benefit_order_id=bo.benefit_order_id
      AND bhr.active_ind=true)
     JOIN (emm
     WHERE (emm.encntr_id= Outerjoin(e.encntr_id))
      AND (emm.active_ind= Outerjoin(true)) )
    ORDER BY pc.pft_charge_id
    HEAD pc.pft_charge_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,pc.pft_charge_id,request->objarray[lidx].
      pftchargeid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     hqual = uar_srvadditem(hobjarray,"qual"), hcontextqual = uar_srvadditem(hqual,"context_qual")
     IF (c.bill_item_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_BILLITEM",c.bill_item_id)
     ENDIF
     IF (pc.billing_entity_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_BILLENTITY",pc.billing_entity_id)
     ENDIF
     IF (be.parent_be_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_BETYPE",1.0)
     ELSE
      CALL addtoken_f8(hcontextqual,"T_BETYPE",0.0)
     ENDIF
     IF (pe.fin_class_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_FINCLASS",pe.fin_class_cd)
     ENDIF
     IF (e.encntr_type_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_ENCTYPE",e.encntr_type_cd)
     ENDIF
     IF (e.encntr_type_class_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_ENCTYPECLS",e.encntr_type_class_cd)
     ENDIF
     IF (e.loc_facility_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_FACILITY",e.loc_facility_cd)
     ENDIF
     IF (e.loc_building_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_LOCBLDG",e.loc_building_cd)
     ENDIF
     IF (e.loc_nurse_unit_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_LOCNURSEU",e.loc_nurse_unit_cd)
     ENDIF
     IF (e.program_service_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_DIVISION",e.program_service_cd)
     ENDIF
     IF (c.item_quantity > 0
      AND c.item_quantity < 1)
      CALL addtoken_f8(hcontextqual,"T_CHRGQTY",1.0)
     ELSE
      CALL addtoken_f8(hcontextqual,"T_CHRGQTY",round(c.item_quantity,0))
     ENDIF
     IF (c.activity_type_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_ACTTYPE",c.activity_type_cd)
     ENDIF
     IF (c.service_dt_tm > 0.0)
      CALL addtoken_f8(hcontextqual,"T_SERVICEDT",c.service_dt_tm)
     ENDIF
     CALL addtoken_f8(hcontextqual,"T_CUSTOM",c.charge_item_id)
     IF (e.organization_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_ENCORG",e.organization_id)
     ENDIF
     IF (e.accommodation_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_ACCOMCODE",e.accommodation_cd)
     ENDIF
     IF (remaining_covered_days_null_ind=0)
      CALL addtoken_f8(hcontextqual,"T_COVDAYSREM",cnvtreal(emm.remaining_covered_days))
     ENDIF
     stat = alterlist(tempndcrequest->charges,ccnt), tempndcrequest->charges[ccnt].pftchargeid = pc
     .pft_charge_id, tempndcrequest->charges[ccnt].hcontextqual = hcontextqual
    WITH nocounter
   ;end select
   IF (ccnt != porigsize)
    CALL logmessage("getChargeTokens","Invalid charge specified",log_error)
    RETURN(false)
   ENDIF
   IF ( NOT (validate(pruletypekey)))
    DECLARE pruletypekey = vc WITH protect, noconstant(" ")
   ENDIF
   IF (pruletypekey="CHRGWRITEOFF")
    SET stat = initrec(ndcrequest)
    SET stat = initrec(ndcreply)
    DECLARE idx = i4 WITH protect, noconstant(0)
    FOR (idx = 1 TO size(tempndcrequest->charges,5))
      SET ndcrequest->pftchargeid = tempndcrequest->charges[idx].pftchargeid
      EXECUTE pft_check_unscanned_ndc_amount  WITH replace("REQUEST",ndcrequest), replace("REPLY",
       ndcreply)
      IF ((ndcreply->status_data.status="S"))
       CALL addtoken_f8(tempndcrequest->charges[idx].hcontextqual,"T_UNSCNDCAMT",ndcreply->
        chargeamount)
      ELSE
       CALL logmessage("pft_check_unscanned_ndc_amount","No charges matched unscanned NDC criteria.",
        log_debug)
      ENDIF
    ENDFOR
   ENDIF
   CALL logmessage("getChargeTokens","Retrieving charge insurance data...",log_debug)
   SET stat = initrec(tempdyntokenrec)
   SET ccnt = 0
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_charge pc,
     billing_entity be,
     charge c,
     encounter e,
     pft_charge_bo_reltn pcbr,
     benefit_order bo,
     bo_hp_reltn bhr,
     encntr_plan_reltn epr
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pc
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pc.pft_charge_id,request->objarray[eidx]
      .pftchargeid)
      AND ((pc.active_ind+ 0)=true))
     JOIN (be
     WHERE be.billing_entity_id=pc.billing_entity_id)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id)
     JOIN (e
     WHERE e.encntr_id=c.encntr_id)
     JOIN (pcbr
     WHERE pcbr.pft_charge_id=pc.pft_charge_id
      AND pcbr.active_ind=true)
     JOIN (bo
     WHERE bo.benefit_order_id=pcbr.benefit_order_id
      AND bo.bo_status_cd != cs24451_invalid_cd
      AND bo.fin_class_cd != cs354_selfpay_cd
      AND bo.active_ind=true)
     JOIN (bhr
     WHERE bhr.benefit_order_id=bo.benefit_order_id
      AND bhr.active_ind=true)
     JOIN (epr
     WHERE epr.encntr_plan_reltn_id=bhr.encntr_plan_reltn_id
      AND epr.active_ind=true)
    ORDER BY bo.benefit_order_id, pc.pft_charge_id
    HEAD bo.benefit_order_id
     tempidx = locateval(lidx,1,size(tempdyntokenrec->objarray,5),bo.benefit_order_id,tempdyntokenrec
      ->objarray[lidx].benefit_order_id)
     IF (tempidx=0)
      tempidx = (size(tempdyntokenrec->objarray,5)+ 1), stat = alterlist(tempdyntokenrec->objarray,
       tempidx), tempdyntokenrec->objarray[tempidx].benefit_order_id = bo.benefit_order_id
     ENDIF
    HEAD pc.pft_charge_id
     cidx = locateval(lidx,1,porigsize,pc.pft_charge_id,request->objarray[lidx].pftchargeid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvgetitem(hobjarray,
      "qual",0),
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0), ccnt += 1
     IF (ischargecovered(1,pcbr.covered_bitmap))
      CALL addtoken_f8(hcontextqual,"T_PRMCHRGCOV",1.0)
     ELSE
      CALL addtoken_f8(hcontextqual,"T_PRMCHRGCOV",0.0)
     ENDIF
     IF (ischargecovered(2,pcbr.covered_bitmap))
      CALL addtoken_f8(hcontextqual,"T_SECCHRGCOV",1.0)
     ELSE
      CALL addtoken_f8(hcontextqual,"T_SECCHRGCOV",0.0)
     ENDIF
     IF (ischargecovered(3,pcbr.covered_bitmap))
      CALL addtoken_f8(hcontextqual,"T_TERCHRGCOV",1.0)
     ELSE
      CALL addtoken_f8(hcontextqual,"T_TERCHRGCOV",0.0)
     ENDIF
     pftchrgidx = (size(tempdyntokenrec->objarray[tempidx].pftchrgqual,5)+ 1), stat = alterlist(
      tempdyntokenrec->objarray[tempidx].pftchrgqual,pftchrgidx), tempdyntokenrec->objarray[tempidx].
     pftchrgqual[pftchrgidx].pftchargeid = pc.pft_charge_id
    DETAIL
     IF (bhr.priority_seq=1
      AND bhr.health_plan_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_MONTHLYSOC",epr.deduct_amt),
      CALL addtoken_f8(hcontextqual,"T_PRMHLTHPLN",bhr.health_plan_id),
      CALL addtoken_f8(hcontextqual,"T_PAYER",bhr.payor_org_id),
      CALL addtoken_f8(hcontextqual,"T_PRMPAYER",bhr.payor_org_id),
      CALL addtoken_f8(hcontextqual,"T_HEALTHPLAN",bhr.health_plan_id)
     ENDIF
     IF (bhr.priority_seq=2
      AND bhr.health_plan_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_SECHLTHPLN",bhr.health_plan_id),
      CALL addtoken_f8(hcontextqual,"T_SECPAYER",bhr.payor_org_id)
     ENDIF
     IF (bhr.priority_seq=3
      AND bhr.health_plan_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_TERHLTHPLN",bhr.health_plan_id),
      CALL addtoken_f8(hcontextqual,"T_TERPAYER",bhr.payor_org_id)
     ENDIF
     datrecidx = locateval(lidx,1,size(tempdyntokenrec->objarray[tempidx].data_record.qual,5),
      "health_plan",tempdyntokenrec->objarray[tempidx].data_record.qual[lidx].data_type_meaning,
      bhr.health_plan_id,tempdyntokenrec->objarray[tempidx].data_record.qual[lidx].double_value,bhr
      .priority_seq,tempdyntokenrec->objarray[tempidx].data_record.qual[lidx].int_value)
     IF (datrecidx=0)
      datrecidx = (size(tempdyntokenrec->objarray[tempidx].data_record.qual,5)+ 1), tempdyntokenrec->
      objarray[tempidx].data_record.qual_cnt = datrecidx, stat = alterlist(tempdyntokenrec->objarray[
       tempidx].data_record.qual,datrecidx),
      tempdyntokenrec->objarray[tempidx].data_record.qual[datrecidx].data_type_meaning =
      "health_plan", tempdyntokenrec->objarray[tempidx].data_record.qual[datrecidx].double_value =
      bhr.health_plan_id, tempdyntokenrec->objarray[tempidx].data_record.qual[datrecidx].int_value =
      bhr.priority_seq
     ENDIF
     datrecidx = locateval(lidx,1,size(tempdyntokenrec->objarray[tempidx].data_record.qual,5),"payer",
      tempdyntokenrec->objarray[tempidx].data_record.qual[lidx].data_type_meaning,
      bhr.payor_org_id,tempdyntokenrec->objarray[tempidx].data_record.qual[lidx].double_value,bhr
      .priority_seq,tempdyntokenrec->objarray[tempidx].data_record.qual[lidx].int_value)
     IF (datrecidx=0)
      datrecidx = (size(tempdyntokenrec->objarray[tempidx].data_record.qual,5)+ 1), tempdyntokenrec->
      objarray[tempidx].data_record.qual_cnt = datrecidx, stat = alterlist(tempdyntokenrec->objarray[
       tempidx].data_record.qual,datrecidx),
      tempdyntokenrec->objarray[tempidx].data_record.qual[datrecidx].data_type_meaning = "payer",
      tempdyntokenrec->objarray[tempidx].data_record.qual[datrecidx].double_value = bhr.payor_org_id,
      tempdyntokenrec->objarray[tempidx].data_record.qual[datrecidx].int_value = bhr.priority_seq
     ENDIF
    WITH nocounter
   ;end select
   SET tempidx = 0
   FOR (loopidx = 1 TO size(tempdyntokenrec->objarray,5))
     SET rec_json = ""
     SET stat = initrec(data_rec)
     IF (validate(tempdyntokenrec->objarray[loopidx].data_record,null) != null)
      SET data_rec->qual_cnt = size(tempdyntokenrec->objarray[loopidx].data_record.qual,5)
      IF (size(tempdyntokenrec->objarray[loopidx].data_record.qual,5) > 0)
       SET stat = movereclist(tempdyntokenrec->objarray[loopidx].data_record.qual,data_rec->qual,1,0,
        size(tempdyntokenrec->objarray[loopidx].data_record.qual,5),
        1)
       SET rec_json = cnvtrectojson(data_rec)
      ENDIF
     ENDIF
     SET tempdyntokenrec->objarray[loopidx].json_data = rec_json
     FOR (tempidx = 1 TO size(tempdyntokenrec->objarray[loopidx].pftchrgqual,5))
      SET cidx = locateval(lidx,1,porigsize,tempdyntokenrec->objarray[loopidx].pftchrgqual[tempidx].
       pftchargeid,request->objarray[lidx].pftchargeid)
      IF (cidx > 0)
       SET hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
       SET hqual = uar_srvgetitem(hobjarray,"qual",0)
       SET hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
       CALL addtoken_vc(hcontextqual,"T_DYNHLTHPLN",tempdyntokenrec->objarray[loopidx].json_data)
       CALL addtoken_vc(hcontextqual,"T_DYNPAYER",tempdyntokenrec->objarray[loopidx].json_data)
      ENDIF
     ENDFOR
   ENDFOR
   CALL logmessage("getChargeTokens","Retrieving charge bill codes data...",log_debug)
   SET startidx = 1
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_charge pc,
     charge c,
     charge_mod cm,
     nomenclature n
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pc
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pc.pft_charge_id,request->objarray[eidx]
      .pftchargeid)
      AND pc.active_ind=true)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.active_ind=true)
     JOIN (cm
     WHERE cm.charge_item_id=c.charge_item_id
      AND cm.charge_mod_type_cd=cs13019_bill_code_cd
      AND cm.active_ind=true
      AND cm.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND cm.end_effective_dt_tm > cnvtdatetime(sysdate))
     JOIN (n
     WHERE ((n.nomenclature_id=cm.nomen_id
      AND n.active_ind=true) OR (n.nomenclature_id=0)) )
    ORDER BY pc.pft_charge_id
    HEAD pc.pft_charge_id
     cidx = locateval(lidx,1,porigsize,pc.pft_charge_id,request->objarray[lidx].pftchargeid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvgetitem(hobjarray,
      "qual",0),
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
    DETAIL
     IF (uar_get_code_meaning(cm.field1_id)="REVENUE")
      CALL addtoken_f8(hcontextqual,"T_REVCODE",cm.field3_id)
     ENDIF
     IF (uar_get_code_meaning(cm.field1_id)="HCPCS"
      AND n.nomenclature_id > 0.0)
      CALL addtoken_vc(hcontextqual,"T_CHRGHCPCS",n.source_identifier)
     ENDIF
     IF (uar_get_code_meaning(cm.field1_id)="CPT4"
      AND n.nomenclature_id > 0.0)
      CALL addtoken_vc(hcontextqual,"T_CHRGCPT4",n.source_identifier)
     ENDIF
    WITH nocounter
   ;end select
   CALL logmessage("getChargeTokens","Retrieving physician credential data",log_debug)
   SET startidx = 1
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_charge pc,
     charge c,
     credential cr
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pc
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pc.pft_charge_id,request->objarray[eidx]
      .pftchargeid)
      AND pc.active_ind=true)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.active_ind=true)
     JOIN (cr
     WHERE ((cr.prsnl_id=c.perf_phys_id) OR (cr.prsnl_id=c.verify_phys_id))
      AND cr.credential_id != 0.0
      AND cr.active_ind=true)
    ORDER BY pc.pft_charge_id
    HEAD pc.pft_charge_id
     hperformqual = 0, hverifyqual = 0, hcontextqual = 0,
     cidx = locateval(lidx,1,porigsize,pc.pft_charge_id,request->objarray[lidx].pftchargeid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
    DETAIL
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
     IF (cr.prsnl_id=c.perf_phys_id)
      IF (hperformqual=0)
       hperformqual = uar_srvadditem(hobjarray,"qual")
      ENDIF
      hcontextqual = uar_srvadditem(hperformqual,"context_qual")
      IF (size(trim(cr.id_number,3)) > 0)
       CALL addtoken_vc(hcontextqual,"T_PPHYID",trim(cr.id_number,3))
      ENDIF
      IF (c.service_dt_tm <= cr.end_effective_dt_tm)
       CALL addtoken_f8(hcontextqual,"T_PPHYCREEXP",valid_credential)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_PPHYCREEXP",expired_credential)
      ENDIF
      IF (cr.credential_cd > 0.0)
       CALL addtoken_f8(hcontextqual,"T_PPHYCRED",cr.credential_cd)
      ENDIF
      IF (cr.credential_type_cd > 0.0)
       CALL addtoken_f8(hcontextqual,"T_PPHYCREDTP",cr.credential_type_cd)
      ENDIF
     ENDIF
     IF (cr.prsnl_id=c.verify_phys_id)
      IF (hverifyqual=0)
       hverifyqual = uar_srvadditem(hobjarray,"qual")
      ENDIF
      hcontextqual = uar_srvadditem(hverifyqual,"context_qual")
      IF (size(trim(cr.id_number,3)) > 0)
       CALL addtoken_vc(hcontextqual,"T_VPHYID",trim(cr.id_number,3))
      ENDIF
      IF (c.service_dt_tm <= cr.end_effective_dt_tm)
       CALL addtoken_f8(hcontextqual,"T_VPHYCREEXP",valid_credential)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_VPHYCREEXP",expired_credential)
      ENDIF
      IF (cr.credential_cd > 0.0)
       CALL addtoken_f8(hcontextqual,"T_VPHYCRED",cr.credential_cd)
      ENDIF
      IF (cr.credential_type_cd > 0.0)
       CALL addtoken_f8(hcontextqual,"T_VPHYCREDTP",cr.credential_type_cd)
      ENDIF
     ENDIF
    WITH nocounter
   ;end select
   CALL logmessage("getChargeTokens","Retrieving encounter diagnosis codes",log_debug)
   SET startidx = 1
   IF (geticdpreference(0))
    SET sourcevocabclause = "n.source_vocabulary_cd in (CS400_ICD9_CD"
    FOR (sourcevocabidx = 1 TO dminforeply->dm_info_qual)
     SET icdpreferencestr = cnvtstring(dminforeply->dm_info[sourcevocabidx].info_long_id,15,2)
     IF (icdpreferencestr != "0.00"
      AND findstring(icdpreferencestr,sourcevocabclause,1,0)=0)
      SET sourcevocabclause = concat(sourcevocabclause,",",icdpreferencestr)
     ENDIF
    ENDFOR
    SET sourcevocabclause = concat(sourcevocabclause,")")
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = ploopcnt),
      pft_charge pc,
      pft_encntr pe,
      diagnosis d,
      nomenclature n
     PLAN (d1
      WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
      JOIN (pc
      WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pc.pft_charge_id,request->objarray[eidx
       ].pftchargeid))
      JOIN (pe
      WHERE pe.pft_encntr_id=pc.pft_encntr_id
       AND pe.active_ind=true)
      JOIN (d
      WHERE d.encntr_id=pe.encntr_id
       AND d.active_ind=true
       AND d.diag_type_cd=cs17_final_cd
       AND d.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND d.end_effective_dt_tm > cnvtdatetime(sysdate))
      JOIN (n
      WHERE n.nomenclature_id=d.nomenclature_id
       AND parser(sourcevocabclause)
       AND n.active_ind=true
       AND n.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND n.end_effective_dt_tm > cnvtdatetime(sysdate))
     ORDER BY pc.pft_charge_id, n.nomenclature_id
     HEAD pc.pft_charge_id
      cidx = locateval(lidx,1,porigsize,pc.pft_charge_id,request->objarray[lidx].pftchargeid),
      hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvgetitem(hobjarray,
       "qual",0),
      hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
     DETAIL
      CALL addtoken_f8(hcontextqual,"T_PRMICD9CD",n.nomenclature_id)
     WITH nocounter
    ;end select
   ENDIF
   CALL logmessage("getChargeTokens","Exiting...",log_debug)
   SET startidx = 1
   SET eidx = 0
   SET lidx = 0
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_charge pc,
     pft_encntr pe,
     encntr_info ei,
     code_value_extension c,
     long_text l
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pc
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pc.pft_charge_id,request->objarray[eidx]
      .pftchargeid))
     JOIN (pe
     WHERE pe.pft_encntr_id=pc.pft_encntr_id
      AND pe.active_ind=true)
     JOIN (ei
     WHERE ei.encntr_id=pe.encntr_id)
     JOIN (c
     WHERE c.code_value=ei.info_sub_type_cd
      AND c.field_name="TYPE")
     JOIN (l
     WHERE l.long_text_id=ei.long_text_id)
    ORDER BY ei.encntr_info_id
    HEAD ei.encntr_info_id
     FOR (lidx = 1 TO porigsize)
       IF (((c.field_value="DATE"
        AND ei.value_dt_tm > 0) OR (((c.field_value="STRING"
        AND l.long_text > " ") OR (((c.field_value="CODE"
        AND ei.value_cd > 0) OR (c.field_value="NUMERIC"
        AND ei.value_numeric > 0)) )) )) )
        hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1)), hqual = uar_srvgetitem(hobjarray,
         "qual",0), hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
        CASE (c.field_value)
         OF "DATE":
          CALL addtokenforencuserdef_dq8(hcontextqual,"T_ENCUSERDEF",cnvtdatetime(ei.value_dt_tm),ei
          .info_sub_type_cd)
         OF "STRING":
          CALL addtokenforencuserdef_vc(hcontextqual,"T_ENCUSERDEF",l.long_text,ei.info_sub_type_cd)
         OF "CODE":
          CALL addtokenforencuserdef_f8(hcontextqual,"T_ENCUSERDEF",ei.value_cd,ei.info_sub_type_cd)
         OF "NUMERIC":
          CALL addtokenforencuserdef_f8(hcontextqual,"T_ENCUSERDEF",cnvtreal(ei.value_numeric),ei
          .info_sub_type_cd)
        ENDCASE
       ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getencountertokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   DECLARE startidx = i4 WITH protect, noconstant(1)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE ccnt = i4 WITH protect, noconstant(0)
   DECLARE ecnt = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE guarantorid = f8 WITH protect, noconstant(0.0)
   DECLARE pftencntrindex = i4 WITH protect, noconstant(0)
   DECLARE ntokenidx = i4 WITH protect, noconstant(0)
   DECLARE groupidx = i4 WITH protect, noconstant(0)
   DECLARE fidx = i4 WITH protect, noconstant(0)
   DECLARE rec_json = vc WITH protect, noconstant("")
   DECLARE pftenctridx = i4 WITH protect, noconstant(0)
   DECLARE specialauthind = i2 WITH protect, noconstant(false)
   DECLARE leidx = i4 WITH protect, noconstant(0)
   DECLARE leidx1 = i4 WITH protect, noconstant(0)
   DECLARE leidx2 = i4 WITH protect, noconstant(0)
   DECLARE lencntercnt = i4 WITH protect, noconstant(0)
   DECLARE hasinspending = i2 WITH protect, noconstant(false)
   DECLARE hascollectionsuppressionhold = i2 WITH protect, noconstant(false)
   DECLARE enccnt = i4 WITH protect, noconstant(0)
   DECLARE ienccnt = i4 WITH protect, noconstant(0)
   DECLARE hasstatementsuppressionhold = i2 WITH protect, noconstant(false)
   DECLARE posted_process_flg = i4 WITH public, constant(100)
   DECLARE interfaced_process_flg = i4 WITH public, constant(999)
   DECLARE expidx = i4 WITH protect, noconstant(0)
   DECLARE locidx = i4 WITH protect, noconstant(0)
   DECLARE encidx = i4 WITH protect, noconstant(0)
   RECORD pbmencounterids(
     1 ids[*]
       2 encounterid = f8
       2 pftencntrid = f8
       2 encntrcontributorsystemcd = f8
       2 encounterdrg = f8
       2 remitdrg = f8
       2 contractdrg = f8
   ) WITH protect
   IF ( NOT (validate(cobrec)))
    RECORD cobrec(
      1 cobrec[*]
        2 encntrplancobid = f8
        2 payers[*]
          3 healthplanid = f8
          3 prioritysequence = i4
          3 begeffectivedttm = dq8
          3 endeffectivedttm = dq8
          3 encntrplanreltnid = f8
          3 encntrplancobreltnid = f8
        2 selfpays[*]
          3 healthplanid = f8
          3 begeffectivedttm = dq8
          3 endeffectivedttm = dq8
          3 encntrplanreltnid = f8
        2 begeffectivedttm = dq8
        2 endeffectivedttm = dq8
      1 selfpays[*]
        2 healthplanid = f8
        2 begeffectivedttm = dq8
        2 endeffectivedttm = dq8
        2 encntrplanreltnid = f8
    )
   ENDIF
   IF ( NOT (validate(getpbmtokensrequest)))
    RECORD getpbmtokensrequest(
      1 encounterid = f8
      1 financialencounterid = f8
      1 insurancebalanceid = f8
      1 tokens[*]
        2 token = vc
    )
   ENDIF
   IF ( NOT (validate(getpbmtokensreply)))
    RECORD getpbmtokensreply(
      1 tokenvalues[*]
        2 token = vc
        2 datatype = vc
        2 codevalue = f8
        2 numbervalue = i4
        2 currencyvalue = f8
        2 textvalue = vc
        2 datevalue = dq8
        2 displayvalue = vc
        2 timevalue = i4
        2 floatvalue = f8
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    )
   ENDIF
   RECORD ndcrequest(
     1 encounterid = f8
     1 pftchargeid = f8
   ) WITH protect
   RECORD ndcreply(
     1 chargeamount = f8
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   IF ( NOT (validate(data_rec)))
    RECORD data_rec(
      1 qual_cnt = i4
      1 qual[*]
        2 data_type_meaning = vc
        2 double_value = f8
        2 int_value = i4
        2 string_value = vc
    )
   ENDIF
   RECORD pft_encntr_ids(
     1 arr_ids[*]
       2 pft_encntr_id = f8
       2 serviceconnectindforencntr = vc
   ) WITH protect
   IF ( NOT (validate(cs24451_cancelled_cd)))
    DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
   ENDIF
   IF ( NOT (validate(cs24451_invalid_cd)))
    DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
   ENDIF
   IF ( NOT (validate(cs24451_complete_cd)))
    DECLARE cs24451_complete_cd = f8 WITH protect, constant(getcodevalue(24451,"COMPLETE",0))
   ENDIF
   IF ( NOT (validate(cs212_home)))
    DECLARE cs212_home = f8 WITH public, constant(getcodevalue(212,"HOME",0))
   ENDIF
   IF ( NOT (validate(cs29322_applyhold)))
    DECLARE cs29322_applyhold = f8 WITH protect, constant(getcodevalue(29322,"APPLYHOLD",0))
   ENDIF
   IF ( NOT (validate(cs29322_relhold)))
    DECLARE cs29322_relhold = f8 WITH protect, constant(getcodevalue(29322,"RELHOLD",0))
   ENDIF
   IF ( NOT (validate(cs29322_aplyactioncd)))
    DECLARE cs29322_aplyactioncd = f8 WITH protect, constant(getcodevalue(29322,"APLYACTIONCD",0))
   ENDIF
   IF ( NOT (validate(cs29322_locchange)))
    DECLARE cs29322_locchange = f8 WITH protect, constant(getcodevalue(29322,"LOCCHANGE",0))
   ENDIF
   IF ( NOT (validate(cs29322_encntrtypechange)))
    DECLARE cs29322_encntrtypechange = f8 WITH protect, constant(getcodevalue(29322,"ENCNTRTYPECH",0)
     )
   ENDIF
   IF ( NOT (validate(cs29322_guarrespchng)))
    DECLARE cs29322_guarrespchng = f8 WITH protect, constant(getcodevalue(29322,"GUARRESPCHNG",0))
   ENDIF
   IF ( NOT (validate(cs29322_collreturn)))
    DECLARE cs29322_collreturn = f8 WITH protect, constant(getcodevalue(29322,"COLLRETURN",0))
   ENDIF
   IF ( NOT (validate(cs29420_voidsubmit)))
    DECLARE cs29420_voidsubmit = f8 WITH protect, noconstant(getcodevalue(29420,"VOIDSUBMIT",1))
   ENDIF
   IF ( NOT (validate(cs354_selfpay_cd)))
    DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
   ENDIF
   IF ( NOT (validate(cs29322_adjcreated)))
    DECLARE cs29322_adjcreated = f8 WITH protect, constant(getcodevalue(29322,"ADJCREATED",0))
   ENDIF
   IF ( NOT (validate(cs29322_regmodfailur)))
    DECLARE cs29322_regmodfailur = f8 WITH protect, constant(getcodevalue(29322,"REGMODFAILUR",0))
   ENDIF
   IF ( NOT (validate(reg_mod_fail)))
    DECLARE reg_mod_fail = vc WITH protect, constant("REGMODFAIL")
   ENDIF
   IF ( NOT (validate(cs333_attenddoc)))
    DECLARE cs333_attenddoc = f8 WITH protect, constant(getcodevalue(333,"ATTENDDOC",0))
   ENDIF
   IF ( NOT (validate(cs29322_collstatupt)))
    DECLARE cs29322_collstatupt = f8 WITH protect, constant(getcodevalue(29322,"COLLSTATUPT",0))
   ENDIF
   IF ( NOT (validate(cs4003348_svcconnect_yes_cd)))
    DECLARE cs4003348_svcconnect_yes_cd = f8 WITH protect, constant(getcodevalue(4003348,"YES",0))
   ENDIF
   IF ( NOT (validate(cs4003348_svcconnect_no_cd)))
    DECLARE cs4003348_svcconnect_no_cd = f8 WITH protect, constant(getcodevalue(4003348,"NO",0))
   ENDIF
   IF ( NOT (validate(cs29322_dynamicevent_cd)))
    DECLARE cs29322_dynamicevent_cd = f8 WITH protect, constant(getcodevalue(29322,"DYNAMICEVENT",0))
   ENDIF
   IF ( NOT (validate(cs18649_payment)))
    DECLARE cs18649_payment = f8 WITH protect, constant(getcodevalue(18649,"PAYMENT",0))
   ENDIF
   IF ( NOT (validate(cs29322_chargeevent_cd)))
    DECLARE cs29322_chargeevent_cd = f8 WITH protect, constant(getcodevalue(29322,"CHARGEEVENT",0))
   ENDIF
   IF ( NOT (validate(cs29322_chargeupdate_cd)))
    DECLARE cs29322_chargeupdate_cd = f8 WITH protect, constant(getcodevalue(29322,"CHARGEUPDATE",0))
   ENDIF
   IF ( NOT (validate(cs29322_chrgintrface_cd)))
    DECLARE cs29322_chrgintrface_cd = f8 WITH protect, constant(getcodevalue(29322,"CHRGINTRFACE",0))
   ENDIF
   SET stat = alterlist(pbmencounterids->ids,size(requestparamgroups->objarray,5))
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = size(requestparamgroups->objarray,5)),
     encounter e,
     pft_encntr pe
    PLAN (d1)
     JOIN (e
     WHERE (e.encntr_id=requestparamgroups->objarray[d1.seq].encounterid)
      AND e.encntr_id != 0.0)
     JOIN (pe
     WHERE (pe.encntr_id= Outerjoin(e.encntr_id))
      AND (pe.active_ind= Outerjoin(true)) )
    ORDER BY pe.recur_seq DESC
    HEAD e.encntr_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,e.encntr_id,requestparamgroups->objarray[lidx].
      encounterid)
     IF (cidx > 0)
      pbmencounterids->ids[cidx].encounterid = e.encntr_id, pbmencounterids->ids[cidx].pftencntrid =
      pe.pft_encntr_id
     ENDIF
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,requestparamgroups->
      objarray[eidx].pftencntrid)
      AND pe.pft_encntr_id != 0.0)
    HEAD pe.pft_encntr_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx]
      .pftencntrid)
     IF (cidx > 0)
      pbmencounterids->ids[cidx].encounterid = pe.encntr_id, pbmencounterids->ids[cidx].pftencntrid
       = pe.pft_encntr_id
     ENDIF
    WITH nocounter
   ;end select
   IF (ccnt != porigsize)
    CALL logmessage("getEncounterTokens","Invalid encounter specified",log_error)
    RETURN(false)
   ENDIF
   SET lencntercnt = size(pbmencounterids->ids,5)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     encounter e
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (e
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),e.encntr_id,pbmencounterids->ids[eidx].
      encounterid))
    HEAD e.encntr_id
     FOR (lidx = 1 TO porigsize)
       IF ((e.encntr_id=pbmencounterids->ids[lidx].encounterid))
        hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1)), hqual = uar_srvadditem(hobjarray,
         "qual")
        FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
          hcontextqual = uar_srvadditem(hqual,"context_qual")
          IF ((requestparamgroups->objarray[lidx].eventid > 0.0))
           FOR (fidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].
            eventparams,5))
             CASE (requestparamgroups->objarray[lidx].eventid)
              OF cs29322_applyhold:
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="HOLDREASONCD")
                CALL addtoken_f8(hcontextqual,"T_APPLYHOLD",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
              OF cs29322_relhold:
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="HOLDREASONCD")
                CALL addtoken_f8(hcontextqual,"T_RELHOLD",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
              OF cs29322_aplyactioncd:
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="ACTIONCODE")
                CALL addtoken_f8(hcontextqual,"T_APPACTNCD",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
              OF cs29322_locchange:
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="PREVLOCNUNIT")
                CALL addtoken_f8(hcontextqual,"T_PREVLOCNU",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
              OF cs29322_encntrtypechange:
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="PREVETYPE")
                CALL addtoken_f8(hcontextqual,"T_PREVETYPE",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
              OF cs29322_guarrespchng:
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="EVENTTYPE")
                CALL addtoken_f8(hcontextqual,"P_EVENTTYPE",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
               ,
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="GUARRESPAMT")
                CALL addtoken_f8(hcontextqual,"P_GUARESPAMT",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
               ,
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="FPPINSTAMT")
                CALL addtoken_f8(hcontextqual,"P_FPPINSTAMT",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
              OF cs29322_collreturn:
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="COLLRETRSNCD")
                CALL addtoken_f8(hcontextqual,"T_COLLRETRSN",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
               ,
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="AGENCYRETYPE")
                CALL addtoken_f8(hcontextqual,"T_MANRETAGN",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
               ,
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="QUALNEXTAGN")
                CALL addtoken_f8(hcontextqual,"T_QUALNXTAGN",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
               ,
               IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx
                ].paramkey,3)="COLLRETAGENC")
                CALL addtoken_f8(hcontextqual,"T_CRETAGENCY",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
               ENDIF
             ENDCASE
             IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
              paramkey,3)="CONTRIBSYS")
              CALL addtoken_f8(hcontextqual,"T_EVCNTRBSYS",requestparamgroups->objarray[lidx].
              eventparamgroup[groupidx].eventparams[fidx].doublevalue)
             ENDIF
             IF ((((requestparamgroups->objarray[lidx].eventid=cs29322_chargeevent_cd)) OR ((((
             requestparamgroups->objarray[lidx].eventid=cs29322_chargeupdate_cd)) OR ((
             requestparamgroups->objarray[lidx].eventid=cs29322_chrgintrface_cd))) )) )
              IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx]
               .paramkey,3)="CHRGITEMID")
               CALL addtoken_f8(hcontextqual,"T_CHRGEVLENC",requestparamgroups->objarray[lidx].
               eventparamgroup[groupidx].eventparams[fidx].doublevalue)
              ENDIF
             ENDIF
           ENDFOR
          ENDIF
          IF (e.encntr_type_cd > 0.0)
           CALL addtoken_f8(hcontextqual,"T_ENCTYPE",e.encntr_type_cd)
          ENDIF
          IF (e.encntr_type_class_cd > 0.0)
           CALL addtoken_f8(hcontextqual,"T_ENCTYPECLS",e.encntr_type_class_cd)
          ENDIF
          IF (e.confid_level_cd > 0.0)
           CALL addtoken_f8(hcontextqual,"T_ENCCONFCD",e.confid_level_cd)
          ENDIF
          IF (e.loc_nurse_unit_cd > 0.0)
           CALL addtoken_f8(hcontextqual,"T_LOCNURSEU",e.loc_nurse_unit_cd)
          ENDIF
          IF (e.accommodation_cd > 0.0)
           CALL addtoken_f8(hcontextqual,"T_ACCOMCODE",e.accommodation_cd)
          ENDIF
          IF (e.med_service_cd > 0.0)
           CALL addtoken_f8(hcontextqual,"T_MEDSVC",e.med_service_cd)
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_DIFFDAYS",e.encntr_id),
          CALL addtoken_f8(hcontextqual,"T_CHSVCDTCPT",e.encntr_id),
          CALL addtoken_f8(hcontextqual,"T_CHSVCDTCDM",e.encntr_id),
          CALL addtoken_f8(hcontextqual,"T_CHQUANTCPT",e.encntr_id),
          CALL addtoken_f8(hcontextqual,"T_DLCHQNTCPT",e.encntr_id),
          CALL addtoken_f8(hcontextqual,"T_CUSTOM",e.encntr_id),
          CALL addtoken_f8(hcontextqual,"T_ENCHASBILL",e.encntr_id),
          CALL addtoken_f8(hcontextqual,"T_GUARESPCHG",e.encntr_id),
          CALL addtoken_f8(hcontextqual,"T_PRVATR",e.encntr_id),
          CALL addtoken_f8(hcontextqual,"T_ENCORG",e.organization_id),
          CALL addtoken_f8(hcontextqual,"T_DISCHRGDSP",e.disch_disposition_cd),
          CALL addtoken_param(hcontextqual,"P_PFTENCNTR","DOUBLE",0.0,"",pbmencounterids->ids[eidx].
          pftencntrid)
        ENDFOR
       ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe,
     pft_encntr_collection_reltn pecr,
     pft_collection_agency pca
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (pecr
     WHERE pecr.pft_encntr_id=pe.pft_encntr_id
      AND pecr.active_ind=true
      AND pecr.return_dt_tm != null)
     JOIN (pca
     WHERE pca.pft_collection_agency_id=pecr.parent_entity_id
      AND pca.active_ind=true)
    ORDER BY pecr.return_dt_tm DESC
    HEAD REPORT
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_AGNCTYP",pca.agency_type_cd)
    WITH nocounter, maxrec = 1
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe,
     pft_encntr_collection_reltn pecr,
     pft_collection_agency pca,
     organization o,
     encounter e
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (pecr
     WHERE pecr.pft_encntr_id=pe.pft_encntr_id
      AND pecr.active_ind=true
      AND pecr.return_dt_tm != null)
     JOIN (pca
     WHERE pca.pft_collection_agency_id=pecr.parent_entity_id
      AND pca.active_ind=true)
     JOIN (o
     WHERE o.organization_id=pca.organization_id
      AND o.active_ind=true)
     JOIN (e
     WHERE e.organization_id=o.organization_id
      AND e.active_ind=true)
    ORDER BY pecr.updt_dt_tm DESC
    HEAD REPORT
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_CURAGNASN",o.organization_id)
    WITH nocounter, maxrec = 1
   ;end select
   DECLARE diffindays = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe1,
     pft_encntr pe2,
     encounter e1,
     encounter e2
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe1
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe1.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe1.active_ind=true)
     JOIN (pe2
     WHERE pe2.acct_id=pe1.acct_id
      AND pe2.pft_encntr_id != pe1.pft_encntr_id
      AND pe2.active_ind=true)
     JOIN (e1
     WHERE e1.encntr_id=pe1.encntr_id
      AND e1.active_ind=true)
     JOIN (e2
     WHERE e2.encntr_id=pe2.encntr_id
      AND e2.active_ind=true)
    ORDER BY pe2.beg_effective_dt_tm DESC
    HEAD REPORT
     diffindays = datetimediff(pe1.beg_effective_dt_tm,pe2.beg_effective_dt_tm), cidx = locateval(
      lidx,1,porigsize,pe1.pft_encntr_id,requestparamgroups->objarray[lidx].pftencntrid), hobjarray
      = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     hqual = uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_DSLFEWAACT",diffindays)
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL addtoken_f8(hcontextqual,"T_DSLFEWAACT",0.0)
   ENDIF
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe,
     charge c,
     encounter e,
     time_zone_r tz
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true
      AND e.disch_dt_tm != null)
     JOIN (tz
     WHERE tz.parent_entity_id=e.loc_facility_cd
      AND tz.parent_entity_name="LOCATION")
     JOIN (c
     WHERE c.encntr_id=e.encntr_id
      AND c.active_ind=true
      AND c.service_dt_tm > e.disch_dt_tm
      AND c.offset_charge_item_id=0.0
      AND c.process_flg=posted_process_flg)
    ORDER BY pe.encntr_id
    HEAD pe.encntr_id
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_CHRGOTRANG",1.0)
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL addtoken_f8(hcontextqual,"T_CHRGOTRANG",0.0)
   ENDIF
   DECLARE totalchargebalance = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     encounter e
    PLAN (e
     WHERE expand(leidx,1,lencntercnt,e.encntr_id,pbmencounterids->ids[leidx].encounterid)
      AND e.active_ind=true)
     JOIN (pe
     WHERE pe.encntr_id=e.encntr_id
      AND pe.active_ind=true)
    DETAIL
     totalchargebalance = (evaluate(pe.chrg_bal_dr_cr_flag,2,(pe.charge_balance * - (1)),pe
      .charge_balance)+ totalchargebalance), cidx = locateval(lidx,1,size(pbmencounterids->ids,5),pe
      .pft_encntr_id,pbmencounterids->ids[lidx].pftencntrid), hobjarray = uar_srvgetitem(prequest,
      "objArray",(cidx - 1)),
     hqual = uar_srvgetitem(hobjarray,"qual",0)
    WITH nocounter
   ;end select
   CALL addtoken_f8(hcontextqual,"T_TLCRGBLENC",totalchargebalance)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe,
     encounter e,
     encntr_loc_hist elh1,
     encntr_loc_hist elh2
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
     JOIN (elh1
     WHERE elh1.encntr_id=e.encntr_id
      AND elh1.active_ind=true)
     JOIN (elh2
     WHERE elh2.encntr_id=elh1.encntr_id
      AND elh2.med_service_cd != elh1.med_service_cd)
    ORDER BY pe.pft_encntr_id
    HEAD pe.pft_encntr_id
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_MEDCHGIND",1.0)
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL addtoken_f8(hcontextqual,"T_MEDCHGIND",0.0)
   ENDIF
   IF ( NOT (validate(cs20549_copay)))
    DECLARE cs20549_copay = f8 WITH protect, constant(getcodevalue(20549,"COPAY",0))
   ENDIF
   IF ( NOT (validate(cs20549_patientpayment)))
    DECLARE cs20549_patientpayment = f8 WITH protect, constant(getcodevalue(20549,"PATIENT PAY",0))
   ENDIF
   IF ( NOT (validate(cs24451_invalid)))
    DECLARE cs24451_invalid = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
   ENDIF
   IF ( NOT (validate(cs25753_reversal)))
    DECLARE cs25753_reversal = f8 WITH protect, constant(getcodevalue(25753,"REVERSAL",0))
   ENDIF
   IF ( NOT (validate(cs24451_cancelled)))
    DECLARE cs24451_cancelled = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
   ENDIF
   IF ( NOT (validate(cs26673_paidinfull)))
    DECLARE cs26673_paidinfull = f8 WITH protect, constant(getcodevalue(26673,"PAIDINFULL",0))
   ENDIF
   DECLARE fppcount = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe,
     pft_pay_plan_pe_reltn ppppr,
     pft_payment_plan ppp,
     benefit_order bo,
     bo_hp_reltn bhr,
     pft_trans_reltn ptr,
     trans_log tl
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (ppppr
     WHERE ppppr.pft_encntr_id=pe.pft_encntr_id
      AND ppppr.active_ind=true)
     JOIN (ppp
     WHERE ppp.pft_payment_plan_id=ppppr.pft_payment_plan_id
      AND ppp.active_ind=true
      AND ppp.current_plan_status_cd != cs26673_paidinfull)
     JOIN (bo
     WHERE bo.pft_encntr_id=ppppr.pft_encntr_id
      AND  NOT (bo.bo_status_cd IN (cs24451_cancelled, cs24451_invalid))
      AND bo.active_ind=true)
     JOIN (bhr
     WHERE bhr.benefit_order_id=bo.benefit_order_id
      AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled, cs24451_invalid))
      AND bhr.active_ind=true)
     JOIN (ptr
     WHERE ptr.benefit_order_id=bhr.bo_hp_reltn_id
      AND ptr.active_ind=true
      AND ptr.trans_type_cd=cs18649_payment
      AND ptr.parent_entity_name="PFTENCNTR")
     JOIN (tl
     WHERE tl.activity_id=ptr.activity_id
      AND tl.active_ind=1
      AND tl.trans_sub_type_cd IN (cs20549_patientpayment, cs20549_copay)
      AND  NOT ( EXISTS (
     (SELECT
      1
      FROM trans_trans_reltn ttr
      WHERE ttr.parent_activity_id=tl.activity_id
       AND ttr.trans_reltn_reason_cd=cs25753_reversal)))
      AND tl.post_dt_tm >= ppp.begin_plan_dt_tm)
    ORDER BY tl.activity_id
    HEAD tl.activity_id
     fppcount += 1, cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[
      lidx].pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     hqual = uar_srvgetitem(hobjarray,"qual",0)
    WITH nocounter
   ;end select
   CALL addtoken_f8(hcontextqual,"T_NUMPAYFPP",fppcount)
   IF ( NOT (validate(cs338_employer)))
    DECLARE cs338_employer = f8 WITH protect, constant(getcodevalue(338,"EMPLOYER",0))
   ENDIF
   IF ( NOT (validate(cs338_school)))
    DECLARE cs338_school = f8 WITH protect, constant(getcodevalue(338,"SCHOOL",0))
   ENDIF
   IF ( NOT (validate(cs268_yes)))
    DECLARE cs268_yes = f8 WITH protect, constant(getcodevalue(268,"YES",0))
   ENDIF
   SELECT INTO "nl:"
    FROM encounter e,
     person p,
     person_org_reltn po,
     address a
    PLAN (e
     WHERE expand(expidx,1,lencntercnt,e.encntr_id,pbmencounterids->ids[expidx].encounterid)
      AND e.active_ind=true)
     JOIN (p
     WHERE p.person_id=e.person_id
      AND p.active_ind=true)
     JOIN (po
     WHERE po.person_id=e.person_id
      AND po.active_ind=true
      AND po.end_effective_dt_tm >= cnvtdatetime(sysdate)
      AND po.priority_seq=1)
     JOIN (a
     WHERE (a.parent_entity_id= Outerjoin(e.person_id))
      AND (a.parent_entity_name= Outerjoin("PERSON"))
      AND (a.active_ind= Outerjoin(true)) )
    HEAD REPORT
     encidx = locateval(locidx,1,lencntercnt,e.encntr_id,pbmencounterids->ids[locidx].encounterid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvgetitem(hobjarray,
      "qual",0),
     CALL addtoken_f8(hcontextqual,"T_PTAGEMIN",cnvtreal(notrim(substring(- (1),3,cnvtage2(p
         .birth_dt_tm)))))
     IF (a.county_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_PATADDCNTY",a.county_cd)
     ENDIF
     IF (trim(po.person_org_nbr,3) != "")
      CALL addtoken_vc(hcontextqual,"T_PATNTSTDID",po.person_org_nbr)
     ENDIF
     IF (po.person_org_reltn_cd=cs338_school)
      CALL addtoken_vc(hcontextqual,"T_PATSCHLNM",po.ft_org_name)
     ENDIF
     IF (po.person_org_reltn_cd=cs338_employer)
      CALL addtoken_f8(hcontextqual,"T_PATEMPST",po.empl_status_cd)
     ENDIF
     IF (p.deceased_cd=cs268_yes)
      CALL addtoken_f8(hcontextqual,"T_PERDEAD",1.0)
     ENDIF
     IF (po.person_org_reltn_cd=cs338_employer)
      CALL addtoken_vc(hcontextqual,"T_PATEMPNUM",po.ft_org_name)
     ENDIF
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL addtoken_f8(hcontextqual,"T_PERDEAD",0.0)
   ENDIF
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     encounter e,
     pft_encntr pe,
     pft_trans_reltn ptr,
     trans_log tl
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
     JOIN (ptr
     WHERE ptr.parent_entity_id=pe.pft_encntr_id
      AND ptr.parent_entity_name="PFTENCNTR"
      AND ptr.active_ind=true)
     JOIN (tl
     WHERE tl.activity_id=ptr.activity_id
      AND tl.trans_type_cd=cs18649_payment
      AND tl.active_ind=true
      AND tl.post_dt_tm < e.disch_dt_tm)
    ORDER BY pe.pft_encntr_id
    HEAD REPORT
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_PRSRVDSCNT",1.0)
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL addtoken_f8(hcontextqual,"T_PRSRVDSCNT",0.0)
   ENDIF
   IF ( NOT (validate(cs106_personmanagement)))
    DECLARE cs106_personmanagement = f8 WITH protect, constant(getcodevalue(106,"PM",0))
   ENDIF
   IF ( NOT (validate(cs13028_debit)))
    DECLARE cs13028_debit = f8 WITH protect, constant(getcodevalue(13028,"DR",0))
   ENDIF
   IF ( NOT (validate(cs14002_revenue)))
    DECLARE cs14002_revenue = f8 WITH protect, constant(getcodevalue(14002,"REVENUE",0))
   ENDIF
   DECLARE numcharges = i4 WITH protect, noconstant(0)
   DECLARE expectedroomandbedcount = i4 WITH protect, noconstant(0)
   DECLARE revenue = i4 WITH protect, noconstant(20769)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_charge pc,
     encounter e,
     pft_encntr pe,
     charge c,
     charge_mod cm
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pc
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pc.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pc.active_ind=true
      AND pc.offset_ind=0
      AND pc.active_ind=true)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.active_ind=true
      AND c.charge_type_cd=cs13028_debit
      AND c.process_flg IN (posted_process_flg, interfaced_process_flg)
      AND c.offset_charge_item_id=0.0
      AND c.activity_type_cd=cs106_personmanagement)
     JOIN (cm
     WHERE cm.charge_item_id=c.charge_item_id
      AND cm.active_ind=true
      AND cm.field1_id=cs14002_revenue
      AND cm.field3_id IN (
     (SELECT
      cv.code_value
      FROM code_value cv
      WHERE cv.code_set=revenue
       AND cv.active_ind=true
       AND cnvtint(cv.display) BETWEEN 100 AND 219))
      AND cm.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND cm.end_effective_dt_tm > cnvtdatetime(sysdate))
     JOIN (pe
     WHERE pe.pft_encntr_id=pc.pft_encntr_id
      AND pe.combined_into_id=0.00
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.inpatient_admit_dt_tm != null
      AND e.disch_dt_tm != null
      AND e.active_ind=true)
    HEAD REPORT
     expectedroomandbedcount = (cnvtdate(e.disch_dt_tm) - cnvtdate(e.inpatient_admit_dt_tm))
     IF (expectedroomandbedcount=0)
      expectedroomandbedcount = 1
     ENDIF
     numcharges = 0
    DETAIL
     numcharges += c.item_quantity
    FOOT REPORT
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     IF (expectedroomandbedcount=numcharges)
      CALL addtoken_f8(hcontextqual,"T_RNBDCTMSMH",0.0)
     ELSE
      CALL addtoken_f8(hcontextqual,"T_RNBDCTMSMH",1.0)
     ENDIF
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL addtoken_f8(hcontextqual,"T_RNBDCTMSMH",0.0)
   ENDIF
   IF ( NOT (validate(cs354_selfpay)))
    DECLARE cs354_selfpay = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
   ENDIF
   IF ( NOT (validate(cs71_inpatient)))
    DECLARE cs71_inpatient = f8 WITH protect, constant(getcodevalue(71,"INPATIENT",1))
   ENDIF
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     encounter e,
     time_zone_r tz,
     pft_encntr pe
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.encntr_type_cd=cs71_inpatient
      AND e.financial_class_cd != cs354_selfpay
      AND e.disch_dt_tm != null
      AND e.active_ind=true)
     JOIN (tz
     WHERE tz.parent_entity_id=e.loc_facility_cd
      AND tz.parent_entity_name="LOCATION")
    ORDER BY e.encntr_id
    HEAD e.encntr_id
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_TWOMDNTRL",1.0)
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL addtoken_f8(hcontextqual,"T_TWOMDNTRL",0.0)
   ENDIF
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe,
     encounter e,
     sch_appt sa,
     sch_booking sb
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
     JOIN (sa
     WHERE sa.encntr_id=e.encntr_id
      AND sa.active_ind=true
      AND sa.encntr_id != 0.00)
     JOIN (sb
     WHERE sb.booking_id=sa.booking_id
      AND sb.active_ind=true)
    HEAD REPORT
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_APPTTYPE",sb.appt_type_cd)
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe,
     bill_reltn brel,
     bill_rec br
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (brel
     WHERE brel.parent_entity_id=pe.pft_encntr_id
      AND brel.parent_entity_name="PFTENCNTR")
     JOIN (br
     WHERE br.corsp_activity_id=brel.corsp_activity_id
      AND br.active_ind=true
      AND br.bill_class_cd=cs21849_patient_stat_cd
      AND br.demand_ind=0)
    ORDER BY pe.pft_encntr_id, br.corsp_activity_id DESC
    HEAD pe.pft_encntr_id
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_ENCSTMTBAL",br.balance_due)
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe,
     statement_cycle sc
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (sc
     WHERE sc.statement_cycle_id=pe.statement_cycle_id
      AND sc.active_ind=true)
    DETAIL
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     CALL addtoken_f8(hcontextqual,"T_STMTCYCL",sc.statement_cycle_cd)
    WITH nocounter
   ;end select
   IF (curqual=0)
    IF ( NOT (validate(cs4538006_stmt_gen)))
     DECLARE cs4538006_stmt_gen = f8 WITH protect, constant(getcodevalue(4538006,"STMT_GEN",0))
    ENDIF
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = ploopcnt),
      pft_encntr pe,
      pft_event_occur_log peol,
      rc_cont_process_group rcpg,
      rc_cont_process_hist rcph,
      rc_cont_node_edge rcne,
      rc_cont_model rcm
     PLAN (d1
      WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
      JOIN (pe
      WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
       eidx].pftencntrid)
       AND pe.active_ind=true)
      JOIN (peol
      WHERE peol.parent_entity_id=pe.pft_encntr_id
       AND peol.active_ind=true)
      JOIN (rcpg
      WHERE rcpg.pft_event_occur_log_id=peol.pft_event_occur_log_id)
      JOIN (rcph
      WHERE rcph.rc_cont_process_group_id=rcpg.rc_cont_process_group_id)
      JOIN (rcne
      WHERE rcne.from_rc_cont_node_id=rcph.rc_cont_node_id)
      JOIN (rcm
      WHERE rcm.rc_cont_model_id=rcne.rc_cont_model_id
       AND rcm.workflow_type_cd=cs4538006_stmt_gen
       AND rcm.model_draft_ind=0)
     DETAIL
      cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,requestparamgroups->objarray[lidx].
       pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
      uar_srvgetitem(hobjarray,"qual",0),
      CALL addtoken_f8(hcontextqual,"T_STMTCYCL",rcm.rc_cont_model_id)
     WITH nocounter
    ;end select
   ENDIF
   DECLARE pftencntidssccounter = i4 WITH protect, noconstant(0)
   SET stat = initrec(pft_encntr_ids)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe,
     encounter e
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
    DETAIL
     IF (e.military_service_related_cd=cs4003348_svcconnect_yes_cd)
      cidx = locateval(lidx,1,size(pbmencounterids->ids,5),pe.pft_encntr_id,pbmencounterids->ids[lidx
       ].pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
      uar_srvgetitem(hobjarray,"qual",0)
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
       CALL addtoken_f8(hcontextqual,"T_SVCCONNECT",1.0)
      ENDFOR
     ELSE
      pftencntidssccounter += 1, stat = alterlist(pft_encntr_ids->arr_ids,pftencntidssccounter),
      pft_encntr_ids->arr_ids[pftencntidssccounter].pft_encntr_id = pe.pft_encntr_id
     ENDIF
    WITH nocounter
   ;end select
   IF (size(pft_encntr_ids->arr_ids,5) > 0)
    CALL checkallchargesserviceconnectedforencounter(pft_encntr_ids)
   ENDIF
   SET stat = initrec(pft_encntr_ids)
   IF (lencntercnt > 0)
    SELECT INTO "nl:"
     locationcd = pslr.location_cd
     FROM encntr_prsnl_reltn epr,
      encounter e,
      prsnl_specialty_reltn psr,
      prsnl_specialty_loc_reltn pslr
     PLAN (epr
      WHERE expand(leidx,1,lencntercnt,epr.encntr_id,pbmencounterids->ids[leidx].encounterid)
       AND epr.active_ind=true
       AND epr.encntr_prsnl_r_cd=cs333_attenddoc
       AND epr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND epr.end_effective_dt_tm > cnvtdatetime(sysdate))
      JOIN (e
      WHERE e.encntr_id=epr.encntr_id
       AND e.active_ind=true)
      JOIN (psr
      WHERE psr.prsnl_id=epr.prsnl_person_id
       AND psr.active_ind=true
       AND psr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND psr.end_effective_dt_tm > cnvtdatetime(sysdate))
      JOIN (pslr
      WHERE (pslr.prsnl_specialty_reltn_id= Outerjoin(psr.prsnl_specialty_reltn_id))
       AND (pslr.active_ind= Outerjoin(true)) )
     ORDER BY epr.encntr_id, locationcd DESC
     HEAD epr.encntr_id
      specialtycd = 0.0, leidx1 = locateval(leidx2,1,lencntercnt,epr.encntr_id,pbmencounterids->ids[
       leidx2].encounterid)
     DETAIL
      IF (leidx1 > 0
       AND specialtycd=0.0
       AND ((e.loc_nurse_unit_cd=locationcd) OR (locationcd=0.0
       AND psr.primary_ind=1)) )
       specialtycd = psr.specialty_cd, hobjarray = uar_srvgetitem(prequest,"objArray",(leidx1 - 1)),
       hqual = uar_srvadditem(hobjarray,"qual")
       FOR (groupidx = 1 TO lencntercnt)
        hcontextqual = uar_srvadditem(hqual,"context_qual"),
        CALL addtoken_f8(hcontextqual,"T_ADVPROVSPE",specialtycd)
       ENDFOR
      ENDIF
     WITH nocounter, expand = 1
    ;end select
    IF (checkdic("CODING_SPECIALTY","T",0) > 1)
     SELECT INTO "nl:"
      FROM coding_specialty cs
      WHERE expand(expidx,1,lencntercnt,cs.encntr_id,pbmencounterids->ids[expidx].encounterid)
       AND cs.contributor_system_cd=cs89_himcodingmrg
       AND cs.active_ind=true
      ORDER BY cs.encntr_id
      HEAD cs.encntr_id
       encidx = locateval(locidx,1,lencntercnt,cs.encntr_id,pbmencounterids->ids[locidx].encounterid)
      DETAIL
       IF (encidx > 0)
        pbmencounterids->ids[encidx].encntrcontributorsystemcd = cs89_himcodingmrg
       ENDIF
      WITH nocounter
     ;end select
    ENDIF
    SELECT INTO "nl:"
     FROM coding c
     WHERE expand(expidx,1,lencntercnt,c.encntr_id,pbmencounterids->ids[expidx].encounterid)
      AND c.encntr_slice_id=0
      AND c.svc_cat_hist_id=0
      AND c.active_ind=true
     ORDER BY c.encntr_id
     HEAD c.encntr_id
      encidx = locateval(locidx,1,lencntercnt,c.encntr_id,pbmencounterids->ids[locidx].encounterid)
     DETAIL
      IF (encidx > 0
       AND (pbmencounterids->ids[encidx].encntrcontributorsystemcd=0.0))
       pbmencounterids->ids[encidx].encntrcontributorsystemcd = c.contributor_system_cd
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM drg d,
      nomenclature n
     PLAN (d
      WHERE expand(expidx,1,lencntercnt,d.encntr_id,pbmencounterids->ids[expidx].encounterid)
       AND d.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND d.end_effective_dt_tm > cnvtdatetime(sysdate)
       AND d.active_ind=true)
      JOIN (n
      WHERE n.nomenclature_id=d.nomenclature_id
       AND n.active_ind=true)
     ORDER BY d.encntr_id
     HEAD d.encntr_id
      encidx = locateval(locidx,1,lencntercnt,d.encntr_id,pbmencounterids->ids[locidx].encounterid)
     DETAIL
      IF (encidx > 0
       AND d.contributor_system_cd IN (pbmencounterids->ids[encidx].encntrcontributorsystemcd,
      cs89_cparemitdrg_cd, cs89_cpacntrctdrg_cd))
       hobjarray = uar_srvgetitem(prequest,"objArray",(encidx - 1)), hqual = uar_srvgetitem(hobjarray,
        "qual",0), hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
       CASE (d.contributor_system_cd)
        OF cs89_cparemitdrg_cd:
         CALL addtoken_f8(hcontextqual,"T_REMITDRG",n.nomenclature_id)pbmencounterids->ids[encidx].
         remitdrg = n.nomenclature_id
        OF cs89_cpacntrctdrg_cd:
         CALL addtoken_f8(hcontextqual,"T_CNTRCTDRG",n.nomenclature_id)pbmencounterids->ids[encidx].
         contractdrg = n.nomenclature_id
        ELSE
         IF (d.drg_priority=1)
          CALL addtoken_f8(hcontextqual,"T_ENCNTRDRG",n.nomenclature_id), pbmencounterids->ids[encidx
          ].encounterdrg = n.nomenclature_id
         ENDIF
       ENDCASE
      ENDIF
     WITH nocounter, expand = 1
    ;end select
   ENDIF
   FOR (pbmencntridx = 1 TO size(pbmencounterids->ids,5))
     SET dyndrgrec->entityname = "ENCOUNTER"
     SET dyndrgrec->encounterdrg = pbmencounterids->ids[pbmencntridx].encounterdrg
     SET dyndrgrec->remitdrg = pbmencounterids->ids[pbmencntridx].remitdrg
     SET dyndrgrec->contractdrg = pbmencounterids->ids[pbmencntridx].contractdrg
     CALL addtoken_dyn(hcontextqual,"T_DRGMSM",pbmencounterids->ids[pbmencntridx].encounterid,
      cnvtrectojson(dyndrgrec))
   ENDFOR
   FOR (pftenctridx = 1 TO size(pbmencounterids->ids,5))
     IF (validatemultiaccountencountersexist(pbmencounterids->ids[pftenctridx].encounterid))
      SELECT INTO "n1:"
       FROM encounter e,
        pft_encntr pe,
        billing_entity be
       PLAN (e
        WHERE (e.encntr_id=pbmencounterids->ids[pftenctridx].encounterid)
         AND e.encntr_id != 0.0
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND (pe.pft_encntr_id=pbmencounterids->ids[pftenctridx].pftencntrid)
         AND pe.active_ind=true)
        JOIN (be
        WHERE be.billing_entity_id=pe.billing_entity_id
         AND be.active_ind=true)
       DETAIL
        FOR (lidx = 1 TO porigsize)
          IF ((e.encntr_id=pbmencounterids->ids[lidx].encounterid))
           hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1)), hqual = uar_srvgetitem(
            hobjarray,"qual",0)
           FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
             hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
             IF (be.billing_entity_id > 0.0)
              CALL addtoken_f8(hcontextqual,"T_BILLENTITY",be.billing_entity_id)
             ENDIF
             IF (be.parent_be_id > 0.0)
              CALL addtoken_f8(hcontextqual,"T_BETYPE",1.0)
             ELSE
              CALL addtoken_f8(hcontextqual,"T_BETYPE",0.0)
             ENDIF
           ENDFOR
          ENDIF
        ENDFOR
       WITH nocounter
      ;end select
     ELSEIF (isbedifferentforencandfinancialenc(pbmencounterids->ids[pftenctridx].encounterid))
      SELECT INTO "n1:"
       FROM encounter e,
        pft_encntr pe,
        billing_entity be
       PLAN (e
        WHERE (e.encntr_id=pbmencounterids->ids[pftenctridx].encounterid)
         AND e.encntr_id != 0.0
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND (pe.pft_encntr_id=pbmencounterids->ids[pftenctridx].pftencntrid)
         AND pe.active_ind=true)
        JOIN (be
        WHERE be.billing_entity_id=pe.billing_entity_id
         AND be.active_ind=true)
       DETAIL
        FOR (lidx = 1 TO porigsize)
          IF ((e.encntr_id=pbmencounterids->ids[lidx].encounterid))
           hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1)), hqual = uar_srvgetitem(
            hobjarray,"qual",0)
           FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
             hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
             IF (be.billing_entity_id > 0.0)
              CALL addtoken_f8(hcontextqual,"T_BILLENTITY",be.billing_entity_id)
             ENDIF
             IF (be.parent_be_id > 0.0)
              CALL addtoken_f8(hcontextqual,"T_BETYPE",1.0)
             ELSE
              CALL addtoken_f8(hcontextqual,"T_BETYPE",0.0)
             ENDIF
           ENDFOR
          ENDIF
        ENDFOR
       WITH nocounter
      ;end select
     ELSE
      SELECT INTO "n1:"
       FROM encounter e,
        location l,
        be_org_reltn bor,
        billing_entity be
       PLAN (e
        WHERE (e.encntr_id=pbmencounterids->ids[pftenctridx].encounterid))
        JOIN (l
        WHERE l.location_cd=e.loc_facility_cd
         AND l.active_ind=true)
        JOIN (bor
        WHERE bor.organization_id=l.organization_id
         AND bor.active_ind=true)
        JOIN (be
        WHERE be.billing_entity_id=bor.billing_entity_id
         AND be.active_ind=true)
       DETAIL
        FOR (lidx = 1 TO porigsize)
          IF ((e.encntr_id=pbmencounterids->ids[lidx].encounterid))
           hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1)), hqual = uar_srvgetitem(
            hobjarray,"qual",0)
           FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
             hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
             IF (be.billing_entity_id > 0.0)
              CALL addtoken_f8(hcontextqual,"T_BILLENTITY",be.billing_entity_id)
             ENDIF
             IF (be.parent_be_id > 0.0)
              CALL addtoken_f8(hcontextqual,"T_BETYPE",1.0)
             ELSE
              CALL addtoken_f8(hcontextqual,"T_BETYPE",0.0)
             ENDIF
           ENDFOR
          ENDIF
        ENDFOR
       WITH nocounter
      ;end select
     ENDIF
   ENDFOR
   FOR (lidx = 1 TO porigsize)
     IF ((pbmencounterids->ids[lidx].pftencntrid != 0.0))
      SET stat = initrec(data_rec)
      SET ccnt = 0
      SET data_rec->qual_cnt = 0
      SELECT INTO "nl:"
       FROM (dummyt d1  WITH seq = ploopcnt),
        pft_encntr pe,
        benefit_order bo,
        bo_hp_reltn bhr,
        encntr_plan_reltn epr
       PLAN (d1
        WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
        JOIN (pe
        WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->
         ids[eidx].pftencntrid)
         AND pe.active_ind=true)
        JOIN (bo
        WHERE bo.pft_encntr_id=pe.pft_encntr_id
         AND bo.bo_status_cd != cs24451_invalid_cd
         AND bo.fin_class_cd != cs354_selfpay_cd
         AND bo.active_ind=true)
        JOIN (bhr
        WHERE bhr.benefit_order_id=bo.benefit_order_id
         AND bhr.active_ind=true)
        JOIN (epr
        WHERE epr.encntr_plan_reltn_id=bhr.encntr_plan_reltn_id
         AND epr.active_ind=true)
       ORDER BY bhr.health_plan_id, bhr.priority_seq
       HEAD bhr.health_plan_id
        IF (validate(debug,false)=true)
         CALL echo("THIS PART OF CODE ACTS AS A PLACE HOLDER")
        ENDIF
       HEAD bhr.priority_seq
        ccnt += 1, data_rec->qual_cnt += 1
        IF (mod(data_rec->qual_cnt,10)=1)
         stat = alterlist(data_rec->qual,(data_rec->qual_cnt+ 9))
        ENDIF
        data_rec->qual[data_rec->qual_cnt].data_type_meaning = "health_plan", data_rec->qual[data_rec
        ->qual_cnt].double_value = bhr.health_plan_id, data_rec->qual[data_rec->qual_cnt].int_value
         = bhr.priority_seq
       WITH nocounter
      ;end select
      SET data_rec->qual_cnt = ccnt
      SET stat = alterlist(data_rec->qual,ccnt)
      SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
      SET hqual = uar_srvgetitem(hobjarray,"qual",0)
      SET rec_json = cnvtrectojson(data_rec)
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
       SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
       CALL addtoken_vc(hcontextqual,"T_DYNHLTHPLN",rec_json)
      ENDFOR
     ENDIF
   ENDFOR
   SET hasinspending = false
   FOR (lidx = 1 TO porigsize)
     IF ((pbmencounterids->ids[lidx].pftencntrid != 0.0))
      SELECT INTO "nl:"
       FROM benefit_order bo,
        bo_hp_reltn bhr
       PLAN (bo
        WHERE (bo.pft_encntr_id=pbmencounterids->ids[lidx].pftencntrid)
         AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
         AND bo.active_ind=true)
        JOIN (bhr
        WHERE bhr.benefit_order_id=bo.benefit_order_id
         AND bhr.active_ind=true
         AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_complete_cd,
        cs24451_invalid_cd))
         AND  NOT (bhr.fin_class_cd IN (cs354_selfpay_cd)))
       WITH nocounter
      ;end select
      IF (curqual > 0)
       SET hasinspending = true
      ENDIF
     ENDIF
   ENDFOR
   IF (hasinspending)
    CALL addtoken_f8(hcontextqual,"T_ALLINSCOMP",0.0)
   ELSE
    CALL addtoken_f8(hcontextqual,"T_ALLINSCOMP",1.0)
   ENDIF
   SET stat = initrec(data_rec)
   SET data_rec->qual_cnt = 0
   SET ccnt = 0
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     encntr_plan_reltn epr,
     person_plan_reltn ppr
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (epr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),epr.encntr_id,pbmencounterids->ids[eidx]
      .encounterid)
      AND epr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND epr.end_effective_dt_tm > cnvtdatetime(sysdate)
      AND epr.active_ind=1)
     JOIN (ppr
     WHERE ppr.person_id=epr.person_id
      AND ppr.health_plan_id=epr.health_plan_id
      AND ppr.priority_seq=1
      AND ppr.active_ind=1)
    ORDER BY epr.encntr_id, epr.encntr_plan_reltn_id, epr.priority_seq
    HEAD epr.encntr_plan_reltn_id
     FOR (lidx = 1 TO porigsize)
       IF ((epr.encntr_id=pbmencounterids->ids[lidx].encounterid))
        hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1)), hqual = uar_srvgetitem(hobjarray,
         "qual",0)
        FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
         hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
         CASE (epr.priority_seq)
          OF 1:
           IF (ppr.signature_on_file_cd > 0.0)
            CALL addtoken_f8(hcontextqual,"T_PSIGNFILE",ppr.signature_on_file_cd)
           ENDIF
           ,
           CALL addtoken_f8(hcontextqual,"T_PRHPASNBFT",epr.assign_benefits_cd)
          OF 2:
           CALL addtoken_f8(hcontextqual,"T_SCHPASNBFT",epr.assign_benefits_cd)
          OF 3:
           CALL addtoken_f8(hcontextqual,"T_TRHPASNBFT",epr.assign_benefits_cd)
         ENDCASE
        ENDFOR
       ENDIF
     ENDFOR
     ccnt += 1, data_rec->qual_cnt += 1
     IF (mod(data_rec->qual_cnt,10)=1)
      stat = alterlist(data_rec->qual,(data_rec->qual_cnt+ 9))
     ENDIF
     data_rec->qual[data_rec->qual_cnt].data_type_meaning = "health_plan", data_rec->qual[data_rec->
     qual_cnt].double_value = epr.health_plan_id, data_rec->qual[data_rec->qual_cnt].int_value = epr
     .priority_seq
    WITH nocounter
   ;end select
   SET data_rec->qual_cnt = ccnt
   SET stat = alterlist(data_rec->qual,ccnt)
   IF (rec_json="")
    SET rec_json = cnvtrectojson(data_rec)
    CALL addtoken_vc(hcontextqual,"T_DYNHLTHPLN",rec_json)
   ENDIF
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid))
    HEAD pe.pft_encntr_id
     enccnt += 1, stat = alterlist(pft_encntr_ids->arr_ids,enccnt), pft_encntr_ids->arr_ids[enccnt].
     pft_encntr_id = pe.pft_encntr_id
    WITH nocounter
   ;end select
   FOR (ienccnt = 1 TO enccnt)
     FOR (lidx = 1 TO porigsize)
       IF ((pft_encntr_ids->arr_ids[ienccnt].pft_encntr_id=pbmencounterids->ids[lidx].pftencntrid))
        SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
        SET hqual = uar_srvgetitem(hobjarray,"qual",0)
        FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
         SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
         IF ((requestparamgroups->objarray[lidx].eventid > 0.0))
          FOR (fidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].
           eventparams,5))
            IF ((((requestparamgroups->objarray[lidx].eventid=cs29322_adjcreated)) OR ((
            requestparamgroups->objarray[lidx].eventid=cs29322_dynamicevent_cd))) )
             IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
              paramkey,3)="T_ADJUSTMENT")
              CALL addencounterleveladjustmenttokens(requestparamgroups->objarray[cidx].
               eventparamgroup[groupidx].eventparams[fidx].doublevalue)
             ENDIF
            ENDIF
          ENDFOR
         ENDIF
        ENDFOR
       ENDIF
     ENDFOR
   ENDFOR
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     encntr_info ei,
     code_value_extension c,
     long_text l
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (ei
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),ei.encntr_id,pbmencounterids->ids[eidx].
      encounterid))
     JOIN (c
     WHERE c.code_value=ei.info_sub_type_cd
      AND c.field_name="TYPE")
     JOIN (l
     WHERE l.long_text_id=ei.long_text_id)
    ORDER BY ei.encntr_id
    DETAIL
     FOR (lidx = 1 TO porigsize)
       IF ((ei.encntr_id=pbmencounterids->ids[lidx].encounterid))
        hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1)), hqual = uar_srvgetitem(hobjarray,
         "qual",0)
        FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
         hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
         IF (((c.field_value="DATE"
          AND ei.value_dt_tm > 0) OR (((c.field_value="STRING"
          AND l.long_text > " ") OR (((c.field_value="CODE"
          AND ei.value_cd > 0) OR (c.field_value="NUMERIC"
          AND ei.value_numeric > 0)) )) )) )
          CASE (c.field_value)
           OF "DATE":
            CALL addtokenforencuserdef_dq8(hcontextqual,"T_ENCUSERDEF",cnvtdatetime(ei.value_dt_tm),
            ei.info_sub_type_cd)
           OF "STRING":
            CALL addtokenforencuserdef_vc(hcontextqual,"T_ENCUSERDEF",l.long_text,ei.info_sub_type_cd
            )
           OF "CODE":
            CALL addtokenforencuserdef_f8(hcontextqual,"T_ENCUSERDEF",ei.value_cd,ei.info_sub_type_cd
            )
           OF "NUMERIC":
            CALL addtokenforencuserdef_f8(hcontextqual,"T_ENCUSERDEF",cnvtreal(ei.value_numeric),ei
            .info_sub_type_cd)
          ENDCASE
         ENDIF
        ENDFOR
       ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   DECLARE pbmcobdttm = f8 WITH protect, noconstant(0.0)
   DECLARE pbmhealthplanid = f8 WITH protect, noconstant(0.0)
   DECLARE pbmencntrplanreltnid = f8 WITH protect, noconstant(0.0)
   DECLARE pbmencntrplancobid = f8 WITH protect, noconstant(0.0)
   DECLARE pbmfinclasscd = f8 WITH protect, noconstant(0.0)
   DECLARE isselfpaytokenadded = i2 WITH protect, noconstant(false)
   FOR (lidx = 1 TO porigsize)
     SET stat = initrec(cobrec)
     SET pbmcobdttm = 0.0
     SET pbmhealthplanid = 0.0
     SET pbmencntrplanreltnid = 0.0
     SET pbmencntrplancobid = 0.0
     SET pbmfinclasscd = 0.0
     SET isselfpaytokenadded = false
     IF ( NOT (getregistrationcobbyencounter(pbmencounterids->ids[lidx].encounterid,true)))
      RETURN(false)
     ENDIF
     IF ((pbmencounterids->ids[lidx].pftencntrid=0.0))
      SET pbmcobdttm = hp_effective_dt_tm
     ELSE
      SET pbmcobdttm = gethealthplaneffectivedatetimeforencounter(pbmencounterids->ids[lidx].
       pftencntrid)
      SELECT INTO "nl:"
       FROM pft_encntr pe
       PLAN (pe
        WHERE (pe.pft_encntr_id=pbmencounterids->ids[lidx].pftencntrid)
         AND pe.active_ind=true)
       DETAIL
        pbmencntrplancobid = pe.encntr_plan_cob_id
       WITH nocounter
      ;end select
     ENDIF
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
     SET hqual = uar_srvgetitem(hobjarray,"qual",0)
     IF ( NOT (getinsurancehealthplanbydatetime(1,pbmcobdttm,pbmencntrplancobid,pbmhealthplanid,
      pbmencntrplanreltnid)))
      RETURN(false)
     ENDIF
     IF ( NOT (isselfpaytokenadded)
      AND pbmhealthplanid=0.0)
      IF ( NOT (getselfpayhealthplanbydatetime(pbmcobdttm,pbmhealthplanid,pbmencntrplanreltnid)))
       RETURN(false)
      ENDIF
      SET isselfpaytokenadded = true
     ENDIF
     IF (pbmhealthplanid > 0.0)
      SELECT INTO "nl:"
       FROM health_plan hp
       WHERE hp.health_plan_id=pbmhealthplanid
       DETAIL
        pbmfinclasscd = hp.financial_class_cd
       WITH nocounter
      ;end select
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
        SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
        CALL addtoken_f8(hcontextqual,"T_PRMHLTHPLN",pbmhealthplanid)
        CALL addtoken_f8(hcontextqual,"T_PRIFINCLS",pbmfinclasscd)
      ENDFOR
     ENDIF
     IF ( NOT (getinsurancehealthplanbydatetime(2,pbmcobdttm,pbmencntrplancobid,pbmhealthplanid,
      pbmencntrplanreltnid)))
      RETURN(false)
     ENDIF
     IF ( NOT (isselfpaytokenadded)
      AND pbmhealthplanid=0.0)
      IF ( NOT (getselfpayhealthplanbydatetime(pbmcobdttm,pbmhealthplanid,pbmencntrplanreltnid)))
       RETURN(false)
      ENDIF
      SET isselfpaytokenadded = true
     ENDIF
     IF (pbmhealthplanid > 0.0)
      SELECT INTO "nl:"
       FROM health_plan hp
       WHERE hp.health_plan_id=pbmhealthplanid
       DETAIL
        pbmfinclasscd = hp.financial_class_cd
       WITH nocounter
      ;end select
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
        SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
        CALL addtoken_f8(hcontextqual,"T_SECHLTHPLN",pbmhealthplanid)
        CALL addtoken_f8(hcontextqual,"T_SECFNCLASS",pbmfinclasscd)
      ENDFOR
     ENDIF
     IF ( NOT (getinsurancehealthplanbydatetime(3,pbmcobdttm,pbmencntrplancobid,pbmhealthplanid,
      pbmencntrplanreltnid)))
      RETURN(false)
     ENDIF
     IF ( NOT (isselfpaytokenadded)
      AND pbmhealthplanid=0.0)
      IF ( NOT (getselfpayhealthplanbydatetime(pbmcobdttm,pbmhealthplanid,pbmencntrplanreltnid)))
       RETURN(false)
      ENDIF
      SET isselfpaytokenadded = true
     ENDIF
     IF (pbmhealthplanid > 0.0)
      SELECT INTO "nl:"
       FROM health_plan hp
       WHERE hp.health_plan_id=pbmhealthplanid
       DETAIL
        pbmfinclasscd = hp.financial_class_cd
       WITH nocounter
      ;end select
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
        SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
        CALL addtoken_f8(hcontextqual,"T_TERHLTHPLN",pbmhealthplanid)
        CALL addtoken_f8(hcontextqual,"T_TERFNCLASS",pbmfinclasscd)
      ENDFOR
     ENDIF
   ENDFOR
   FOR (eidx = 1 TO size(pbmencounterids->ids,5))
    CALL getguarantorbyencounter(pbmencounterids->ids[eidx].encounterid,guarantorid)
    IF (guarantorid > 0.0)
     SELECT INTO "nl:"
      FROM address a
      PLAN (a
       WHERE a.parent_entity_id=guarantorid
        AND a.parent_entity_name="PERSON"
        AND a.address_type_cd=cs212_home
        AND a.beg_effective_dt_tm <= cnvtdatetime(sysdate)
        AND a.end_effective_dt_tm > cnvtdatetime(sysdate)
        AND a.active_ind=1)
      DETAIL
       hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1)), hqual = uar_srvgetitem(hobjarray,
        "qual",0)
       FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
        hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
        IF (a.address_id > 0)
         CALL addtoken_f8(hcontextqual,"T_GHADDRST",a.address_info_status_cd)
        ENDIF
       ENDFOR
      WITH nocounter
     ;end select
    ENDIF
   ENDFOR
   SET stat = alterlist(getpbmtokensrequest->tokens,9)
   SET getpbmtokensrequest->tokens[1].token = "SurgicalCase.SurgicalCaseNumber"
   SET getpbmtokensrequest->tokens[2].token = "SurgicalCase.SurgicalScheduledDate"
   SET getpbmtokensrequest->tokens[3].token = "Encounter.AdmitDate"
   SET getpbmtokensrequest->tokens[4].token = "Encounter.AdmitSource"
   SET getpbmtokensrequest->tokens[5].token = "Encounter.AdmitCategory"
   SET getpbmtokensrequest->tokens[6].token = "Encounter.RegistrationDate"
   SET getpbmtokensrequest->tokens[7].token = "Encounter.DischargeDate"
   SET getpbmtokensrequest->tokens[8].token = "Encounter.LatestChargeServiceDate"
   SET getpbmtokensrequest->tokens[9].token = "Encounter.FormalPaymentPlanInstallmentAmount"
   FOR (eidx = 1 TO size(pbmencounterids->ids,5))
     SET getpbmtokensrequest->encounterid = pbmencounterids->ids[eidx].encounterid
     SET stat = initrec(getpbmtokensreply)
     EXECUTE pft_get_token_values  WITH replace("REQUEST",getpbmtokensrequest), replace("REPLY",
      getpbmtokensreply)
     IF ((getpbmtokensreply->status_data.status != "S"))
      CALL logmessage("getEncounterTokens","Failed to get Surgical case tokens",log_debug)
      RETURN(false)
     ENDIF
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1))
     SET hqual = uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
      FOR (ntokenidx = 1 TO size(getpbmtokensreply->tokenvalues,5))
        IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="SurgicalCase.SurgicalCaseNumber"))
         CALL addtoken_vc(hcontextqual,"T_SURCASENUM",getpbmtokensreply->tokenvalues[ntokenidx].
          textvalue)
        ENDIF
        IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="SurgicalCase.SurgicalScheduledDate"))
         IF ((getpbmtokensreply->tokenvalues[ntokenidx].datevalue > 0.0))
          CALL addtoken_dq8(hcontextqual,"T_SURSCHEDDT",cnvtdatetime(cnvtdate(getpbmtokensreply->
             tokenvalues[ntokenidx].datevalue),0))
         ENDIF
        ENDIF
        IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="Encounter.AdmitDate"))
         IF ((getpbmtokensreply->tokenvalues[ntokenidx].datevalue > 0.0))
          CALL addtoken_dq8(hcontextqual,"T_ENCADMITDT",cnvtdatetime(cnvtdate(getpbmtokensreply->
             tokenvalues[ntokenidx].datevalue),0))
         ENDIF
        ENDIF
        IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="Encounter.AdmitSource"))
         CALL addtoken_f8(hcontextqual,"T_ENCADMITSR",getpbmtokensreply->tokenvalues[ntokenidx].
          codevalue)
        ENDIF
        IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="Encounter.AdmitCategory"))
         CALL addtoken_f8(hcontextqual,"T_ENCADMITCT",getpbmtokensreply->tokenvalues[ntokenidx].
          codevalue)
        ENDIF
        IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="Encounter.RegistrationDate"))
         IF ((getpbmtokensreply->tokenvalues[ntokenidx].datevalue > 0.0))
          CALL addtoken_dq8(hcontextqual,"T_ENCREGDTTM",cnvtdatetime(cnvtdate(getpbmtokensreply->
             tokenvalues[ntokenidx].datevalue),0))
         ENDIF
        ENDIF
        IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="Encounter.DischargeDate"))
         IF ((getpbmtokensreply->tokenvalues[ntokenidx].datevalue > 0.0))
          CALL addtoken_dq8(hcontextqual,"T_ENCDISCHDT",cnvtdatetime(cnvtdate(getpbmtokensreply->
             tokenvalues[ntokenidx].datevalue),0))
         ENDIF
        ENDIF
        IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="Encounter.LatestChargeServiceDate"))
         IF ((getpbmtokensreply->tokenvalues[ntokenidx].datevalue > 0.0))
          CALL addtoken_dq8(hcontextqual,"T_NEWCHGSVDT",cnvtdatetime(cnvtdate(getpbmtokensreply->
             tokenvalues[ntokenidx].datevalue),0))
         ENDIF
        ENDIF
        IF ((getpbmtokensreply->tokenvalues[ntokenidx].token=
        "Encounter.FormalPaymentPlanInstallmentAmount"))
         CALL addtoken_f8(hcontextqual,"T_FPPINSTAMT",getpbmtokensreply->tokenvalues[ntokenidx].
          currencyvalue)
        ENDIF
      ENDFOR
     ENDFOR
     SET stat = initrec(ndcrequest)
     SET stat = initrec(ndcreply)
     SET ndcrequest->encounterid = pbmencounterids->ids[eidx].encounterid
     EXECUTE pft_check_unscanned_ndc_amount  WITH replace("REQUEST",ndcrequest), replace("REPLY",
      ndcreply)
     IF ((ndcreply->status_data.status="S"))
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
       SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
       CALL addtoken_f8(hcontextqual,"T_UNSCNDCAMT",ndcreply->chargeamount)
      ENDFOR
     ELSE
      CALL logmessage("pft_check_unscanned_ndc_amount","No charges matched unscanned NDC criteria.",
       log_debug)
     ENDIF
   ENDFOR
   DECLARE finencntrbal = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     encounter e
    PLAN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id)
    ORDER BY pe.pft_encntr_id
    HEAD pe.pft_encntr_id
     finencntrbal = (pe.balance * evaluate(pe.dr_cr_flag,2,- (1.0),1,1.0,
      0.0)), cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,pbmencounterids->ids[lidx].
      pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     hqual = uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
       CALL addtoken_f8(hcontextqual,"T_ENCNTRBAL",finencntrbal)
       IF (pe.pft_encntr_id != 0.0)
        CALL addtoken_f8(hcontextqual,"T_FACILITY",e.loc_facility_cd)
       ENDIF
       CALL addtoken_f8(hcontextqual,"T_TCHARGES",evaluate(pe.chrg_bal_dr_cr_flag,2,(pe
        .charge_balance * - (1)),pe.charge_balance))
     ENDFOR
    WITH nocounter
   ;end select
   DECLARE aprefundid = f8 WITH protect, noconstant(0.0)
   DECLARE diffindays = f8 WITH protect, noconstant(0.0)
   DECLARE refundaddressmodified = f8 WITH protect, noconstant(0.0)
   FOR (lidx = 1 TO porigsize)
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
     SET hqual = uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
      IF ((requestparamgroups->objarray[lidx].eventid > 0.0))
       FOR (fidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams,
        5))
         IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
          paramkey,3)="RFNDADDRMOD")
          SET refundaddressmodified = requestparamgroups->objarray[lidx].eventparamgroup[groupidx].
          eventparams[fidx].doublevalue
          CALL addtoken_f8(hcontextqual,"T_RFDADDRMOD",refundaddressmodified)
         ELSEIF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
          paramkey,3)="APREFUND_ID")
          SET aprefundid = requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[
          fidx].doublevalue
          IF (aprefundid > 0.0)
           SELECT INTO "nl:"
            FROM pft_ap_refund par,
             pft_ap_refund par_child
            PLAN (par
             WHERE par.pft_ap_refund_id=aprefundid)
             JOIN (par_child
             WHERE (par_child.parent_pft_ap_refund_id= Outerjoin(par.pft_ap_refund_id))
              AND (par_child.refund_status_cd= Outerjoin(cs29420_voidsubmit)) )
            DETAIL
             IF (par.expedited_ind)
              CALL addtoken_f8(hcontextqual,"T_APREFNDAMT",- (1.0))
             ELSE
              CALL addtoken_f8(hcontextqual,"T_APREFNDAMT",par.refund_amt)
              IF (((par.refund_status_cd=cs29420_voidsubmit) OR (par_child.pft_ap_refund_id > 0.0)) )
               diffindays = datetimecmp(cnvtdatetime(systimestamp),evaluate(par_child
                 .pft_ap_refund_id,0.0,par.updt_dt_tm,par_child.updt_dt_tm)),
               CALL addtoken_f8(hcontextqual,"T_DPAPRFDUPD",diffindays)
              ENDIF
             ENDIF
            WITH nocounter
           ;end select
          ENDIF
         ENDIF
       ENDFOR
      ENDIF
     ENDFOR
   ENDFOR
   DECLARE encntrid = f8 WITH protect, noconstant(0.0)
   DECLARE expandidx = i4 WITH protect, noconstant(0)
   DECLARE finclasscnt = i4 WITH protect, noconstant(0)
   DECLARE medicareplansearched = i2 WITH protect, noconstant(false)
   DECLARE priorityseqmodifier = i4 WITH protect, noconstant(- (1))
   DECLARE cs_20790 = i4 WITH protect, constant(20790)
   DECLARE cs20790_priority_seq_cd = f8 WITH protect, constant(getcodevalue(20790,"PRIORITY_SEQ",0))
   RECORD mspqfinclass(
     1 medicarefinclasslist[*]
       2 finclasscd = f8
   ) WITH protect
   IF (cs20790_priority_seq_cd > 0.0)
    SELECT INTO "nl:"
     FROM code_value_extension cve
     WHERE cve.code_value=cs20790_priority_seq_cd
      AND cve.field_name="OPTION"
      AND cve.code_set=cs_20790
     DETAIL
      IF (trim(cve.field_value,3)="1")
       priorityseqmodifier = 0
      ENDIF
     WITH nocounter
    ;end select
   ENDIF
   FOR (lidx = 1 TO porigsize)
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
     SET hqual = uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
       SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
       IF ((requestparamgroups->objarray[lidx].encounterid > 0.0))
        SET encntrid = requestparamgroups->objarray[lidx].encounterid
       ELSEIF ((requestparamgroups->objarray[lidx].pftencntrid > 0.0))
        SELECT INTO "nl:"
         FROM pft_encntr pe
         WHERE (pe.pft_encntr_id=requestparamgroups->objarray[lidx].pftencntrid)
          AND pe.active_ind=true
         DETAIL
          encntrid = pe.encntr_id
         WITH nocounter
        ;end select
       ENDIF
       IF (encntrid > 0.0)
        SELECT INTO "nl:"
         est_fin_resp_null_ind = nullind(e.est_financial_resp_amt)
         FROM encounter e
         WHERE e.encntr_id=encntrid
         DETAIL
          IF (est_fin_resp_null_ind=0)
           CALL addtoken_f8(hcontextqual,"T_ESTRESP",e.est_financial_resp_amt)
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_PAYCOLSTAT",e.payment_collection_status_cd),
          CALL addtoken_f8(hcontextqual,"T_ORDRSOURCE",e.order_source_cd),
          CALL addtoken_f8(hcontextqual,"T_ENCFINCLAS",e.financial_class_cd)
          IF (cnvtdatetime(e.est_arrive_dt_tm) > 0)
           CALL addtoken_dq8(hcontextqual,"T_ENCESTARDT",e.est_arrive_dt_tm)
          ENDIF
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM encounter e,
          person p,
          person_patient pp
         PLAN (e
          WHERE e.encntr_id=encntrid)
          JOIN (p
          WHERE p.person_id=e.person_id)
          JOIN (pp
          WHERE pp.person_id=p.person_id
           AND pp.active_ind=true
           AND pp.beg_effective_dt_tm <= cnvtdatetime(sysdate)
           AND pp.end_effective_dt_tm > cnvtdatetime(sysdate))
         DETAIL
          IF (cnvtdatetime(pp.demog_verify_dt_tm) > 0)
           CALL addtoken_dq8(hcontextqual,"T_DEMOVERIFY",pp.demog_verify_dt_tm)
          ENDIF
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM encounter e,
          person p,
          encntr_plan_reltn epr
         PLAN (e
          WHERE e.encntr_id=encntrid)
          JOIN (p
          WHERE p.person_id=e.person_id)
          JOIN (epr
          WHERE epr.encntr_id=e.encntr_id
           AND (epr.priority_seq=(1+ priorityseqmodifier))
           AND epr.active_ind=true
           AND epr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
           AND epr.end_effective_dt_tm > cnvtdatetime(sysdate))
         DETAIL
          CALL addtoken_f8(hcontextqual,"T_ELIGVERIFY",epr.verify_status_cd)
          IF (p.person_id=epr.person_id)
           CALL addtoken_f8(hcontextqual,"T_SELFPAY",1.0)
          ENDIF
          IF (cnvtdatetime(epr.benefit_verify_dt_tm) > 0)
           CALL addtoken_dq8(hcontextqual,"T_BENEFITVER",epr.benefit_verify_dt_tm)
          ENDIF
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM encounter e,
          pm_qst_questionnaire_act pqqa
         PLAN (e
          WHERE e.encntr_id=encntrid)
          JOIN (pqqa
          WHERE pqqa.parent_entity_id=e.encntr_id)
         DETAIL
          CALL addtoken_f8(hcontextqual,"T_MSPQSTATUS",pqqa.status_cd)
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         remaining_covered_days_null_ind = nullind(emm.remaining_covered_days)
         FROM encntr_medicare_mgmt emm
         WHERE emm.encntr_id=encntrid
          AND emm.active_ind=true
         DETAIL
          IF (remaining_covered_days_null_ind=0)
           CALL addtoken_f8(hcontextqual,"T_COVDAYSREM",cnvtreal(emm.remaining_covered_days))
          ENDIF
         WITH nocounter
        ;end select
        CALL addtoken_f8(hcontextqual,"T_AUTH",encntrid)
        CALL addtoken_f8(hcontextqual,"T_MEDNEC",encntrid)
        CALL addtoken_f8(hcontextqual,"T_AUTHOVRDUE",encntrid)
        CALL addtoken_f8(hcontextqual,"T_THRESDATE",encntrid)
        CALL addtoken_f8(hcontextqual,"T_THRESNUM",encntrid)
        SET encntrid = 0.0
        SET expandidx = 0
       ENDIF
     ENDFOR
   ENDFOR
   IF ( NOT (getcontinuousworkflowtokens(prequest,porigsize,pbmencounterids,pbatchsize)))
    RETURN(false)
   ENDIF
   FOR (eidx = 1 TO size(requestparamgroups->objarray,5))
     IF ((requestparamgroups->objarray[eidx].eventid=cs29322_regmodfailur))
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
        FOR (fidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].
         eventparams,5))
          IF (trim(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
           paramkey,3)=reg_mod_fail)
           SET hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1))
           SET hqual = uar_srvgetitem(hobjarray,"qual",0)
           SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
           CALL addtoken_f8(hcontextqual,"T_REGMODFAIL",requestparamgroups->objarray[eidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
          ENDIF
        ENDFOR
      ENDFOR
     ENDIF
   ENDFOR
   FOR (eidx = 1 TO size(requestparamgroups->objarray,5))
     IF ((requestparamgroups->objarray[eidx].eventid=cs29322_collstatupt))
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
        FOR (fidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].
         eventparams,5))
          IF (trim(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
           paramkey,3)="COLLSTATUS")
           SET hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1))
           SET hqual = uar_srvgetitem(hobjarray,"qual",0)
           SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
           CALL addtoken_f8(hcontextqual,"T_COLLSTATUP",requestparamgroups->objarray[eidx].
            eventparamgroup[groupidx].eventparams[fidx].parententityid)
          ENDIF
        ENDFOR
      ENDFOR
     ENDIF
   ENDFOR
   CALL addeditfailuretoken(porigsize)
   IF ( NOT (validate(cs29322_combinesucc)))
    DECLARE cs29322_combinesucc = f8 WITH protect, constant(getcodevalue(29322,"COMBINESUCC",0))
   ENDIF
   IF ( NOT (validate(cs24454_enccombsucc)))
    DECLARE cs24454_enccombsucc = f8 WITH protect, constant(getcodevalue(24454,"ENCCOMBSUCC",0))
   ENDIF
   IF ( NOT (validate(cs24454_fincombsucc)))
    DECLARE cs24454_fincombsucc = f8 WITH protect, constant(getcodevalue(24454,"FINCOMBSUCC",0))
   ENDIF
   IF ( NOT (validate(cs69_recurring)))
    DECLARE cs69_recurring = f8 WITH protect, constant(getcodevalue(69,"RECURRING",0))
   ENDIF
   IF ( NOT (validate(cs18935_pending)))
    DECLARE cs18935_pending = f8 WITH protect, constant(getcodevalue(18935,"PENDING",0))
   ENDIF
   IF ( NOT (validate(cs18935_readysubmit)))
    DECLARE cs18935_readysubmit = f8 WITH protect, constant(getcodevalue(18935,"READYSUBMIT",0))
   ENDIF
   IF ( NOT (validate(cs18935_rejected)))
    DECLARE cs18935_rejected = f8 WITH protect, constant(getcodevalue(18935,"REJECTED",0))
   ENDIF
   IF ( NOT (validate(cs18935_submitted)))
    DECLARE cs18935_submitted = f8 WITH protect, constant(getcodevalue(18935,"SUBMITTED",0))
   ENDIF
   IF ( NOT (validate(cs18935_cnclsbmted)))
    DECLARE cs18935_cnclsbmted = f8 WITH protect, constant(getcodevalue(18935,"CNCLSBMTED",0))
   ENDIF
   IF ( NOT (validate(cs18935_rts_cancel)))
    DECLARE cs18935_rts_cancel = f8 WITH protect, constant(getcodevalue(18935,"RTS CANCEL",0))
   ENDIF
   IF ( NOT (validate(cs18935_copyclaim)))
    DECLARE cs18935_copyclaim = f8 WITH protect, constant(getcodevalue(18935,"COPYCLAIM",0))
   ENDIF
   IF ( NOT (validate(cs18935_converted)))
    DECLARE cs18935_converted = f8 WITH protect, constant(getcodevalue(18935,"CONVERTED",0))
   ENDIF
   IF ( NOT (validate(cs18935_transxovrpay)))
    DECLARE cs18935_transxovrpay = f8 WITH protect, constant(getcodevalue(18935,"TRANSXOVRPAY",0))
   ENDIF
   IF ( NOT (validate(cs18935_transmitted)))
    DECLARE cs18935_transmitted = f8 WITH protect, constant(getcodevalue(18935,"TRANSMITTED",0))
   ENDIF
   IF ( NOT (validate(cs18935_denied)))
    DECLARE cs18935_denied = f8 WITH protect, constant(getcodevalue(18935,"DENIED",0))
   ENDIF
   IF ( NOT (validate(cs18935_deniedreview)))
    DECLARE cs18935_deniedreview = f8 WITH protect, constant(getcodevalue(18935,"DENIEDREVIEW",0))
   ENDIF
   IF ( NOT (validate(cs18935_submitbyasb)))
    DECLARE cs18935_submitbyasb = f8 WITH protect, constant(getcodevalue(18935,"SUBMITBYASB",0))
   ENDIF
   IF ( NOT (validate(cs18935_transbyasb)))
    DECLARE cs18935_transbyasb = f8 WITH protect, constant(getcodevalue(18935,"TRANSBYASB",0))
   ENDIF
   IF ( NOT (validate(cs21749_hcfa_1450)))
    DECLARE cs21749_hcfa_1450 = f8 WITH protect, constant(getcodevalue(21749,"HCFA_1450",0))
   ENDIF
   IF ( NOT (validate(cs21749_hcfa_1500)))
    DECLARE cs21749_hcfa_1500 = f8 WITH protect, constant(getcodevalue(21749,"HCFA_1500",0))
   ENDIF
   IF ( NOT (validate(cs21749_patient_stmt)))
    DECLARE cs21749_patient_stmt = f8 WITH protect, constant(getcodevalue(21749,"PATIENT_STMT",0))
   ENDIF
   IF ( NOT (validate(cs29322_combinefail)))
    DECLARE cs29322_combinefail = f8 WITH protect, constant(getcodevalue(29322,"COMBINEFAIL",0))
   ENDIF
   IF ( NOT (validate(cs24454_enccombfail)))
    DECLARE cs24454_enccombfail = f8 WITH protect, constant(getcodevalue(24454,"ENCCOMBFAIL",0))
   ENDIF
   IF ( NOT (validate(cs24454_fincombfail)))
    DECLARE cs24454_fincombfail = f8 WITH protect, constant(getcodevalue(24454,"FINCOMBFAIL",0))
   ENDIF
   DECLARE fromentityid = f8 WITH protect, noconstant(0)
   DECLARE toentityid = f8 WITH protect, noconstant(0)
   DECLARE actiontypecode = f8 WITH protect, noconstant(0)
   DECLARE toencrecurring = f8 WITH protect, noconstant(0.0)
   DECLARE fromencrecurring = f8 WITH protect, noconstant(0.0)
   DECLARE tostartdate = dq8 WITH protect, noconstant(0.0)
   DECLARE toenddate = dq8 WITH protect, noconstant(0.0)
   DECLARE fromstartdate = dq8 WITH protect, noconstant(0.0)
   DECLARE fromenddate = dq8 WITH protect, noconstant(0.0)
   DECLARE overlapind = i2 WITH protect, noconstant(0)
   DECLARE tostmt = f8 WITH protect, noconstant(0.0)
   DECLARE fromstmt = f8 WITH protect, noconstant(0.0)
   DECLARE toclaim = f8 WITH protect, noconstant(0.0)
   DECLARE fromclaim = f8 WITH protect, noconstant(0.0)
   DECLARE pm_inp_admit_dt_tm() = c20
   FOR (eidx = 1 TO size(requestparamgroups->objarray,5))
     IF ((requestparamgroups->objarray[eidx].eventid IN (cs29322_combinesucc, cs29322_combinefail)))
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
        FOR (fidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].
         eventparams,5))
          IF (trim(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
           paramkey,3)="FROMENTITYID")
           SET fromentityid = requestparamgroups->objarray[eidx].eventparamgroup[groupidx].
           eventparams[fidx].doublevalue
          ENDIF
          IF (trim(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
           paramkey,3)="TOENTITYID")
           SET toentityid = requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[
           fidx].doublevalue
          ENDIF
          IF (trim(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
           paramkey,3)="ACTIONTYPECD")
           SET actiontypecode = requestparamgroups->objarray[eidx].eventparamgroup[groupidx].
           eventparams[fidx].doublevalue
          ENDIF
        ENDFOR
      ENDFOR
      SET hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1))
      SET hqual = uar_srvgetitem(hobjarray,"qual",0)
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(eidx - 1))
      IF (actiontypecode IN (cs24454_enccombsucc, cs24454_enccombfail)
       AND fromentityid > 0.0
       AND toentityid > 0.0)
       SELECT INTO "nl:"
        admit_dt_tm = cnvtdatetimeutc(pm_inp_admit_dt_tm(e.encntr_id,1,sysdate))
        FROM encounter e,
         pft_encntr pe,
         encntr_plan_reltn epr
        PLAN (e
         WHERE e.encntr_id IN (fromentityid, toentityid))
         JOIN (pe
         WHERE pe.encntr_id=e.encntr_id)
         JOIN (epr
         WHERE (epr.encntr_id= Outerjoin(e.encntr_id))
          AND (epr.priority_seq= Outerjoin(1)) )
        HEAD e.encntr_id
         IF (e.encntr_id=fromentityid)
          IF (e.encntr_type_class_cd=cs69_recurring)
           CALL addtoken_f8(hcontextqual,"T_FRRECURR",1.0)
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_FRENCTYPE",e.encntr_type_cd),
          CALL addtoken_f8(hcontextqual,"T_FRPRIMHP",epr.health_plan_id),
          CALL addtoken_f8(hcontextqual,"T_FRENCORG",e.organization_id),
          CALL addtoken_f8(hcontextqual,"T_FRENCBE",pe.billing_entity_id), fromstartdate =
          admit_dt_tm, fromenddate = e.disch_dt_tm
         ELSEIF (e.encntr_id=toentityid)
          IF (e.encntr_type_class_cd=cs69_recurring)
           CALL addtoken_f8(hcontextqual,"T_TORECURR",1.0)
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_TOENCTYPE",e.encntr_type_cd),
          CALL addtoken_f8(hcontextqual,"T_TOPRIMHP",epr.health_plan_id),
          CALL addtoken_f8(hcontextqual,"T_TOENCORG",e.organization_id),
          CALL addtoken_f8(hcontextqual,"T_TOENCBE",pe.billing_entity_id), tostartdate = admit_dt_tm,
          toenddate = e.disch_dt_tm
         ENDIF
        WITH nocounter
       ;end select
       IF ( NOT (cnvtdate(fromenddate) IN (0.0, null))
        AND cnvtdate(fromenddate) < cnvtdate(tostartdate))
        SET overlapind = false
       ELSEIF ( NOT (cnvtdate(toenddate) IN (0.0, null))
        AND cnvtdate(fromstartdate) > cnvtdate(toenddate))
        SET overlapind = false
       ELSE
        SET overlapind = true
       ENDIF
       IF (overlapind=true)
        CALL addtoken_f8(hcontextqual,"T_OVRLPDOS",1.0)
       ENDIF
       IF (actiontypecode=cs24454_enccombfail)
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          benefit_order bo,
          bo_hp_reltn bhr,
          bill_reltn br,
          bill_rec b
         PLAN (pe
          WHERE pe.encntr_id IN (fromentityid, toentityid))
          JOIN (bo
          WHERE bo.pft_encntr_id=pe.pft_encntr_id
           AND bo.active_ind=true)
          JOIN (bhr
          WHERE bo.benefit_order_id=bhr.benefit_order_id
           AND bhr.active_ind=true)
          JOIN (br
          WHERE bhr.bo_hp_reltn_id=br.parent_entity_id
           AND br.parent_entity_name="BO_HP_RELTN"
           AND br.active_ind=true)
          JOIN (b
          WHERE br.corsp_activity_id=b.corsp_activity_id
           AND b.active_ind=true
           AND ((b.bill_type_cd IN (cs21749_hcfa_1500, cs21749_hcfa_1450)
           AND b.bill_status_cd IN (cs18935_pending, cs18935_readysubmit, cs18935_rejected,
          cs18935_submitted, cs18935_cnclsbmted,
          cs18935_rts_cancel, cs18935_copyclaim, cs18935_converted, cs18935_transxovrpay,
          cs18935_transmitted,
          cs18935_denied, cs18935_deniedreview, cs18935_submitbyasb, cs18935_transbyasb)) OR (b
          .bill_type_cd=cs21749_patient_stmt
           AND b.submit_dt_tm != null)) )
         DETAIL
          IF (pe.encntr_id=fromentityid)
           IF (b.bill_type_cd IN (cs21749_hcfa_1500, cs21749_hcfa_1450))
            fromclaim = 1.0
           ENDIF
           IF (b.bill_type_cd=cs21749_patient_stmt)
            fromstmt = 1.0
           ENDIF
          ELSEIF (pe.encntr_id=toentityid)
           IF (b.bill_type_cd IN (cs21749_hcfa_1500, cs21749_hcfa_1450))
            toclaim = 1.0
           ENDIF
           IF (b.bill_type_cd=cs21749_patient_stmt)
            tostmt = 1.0
           ENDIF
          ENDIF
         WITH nocounter
        ;end select
       ELSE
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          benefit_order bo,
          bo_hp_reltn bhr,
          bill_reltn br,
          bill_rec b
         PLAN (pe
          WHERE pe.encntr_id=toentityid)
          JOIN (bo
          WHERE bo.pft_encntr_id=pe.pft_encntr_id
           AND bo.active_ind=true
           AND  NOT (bo.previous_pft_encntr_id IN (
          (SELECT
           pe2.pft_encntr_id
           FROM pft_encntr pe2
           WHERE pe2.encntr_id=fromentityid))))
          JOIN (bhr
          WHERE bo.benefit_order_id=bhr.benefit_order_id
           AND bhr.active_ind=true)
          JOIN (br
          WHERE bhr.bo_hp_reltn_id=br.parent_entity_id
           AND br.parent_entity_name="BO_HP_RELTN"
           AND br.active_ind=true)
          JOIN (b
          WHERE br.corsp_activity_id=b.corsp_activity_id
           AND b.active_ind=true
           AND b.bill_type_cd IN (cs21749_hcfa_1500, cs21749_hcfa_1450)
           AND b.bill_status_cd IN (cs18935_pending, cs18935_readysubmit, cs18935_rejected,
          cs18935_submitted, cs18935_cnclsbmted,
          cs18935_rts_cancel, cs18935_copyclaim, cs18935_converted, cs18935_transxovrpay,
          cs18935_transmitted,
          cs18935_denied, cs18935_deniedreview, cs18935_submitbyasb, cs18935_transbyasb))
         HEAD pe.encntr_id
          toclaim = 1.0
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          benefit_order bo,
          bo_hp_reltn bhr,
          bill_reltn br,
          bill_rec b
         PLAN (pe
          WHERE pe.encntr_id=toentityid)
          JOIN (bo
          WHERE bo.pft_encntr_id=pe.pft_encntr_id
           AND bo.active_ind=true
           AND bo.previous_pft_encntr_id IN (
          (SELECT
           pe2.pft_encntr_id
           FROM pft_encntr pe2
           WHERE pe2.encntr_id=fromentityid)))
          JOIN (bhr
          WHERE bo.benefit_order_id=bhr.benefit_order_id
           AND bhr.active_ind=true)
          JOIN (br
          WHERE bhr.bo_hp_reltn_id=br.parent_entity_id
           AND br.parent_entity_name="BO_HP_RELTN"
           AND br.active_ind=true)
          JOIN (b
          WHERE br.corsp_activity_id=b.corsp_activity_id
           AND b.active_ind=true
           AND b.bill_type_cd IN (cs21749_hcfa_1500, cs21749_hcfa_1450)
           AND b.bill_status_cd IN (cs18935_pending, cs18935_readysubmit, cs18935_rejected,
          cs18935_submitted, cs18935_cnclsbmted,
          cs18935_rts_cancel, cs18935_copyclaim, cs18935_converted, cs18935_transxovrpay,
          cs18935_transmitted,
          cs18935_denied, cs18935_deniedreview, cs18935_submitbyasb, cs18935_transbyasb))
         HEAD pe.encntr_id
          fromclaim = 1.0
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          pft_combine_log pcl
         PLAN (pe
          WHERE pe.encntr_id=fromentityid)
          JOIN (pcl
          WHERE pcl.from_xxx_id=pe.encntr_id
           AND pcl.to_xxx_id IN (
          (SELECT
           p.encntr_id
           FROM pft_encntr p
           WHERE p.encntr_id=toentityid))
           AND pcl.resolved_dt_tm > pe.last_stmt_dt_tm)
         HEAD pe.encntr_id
          fromstmt = 1.0
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          pft_combine_log pcl
         PLAN (pe
          WHERE pe.encntr_id=toentityid)
          JOIN (pcl
          WHERE pcl.from_xxx_id IN (
          (SELECT
           p.encntr_id
           FROM pft_encntr p
           WHERE p.encntr_id=fromentityid))
           AND pcl.to_xxx_id=pe.encntr_id
           AND pcl.resolved_dt_tm > pe.last_stmt_dt_tm)
         HEAD pe.encntr_id
          tostmt = 1.0
         WITH nocounter
        ;end select
       ENDIF
       CALL addtoken_f8(hcontextqual,"T_FRSTMTXSTS",fromstmt)
       CALL addtoken_f8(hcontextqual,"T_FRCLMXSTS",fromclaim)
       CALL addtoken_f8(hcontextqual,"T_TOSTMTXSTS",tostmt)
       CALL addtoken_f8(hcontextqual,"T_TOCLMXSTS",toclaim)
      ELSEIF (actiontypecode IN (cs24454_fincombsucc, cs24454_fincombfail)
       AND fromentityid > 0.0
       AND toentityid > 0.0)
       SELECT INTO "nl:"
        FROM pft_encntr pe,
         encounter e,
         encntr_plan_reltn epr
        PLAN (pe
         WHERE pe.pft_encntr_id IN (fromentityid, toentityid))
         JOIN (e
         WHERE e.encntr_id=pe.encntr_id)
         JOIN (epr
         WHERE (epr.encntr_id= Outerjoin(e.encntr_id))
          AND (epr.priority_seq= Outerjoin(1)) )
        HEAD pe.pft_encntr_id
         IF (pe.pft_encntr_id=fromentityid)
          IF (e.encntr_type_class_cd=cs69_recurring)
           CALL addtoken_f8(hcontextqual,"T_FRRECURR",1.0)
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_FRENCTYPE",e.encntr_type_cd),
          CALL addtoken_f8(hcontextqual,"T_FRPRIMHP",epr.health_plan_id),
          CALL addtoken_f8(hcontextqual,"T_FRENCORG",e.organization_id),
          CALL addtoken_f8(hcontextqual,"T_FRENCBE",pe.billing_entity_id), fromstartdate = pe
          .beg_effective_dt_tm, fromenddate = pe.end_effective_dt_tm
         ELSEIF (pe.pft_encntr_id=toentityid)
          IF (e.encntr_type_class_cd=cs69_recurring)
           CALL addtoken_f8(hcontextqual,"T_TORECURR",1.0)
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_TOENCTYPE",e.encntr_type_cd),
          CALL addtoken_f8(hcontextqual,"T_TOPRIMHP",epr.health_plan_id),
          CALL addtoken_f8(hcontextqual,"T_TOENCORG",e.organization_id),
          CALL addtoken_f8(hcontextqual,"T_TOENCBE",pe.billing_entity_id), tostartdate = pe
          .beg_effective_dt_tm, toenddate = pe.end_effective_dt_tm
         ENDIF
        WITH nocounter
       ;end select
       IF ( NOT (cnvtdate(fromenddate) IN (0.0, null))
        AND cnvtdate(fromenddate) < cnvtdate(tostartdate))
        SET overlapind = false
       ELSEIF ( NOT (cnvtdate(toenddate) IN (0.0, null))
        AND cnvtdate(fromstartdate) > cnvtdate(toenddate))
        SET overlapind = false
       ELSE
        SET overlapind = true
       ENDIF
       IF (overlapind=true)
        CALL addtoken_f8(hcontextqual,"T_OVRLPDOS",1.0)
       ENDIF
       IF (actiontypecode=cs24454_fincombfail)
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          benefit_order bo,
          bo_hp_reltn bhr,
          bill_reltn br,
          bill_rec b
         PLAN (pe
          WHERE pe.pft_encntr_id IN (fromentityid, toentityid))
          JOIN (bo
          WHERE bo.pft_encntr_id=pe.pft_encntr_id
           AND bo.active_ind=true)
          JOIN (bhr
          WHERE bo.benefit_order_id=bhr.benefit_order_id
           AND bhr.active_ind=true)
          JOIN (br
          WHERE bhr.bo_hp_reltn_id=br.parent_entity_id
           AND br.parent_entity_name="BO_HP_RELTN"
           AND br.active_ind=true)
          JOIN (b
          WHERE br.corsp_activity_id=b.corsp_activity_id
           AND b.active_ind=true
           AND ((b.bill_type_cd IN (cs21749_hcfa_1500, cs21749_hcfa_1450)
           AND b.bill_status_cd IN (cs18935_pending, cs18935_readysubmit, cs18935_rejected,
          cs18935_submitted, cs18935_cnclsbmted,
          cs18935_rts_cancel, cs18935_copyclaim, cs18935_converted, cs18935_transxovrpay,
          cs18935_transmitted,
          cs18935_denied, cs18935_deniedreview, cs18935_submitbyasb, cs18935_transbyasb)) OR (b
          .bill_type_cd=cs21749_patient_stmt
           AND b.submit_dt_tm != null)) )
         DETAIL
          IF (pe.encntr_id=fromentityid)
           IF (b.bill_type_cd IN (cs21749_hcfa_1500, cs21749_hcfa_1450))
            fromclaim = 1.0
           ENDIF
           IF (b.bill_type_cd=cs21749_patient_stmt)
            fromstmt = 1.0
           ENDIF
          ELSEIF (pe.encntr_id=toentityid)
           IF (b.bill_type_cd IN (cs21749_hcfa_1500, cs21749_hcfa_1450))
            toclaim = 1.0
           ENDIF
           IF (b.bill_type_cd=cs21749_patient_stmt)
            tostmt = 1.0
           ENDIF
          ENDIF
         WITH nocounter
        ;end select
       ELSE
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          benefit_order bo,
          bo_hp_reltn bhr,
          bill_reltn br,
          bill_rec b
         PLAN (pe
          WHERE pe.pft_encntr_id=toentityid)
          JOIN (bo
          WHERE bo.pft_encntr_id=pe.pft_encntr_id)
          JOIN (bhr
          WHERE bhr.benefit_order_id=bo.benefit_order_id
           AND bhr.active_ind=true)
          JOIN (br
          WHERE bhr.bo_hp_reltn_id=br.parent_entity_id
           AND br.parent_entity_name="BO_HP_RELTN"
           AND br.active_ind=true)
          JOIN (b
          WHERE b.corsp_activity_id=br.corsp_activity_id
           AND b.active_ind=true
           AND b.bill_type_cd IN (cs21749_hcfa_1500, cs21749_hcfa_1450)
           AND b.bill_status_cd IN (cs18935_pending, cs18935_readysubmit, cs18935_rejected,
          cs18935_submitted, cs18935_cnclsbmted,
          cs18935_rts_cancel, cs18935_copyclaim, cs18935_converted, cs18935_transxovrpay,
          cs18935_transmitted,
          cs18935_denied, cs18935_deniedreview, cs18935_submitbyasb, cs18935_transbyasb))
         HEAD bo.previous_pft_encntr_id
          IF (bo.previous_pft_encntr_id=fromentityid)
           fromclaim = 1.0
          ELSEIF (bo.previous_pft_encntr_id != fromentityid)
           toclaim = 1.0
          ENDIF
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          pft_combine_log pcl
         PLAN (pe
          WHERE pe.pft_encntr_id=fromentityid)
          JOIN (pcl
          WHERE pcl.from_xxx_id=pe.pft_encntr_id
           AND pcl.to_xxx_id=toentityid
           AND pcl.resolved_dt_tm > pe.last_stmt_dt_tm)
         HEAD pe.pft_encntr_id
          fromstmt = 1.0
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          pft_combine_log pcl
         PLAN (pe
          WHERE pe.pft_encntr_id=toentityid)
          JOIN (pcl
          WHERE pcl.from_xxx_id=fromentityid
           AND pcl.to_xxx_id=pe.pft_encntr_id
           AND pcl.resolved_dt_tm > pe.last_stmt_dt_tm)
         HEAD pe.pft_encntr_id
          tostmt = 1.0
         WITH nocounter
        ;end select
       ENDIF
       CALL addtoken_f8(hcontextqual,"T_FRSTMTXSTS",fromstmt)
       CALL addtoken_f8(hcontextqual,"T_FRCLMXSTS",fromclaim)
       CALL addtoken_f8(hcontextqual,"T_TOSTMTXSTS",tostmt)
       CALL addtoken_f8(hcontextqual,"T_TOCLMXSTS",toclaim)
      ENDIF
     ENDIF
   ENDFOR
   DECLARE pftencntidssacounter = i4 WITH protect, noconstant(0)
   SET stat = initrec(pft_encntr_ids)
   IF (size(pbmencounterids->ids,5) > 0)
    SELECT INTO "nl:"
     sortval = evaluate(cv.code_value,cs4554012_specialauth_patient_desig_type_cd,1,0)
     FROM pft_encntr pe,
      encounter e,
      encntr_code_value_r evc,
      code_value_group cvg,
      code_value cv,
      dummyt d
     PLAN (pe
      WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
       eidx].pftencntrid)
       AND pe.active_ind=true)
      JOIN (e
      WHERE e.encntr_id=pe.encntr_id
       AND e.active_ind=true)
      JOIN (d)
      JOIN (evc
      WHERE evc.encntr_id=e.encntr_id
       AND evc.active_ind=true)
      JOIN (cvg
      WHERE cvg.child_code_value=evc.code_value)
      JOIN (cv
      WHERE cv.code_value=cvg.parent_code_value
       AND cv.code_set=codeset_4554012
       AND cv.active_ind=true)
     ORDER BY pe.pft_encntr_id, sortval DESC
     HEAD pe.pft_encntr_id
      specialauthind = false
     DETAIL
      IF (evc.code_value > 0
       AND cv.code_value > 0
       AND cv.code_set=codeset_4554012)
       cidx = locateval(lidx,1,size(pbmencounterids->ids,5),pe.pft_encntr_id,pbmencounterids->ids[
        lidx].pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
       uar_srvgetitem(hobjarray,"qual",0)
       FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
         hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
         CALL addtoken_f8(hcontextqual,"T_DESIGTYPE",cv.code_value)
         IF (cv.code_value=cs4554012_specialauth_patient_desig_type_cd
          AND specialauthind=false)
          CALL addtoken_f8(hcontextqual,"T_SPECAUTH",1.0), specialauthind = true
         ENDIF
       ENDFOR
      ENDIF
     FOOT  pe.pft_encntr_id
      IF (specialauthind != true)
       pftencntidssacounter += 1, stat = alterlist(pft_encntr_ids->arr_ids,pftencntidssacounter),
       pft_encntr_ids->arr_ids[pftencntidssacounter].pft_encntr_id = pe.pft_encntr_id
      ENDIF
     WITH outerjoin = d
    ;end select
   ENDIF
   IF (size(pft_encntr_ids->arr_ids,5) > 0)
    CALL checkallchargesspecialauthorityforencounter(pft_encntr_ids)
   ENDIF
   SET stat = initrec(pft_encntr_ids)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     pft_encntr pe
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (pe
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->ids[
      eidx].pftencntrid))
    ORDER BY pe.pft_encntr_id
    HEAD pe.pft_encntr_id
     cidx = locateval(lidx,1,porigsize,pe.pft_encntr_id,pbmencounterids->ids[lidx].pftencntrid)
     IF (cidx > 0)
      hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvgetitem(hobjarray,
       "qual",0)
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
       IF (pe.statement_cycle_id IN (0.0, null))
        CALL addtoken_f8(hcontextqual,"T_ENCSTMTCYC",0.0)
       ELSE
        CALL addtoken_f8(hcontextqual,"T_ENCSTMTCYC",1.0)
       ENDIF
      ENDFOR
     ENDIF
    WITH nocounter
   ;end select
   FOR (lidx = 1 TO porigsize)
     SET hascollectionsuppressionhold = false
     SET hasstatementsuppressionhold = false
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       pe_status_reason psr
      PLAN (pe
       WHERE (pe.pft_encntr_id=pbmencounterids->ids[lidx].pftencntrid)
        AND pe.pft_encntr_id > 0.0
        AND pe.active_ind=true)
       JOIN (psr
       WHERE psr.pft_encntr_id=pe.pft_encntr_id
        AND psr.active_ind=true
        AND ((psr.coll_suppress_ind=true) OR (psr.stmt_suppress_ind=true))
        AND psr.end_effective_dt_tm > cnvtdatetime(sysdate))
      ORDER BY psr.pe_status_reason_id
      HEAD psr.pe_status_reason_id
       IF (psr.coll_suppress_ind=true)
        hascollectionsuppressionhold = true
       ENDIF
       IF (psr.stmt_suppress_ind=true)
        hasstatementsuppressionhold = true
       ENDIF
      WITH nocounter
     ;end select
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
     SET hqual = uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
       SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
       FOR (eidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams,
        5))
         IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[eidx].
          paramkey,3)=autoerr_type)
          CALL addtoken_vc(hcontextqual,aae_token,requestparamgroups->objarray[lidx].eventparamgroup[
           groupidx].eventparams[eidx].stringvalue)
         ENDIF
       ENDFOR
       IF (hascollectionsuppressionhold)
        CALL addtoken_f8(hcontextqual,"T_ENCCOLLHLD",1.0)
       ELSE
        CALL addtoken_f8(hcontextqual,"T_ENCCOLLHLD",0.0)
       ENDIF
       IF (hasstatementsuppressionhold)
        CALL addtoken_f8(hcontextqual,"T_STMTSUPHLD",1.0)
       ELSE
        CALL addtoken_f8(hcontextqual,"T_STMTSUPHLD",0.0)
       ENDIF
     ENDFOR
   ENDFOR
   IF (validate(debug,false)=true)
    CALL echorecord(requestparamgroups)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getinsurancebalancetokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   CALL logmessage("getInsuranceBalanceTokens","Entering...",log_debug)
   DECLARE startidx = i4 WITH protect, noconstant(1)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE ccnt = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hperformqual = i4 WITH protect, noconstant(0)
   DECLARE hverifyqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE fidx = i4 WITH protect, noconstant(0)
   DECLARE iscovered = i2 WITH protect, noconstant(0)
   DECLARE groupidx = i4 WITH protect, noconstant(0)
   DECLARE qualcnt = i4 WITH protect, noconstant(0)
   DECLARE daystoappt = f8 WITH protect, noconstant(0)
   DECLARE rec_json = vc WITH protect, noconstant("")
   DECLARE incollectionind = i2 WITH protect, noconstant(0)
   DECLARE priinsbalamt = f8 WITH protect, noconstant(0.0)
   DECLARE baddebtamount = f8 WITH protect, noconstant(0.0)
   DECLARE netguarbal = f8 WITH protect, noconstant(0.0)
   DECLARE chrgbal = f8 WITH protect, noconstant(0.0)
   DECLARE balancelistsize = i4 WITH protect, noconstant(0)
   DECLARE pftencntrlistsize = i4 WITH protect, noconstant(0)
   DECLARE familybaddebtamt = f8 WITH protect, noconstant(0.0)
   DECLARE daysfrmclm = f8 WITH protect, noconstant(0)
   DECLARE chrgmodchngind = i2 WITH protect, noconstant(false)
   DECLARE chrgmodlistidx = i4 WITH protect, noconstant(0)
   DECLARE hasvariancewi = i2 WITH protect, noconstant(false)
   DECLARE finencntrbal = f8 WITH protect, noconstant(0.0)
   DECLARE tempidx = i4 WITH protect, noconstant(0)
   DECLARE loopidx = i4 WITH protect, noconstant(0)
   DECLARE multiguarantorind = i2 WITH protect, noconstant(false)
   DECLARE servicefromdate = dq8 WITH protect, noconstant(0.0)
   DECLARE servicetodate = dq8 WITH protect, noconstant(0.0)
   DECLARE dayspassed = f8 WITH protect, noconstant(0.0)
   DECLARE latechrgamt = f8 WITH protect, noconstant(0.0)
   DECLARE claimadded = i2 WITH protect, noconstant(false)
   DECLARE latechrgamtperc = f8 WITH protect, noconstant(0.0)
   DECLARE isencntrprsnreltn = i2 WITH protect, noconstant(false)
   DECLARE primaryguarantorseq = i4 WITH protect, noconstant(0)
   DECLARE specialauthind = i2 WITH protect, noconstant(false)
   DECLARE balanceind = i2 WITH protect, noconstant(false)
   DECLARE balanceidsforsc = i4 WITH protect, noconstant(0)
   DECLARE balanceidsforsa = i4 WITH protect, noconstant(0)
   IF ( NOT (validate(currentchargemodlist)))
    RECORD currentchargemodlist(
      1 parentchargeid = f8
      1 chargemodcnt = i4
      1 chargemods[*]
        2 modifier_id = f8
        2 modifier = vc
    ) WITH protect
   ENDIF
   IF ( NOT (validate(previouschargemodlist)))
    RECORD previouschargemodlist(
      1 chargemodcnt = i4
      1 chargemods[*]
        2 modifier_id = f8
        2 modifier = vc
    ) WITH protect
   ENDIF
   RECORD tempdyntokenrec(
     1 objarray[*]
       2 bo_hp_reltn_id = f8
       2 json_data = vc
       2 data_record
         3 qual_cnt = i4
         3 qual[*]
           4 data_type_meaning = vc
           4 double_value = f8
           4 int_value = i4
           4 string_value = vc
   ) WITH protect
   RECORD data_rec(
     1 qual_cnt = i4
     1 qual[*]
       2 data_type_meaning = vc
       2 double_value = f8
       2 int_value = i4
       2 string_value = vc
   ) WITH protect
   RECORD balance_ids(
     1 bo_hp_reltn_ids[*]
       2 bo_hp_relation_id = f8
       2 serviceconnectindforbalance = vc
       2 specialauthorityindforbalance = i2
   ) WITH protect
   IF ( NOT (validate(bhr_entity)))
    DECLARE bhr_entity = vc WITH protect, constant("BO_HP_RELTN")
   ENDIF
   IF ( NOT (validate(pc_entity)))
    DECLARE pc_entity = vc WITH protect, constant("PFT_CHARGE")
   ENDIF
   IF ( NOT (validate(late_chrg)))
    DECLARE late_chrg = vc WITH protect, constant("LATECHARGE")
   ENDIF
   IF ( NOT (validate(cs24451_cancelled_cd)))
    DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
   ENDIF
   IF ( NOT (validate(cs24451_invalid_cd)))
    DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
   ENDIF
   IF ( NOT (validate(cs13028_debit)))
    DECLARE cs13028_debit = f8 WITH protect, constant(getcodevalue(13028,"DR",0))
   ENDIF
   IF ( NOT (validate(cs13028_credit)))
    DECLARE cs13028_credit = f8 WITH protect, constant(getcodevalue(13028,"CR",0))
   ENDIF
   IF ( NOT (validate(cs29322_applyhold)))
    DECLARE cs29322_applyhold = f8 WITH protect, constant(getcodevalue(29322,"APPLYHOLD",0))
   ENDIF
   IF ( NOT (validate(cs29322_relhold)))
    DECLARE cs29322_relhold = f8 WITH protect, constant(getcodevalue(29322,"RELHOLD",0))
   ENDIF
   IF ( NOT (validate(cs29322_aplyactioncd)))
    DECLARE cs29322_aplyactioncd = f8 WITH protect, constant(getcodevalue(29322,"APLYACTIONCD",0))
   ENDIF
   IF ( NOT (validate(cs29322_adjposted)))
    DECLARE cs29322_adjposted = f8 WITH protect, constant(getcodevalue(29322,"ADJPOSTED",0))
   ENDIF
   IF ( NOT (validate(cs29322_issueidentified)))
    DECLARE cs29322_issueidentified = f8 WITH protect, constant(getcodevalue(29322,"ISSUEIDENTFY",0))
   ENDIF
   IF ( NOT (validate(cs29322_denialposted)))
    DECLARE cs29322_denialposted = f8 WITH protect, constant(getcodevalue(29322,"DENIALPOSTED",0))
   ENDIF
   IF ( NOT (validate(cs29322_payposted)))
    DECLARE cs29322_payposted = f8 WITH protect, constant(getcodevalue(29322,"PAYPOSTED",0))
   ENDIF
   IF ( NOT (validate(cs29322_creditbal)))
    DECLARE cs29322_creditbal = f8 WITH protect, constant(getcodevalue(29322,"CREDITBAL",0))
   ENDIF
   IF ( NOT (validate(cs29322_latechrgpost)))
    DECLARE cs29322_latechrgpost = f8 WITH protect, constant(getcodevalue(29322,"LATECHRGPOST",0))
   ENDIF
   IF ( NOT (validate(cs14250_patient)))
    DECLARE cs14250_patient = f8 WITH protect, constant(getcodevalue(14250,"PATIENT",0))
   ENDIF
   IF ( NOT (validate(cs19049_family_bill)))
    DECLARE cs19049_family_bill = f8 WITH protect, constant(getcodevalue(19049,"FAMILY BILL",2))
   ENDIF
   IF ( NOT (validate(cs351_defguar)))
    DECLARE cs351_defguar = f8 WITH protect, constant(getcodevalue(351,"DEFGUAR",2))
   ENDIF
   IF ( NOT (validate(cs13019_billcode)))
    DECLARE cs13019_billcode = f8 WITH protect, constant(getcodevalue(13019,"BILL CODE",0))
   ENDIF
   IF ( NOT (validate(cs29322_varcreated_cd)))
    DECLARE cs29322_varcreated_cd = f8 WITH protect, constant(getcodevalue(29322,"VARCREATE",0))
   ENDIF
   IF ( NOT (validate(cs13028_dr_cd)))
    DECLARE cs13028_dr_cd = f8 WITH protect, constant(getcodevalue(13028,"DR",0))
   ENDIF
   IF ( NOT (validate(cs13028_cr_cd)))
    DECLARE cs13028_cr_cd = f8 WITH protect, constant(getcodevalue(13028,"CR",0))
   ENDIF
   IF ( NOT (validate(debit_late_chrg)))
    DECLARE debit_late_chrg = i2 WITH protect, constant(1)
   ENDIF
   IF ( NOT (validate(manual_late_chrg)))
    DECLARE manual_late_chrg = i2 WITH protect, constant(5)
   ENDIF
   IF ( NOT (validate(credit_late_chrg)))
    DECLARE credit_late_chrg = i2 WITH protect, constant(7)
   ENDIF
   IF ( NOT (validate(cs352_guarantor)))
    DECLARE cs352_guarantor = f8 WITH protect, constant(getcodevalue(352,"GUARANTOR",0))
   ENDIF
   IF ( NOT (validate(cs4003348_svcconnect_yes_cd)))
    DECLARE cs4003348_svcconnect_yes_cd = f8 WITH protect, constant(getcodevalue(4003348,"YES",0))
   ENDIF
   IF ( NOT (validate(cs4003348_svcconnect_no_cd)))
    DECLARE cs4003348_svcconnect_no_cd = f8 WITH protect, constant(getcodevalue(4003348,"NO",0))
   ENDIF
   IF ( NOT (validate(cs13019_other_cd)))
    DECLARE cs13019_other_cd = f8 WITH noconstant(getcodevalue(13019,"OTHER",0))
   ENDIF
   SET stat = initrec(tempdyntokenrec)
   SELECT INTO "nl:"
    FROM bo_hp_reltn bhr,
     health_plan hp,
     benefit_order bo,
     pft_encntr pe,
     encounter e,
     billing_entity be,
     benefit_order bo2,
     bo_hp_reltn bhr2,
     health_plan hp2
    PLAN (bhr
     WHERE expand(eidx,1,pbatchsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[eidx].
      insurancebalanceid)
      AND bhr.active_ind=true)
     JOIN (hp
     WHERE hp.health_plan_id=bhr.health_plan_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id)
     JOIN (be
     WHERE be.billing_entity_id=pe.billing_entity_id)
     JOIN (bo2
     WHERE bo2.pft_encntr_id=pe.pft_encntr_id
      AND bo2.active_ind=true)
     JOIN (bhr2
     WHERE bhr2.benefit_order_id=bo2.benefit_order_id
      AND bhr2.active_ind=true)
     JOIN (hp2
     WHERE hp2.health_plan_id=bhr2.health_plan_id)
    ORDER BY pe.pft_encntr_id, bhr2.bo_hp_reltn_id
    HEAD pe.pft_encntr_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[
      lidx].insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvadditem(hqual,"context_qual")
       IF (((pe.recur_ind != 0) OR (e.disch_dt_tm != 0)) )
        IF ( NOT (calculateservicedatesforencounter(e.reg_dt_tm,e.disch_dt_tm,pe.recur_current_month,
         pe.recur_current_year,servicefromdate,
         servicetodate)))
         CALL echo(build("Failed to calculate service dates for encounter [",pe.pft_encntr_id,"]"))
        ENDIF
        IF (servicetodate != 0)
         dayspassed = datetimediff(cnvtdatetime(curdate,curtime),servicetodate),
         CALL addtoken_f8(hcontextqual,"T_DPDISCHRG",cnvtreal(dayspassed))
        ENDIF
       ENDIF
       CALL addtoken_f8(hcontextqual,"T_CUSTOM",bhr.bo_hp_reltn_id),
       CALL addtoken_f8(hcontextqual,"T_HPSEQUENCE",cnvtreal(bhr.priority_seq))
       IF (bhr.health_plan_id > 0.0)
        CALL addtoken_f8(hcontextqual,"T_HEALTHPLAN",bhr.health_plan_id)
       ENDIF
       IF (hp.financial_class_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_FINCLASS",hp.financial_class_cd)
       ENDIF
       IF (pe.billing_entity_id > 0.0)
        CALL addtoken_f8(hcontextqual,"T_BILLENTITY",pe.billing_entity_id)
       ENDIF
       IF (be.parent_be_id > 0.0)
        CALL addtoken_f8(hcontextqual,"T_BETYPE",1.0)
       ELSE
        CALL addtoken_f8(hcontextqual,"T_BETYPE",0.0)
       ENDIF
       IF (e.encntr_type_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_ENCTYPE",e.encntr_type_cd)
       ENDIF
       IF (e.encntr_type_class_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_ENCTYPECLS",e.encntr_type_class_cd)
       ENDIF
       IF (e.accommodation_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_ACCOMCODE",e.accommodation_cd)
       ENDIF
       IF (bhr.fin_class_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_CURRFC",bhr.fin_class_cd)
       ENDIF
       baddebtamount = (pe.bad_debt_balance * evaluate(pe.bad_debt_bal_dr_cr_flag,2,- (1.0),1.0,1.0)),
       CALL addtoken_f8(hcontextqual,"T_BADDEBTAMT",baddebtamount)
       IF (((bo.bo_status_cd=cs24451_invalid_cd) OR (bo.bo_status_cd=cs24451_cancelled_cd)) )
        CALL addtoken_f8(hcontextqual,"T_BALSTATUS",bo.bo_status_cd)
       ELSE
        CALL addtoken_f8(hcontextqual,"T_BALSTATUS",bhr.bo_hp_status_cd)
       ENDIF
     ENDFOR
    HEAD bhr2.bo_hp_reltn_id
     IF ( NOT (bo2.bo_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd))
      AND  NOT (bhr2.bo_hp_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd)))
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
        hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
        IF (bhr2.priority_seq=1
         AND bhr2.health_plan_id > 0.0)
         CALL addtoken_f8(hcontextqual,"T_PRMHLTHPLN",bhr2.health_plan_id),
         CALL addtoken_f8(hcontextqual,"T_PRMPAYER",bhr2.payor_org_id),
         CALL addtoken_f8(hcontextqual,"T_PRIFINCLS",hp2.financial_class_cd)
        ENDIF
        IF (bhr2.priority_seq=2
         AND bhr2.health_plan_id > 0.0)
         CALL addtoken_f8(hcontextqual,"T_SECHLTHPLN",bhr2.health_plan_id),
         CALL addtoken_f8(hcontextqual,"T_SECPAYER",bhr2.payor_org_id),
         CALL addtoken_f8(hcontextqual,"T_SECFNCLASS",hp2.financial_class_cd)
        ENDIF
        IF (bhr2.priority_seq=3
         AND bhr2.health_plan_id > 0.0)
         CALL addtoken_f8(hcontextqual,"T_TERHLTHPLN",bhr2.health_plan_id),
         CALL addtoken_f8(hcontextqual,"T_TERFNCLASS",hp2.financial_class_cd)
        ENDIF
      ENDFOR
      tempidx = locateval(lidx,1,size(tempdyntokenrec->objarray,5),bhr2.bo_hp_reltn_id,
       tempdyntokenrec->objarray[lidx].bo_hp_reltn_id)
      IF (tempidx=0)
       tempidx = (size(tempdyntokenrec->objarray,5)+ 1), stat = alterlist(tempdyntokenrec->objarray,
        tempidx), tempdyntokenrec->objarray[tempidx].bo_hp_reltn_id = bhr2.bo_hp_reltn_id
      ENDIF
      IF (bhr2.health_plan_id > 0.0)
       datrecidx = locateval(lidx,1,size(tempdyntokenrec->objarray[tempidx].data_record.qual,5),
        "health_plan",tempdyntokenrec->objarray[tempidx].data_record.qual[lidx].data_type_meaning,
        bhr2.health_plan_id,tempdyntokenrec->objarray[tempidx].data_record.qual[lidx].double_value,
        bhr2.priority_seq,tempdyntokenrec->objarray[tempidx].data_record.qual[lidx].int_value)
       IF (datrecidx=0)
        datrecidx = (size(tempdyntokenrec->objarray[tempidx].data_record.qual,5)+ 1), tempdyntokenrec
        ->objarray[tempidx].data_record.qual_cnt = datrecidx, stat = alterlist(tempdyntokenrec->
         objarray[tempidx].data_record.qual,datrecidx),
        tempdyntokenrec->objarray[tempidx].data_record.qual[datrecidx].data_type_meaning =
        "health_plan", tempdyntokenrec->objarray[tempidx].data_record.qual[datrecidx].double_value =
        bhr2.health_plan_id, tempdyntokenrec->objarray[tempidx].data_record.qual[datrecidx].int_value
         = bhr2.priority_seq
       ENDIF
      ENDIF
     ENDIF
    WITH nocounter
   ;end select
   FOR (loopidx = 1 TO size(tempdyntokenrec->objarray,5))
     SET rec_json = ""
     SET stat = initrec(data_rec)
     IF (validate(tempdyntokenrec->objarray[loopidx].data_record,null) != null)
      SET data_rec->qual_cnt = size(tempdyntokenrec->objarray[loopidx].data_record.qual,5)
      IF (size(tempdyntokenrec->objarray[loopidx].data_record.qual,5) > 0)
       SET stat = movereclist(tempdyntokenrec->objarray[loopidx].data_record.qual,data_rec->qual,1,0,
        size(tempdyntokenrec->objarray[loopidx].data_record.qual,5),
        1)
       SET rec_json = cnvtrectojson(data_rec)
      ENDIF
     ENDIF
     SET tempdyntokenrec->objarray[loopidx].json_data = rec_json
     SET cidx = locateval(lidx,1,porigsize,tempdyntokenrec->objarray[loopidx].bo_hp_reltn_id,
      requestparamgroups->objarray[lidx].insurancebalanceid)
     IF (cidx > 0)
      SET hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
      SET hqual = uar_srvgetitem(hobjarray,"qual",0)
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
       CALL addtoken_vc(hcontextqual,"T_DYNHLTHPLN",tempdyntokenrec->objarray[loopidx].json_data)
      ENDFOR
     ENDIF
   ENDFOR
   IF (ccnt != porigsize)
    CALL logmessage("getInsuranceBalanceTokens","Invalid insurance balance specified",log_error)
    RETURN(false)
   ENDIF
   SET startidx = 1
   SET eidx = 0
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr1
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr1
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr1.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
    ORDER BY bhr1.bo_hp_reltn_id
    HEAD bhr1.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr1.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
     IF ((requestparamgroups->objarray[cidx].eventid > 0.0))
      hqual = uar_srvgetitem(hobjarray,"qual",0)
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
       FOR (fidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams,
        5))
         CASE (requestparamgroups->objarray[cidx].eventid)
          OF cs29322_applyhold:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="HOLDREASONCD")
            CALL addtoken_f8(hcontextqual,"T_APPLYHOLD",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_relhold:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="HOLDREASONCD")
            CALL addtoken_f8(hcontextqual,"T_RELHOLD",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_aplyactioncd:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="ACTIONCODE")
            CALL addtoken_f8(hcontextqual,"T_APPACTNCD",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_adjposted:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="POSTADJSUB")
            CALL addtoken_f8(hcontextqual,"T_POSTADJSUB",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ELSEIF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx
            ].paramkey,3)="POSTADJRSN")
            CALL addtoken_f8(hcontextqual,"T_POSTADJRSN",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ELSEIF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx
            ].paramkey,3)="ADJCREDIT")
            CALL addtoken_f8(hcontextqual,"T_ADJCREDIT",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_issueidentified:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="ISSUE")
            CALL addtoken_f8(hcontextqual,"T_ADDEDISSUE",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_payposted:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="POSTPMTSUB")
            CALL addtoken_f8(hcontextqual,"T_POSTPMTSUB",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DOLAMTLNITM")
            CALL addtoken_f8(hcontextqual,"T_PMTAMOUNT",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="PMTMETHOD")
            CALL addtoken_f8(hcontextqual,"T_PMTMETHOD",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_varcreated_cd:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALALIAS")
            CALL addtoken_f8(hcontextqual,"T_DENALIAS",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALTYPE")
            CALL addtoken_f8(hcontextqual,"T_DENTYPE",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALGROUP")
            CALL addtoken_f8(hcontextqual,"T_DENGROUP",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALAMT")
            CALL addtoken_f8(hcontextqual,"T_DENAMT",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_denialposted:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALALIAS")
            CALL addtoken_f8(hcontextqual,"T_DENALIAS",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALTYPE")
            CALL addtoken_f8(hcontextqual,"T_DENTYPE",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALGROUP")
            CALL addtoken_f8(hcontextqual,"T_DENGROUP",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALAMT")
            CALL addtoken_f8(hcontextqual,"T_DENAMT",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_creditbal:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="PMTMETHOD")
            CALL addtoken_f8(hcontextqual,"T_PMTMETHOD",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
         ENDCASE
       ENDFOR
      ENDFOR
     ENDIF
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_charge_bo_reltn pcbr,
     pft_charge pc,
     charge c,
     credential cr
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=1)
     JOIN (pc
     WHERE pc.pft_charge_id=pcbr.pft_charge_id
      AND pc.active_ind=1)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.charge_type_cd=cs13028_debit
      AND ((c.perf_phys_id > 0.0) OR (c.verify_phys_id > 0.0))
      AND c.active_ind=1)
     JOIN (cr
     WHERE ((cr.prsnl_id=c.perf_phys_id) OR (cr.prsnl_id=c.verify_phys_id))
      AND cr.prsnl_id > 0.0
      AND cr.active_ind=1)
    ORDER BY bhr.bo_hp_reltn_id, pc.pft_charge_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
    DETAIL
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
       IF (cr.prsnl_id=c.perf_phys_id)
        IF (c.service_dt_tm <= cr.end_effective_dt_tm)
         CALL addtoken_f8(hcontextqual,"T_PPHYCREEXP",0.0)
        ELSE
         CALL addtoken_f8(hcontextqual,"T_PPHYCREEXP",1.0)
        ENDIF
        IF (cr.credential_type_cd > 0.0)
         CALL addtoken_f8(hcontextqual,"T_PPHYCREDTP",cr.credential_type_cd)
        ENDIF
       ENDIF
       IF (cr.prsnl_id=c.verify_phys_id)
        IF (c.service_dt_tm <= cr.end_effective_dt_tm)
         CALL addtoken_f8(hcontextqual,"T_VPHYCREEXP",0.0)
        ELSE
         CALL addtoken_f8(hcontextqual,"T_VPHYCREEXP",1.0)
        ENDIF
        IF (cr.credential_type_cd > 0.0)
         CALL addtoken_f8(hcontextqual,"T_VPHYCREDTP",cr.credential_type_cd)
        ENDIF
       ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encounter e,
     encntr_condition_code ec
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
     JOIN (ec
     WHERE ec.encntr_id=e.encntr_id
      AND ec.active_ind=true)
    DETAIL
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     IF (ec.condition_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_CONDCD",ec.condition_cd)
     ENDIF
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encounter e,
     encntr_occurrence_code ec
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
     JOIN (ec
     WHERE ec.encntr_id=e.encntr_id
      AND ec.active_ind=true)
    DETAIL
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     IF (ec.occurrence_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_OCRNCCD",ec.occurrence_cd)
     ENDIF
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     bt_condition bt,
     pft_charge_bo_reltn pcbr
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (bt
     WHERE bt.bt_condition_id=bo.bt_condition_id
      AND bt.single_chrg_ind=1)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=1)
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     iscovered = 0
    DETAIL
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF ( NOT (iscovered))
       IF (ischargecovered(1,pcbr.covered_bitmap))
        CALL addtoken_f8(hcontextqual,"T_PRMCHRGCOV",1.0), iscovered = 1
       ENDIF
      ENDIF
     ENDFOR
    FOOT  bhr.bo_hp_reltn_id
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF ( NOT (iscovered))
       CALL addtoken_f8(hcontextqual,"T_PRMCHRGCOV",0.0)
      ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encounter e,
     encntr_info ei,
     code_value_extension c,
     long_text l
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id)
     JOIN (ei
     WHERE ei.encntr_id=e.encntr_id)
     JOIN (c
     WHERE c.code_value=ei.info_sub_type_cd
      AND c.field_name="TYPE")
     JOIN (l
     WHERE l.long_text_id=ei.long_text_id)
    ORDER BY bhr.bo_hp_reltn_id, ei.encntr_info_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
    HEAD ei.encntr_info_id
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF (((c.field_value="DATE"
       AND ei.value_dt_tm > 0) OR (((c.field_value="STRING"
       AND l.long_text > " ") OR (((c.field_value="CODE"
       AND ei.value_cd > 0) OR (c.field_value="NUMERIC"
       AND ei.value_numeric > 0)) )) )) )
       CASE (c.field_value)
        OF "DATE":
         CALL addtokenforencuserdef_dq8(hcontextqual,"T_ENCUSERDEF",cnvtdatetime(ei.value_dt_tm),ei
         .info_sub_type_cd)
        OF "STRING":
         CALL addtokenforencuserdef_vc(hcontextqual,"T_ENCUSERDEF",l.long_text,ei.info_sub_type_cd)
        OF "CODE":
         CALL addtokenforencuserdef_f8(hcontextqual,"T_ENCUSERDEF",ei.value_cd,ei.info_sub_type_cd)
        OF "NUMERIC":
         CALL addtokenforencuserdef_f8(hcontextqual,"T_ENCUSERDEF",cnvtreal(ei.value_numeric),ei
         .info_sub_type_cd)
       ENDCASE
      ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     bt_condition bt,
     pft_charge_bo_reltn pcbr,
     pft_charge pc,
     charge c,
     pft_umdap_hist puh
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (bt
     WHERE bt.bt_condition_id=bo.bt_condition_id
      AND bt.single_chrg_ind=1)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=1)
     JOIN (pc
     WHERE pc.pft_charge_id=pcbr.pft_charge_id
      AND pc.active_ind=1)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.charge_type_cd=cs13028_debit
      AND c.active_ind=1)
     JOIN (puh
     WHERE puh.pft_charge_id=pc.pft_charge_id)
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      CALL addtoken_f8(hcontextqual,"T_PATLIABCHG",1.0)
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encntr_plan_reltn epr,
     health_plan hp
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (hp
     WHERE hp.health_plan_id=bhr.health_plan_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (epr
     WHERE epr.encntr_id=pe.encntr_id
      AND epr.health_plan_id=hp.health_plan_id
      AND epr.active_ind=1
      AND epr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND epr.end_effective_dt_tm > cnvtdatetime(sysdate))
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      CALL addtoken_f8(hcontextqual,"T_MONTHLYSOC",epr.deduct_amt)
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr1,
     benefit_order b,
     pft_encntr_collection_reltn p
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr1
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr1.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (b
     WHERE bhr1.benefit_order_id=b.benefit_order_id
      AND bhr1.bo_hp_reltn_id != 0
      AND b.active_ind=true)
     JOIN (p
     WHERE (p.pft_encntr_id= Outerjoin(b.pft_encntr_id))
      AND (p.active_ind= Outerjoin(true))
      AND (p.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
      AND (p.end_effective_dt_tm>= Outerjoin(cnvtdatetime(sysdate))) )
    ORDER BY bhr1.bo_hp_reltn_id
    DETAIL
     cidx = locateval(lidx,1,porigsize,bhr1.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF (p.pft_encntr_collection_r_id > 0.0)
       CALL addtoken_f8(hcontextqual,"T_INCOLLECT",1.0)
      ELSEIF (p.pft_encntr_collection_r_id=0)
       CALL addtoken_f8(hcontextqual,"T_INCOLLECT",0.0)
      ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   SET stat = initrec(familybalancerec)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo1,
     pft_encntr pe
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo1
     WHERE bo1.benefit_order_id=bhr.benefit_order_id
      AND bo1.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo1.pft_encntr_id
      AND pe.active_ind=true
      AND pe.last_charge_dt_tm != null)
    ORDER BY bhr.bo_hp_reltn_id, pe.pft_encntr_id
    HEAD bhr.bo_hp_reltn_id
     balancelistsize += 1, stat = alterlist(familybalancerec->balances,balancelistsize),
     familybalancerec->balances[balancelistsize].balanceid = bhr.bo_hp_reltn_id,
     pftencntrlistsize = 0
    HEAD pe.pft_encntr_id
     pftencntrlistsize += 1, stat = alterlist(familybalancerec->balances[balancelistsize].
      relatedfinencounters,pftencntrlistsize), familybalancerec->balances[balancelistsize].
     relatedfinencounters[pftencntrlistsize].pftencntrid = pe.pft_encntr_id
    WITH nocounter
   ;end select
   FOR (eidx = 1 TO balancelistsize)
     CALL getbillinginfo(eidx)
     SET cidx = locateval(lidx,1,porigsize,familybalancerec->balances[eidx].balanceid,
      requestparamgroups->objarray[lidx].insurancebalanceid)
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
     SET hqual = uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
      IF (locateval(lidx,1,size(familybalancerec->balances[eidx].relatedfinencounters,5),true,
       familybalancerec->balances[eidx].relatedfinencounters[lidx].unbillchargesind) > 0)
       CALL addtoken_f8(hcontextqual,"T_UNBILCHRGS",1.0)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_UNBILCHRGS",0.0)
      ENDIF
     ENDFOR
   ENDFOR
   FOR (eidx = 1 TO size(requestparamgroups->objarray,5))
    FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
      FOR (fidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams,
       5))
        IF (trim(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
         paramkey,3)=autoerr_type)
         SET hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1))
         SET hqual = uar_srvgetitem(hobjarray,"qual",0)
         SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
         CALL addtoken_vc(hcontextqual,aae_token,requestparamgroups->objarray[eidx].eventparamgroup[
          groupidx].eventparams[fidx].stringvalue)
        ENDIF
      ENDFOR
    ENDFOR
    IF ((requestparamgroups->objarray[eidx].eventid=cs29322_latechrgpost))
     SET latechrgamt = 0
     SET latechrgamtperc = 0
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
       FOR (fidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams,
        5))
         IF (trim(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
          paramkey,3)=late_chrg)
          IF ((requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
          parententityname=pc_entity))
           SET hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1))
           SET hqual = uar_srvgetitem(hobjarray,"qual",0)
           SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
           SELECT INTO "nl:"
            FROM pft_charge pc,
             charge c,
             charge_mod cm,
             nomenclature n
            PLAN (pc
             WHERE (pc.pft_charge_id=requestparamgroups->objarray[eidx].eventparamgroup[groupidx].
             eventparams[fidx].parententityid)
              AND pc.late_chrg_flag > 0
              AND pc.active_ind=true)
             JOIN (c
             WHERE c.charge_item_id=pc.charge_item_id
              AND c.active_ind=true)
             JOIN (cm
             WHERE (cm.charge_item_id= Outerjoin(pc.charge_item_id))
              AND (cm.charge_mod_type_cd= Outerjoin(cs13019_billcode))
              AND (cm.active_ind= Outerjoin(1)) )
             JOIN (n
             WHERE ((n.nomenclature_id=cm.nomen_id
              AND n.active_ind=true) OR (n.nomenclature_id=0)) )
            HEAD pc.pft_charge_id
             CALL addtoken_f8(hcontextqual,"T_LTCHRGTYPE",c.charge_type_cd),
             CALL addtoken_f8(hcontextqual,"T_LTCHRGCPT",c.charge_item_id),
             CALL addtoken_f8(hcontextqual,"T_LTCHRGREV",c.charge_item_id)
            DETAIL
             IF (cm.field6 != trim("",3)
              AND uar_get_code_meaning(cm.field1_id)="HCPCS"
              AND n.nomenclature_id > 0.0)
              CALL addtoken_vc(hcontextqual,"T_CHRGHCPCS",n.source_identifier)
             ENDIF
            WITH nocounter
           ;end select
           SELECT INTO "nl:"
            FROM pft_charge pc,
             charge c1,
             charge c2
            PLAN (pc
             WHERE (requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
             parententityid=pc.pft_charge_id)
              AND pc.active_ind=true)
             JOIN (c1
             WHERE c1.charge_item_id=pc.charge_item_id
              AND c1.active_ind=true)
             JOIN (c2
             WHERE (c2.charge_item_id= Outerjoin(pc.parent_entity_id))
              AND (c2.charge_item_id> Outerjoin(0.0))
              AND (c2.active_ind= Outerjoin(true)) )
            ORDER BY c1.charge_item_id
            HEAD c1.charge_item_id
             IF (c1.offset_charge_item_id=0.0
              AND c2.charge_item_id > 0.0
              AND c1.parent_charge_item_id=c2.charge_item_id)
              CALL addtoken_f8(hcontextqual,"T_CHRGRETIER",1.0)
             ELSE
              CALL addtoken_f8(hcontextqual,"T_CHRGRETIER",0.0)
             ENDIF
             IF (c1.charge_type_cd=cs13028_debit
              AND c2.charge_type_cd=cs13028_debit
              AND c1.offset_charge_item_id=0.0
              AND c2.charge_item_id > 0.0
              AND c1.parent_charge_item_id=c2.charge_item_id)
              CALL addtoken_f8(hcontextqual,"T_CHRGPRCCNG",(c2.item_extended_price - c1
              .item_extended_price))
             ELSE
              CALL addtoken_f8(hcontextqual,"T_CHRGPRCCNG",0.0)
             ENDIF
            WITH nocounter
           ;end select
           SET chrgmodchngind = false
           SET chrgmodlistidx = 0
           SET stat = initrec(currentchargemodlist)
           SET stat = initrec(previouschargemodlist)
           SET currentchargemodlist->chargemodcnt = 0
           SET previouschargemodlist->chargemodcnt = 0
           SELECT INTO "nl:"
            FROM pft_charge pc,
             charge c,
             charge_mod cm
            PLAN (pc
             WHERE (requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
             parententityid=pc.pft_charge_id)
              AND pc.active_ind=true)
             JOIN (c
             WHERE c.charge_item_id=pc.charge_item_id
              AND c.parent_charge_item_id > 0.0
              AND c.active_ind=true)
             JOIN (cm
             WHERE cm.charge_item_id=c.charge_item_id
              AND cm.charge_mod_type_cd=cs13019_billcode
              AND cm.active_ind=true)
            ORDER BY c.charge_item_id, cm.charge_mod_id
            HEAD c.charge_item_id
             currentchargemodlist->parentchargeid = c.parent_charge_item_id
            DETAIL
             currentchargemodlist->chargemodcnt += 1, stat = alterlist(currentchargemodlist->
              chargemods,currentchargemodlist->chargemodcnt), currentchargemodlist->chargemods[
             currentchargemodlist->chargemodcnt].modifier_id = cm.field1_id,
             currentchargemodlist->chargemods[currentchargemodlist->chargemodcnt].modifier = cm
             .field6
            WITH nocounter
           ;end select
           SELECT INTO "nl:"
            FROM charge c,
             charge_mod cm
            PLAN (c
             WHERE (c.charge_item_id=currentchargemodlist->parentchargeid)
              AND c.charge_item_id > 0
              AND c.active_ind=true)
             JOIN (cm
             WHERE cm.charge_item_id=c.charge_item_id
              AND cm.charge_mod_type_cd=cs13019_billcode
              AND cm.active_ind=true)
            ORDER BY cm.charge_mod_id
            HEAD cm.charge_mod_id
             previouschargemodlist->chargemodcnt += 1, stat = alterlist(previouschargemodlist->
              chargemods,previouschargemodlist->chargemodcnt), previouschargemodlist->chargemods[
             previouschargemodlist->chargemodcnt].modifier_id = cm.field1_id,
             previouschargemodlist->chargemods[previouschargemodlist->chargemodcnt].modifier = cm
             .field6
            WITH nocounter
           ;end select
           IF ((currentchargemodlist->chargemodcnt != previouschargemodlist->chargemodcnt))
            SET chrgmodchngind = true
           ELSE
            FOR (chrgmodlistidx = 1 TO currentchargemodlist->chargemodcnt)
             SET cidx = locateval(lidx,1,previouschargemodlist->chargemodcnt,currentchargemodlist->
              chargemods[chrgmodlistidx].modifier_id,previouschargemodlist->chargemods[lidx].
              modifier_id,
              currentchargemodlist->chargemods[chrgmodlistidx].modifier,previouschargemodlist->
              chargemods[lidx].modifier)
             IF (cidx=0)
              SET chrgmodchngind = true
             ENDIF
            ENDFOR
           ENDIF
           IF (chrgmodchngind=true)
            CALL addtoken_f8(hcontextqual,"T_CHRGMODCNG",1.0)
           ELSE
            CALL addtoken_f8(hcontextqual,"T_CHRGMODCNG",0.0)
           ENDIF
          ENDIF
         ENDIF
       ENDFOR
     ENDFOR
     SELECT INTO "n1:"
      FROM bo_hp_reltn bhr,
       benefit_order bo,
       pft_charge_bo_reltn pcbr,
       pft_charge pc,
       charge c
      PLAN (bhr
       WHERE (bhr.bo_hp_reltn_id=requestparamgroups->objarray[eidx].insurancebalanceid)
        AND bhr.active_ind=true)
       JOIN (bo
       WHERE bo.benefit_order_id=bhr.benefit_order_id
        AND bo.active_ind=true)
       JOIN (pcbr
       WHERE pcbr.benefit_order_id=bo.benefit_order_id
        AND pcbr.active_ind=true)
       JOIN (pc
       WHERE pc.pft_charge_id=pcbr.pft_charge_id
        AND pc.late_chrg_flag IN (debit_late_chrg, manual_late_chrg, credit_late_chrg)
        AND pc.active_ind=true
        AND abs(pc.billing_amount) > 0.009)
       JOIN (c
       WHERE c.charge_item_id=pc.charge_item_id
        AND c.active_ind=true)
      ORDER BY pc.pft_charge_id
      HEAD pc.pft_charge_id
       latechrgamt += (abs(pc.billing_amount) * evaluate(c.charge_type_cd,cs13028_dr_cd,1,
        cs13028_cr_cd,- (1)))
      WITH nocounter
     ;end select
     IF (latechrgamt > 0.009)
      CALL addtoken_f8(hcontextqual,"T_TOTLCAMT",latechrgamt)
      SELECT INTO "nl:"
       FROM bill_rec brec,
        bill_reltn brel
       PLAN (brel
        WHERE (brel.parent_entity_id=requestparamgroups->objarray[eidx].insurancebalanceid)
         AND brel.parent_entity_name="BO_HP_RELTN"
         AND brel.active_ind=true)
        JOIN (brec
        WHERE brec.corsp_activity_id=brel.corsp_activity_id
         AND brec.bill_vrsn_nbr=brel.bill_vrsn_nbr
         AND brec.active_ind=true)
       ORDER BY brec.corsp_activity_id
       HEAD brec.corsp_activity_id
        IF (brec.balance > 0.009)
         latechrgamtperc = (latechrgamt/ (brec.balance+ latechrgamt))
        ENDIF
       WITH nocounter
      ;end select
     ENDIF
     IF (latechrgamtperc > 0.009)
      CALL addtoken_f8(hcontextqual,"T_LCAMTPRCT",latechrgamtperc)
     ENDIF
    ENDIF
   ENDFOR
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     bo_hp_reltn bhr2,
     bill_reltn brn,
     bill_rec br
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid)
      AND bhr.active_ind=true)
     JOIN (bhr2
     WHERE bhr2.benefit_order_id=bhr.benefit_order_id
      AND bhr2.priority_seq=1
      AND bhr2.active_ind=true)
     JOIN (brn
     WHERE brn.parent_entity_name=bhr_entity
      AND brn.parent_entity_id=bhr2.bo_hp_reltn_id
      AND brn.active_ind=true)
     JOIN (br
     WHERE br.corsp_activity_id=brn.corsp_activity_id
      AND br.active_ind=true)
    ORDER BY bhr.bo_hp_reltn_id, br.gen_dt_tm DESC
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      CALL addtoken_f8(hcontextqual,"T_PRINSCLST",br.bill_status_cd)
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     bill_reltn brn,
     bill_rec br
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid)
      AND bhr.active_ind=true)
     JOIN (brn
     WHERE brn.parent_entity_name=bhr_entity
      AND brn.parent_entity_id=bhr.bo_hp_reltn_id
      AND brn.active_ind=true)
     JOIN (br
     WHERE br.corsp_activity_id=brn.corsp_activity_id
      AND br.active_ind=true)
    ORDER BY bhr.bo_hp_reltn_id, br.gen_dt_tm DESC
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
       CALL addtoken_f8(hcontextqual,"T_CSSTATUSCD",br.bill_status_cd)
       IF (br.bill_type_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_BILLTYPE",br.bill_type_cd)
       ENDIF
       CALL addtoken_f8(hcontextqual,"T_TOTCLMAMT",br.balance)
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr1,
     benefit_order b1,
     benefit_order b2,
     bo_hp_reltn bhr2,
     pft_proration p
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr1
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr1.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (b1
     WHERE b1.benefit_order_id=bhr1.benefit_order_id
      AND b1.active_ind=true)
     JOIN (b2
     WHERE b2.pft_encntr_id=b1.pft_encntr_id
      AND b2.active_ind=true)
     JOIN (bhr2
     WHERE bhr2.benefit_order_id=b2.benefit_order_id
      AND bhr2.priority_seq < bhr1.priority_seq
      AND bhr2.active_ind=true
      AND bhr2.bo_hp_reltn_id != bhr1.bo_hp_reltn_id)
     JOIN (p
     WHERE bhr2.bo_hp_reltn_id=p.bo_hp_reltn_id)
    ORDER BY bhr2.bo_hp_reltn_id
    HEAD bhr2.bo_hp_reltn_id
     priinsbalamt += evaluate(p.curr_amount_dr_cr_flag,2,(p.curr_amt_due * - (1.0)),p.curr_amt_due)
    WITH nocounter
   ;end select
   CALL addtoken_f8(hcontextqual,"T_PRIBALAMT",priinsbalamt)
   SELECT INTO "nl:"
    FROM bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe
    PLAN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid)
      AND bhr.active_ind=true)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id
      AND pe.active_ind=true)
    ORDER BY pe.pft_encntr_id, bhr.bo_hp_reltn_id
    DETAIL
     finencntrbal = (pe.balance * evaluate(pe.dr_cr_flag,2,- (1.0),1,1.0,
      0.0)), cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,request->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     hqual = uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
       CALL addtoken_f8(hcontextqual,"T_ENCNTRBAL",finencntrbal),
       CALL addtoken_f8(hcontextqual,"T_ENCHASBILL",pe.encntr_id)
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encounter e,
     person p,
     sch_appt sa
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid)
      AND bhr.active_ind=true)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
     JOIN (p
     WHERE p.person_id=e.person_id
      AND p.active_ind=true)
     JOIN (sa
     WHERE sa.person_id=p.person_id
      AND sa.sch_role_cd=cs14250_patient
      AND sa.beg_dt_tm > cnvtdatetime(sysdate)
      AND sa.end_dt_tm > cnvtdatetime(sysdate)
      AND sa.active_ind=true)
    ORDER BY sa.person_id, sa.beg_dt_tm
    HEAD sa.person_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,request->objarray[lidx].insurancebalanceid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvgetitem(hobjarray,
      "qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)), daystoappt = datetimecmp(
        sa.beg_dt_tm,cnvtdatetime(sysdate)),
       CALL addtoken_f8(hcontextqual,"T_DAYSTOAPPT",daystoappt)
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     pft_charge_bo_reltn pcbr,
     pft_charge pc,
     charge c
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid)
      AND bhr.active_ind=true)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bhr.benefit_order_id
      AND pcbr.active_ind=true)
     JOIN (pc
     WHERE pc.pft_charge_id=pcbr.pft_charge_id
      AND pc.active_ind=true)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.active_ind=true)
    ORDER BY bhr.bo_hp_reltn_id, c.service_dt_tm DESC
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,request->objarray[lidx].insurancebalanceid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvgetitem(hobjarray,
      "qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      CALL addtoken_dq8(hcontextqual,"T_NEWCHGSVDT",cnvtdatetime(cnvtdate(c.service_dt_tm),0))
     ENDFOR
    WITH nocounter
   ;end select
   SET stat = initrec(familybalancerec)
   SET balancelistsize = 0
   SELECT INTO "nl:"
    FROM code_value_extension cve
    PLAN (cve
     WHERE cve.code_value=cs20790_priorityseq
      AND cve.code_set=20790
      AND cve.field_name="OPTION")
    DETAIL
     primaryguarantorseq = cnvtint(cve.field_value)
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     account a,
     encntr_person_reltn epr,
     encntr_org_reltn eor
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid)
      AND bhr.active_ind=true)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id
      AND pe.active_ind=true)
     JOIN (a
     WHERE a.acct_id=pe.acct_id
      AND a.active_ind=true)
     JOIN (epr
     WHERE (epr.encntr_id= Outerjoin(pe.encntr_id))
      AND (epr.priority_seq= Outerjoin(primaryguarantorseq))
      AND (epr.active_ind= Outerjoin(true))
      AND (epr.person_reltn_type_cd= Outerjoin(cs351_defguar))
      AND (epr.related_person_id!= Outerjoin(0.0)) )
     JOIN (eor
     WHERE (eor.encntr_id= Outerjoin(pe.encntr_id))
      AND (eor.priority_seq= Outerjoin(primaryguarantorseq))
      AND (eor.encntr_org_reltn_cd= Outerjoin(cs352_guarantor))
      AND (eor.active_ind= Outerjoin(true))
      AND (eor.organization_id!= Outerjoin(0.0)) )
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     balancelistsize += 1, stat = alterlist(familybalancerec->balances,balancelistsize),
     familybalancerec->balances[balancelistsize].balanceid = bhr.bo_hp_reltn_id
     IF (eor.organization_id > 0.0)
      familybalancerec->balances[balancelistsize].guarantorid = eor.organization_id,
      isencntrprsnreltn = false
     ELSEIF (epr.related_person_id > 0.0)
      familybalancerec->balances[balancelistsize].guarantorid = epr.related_person_id,
      isencntrprsnreltn = true
     ENDIF
    WITH nocounter
   ;end select
   FOR (eidx = 1 TO balancelistsize)
     SET cidx = locateval(lidx,1,porigsize,familybalancerec->balances[eidx].balanceid,
      requestparamgroups->objarray[lidx].insurancebalanceid)
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
     SET hqual = uar_srvgetitem(hobjarray,"qual",0)
     SET pftencntrlistsize = 0
     SELECT
      IF (isencntrprsnreltn)
       FROM encntr_person_reltn epr,
        encounter e,
        pft_encntr pe
       PLAN (epr
        WHERE (epr.related_person_id=familybalancerec->balances[eidx].guarantorid)
         AND epr.priority_seq=1
         AND epr.person_reltn_type_cd=cs351_defguar
         AND epr.active_ind=true)
        JOIN (e
        WHERE e.encntr_id=epr.encntr_id
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND pe.active_ind=true
         AND (((pe.balance < - (0.009))) OR (pe.balance > 0.009)) )
      ELSE
       FROM encntr_org_reltn eor,
        encounter e,
        pft_encntr pe
       PLAN (eor
        WHERE (eor.organization_id=familybalancerec->balances[eidx].guarantorid)
         AND eor.priority_seq=primaryguarantorseq
         AND eor.encntr_org_reltn_cd=cs352_guarantor
         AND eor.active_ind=true)
        JOIN (e
        WHERE e.encntr_id=eor.encntr_id
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND pe.active_ind=true
         AND (((pe.balance < - (0.009))) OR (pe.balance > 0.009)) )
      ENDIF
      INTO "nl:"
      ORDER BY pe.pft_encntr_id
      HEAD pe.pft_encntr_id
       pftencntrlistsize = (size(familybalancerec->balances[eidx].relatedfinencounters,5)+ 1), stat
        = alterlist(familybalancerec->balances[eidx].relatedfinencounters,pftencntrlistsize),
       familybalancerec->balances[eidx].relatedfinencounters[pftencntrlistsize].pftencntrid = pe
       .pft_encntr_id
      WITH nocounter
     ;end select
     CALL getbillinginfo(eidx)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
      IF (locateval(lidx,1,size(familybalancerec->balances[eidx].relatedfinencounters,5),true,
       familybalancerec->balances[eidx].relatedfinencounters[lidx].unbillchargesind) > 0)
       CALL addtoken_f8(hcontextqual,"T_NETGUARUNB",1.0)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_NETGUARUNB",0.0)
      ENDIF
     ENDFOR
     SET incollectionind = false
     SELECT
      IF (isencntrprsnreltn)
       FROM encntr_person_reltn epr,
        encounter e,
        pft_encntr pe,
        pft_encntr_collection_reltn pecr
       PLAN (epr
        WHERE (epr.related_person_id=familybalancerec->balances[eidx].guarantorid)
         AND epr.priority_seq=1
         AND epr.person_reltn_type_cd=cs351_defguar
         AND epr.active_ind=true)
        JOIN (e
        WHERE e.encntr_id=epr.encntr_id
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND pe.active_ind=true)
        JOIN (pecr
        WHERE pecr.pft_encntr_id=pe.pft_encntr_id
         AND pecr.active_ind=true
         AND pecr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
         AND pecr.end_effective_dt_tm >= cnvtdatetime(sysdate))
      ELSE
       FROM encntr_org_reltn eor,
        encounter e,
        pft_encntr pe,
        pft_encntr_collection_reltn pecr
       PLAN (eor
        WHERE (eor.organization_id=familybalancerec->balances[eidx].guarantorid)
         AND eor.priority_seq=primaryguarantorseq
         AND eor.encntr_org_reltn_cd=cs352_guarantor
         AND eor.active_ind=true)
        JOIN (e
        WHERE e.encntr_id=eor.encntr_id
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND pe.active_ind=true)
        JOIN (pecr
        WHERE pecr.pft_encntr_id=pe.pft_encntr_id
         AND pecr.active_ind=true
         AND pecr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
         AND pecr.end_effective_dt_tm >= cnvtdatetime(sysdate))
      ENDIF
      INTO "nl:"
      DETAIL
       incollectionind = true
      WITH maxrec = 1
     ;end select
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
      IF (incollectionind=true)
       CALL addtoken_f8(hcontextqual,"T_NETGUARCOL",1.0)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_NETGUARCOL",0.0)
      ENDIF
     ENDFOR
     SET netguarbal = 0.0
     SELECT
      IF (isencntrprsnreltn)
       FROM encntr_person_reltn epr,
        encounter e,
        pft_encntr pe,
        benefit_order bo,
        bo_hp_reltn bhr,
        pft_proration pp
       PLAN (epr
        WHERE (epr.related_person_id=familybalancerec->balances[eidx].guarantorid)
         AND epr.priority_seq=1
         AND epr.person_reltn_type_cd=cs351_defguar
         AND epr.active_ind=true)
        JOIN (e
        WHERE e.encntr_id=epr.encntr_id
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND pe.active_ind=true)
        JOIN (bo
        WHERE bo.pft_encntr_id=pe.pft_encntr_id
         AND bo.active_ind=true)
        JOIN (bhr
        WHERE bhr.benefit_order_id=bo.benefit_order_id
         AND bhr.active_ind=true)
        JOIN (pp
        WHERE pp.bo_hp_reltn_id=bhr.bo_hp_reltn_id
         AND pp.active_ind=true)
      ELSE
       FROM encntr_org_reltn eor,
        encounter e,
        pft_encntr pe,
        benefit_order bo,
        bo_hp_reltn bhr,
        pft_proration pp
       PLAN (eor
        WHERE (eor.organization_id=familybalancerec->balances[eidx].guarantorid)
         AND eor.priority_seq=primaryguarantorseq
         AND eor.encntr_org_reltn_cd=cs352_guarantor
         AND eor.active_ind=true)
        JOIN (e
        WHERE e.encntr_id=eor.encntr_id
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND pe.active_ind=true)
        JOIN (bo
        WHERE bo.pft_encntr_id=pe.pft_encntr_id
         AND bo.active_ind=true)
        JOIN (bhr
        WHERE bhr.benefit_order_id=bo.benefit_order_id
         AND bhr.active_ind=true)
        JOIN (pp
        WHERE pp.bo_hp_reltn_id=bhr.bo_hp_reltn_id
         AND pp.active_ind=true)
      ENDIF
      INTO "nl:"
      ORDER BY pp.pft_proration_id
      HEAD pp.pft_proration_id
       netguarbal += evaluate(pp.curr_amount_dr_cr_flag,2,(pp.curr_amt_due * - (1.0)),pp.curr_amt_due
        )
      WITH nocounter
     ;end select
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
      CALL addtoken_f8(hcontextqual,"T_NETGUARBAL",netguarbal)
     ENDFOR
     SET familybaddebtamt = 0
     SELECT
      IF (isencntrprsnreltn)
       FROM encntr_person_reltn epr,
        encounter e,
        pft_encntr pe
       PLAN (epr
        WHERE (epr.related_person_id=familybalancerec->balances[eidx].guarantorid)
         AND epr.active_ind=true)
        JOIN (e
        WHERE e.encntr_id=epr.encntr_id
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND pe.active_ind=true)
      ELSE
       FROM encntr_org_reltn eor,
        encounter e,
        pft_encntr pe
       PLAN (eor
        WHERE (eor.organization_id=familybalancerec->balances[eidx].guarantorid)
         AND eor.active_ind=true)
        JOIN (e
        WHERE e.encntr_id=eor.encntr_id
         AND e.active_ind=true)
        JOIN (pe
        WHERE pe.encntr_id=e.encntr_id
         AND pe.active_ind=true)
      ENDIF
      INTO "nl:"
      ORDER BY pe.pft_encntr_id
      HEAD pe.pft_encntr_id
       familybaddebtamt += (pe.bad_debt_balance * evaluate(pe.bad_debt_bal_dr_cr_flag,2,- (1.0),1.0,
        1.0))
      WITH nocounter
     ;end select
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
      CALL addtoken_f8(hcontextqual,"T_NETGUARBDE",familybaddebtamt)
     ENDFOR
   ENDFOR
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr1,
     bo_hp_reltn bhr2,
     bill_reltn br,
     bill_rec bre
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr1
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr1.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid)
      AND bhr1.active_ind=true)
     JOIN (bhr2
     WHERE bhr2.benefit_order_id=bhr1.benefit_order_id
      AND bhr2.active_ind=true
      AND bhr2.priority_seq=1
      AND  NOT (bhr2.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
     JOIN (br
     WHERE br.parent_entity_id=bhr2.bo_hp_reltn_id
      AND br.parent_entity_name=bhr_entity
      AND br.active_ind=true)
     JOIN (bre
     WHERE bre.corsp_activity_id=br.corsp_activity_id
      AND bre.active_ind=true)
    ORDER BY bre.transmission_dt_tm DESC
    HEAD bhr1.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr1.bo_hp_reltn_id,request->objarray[lidx].insurancebalanceid
      ), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvgetitem(hobjarray,
      "qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)), daysfrmclm = datetimecmp(
        cnvtdatetime(sysdate),bre.transmission_dt_tm),
       CALL addtoken_f8(hcontextqual,"T_DAYSFRMCLM",daysfrmclm)
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     bill_reltn brl,
     bill_rec br,
     pft_queue_item pqi
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (brl
     WHERE (brl.parent_entity_id= Outerjoin(bhr.bo_hp_reltn_id))
      AND (brl.parent_entity_name= Outerjoin("BO_HP_RELTN"))
      AND (brl.active_ind= Outerjoin(true)) )
     JOIN (br
     WHERE (br.corsp_activity_id= Outerjoin(brl.corsp_activity_id)) )
     JOIN (pqi
     WHERE (pqi.corsp_activity_id= Outerjoin(br.corsp_activity_id))
      AND (pqi.event_cd= Outerjoin(cs29322_varcreated_cd))
      AND (pqi.active_ind= Outerjoin(true)) )
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     hasvariancewi = false
    DETAIL
     IF (pqi.event_cd=cs29322_varcreated_cd)
      hasvariancewi = true
     ENDIF
    FOOT  bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF (hasvariancewi != 0)
       CALL addtoken_f8(hcontextqual,"T_VARWIEXIST",1.0)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_VARWIEXIST",0.0)
      ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     cbos_pe_reltn cper,
     cons_bo_sched cbs,
     cbos_person_reltn cpr,
     cbos_activity_reltn car
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (cper
     WHERE (cper.pft_encntr_id= Outerjoin(bo.pft_encntr_id))
      AND (cper.active_ind= Outerjoin(true)) )
     JOIN (cbs
     WHERE (cbs.cons_bo_sched_id= Outerjoin(cper.cons_bo_sched_id))
      AND (cbs.active_ind= Outerjoin(true)) )
     JOIN (cpr
     WHERE (cpr.cons_bo_sched_id= Outerjoin(cbs.cons_bo_sched_id))
      AND (cpr.active_ind= Outerjoin(true)) )
     JOIN (car
     WHERE (car.cbos_pe_reltn_id= Outerjoin(cper.cbos_pe_reltn_id))
      AND (car.parent_entity_name= Outerjoin("GUAR_FINANCIAL_RESP"))
      AND (car.active_ind= Outerjoin(true)) )
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     multiguarantorind = false
    DETAIL
     IF (cper.cons_bo_sched_id > 0)
      multiguarantorind = true
     ENDIF
    FOOT  bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF (multiguarantorind=true)
       CALL addtoken_f8(hcontextqual,"T_MULTIGUAR",1.0)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_MULTIGUAR",0.0)
      ENDIF
     ENDFOR
    WITH nocounter, expand = 1
   ;end select
   SET stat = initrec(balance_ids)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encounter e
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
    ORDER BY e.encntr_id, bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     balanceidsforsc += 1, stat = alterlist(balance_ids->bo_hp_reltn_ids,balanceidsforsc),
     balance_ids->bo_hp_reltn_ids[balanceidsforsc].bo_hp_relation_id = bhr.bo_hp_reltn_id
     IF (e.military_service_related_cd=cs4003348_svcconnect_yes_cd)
      balance_ids->bo_hp_reltn_ids[balanceidsforsc].serviceconnectindforbalance = "Y"
     ELSEIF (e.military_service_related_cd=cs4003348_svcconnect_no_cd)
      balance_ids->bo_hp_reltn_ids[balanceidsforsc].serviceconnectindforbalance = "N"
     ELSE
      balance_ids->bo_hp_reltn_ids[balanceidsforsc].serviceconnectindforbalance = "Null/Blank"
     ENDIF
    WITH nocounter
   ;end select
   IF (size(balance_ids->bo_hp_reltn_ids,5) > 0)
    CALL checkallchargesserviceconnectedforbalance(balance_ids)
   ENDIF
   SET stat = initrec(balance_ids)
   SET stat = initrec(balance_ids)
   SELECT INTO "nl:"
    sortval = evaluate(cv.code_value,cs4554012_specialauth_patient_desig_type_cd,1,0)
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encounter e,
     code_value_group cvg,
     code_value cv,
     encntr_code_value_r evc,
     dummyt d
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id
      AND pe.active_ind=true)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
     JOIN (d)
     JOIN (evc
     WHERE evc.encntr_id=e.encntr_id
      AND evc.active_ind=true)
     JOIN (cvg
     WHERE cvg.child_code_value=evc.code_value)
     JOIN (cv
     WHERE cv.code_value=cvg.parent_code_value
      AND cv.code_set=codeset_4554012
      AND cv.active_ind=true)
    ORDER BY e.encntr_id, bhr.bo_hp_reltn_id, sortval DESC
    HEAD bhr.bo_hp_reltn_id
     specialauthind = false
    DETAIL
     IF (evc.code_value > 0
      AND cv.code_value > 0
      AND cv.code_set=codeset_4554012)
      cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
       insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
      uar_srvgetitem(hobjarray,"qual",0)
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
        hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
        CALL addtoken_f8(hcontextqual,"T_DESIGTYPE",cv.code_value)
        IF (cv.code_value=cs4554012_specialauth_patient_desig_type_cd
         AND specialauthind=false)
         specialauthind = true
        ENDIF
      ENDFOR
     ENDIF
    FOOT  bhr.bo_hp_reltn_id
     balanceidsforsa += 1, stat = alterlist(balance_ids->bo_hp_reltn_ids,balanceidsforsa),
     balance_ids->bo_hp_reltn_ids[balanceidsforsa].bo_hp_relation_id = bhr.bo_hp_reltn_id,
     balance_ids->bo_hp_reltn_ids[balanceidsforsa].specialauthorityindforbalance = specialauthind
    WITH outerjoin = d
   ;end select
   IF (size(balance_ids->bo_hp_reltn_ids,5) > 0)
    CALL checkallchargesspecialauthorityforbalance(balance_ids)
   ENDIF
   SET stat = initrec(balance_ids)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_charge_bo_reltn pcbr,
     pft_charge pc,
     charge c
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bhr
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bhr.bo_hp_reltn_id,requestparamgroups->
      objarray[eidx].insurancebalanceid))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=true)
     JOIN (pc
     WHERE pc.pft_charge_id=pcbr.pft_charge_id
      AND pc.active_ind=true)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND pc.active_ind=true)
    ORDER BY bhr.benefit_order_id
    HEAD bo.benefit_order_id
     chrgbal = 0.0
    DETAIL
     chrgbal += c.item_extended_price
    FOOT  bo.benefit_order_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      CALL addtoken_f8(hcontextqual,"T_CHRGBAL",chrgbal)
     ENDFOR
    WITH nocounter
   ;end select
   CALL addeditfailuretoken(porigsize)
   CALL addcontractmgmterrorcategorytoken(prequest)
   CALL logmessage("getInsuranceBalanceTokens","Exiting...",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getclaimtokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   DECLARE startidx = i4 WITH protect, noconstant(1)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE ccnt = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hperformqual = i4 WITH protect, noconstant(0)
   DECLARE hverifyqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE fidx = i4 WITH protect, noconstant(0)
   DECLARE iscovered = i2 WITH protect, noconstant(0)
   DECLARE groupidx = i4 WITH protect, noconstant(0)
   DECLARE qualcnt = i4 WITH protect, noconstant(0)
   DECLARE rec_json = vc WITH protect, noconstant("")
   DECLARE servicefromdate = dq8 WITH protect, noconstant(0.0)
   DECLARE servicetodate = dq8 WITH protect, noconstant(0.0)
   DECLARE dayspassed = f8 WITH protect, noconstant(0.0)
   DECLARE techdenialfound = i2 WITH protect, noconstant(false)
   DECLARE lineitemid = f8 WITH protect, noconstant(0.0)
   DECLARE expidx = i4 WITH protect, noconstant(0)
   DECLARE locidx = i4 WITH protect, noconstant(0)
   DECLARE encidx = i4 WITH protect, noconstant(0)
   DECLARE claimcount = i4 WITH protect, noconstant(0)
   DECLARE claimidx = i4 WITH protect, noconstant(0)
   IF ( NOT (validate(getpbmtokensrequest)))
    RECORD getpbmtokensrequest(
      1 encounterid = f8
      1 financialencounterid = f8
      1 insurancebalanceid = f8
      1 claimid = f8
      1 tokens[*]
        2 token = vc
    )
   ENDIF
   IF ( NOT (validate(getpbmtokensreply)))
    RECORD getpbmtokensreply(
      1 tokenvalues[*]
        2 token = vc
        2 datatype = vc
        2 codevalue = f8
        2 numbervalue = i4
        2 currencyvalue = f8
        2 textvalue = vc
        2 datevalue = dq8
        2 displayvalue = vc
        2 timevalue = i4
        2 floatvalue = f8
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    )
   ENDIF
   IF ( NOT (validate(data_rec)))
    RECORD data_rec(
      1 qual_cnt = i4
      1 qual[*]
        2 data_type_meaning = vc
        2 double_value = f8
        2 int_value = i4
        2 string_value = vc
    )
   ENDIF
   RECORD claimlistfordrglookup(
     1 claims[*]
       2 corspactivityid = f8
       2 encntrid = f8
       2 encntrcontributorsystemcd = f8
       2 encounterdrg = f8
       2 remitdrg = f8
       2 contractdrg = f8
   ) WITH protect
   DECLARE edit_failure_entity = vc WITH protect, constant("CLMEDITFAIL")
   DECLARE payer_status_update_entity = vc WITH protect, constant("PAYRSTATCHNG")
   IF ( NOT (validate(cs29322_clmeditfail)))
    DECLARE cs29322_clmeditfail = f8 WITH protect, constant(getcodevalue(29322,edit_failure_entity,0)
     )
   ENDIF
   IF ( NOT (validate(cs24451_cancelled_cd)))
    DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
   ENDIF
   IF ( NOT (validate(cs24451_invalid_cd)))
    DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
   ENDIF
   IF ( NOT (validate(cs13028_debit)))
    DECLARE cs13028_debit = f8 WITH protect, constant(getcodevalue(13028,"DR",0))
   ENDIF
   IF ( NOT (validate(cs29322_applyhold)))
    DECLARE cs29322_applyhold = f8 WITH protect, constant(getcodevalue(29322,"APPLYHOLD",0))
   ENDIF
   IF ( NOT (validate(cs29322_relhold)))
    DECLARE cs29322_relhold = f8 WITH protect, constant(getcodevalue(29322,"RELHOLD",0))
   ENDIF
   IF ( NOT (validate(cs29322_aplyactioncd)))
    DECLARE cs29322_aplyactioncd = f8 WITH protect, constant(getcodevalue(29322,"APLYACTIONCD",0))
   ENDIF
   IF ( NOT (validate(cs29322_adjposted)))
    DECLARE cs29322_adjposted = f8 WITH protect, constant(getcodevalue(29322,"ADJPOSTED",0))
   ENDIF
   IF ( NOT (validate(cs29322_calcadjpost)))
    DECLARE cs29322_calcadjpost = f8 WITH protect, constant(getcodevalue(29322,"CALCADJPOST",0))
   ENDIF
   IF ( NOT (validate(cs29322_issueidentified)))
    DECLARE cs29322_issueidentified = f8 WITH protect, constant(getcodevalue(29322,"ISSUEIDENTFY",0))
   ENDIF
   IF ( NOT (validate(cs29322_denialposted)))
    DECLARE cs29322_denialposted = f8 WITH protect, constant(getcodevalue(29322,"DENIALPOSTED",0))
   ENDIF
   IF ( NOT (validate(cs29322_varcreated)))
    DECLARE cs29322_varcreated = f8 WITH protect, constant(getcodevalue(29322,"VARCREATE",0))
   ENDIF
   IF ( NOT (validate(cs29322_payposted)))
    DECLARE cs29322_payposted = f8 WITH protect, constant(getcodevalue(29322,"PAYPOSTED",0))
   ENDIF
   IF ( NOT (validate(cs18935_transxovrpay)))
    DECLARE cs18935_transxovrpay = f8 WITH protect, constant(getcodevalue(18935,"TRANSXOVRPAY",0))
   ENDIF
   IF ( NOT (validate(cs24454_lineitemid)))
    DECLARE cs24454_lineitemid = f8 WITH protect, constant(getcodevalue(24454,"LINEITEMID",1))
   ENDIF
   IF ( NOT (validate(cs29322_payrstatchng_cd)))
    DECLARE cs29322_payrstatchng_cd = f8 WITH protect, constant(getcodevalue(29322,
      payer_status_update_entity,0))
   ENDIF
   SET data_rec->qual_cnt = 0
   SELECT INTO "nl:"
    FROM bill_rec br,
     bill_reltn bre,
     bo_hp_reltn bhr,
     health_plan hp,
     benefit_order bo,
     pft_encntr pe,
     benefit_order bo2,
     bo_hp_reltn bhr2,
     health_plan hp2,
     encounter e,
     billing_entity be
    PLAN (br
     WHERE expand(eidx,1,pbatchsize,br.corsp_activity_id,requestparamgroups->objarray[eidx].
      corspactivityid))
     JOIN (bre
     WHERE bre.corsp_activity_id=br.corsp_activity_id
      AND bre.parent_entity_name="BO_HP_RELTN")
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id
      AND bhr.active_ind=true)
     JOIN (hp
     WHERE hp.health_plan_id=bhr.health_plan_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (bo2
     WHERE bo2.pft_encntr_id=pe.pft_encntr_id
      AND bo2.active_ind=true)
     JOIN (bhr2
     WHERE bhr2.benefit_order_id=bo2.benefit_order_id
      AND bhr2.active_ind=true)
     JOIN (hp2
     WHERE hp2.health_plan_id=bhr2.health_plan_id)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id)
     JOIN (be
     WHERE be.billing_entity_id=pe.billing_entity_id)
    ORDER BY pe.pft_encntr_id, bhr2.bo_hp_reltn_id
    HEAD pe.pft_encntr_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,br.corsp_activity_id,requestparamgroups->objarray[
      lidx].corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvadditem(hqual,"context_qual"),
       CALL addtoken_f8(hcontextqual,"T_CUSTOM",br.corsp_activity_id)
       IF (bhr.health_plan_id > 0.0)
        CALL addtoken_f8(hcontextqual,"T_HEALTHPLAN",bhr.health_plan_id)
       ENDIF
       IF (hp.financial_class_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_FINCLASS",hp.financial_class_cd)
       ENDIF
       IF (pe.billing_entity_id > 0.0)
        CALL addtoken_f8(hcontextqual,"T_BILLENTITY",pe.billing_entity_id)
       ENDIF
       IF (be.parent_be_id > 0.0)
        CALL addtoken_f8(hcontextqual,"T_BETYPE",1.0)
       ELSE
        CALL addtoken_f8(hcontextqual,"T_BETYPE",0.0)
       ENDIF
       IF (e.encntr_type_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_ENCTYPE",e.encntr_type_cd)
       ENDIF
       IF (e.encntr_type_class_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_ENCTYPECLS",e.encntr_type_class_cd)
       ENDIF
       IF (bhr.fin_class_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_CURRFC",bhr.fin_class_cd)
       ENDIF
       IF (e.med_service_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_MEDSVC",e.med_service_cd)
       ENDIF
       IF (e.accommodation_cd > 0.0)
        CALL addtoken_f8(hcontextqual,"T_ACCOMCODE",e.accommodation_cd)
       ENDIF
       IF (((bo.bo_status_cd=cs24451_invalid_cd) OR (bo.bo_status_cd=cs24451_cancelled_cd)) )
        CALL addtoken_f8(hcontextqual,"T_BALSTATUS",bo.bo_status_cd)
       ELSE
        CALL addtoken_f8(hcontextqual,"T_BALSTATUS",bhr.bo_hp_status_cd)
       ENDIF
     ENDFOR
    HEAD bhr2.bo_hp_reltn_id
     IF ( NOT (bo2.bo_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd))
      AND  NOT (bhr2.bo_hp_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd)))
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
        hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
        IF (bhr2.priority_seq=1
         AND bhr2.health_plan_id > 0.0)
         CALL addtoken_f8(hcontextqual,"T_PRMHLTHPLN",bhr2.health_plan_id),
         CALL addtoken_f8(hcontextqual,"T_PRMPAYER",bhr2.payor_org_id),
         CALL addtoken_f8(hcontextqual,"T_PRIFINCLS",hp2.financial_class_cd)
        ENDIF
        IF (bhr2.priority_seq=2
         AND bhr2.health_plan_id > 0.0)
         CALL addtoken_f8(hcontextqual,"T_SECHLTHPLN",bhr2.health_plan_id),
         CALL addtoken_f8(hcontextqual,"T_SECPAYER",bhr2.payor_org_id),
         CALL addtoken_f8(hcontextqual,"T_SECFNCLASS",hp2.financial_class_cd)
        ENDIF
        IF (bhr2.priority_seq=3
         AND bhr2.health_plan_id > 0.0)
         CALL addtoken_f8(hcontextqual,"T_TERHLTHPLN",bhr2.health_plan_id),
         CALL addtoken_f8(hcontextqual,"T_TERFNCLASS",hp2.financial_class_cd)
        ENDIF
      ENDFOR
      IF (bhr2.health_plan_id > 0.0)
       data_rec->qual_cnt += 1
       IF (mod(data_rec->qual_cnt,10)=1)
        stat = alterlist(data_rec->qual,(data_rec->qual_cnt+ 9))
       ENDIF
       data_rec->qual[data_rec->qual_cnt].data_type_meaning = "health_plan", data_rec->qual[data_rec
       ->qual_cnt].double_value = bhr2.health_plan_id, data_rec->qual[data_rec->qual_cnt].int_value
        = bhr2.priority_seq
      ENDIF
     ENDIF
     IF (((pe.recur_ind != 0) OR (e.disch_dt_tm != 0)) )
      IF ( NOT (calculateservicedatesforencounter(e.reg_dt_tm,e.disch_dt_tm,pe.recur_current_month,pe
       .recur_current_year,servicefromdate,
       servicetodate)))
       CALL echo(build("Failed to calculate service dates for encounter [",pe.pft_encntr_id,"]"))
      ENDIF
      IF (servicetodate != 0)
       dayspassed = datetimediff(cnvtdatetime(curdate,curtime),servicetodate),
       CALL addtoken_f8(hcontextqual,"T_DPDISCHRG",cnvtreal(dayspassed))
      ENDIF
     ENDIF
     IF (br.bill_status_reason_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_CLMSTRC",br.bill_status_reason_cd)
     ENDIF
     IF (br.transmission_dt_tm != 0)
      dayspassed = datetimediff(cnvtdatetime(curdate,curtime),cnvtdatetime(br.transmission_dt_tm)),
      CALL addtoken_f8(hcontextqual,"T_CLMDAYTRAS",cnvtreal(dayspassed))
     ENDIF
    WITH nocounter
   ;end select
   SET rec_json = cnvtrectojson(data_rec)
   CALL addtoken_vc(hcontextqual,"T_DYNHLTHPLN",rec_json)
   IF (ccnt != porigsize)
    CALL logmessage("getClaimTokens","Invalid claim specified",log_error)
    RETURN(false)
   ENDIF
   SET startidx = 1
   SET eidx = 0
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bill_reltn bre,
     bo_hp_reltn bhr1
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bre
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bre.corsp_activity_id,requestparamgroups
      ->objarray[eidx].corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN")
     JOIN (bhr1
     WHERE bhr1.bo_hp_reltn_id=bre.parent_entity_id)
    ORDER BY bhr1.bo_hp_reltn_id
    HEAD bhr1.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bre.corsp_activity_id,requestparamgroups->objarray[lidx].
      corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
     IF ((requestparamgroups->objarray[cidx].eventid > 0.0))
      hqual = uar_srvgetitem(hobjarray,"qual",0)
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
       FOR (fidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams,
        5))
         CASE (requestparamgroups->objarray[cidx].eventid)
          OF cs29322_applyhold:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="HOLDREASONCD")
            CALL addtoken_f8(hcontextqual,"T_APPLYHOLD",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_relhold:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="HOLDREASONCD")
            CALL addtoken_f8(hcontextqual,"T_RELHOLD",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_aplyactioncd:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="ACTIONCODE")
            CALL addtoken_f8(hcontextqual,"T_APPACTNCD",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_adjposted:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="POSTADJSUB")
            CALL addtoken_f8(hcontextqual,"T_POSTADJSUB",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ELSEIF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx
            ].paramkey,3)="POSTADJRSN")
            CALL addtoken_f8(hcontextqual,"T_POSTADJRSN",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="T_DISCREP")
            CALL addtoken_f8(hcontextqual,"T_DISCREP",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_calcadjpost:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="POSTADJSUB")
            CALL addtoken_f8(hcontextqual,"T_POSTADJSUB",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ELSEIF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx
            ].paramkey,3)="POSTADJRSN")
            CALL addtoken_f8(hcontextqual,"T_POSTADJRSN",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="T_DISCREP")
            CALL addtoken_f8(hcontextqual,"T_DISCREP",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_issueidentified:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="ISSUE")
            CALL addtoken_f8(hcontextqual,"T_ADDEDISSUE",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_varcreated:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALALIAS")
            CALL addtoken_f8(hcontextqual,"T_DENALIAS",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALTYPE")
            CALL addtoken_f8(hcontextqual,"T_DENTYPE",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALGROUP")
            CALL addtoken_f8(hcontextqual,"T_DENGROUP",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALAMT")
            CALL addtoken_f8(hcontextqual,"T_DENAMT",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_denialposted:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALALIAS")
            CALL addtoken_f8(hcontextqual,"T_DENALIAS",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALTYPE")
            CALL addtoken_f8(hcontextqual,"T_DENTYPE",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALGROUP")
            CALL addtoken_f8(hcontextqual,"T_DENGROUP",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
           ,
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="DENIALAMT")
            CALL addtoken_f8(hcontextqual,"T_DENAMT",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
          OF cs29322_payposted:
           IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="T_DISCREP")
            CALL addtoken_f8(hcontextqual,"T_DISCREP",requestparamgroups->objarray[cidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
           ENDIF
         ENDCASE
       ENDFOR
      ENDFOR
     ENDIF
    WITH nocounter
   ;end select
   FOR (idx = 1 TO size(requestparamgroups->objarray,5))
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[idx].eventparamgroup,5))
       FOR (fidx = 1 TO size(requestparamgroups->objarray[idx].eventparamgroup[groupidx].eventparams,
        5))
         IF ((requestparamgroups->objarray[idx].eventparamgroup[groupidx].eventparams[fidx].paramkey=
         "LINEITEMID"))
          SET lineitemid = requestparamgroups->objarray[idx].eventparamgroup[groupidx].eventparams[
          fidx].doublevalue
         ENDIF
       ENDFOR
       SET cidx = locateval(lidx,1,porigsize,requestparamgroups->objarray[idx].corspactivityid,
        requestparamgroups->objarray[lidx].corspactivityid)
       SET techdenialfound = istechnicaldenialexists(requestparamgroups->objarray[idx].
        corspactivityid,lineitemid)
       SET hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
       SET hqual = uar_srvgetitem(hobjarray,"qual",0)
       SET hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
       IF (techdenialfound)
        CALL addtoken_f8(hcontextqual,"T_TECHDEN",1.0)
       ELSE
        CALL addtoken_f8(hcontextqual,"T_TECHDEN",0.0)
       ENDIF
     ENDFOR
   ENDFOR
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bill_reltn bre,
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_charge_bo_reltn pcbr,
     pft_charge pc,
     charge c,
     credential cr
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bre
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bre.corsp_activity_id,requestparamgroups
      ->objarray[eidx].corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN")
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=1)
     JOIN (pc
     WHERE pc.pft_charge_id=pcbr.pft_charge_id
      AND pc.active_ind=1)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.charge_type_cd=cs13028_debit
      AND ((c.perf_phys_id > 0.0) OR (c.verify_phys_id > 0.0))
      AND c.active_ind=1)
     JOIN (cr
     WHERE ((cr.prsnl_id=c.perf_phys_id) OR (cr.prsnl_id=c.verify_phys_id))
      AND cr.prsnl_id > 0.0
      AND cr.active_ind=1)
    ORDER BY bhr.bo_hp_reltn_id, pc.pft_charge_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bre.corsp_activity_id,requestparamgroups->objarray[lidx].
      corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
    DETAIL
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup))
       hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
       IF (cr.prsnl_id=c.perf_phys_id)
        IF (c.service_dt_tm <= cr.end_effective_dt_tm)
         CALL addtoken_f8(hcontextqual,"T_PPHYCREEXP",0.0)
        ELSE
         CALL addtoken_f8(hcontextqual,"T_PPHYCREEXP",1.0)
        ENDIF
        IF (cr.credential_type_cd > 0.0)
         CALL addtoken_f8(hcontextqual,"T_PPHYCREDTP",cr.credential_type_cd)
        ENDIF
       ENDIF
       IF (cr.prsnl_id=c.verify_phys_id)
        IF (c.service_dt_tm <= cr.end_effective_dt_tm)
         CALL addtoken_f8(hcontextqual,"T_VPHYCREEXP",0.0)
        ELSE
         CALL addtoken_f8(hcontextqual,"T_VPHYCREEXP",1.0)
        ENDIF
        IF (cr.credential_type_cd > 0.0)
         CALL addtoken_f8(hcontextqual,"T_VPHYCREDTP",cr.credential_type_cd)
        ENDIF
       ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bill_reltn bre,
     bo_hp_reltn bhr,
     benefit_order bo,
     bt_condition bt,
     pft_charge_bo_reltn pcbr
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bre
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bre.corsp_activity_id,requestparamgroups
      ->objarray[eidx].corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN")
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (bt
     WHERE bt.bt_condition_id=bo.bt_condition_id
      AND bt.single_chrg_ind=1)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=1)
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bre.corsp_activity_id,requestparamgroups->objarray[lidx].
      corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0),
     iscovered = 0
    DETAIL
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF ( NOT (iscovered))
       IF (ischargecovered(1,pcbr.covered_bitmap))
        CALL addtoken_f8(hcontextqual,"T_PRMCHRGCOV",1.0), iscovered = 1
       ENDIF
      ENDIF
     ENDFOR
    FOOT  bhr.bo_hp_reltn_id
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF ( NOT (iscovered))
       CALL addtoken_f8(hcontextqual,"T_PRMCHRGCOV",0.0)
      ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bill_reltn bre,
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encounter e,
     encntr_occurrence_code ec
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bre
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bre.corsp_activity_id,requestparamgroups
      ->objarray[eidx].corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN")
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
     JOIN (ec
     WHERE ec.encntr_id=e.encntr_id
      AND ec.active_ind=true)
    DETAIL
     cidx = locateval(lidx,1,porigsize,bre.corsp_activity_id,requestparamgroups->objarray[lidx].
      corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     IF (ec.occurrence_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_OCRNCCD",ec.occurrence_cd)
     ENDIF
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bill_reltn bre,
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encounter e,
     encntr_condition_code ec
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bre
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bre.corsp_activity_id,requestparamgroups
      ->objarray[eidx].corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN")
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id
      AND e.active_ind=true)
     JOIN (ec
     WHERE ec.encntr_id=e.encntr_id
      AND ec.active_ind=true)
    DETAIL
     cidx = locateval(lidx,1,porigsize,bre.corsp_activity_id,requestparamgroups->objarray[lidx].
      corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     IF (ec.condition_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_CONDCD",ec.condition_cd)
     ENDIF
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bill_reltn bre,
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encounter e,
     encntr_info ei,
     code_value_extension c,
     long_text l
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bre
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bre.corsp_activity_id,requestparamgroups
      ->objarray[eidx].corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN")
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (e
     WHERE e.encntr_id=pe.encntr_id)
     JOIN (ei
     WHERE ei.encntr_id=e.encntr_id)
     JOIN (c
     WHERE c.code_value=ei.info_sub_type_cd
      AND c.field_name="TYPE")
     JOIN (l
     WHERE l.long_text_id=ei.long_text_id)
    ORDER BY bhr.bo_hp_reltn_id, ei.encntr_info_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bre.corsp_activity_id,requestparamgroups->objarray[lidx].
      corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
    HEAD ei.encntr_info_id
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF (((c.field_value="DATE"
       AND ei.value_dt_tm > 0) OR (((c.field_value="STRING"
       AND l.long_text > " ") OR (((c.field_value="CODE"
       AND ei.value_cd > 0) OR (c.field_value="NUMERIC"
       AND ei.value_numeric > 0)) )) )) )
       CASE (c.field_value)
        OF "DATE":
         CALL addtokenforencuserdef_dq8(hcontextqual,"T_ENCUSERDEF",cnvtdatetime(ei.value_dt_tm),ei
         .info_sub_type_cd)
        OF "STRING":
         CALL addtokenforencuserdef_vc(hcontextqual,"T_ENCUSERDEF",l.long_text,ei.info_sub_type_cd)
        OF "CODE":
         CALL addtokenforencuserdef_f8(hcontextqual,"T_ENCUSERDEF",ei.value_cd,ei.info_sub_type_cd)
        OF "NUMERIC":
         CALL addtokenforencuserdef_f8(hcontextqual,"T_ENCUSERDEF",cnvtreal(ei.value_numeric),ei
         .info_sub_type_cd)
       ENDCASE
      ENDIF
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bill_reltn bre,
     bo_hp_reltn bhr,
     benefit_order bo,
     bt_condition bt,
     pft_charge_bo_reltn pcbr,
     pft_charge pc,
     charge c,
     pft_umdap_hist puh
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bre
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bre.corsp_activity_id,requestparamgroups
      ->objarray[eidx].corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN")
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (bt
     WHERE bt.bt_condition_id=bo.bt_condition_id
      AND bt.single_chrg_ind=1)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=1)
     JOIN (pc
     WHERE pc.pft_charge_id=pcbr.pft_charge_id
      AND pc.active_ind=1)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.charge_type_cd=cs13028_debit
      AND c.active_ind=1)
     JOIN (puh
     WHERE puh.pft_charge_id=pc.pft_charge_id)
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bre.corsp_activity_id,requestparamgroups->objarray[lidx].
      corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      CALL addtoken_f8(hcontextqual,"T_PATLIABCHG",1.0)
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bill_reltn bre,
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     encntr_plan_reltn epr,
     health_plan hp
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (bre
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),bre.corsp_activity_id,requestparamgroups
      ->objarray[eidx].corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN")
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
     JOIN (hp
     WHERE hp.health_plan_id=bhr.health_plan_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (epr
     WHERE epr.encntr_id=pe.encntr_id
      AND epr.health_plan_id=hp.health_plan_id
      AND epr.active_ind=1
      AND epr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND epr.end_effective_dt_tm > cnvtdatetime(sysdate))
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bre.corsp_activity_id,requestparamgroups->objarray[lidx].
      corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      CALL addtoken_f8(hcontextqual,"T_MONTHLYSOC",epr.deduct_amt)
     ENDFOR
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     bill_rec br
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (br
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),br.corsp_activity_id,requestparamgroups
      ->objarray[eidx].corspactivityid)
      AND br.active_ind=true)
    HEAD br.corsp_activity_id
     cidx = locateval(lidx,1,porigsize,br.corsp_activity_id,requestparamgroups->objarray[lidx].
      corspactivityid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      CALL addtoken_f8(hcontextqual,"T_CSSTATUSCD",br.bill_status_cd)
     ENDFOR
    WITH nocounter
   ;end select
   CALL addeditfailuretoken(porigsize)
   FOR (cidx = 1 TO size(requestparamgroups->objarray,5))
    FOR (eidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      FOR (fidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup[eidx].eventparams,5))
        IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[eidx].eventparams[fidx].paramkey,
         3)=autoerr_type)
         SET hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
         SET hqual = uar_srvgetitem(hobjarray,"qual",0)
         SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(eidx - 1))
         CALL addtoken_vc(hcontextqual,aae_token,requestparamgroups->objarray[cidx].eventparamgroup[
          eidx].eventparams[fidx].stringvalue)
        ENDIF
      ENDFOR
    ENDFOR
    IF ((requestparamgroups->objarray[cidx].eventid=cs29322_payrstatchng_cd))
     FOR (eidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
       FOR (fidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup[eidx].eventparams,5))
         IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[eidx].eventparams[fidx].paramkey,
          3)=payer_status_update_entity)
          SET hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
          SET hqual = uar_srvgetitem(hobjarray,"qual",0)
          SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(eidx - 1))
          SELECT INTO "nl:"
           FROM pft_br_claim_status_detail csd
           PLAN (csd
            WHERE (csd.pft_br_claim_status_detail_id=requestparamgroups->objarray[cidx].
            eventparamgroup[eidx].eventparams[fidx].doublevalue)
             AND csd.active_ind=true)
           ORDER BY csd.pft_br_claim_status_detail_id
           HEAD csd.pft_br_claim_status_detail_id
            CALL addtoken_f8(hcontextqual,"T_PAYRENTITY",csd.payer_entity_cd),
            CALL addtoken_f8(hcontextqual,"T_PAYRSTATUS",csd.payer_status_cd),
            CALL addtoken_f8(hcontextqual,"T_PAYRCATGRY",csd.payer_category_cd),
            CALL addtoken_vc(hcontextqual,"T_PAYRCATMNG",uar_get_code_meaning(csd.payer_category_cd))
           WITH nocounter
          ;end select
         ENDIF
       ENDFOR
     ENDFOR
    ENDIF
   ENDFOR
   SET stat = alterlist(getpbmtokensrequest->tokens,2)
   SET getpbmtokensrequest->tokens[1].token = "Bill.BillType"
   SET getpbmtokensrequest->tokens[2].token = "Bill.Balance"
   FOR (eidx = 1 TO size(requestparamgroups->objarray,5))
     SET getpbmtokensrequest->claimid = requestparamgroups->objarray[eidx].corspactivityid
     SET stat = initrec(getpbmtokensreply)
     EXECUTE pft_get_token_values  WITH replace("REQUEST",getpbmtokensrequest), replace("REPLY",
      getpbmtokensreply)
     IF ((getpbmtokensreply->status_data.status != "S"))
      CALL logmessage("getClaimTokens","Failed to get bill tokens",log_debug)
      RETURN(false)
     ENDIF
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1))
     SET hqual = uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
      FOR (ntokenidx = 1 TO size(getpbmtokensreply->tokenvalues,5))
       IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="Bill.BillType"))
        CALL addtoken_f8(hcontextqual,"T_BILLTYPE",getpbmtokensreply->tokenvalues[ntokenidx].
         codevalue)
       ENDIF
       IF ((getpbmtokensreply->tokenvalues[ntokenidx].token="Bill.Balance"))
        CALL addtoken_f8(hcontextqual,"T_TOTCLMAMT",getpbmtokensreply->tokenvalues[ntokenidx].
         currencyvalue)
       ENDIF
      ENDFOR
     ENDFOR
   ENDFOR
   SET claimcount = size(requestparamgroups->objarray,5)
   SET stat = alterlist(claimlistfordrglookup->claims,claimcount)
   FOR (claimidx = 1 TO claimcount)
     SET claimlistfordrglookup->claims[claimidx].corspactivityid = requestparamgroups->objarray[
     claimidx].corspactivityid
   ENDFOR
   IF (checkdic("CODING_SPECIALTY","T",0) > 1)
    SELECT INTO "nl:"
     FROM bill_reltn bre,
      bo_hp_reltn bhr,
      benefit_order bo,
      pft_encntr pe,
      coding_specialty cs
     PLAN (bre
      WHERE expand(expidx,1,claimcount,bre.corsp_activity_id,claimlistfordrglookup->claims[expidx].
       corspactivityid)
       AND bre.parent_entity_name="BO_HP_RELTN"
       AND bre.active_ind=true)
      JOIN (bhr
      WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
      JOIN (bo
      WHERE bo.benefit_order_id=bhr.benefit_order_id)
      JOIN (pe
      WHERE pe.pft_encntr_id=bo.pft_encntr_id)
      JOIN (cs
      WHERE (cs.encntr_id= Outerjoin(pe.encntr_id))
       AND (cs.contributor_system_cd= Outerjoin(cs89_himcodingmrg))
       AND (cs.active_ind= Outerjoin(true)) )
     ORDER BY bre.corsp_activity_id
     HEAD bre.corsp_activity_id
      claimidx = locateval(locidx,1,claimcount,bre.corsp_activity_id,claimlistfordrglookup->claims[
       locidx].corspactivityid)
     DETAIL
      IF (claimidx > 0)
       claimlistfordrglookup->claims[claimidx].encntrid = pe.encntr_id
       IF (cs.coding_id > 0)
        claimlistfordrglookup->claims[claimidx].encntrcontributorsystemcd = cs89_himcodingmrg
       ENDIF
      ENDIF
     WITH nocounter, expand = 1
    ;end select
   ENDIF
   SELECT INTO "nl:"
    FROM bill_reltn bre,
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     coding c
    PLAN (bre
     WHERE expand(expidx,1,claimcount,bre.corsp_activity_id,claimlistfordrglookup->claims[expidx].
      corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN"
      AND bre.active_ind=true)
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (c
     WHERE (c.encntr_id= Outerjoin(pe.encntr_id))
      AND (c.encntr_slice_id= Outerjoin(0))
      AND (c.svc_cat_hist_id= Outerjoin(0))
      AND (c.active_ind= Outerjoin(true)) )
    ORDER BY bre.corsp_activity_id
    HEAD bre.corsp_activity_id
     claimidx = locateval(locidx,1,claimcount,bre.corsp_activity_id,claimlistfordrglookup->claims[
      locidx].corspactivityid)
    DETAIL
     IF (claimidx > 0)
      claimlistfordrglookup->claims[claimidx].encntrid = pe.encntr_id
      IF (c.coding_id > 0
       AND (claimlistfordrglookup->claims[claimidx].encntrcontributorsystemcd=0.0))
       claimlistfordrglookup->claims[claimidx].encntrcontributorsystemcd = c.contributor_system_cd
      ENDIF
     ENDIF
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM bill_reltn bre,
     bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe,
     drg d,
     nomenclature n
    PLAN (bre
     WHERE expand(expidx,1,claimcount,bre.corsp_activity_id,claimlistfordrglookup->claims[expidx].
      corspactivityid)
      AND bre.parent_entity_name="BO_HP_RELTN"
      AND bre.active_ind=true)
     JOIN (bhr
     WHERE bhr.bo_hp_reltn_id=bre.parent_entity_id)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id)
     JOIN (d
     WHERE d.encntr_id=pe.encntr_id
      AND d.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND d.end_effective_dt_tm > cnvtdatetime(sysdate)
      AND d.active_ind=true)
     JOIN (n
     WHERE n.nomenclature_id=d.nomenclature_id)
    ORDER BY bre.corsp_activity_id, d.drg_id
    HEAD bre.corsp_activity_id
     claimidx = locateval(locidx,1,claimcount,bre.corsp_activity_id,claimlistfordrglookup->claims[
      locidx].corspactivityid)
    HEAD d.drg_id
     IF (claimidx > 0
      AND d.contributor_system_cd IN (claimlistfordrglookup->claims[claimidx].
     encntrcontributorsystemcd, cs89_cparemitdrg_cd, cs89_cpacntrctdrg_cd))
      hobjarray = uar_srvgetitem(prequest,"objArray",(claimidx - 1)), hqual = uar_srvgetitem(
       hobjarray,"qual",0), hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
      CASE (d.contributor_system_cd)
       OF cs89_cparemitdrg_cd:
        CALL addtoken_f8(hcontextqual,"T_REMITDRG",n.nomenclature_id)claimlistfordrglookup->claims[
        claimidx].remitdrg = n.nomenclature_id
       OF cs89_cpacntrctdrg_cd:
        CALL addtoken_f8(hcontextqual,"T_CNTRCTDRG",n.nomenclature_id)claimlistfordrglookup->claims[
        claimidx].contractdrg = n.nomenclature_id
       ELSE
        IF (d.drg_priority=1)
         CALL addtoken_f8(hcontextqual,"T_ENCNTRDRG",n.nomenclature_id), claimlistfordrglookup->
         claims[claimidx].encounterdrg = n.nomenclature_id
        ENDIF
      ENDCASE
     ENDIF
    WITH nocounter, expand = 1
   ;end select
   FOR (claimlistidx = 1 TO size(claimlistfordrglookup->claims,5))
     SET dyndrgrec->entityname = "CLAIM"
     SET dyndrgrec->encounterdrg = claimlistfordrglookup->claims[claimlistidx].encounterdrg
     SET dyndrgrec->remitdrg = claimlistfordrglookup->claims[claimlistidx].remitdrg
     SET dyndrgrec->contractdrg = claimlistfordrglookup->claims[claimlistidx].contractdrg
     CALL addtoken_dyn(hcontextqual,"T_DRGMSM",claimlistfordrglookup->claims[claimlistidx].
      corspactivityid,cnvtrectojson(dyndrgrec))
   ENDFOR
   CALL addcontractmgmterrorcategorytoken(prequest)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getscheventtokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   DECLARE code_value_flag_required = i2 WITH private, constant(1)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE ccnt = i4 WITH protect, noconstant(0)
   DECLARE qualcnt = i4 WITH protect, noconstant(0)
   DECLARE hasreviewreasonind = i2 WITH protect, noconstant(false)
   DECLARE hasfuapptrequestind = i2 WITH protect, noconstant(false)
   IF ( NOT (validate(cs14250_patient)))
    DECLARE cs14250_patient = f8 WITH constant(getcodevalue(14250,"PATIENT",code_value_flag_required)
     )
   ENDIF
   IF ( NOT (validate(cs16160_t_futfuonref)))
    DECLARE cs16160_t_futfuonref = f8 WITH constant(getcodevalue(16160,"T_FUTFUONREF",
      code_value_flag_required))
   ENDIF
   IF ( NOT (validate(cs4002343_offer_accepted_cd)))
    DECLARE cs4002343_offer_accepted_cd = f8 WITH constant(uar_get_code_by("MEANING",4002343,
      "ACCEPTED"))
   ENDIF
   IF ( NOT (validate(cs23018_pending_cd)))
    DECLARE cs23018_pending_cd = f8 WITH constant(uar_get_code_by("MEANING",23018,"PENDING"))
   ENDIF
   IF ( NOT (validate(cs16127_followup_cd)))
    DECLARE cs16127_followup_cd = f8 WITH constant(uar_get_code_by("MEANING",16127,"FOLLOWUP"))
   ENDIF
   IF ( NOT (populatescheventactionclause(null)))
    CALL logmessage("getSchEventTokens",
     "Could not resolve Oracle version for SCH_EVENT_ACTION query.",log_error)
    RETURN(false)
   ENDIF
   CALL addautoerrortoken(porigsize)
   SELECT INTO "nl:"
    FROM sch_event se,
     sch_appt sa,
     pm_offer po
    PLAN (se
     WHERE expand(eidx,1,porigsize,se.sch_event_id,request->objarray[eidx].scheventid)
      AND se.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND se.end_effective_dt_tm > cnvtdatetime(sysdate)
      AND se.active_ind=true)
     JOIN (sa
     WHERE (sa.sch_event_id= Outerjoin(se.sch_event_id))
      AND (sa.schedule_seq= Outerjoin(se.schedule_seq))
      AND (sa.sch_role_cd= Outerjoin(cs14250_patient))
      AND (sa.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
      AND (sa.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
      AND (sa.active_ind= Outerjoin(true)) )
     JOIN (po
     WHERE (po.schedule_id= Outerjoin(sa.schedule_id))
      AND (po.offer_type_cd= Outerjoin(cs4002343_offer_accepted_cd))
      AND (po.active_ind= Outerjoin(true)) )
    DETAIL
     ccnt += 1, cidx = locateval(lidx,1,porigsize,se.sch_event_id,request->objarray[lidx].scheventid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     hcontextqual = uar_srvadditem(hqual,"context_qual")
     IF (po.pm_offer_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_OUTOFATTND",po.outcome_of_attendance_cd),
      CALL addtoken_f8(hcontextqual,"T_PIFUOUTCOM",po.pifu_outcome_cd),
      CALL addtoken_f8(hcontextqual,"T_PIFUPWIND",cnvtreal(po.pifu_pathway_ind))
     ENDIF
     IF (sa.sch_appt_id > 0.0)
      CALL addtoken_dq8(hcontextqual,"T_APPTDTTM",sa.beg_dt_tm),
      CALL addtoken_f8(hcontextqual,"T_APPTSTATE",sa.sch_state_cd)
     ENDIF
     CALL addtoken_f8(hcontextqual,"T_APPTREQ",se.sch_event_id)
    WITH nocounter, expand = 1
   ;end select
   IF (ccnt != porigsize)
    CALL logmessage("getSchEventTokens","Invalid scheduling event specified",log_error)
    RETURN(false)
   ENDIF
   SELECT INTO "nl:"
    FROM sch_event se,
     sch_event_action sea,
     sch_event_detail sed
    PLAN (se
     WHERE expand(eidx,1,porigsize,se.sch_event_id,request->objarray[eidx].scheventid)
      AND se.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND se.end_effective_dt_tm > cnvtdatetime(sysdate)
      AND se.active_ind=true)
     JOIN (sea
     WHERE sqlpassthru(ora_parser_str))
     JOIN (sed
     WHERE (sed.sch_event_id= Outerjoin(sea.sch_event_id))
      AND (sed.sch_action_id= Outerjoin(sea.sch_action_id))
      AND (sed.oe_field_meaning= Outerjoin("SCHREVIEWREASON"))
      AND (sed.version_dt_tm= Outerjoin(cnvtdatetime("31-DEC-2100"))) )
    HEAD REPORT
     ccnt = 0
    DETAIL
     ccnt += 1, cidx = locateval(lidx,1,porigsize,se.sch_event_id,request->objarray[lidx].scheventid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
     IF (sed.oe_field_value > 0.0)
      CALL addtoken_f8(hcontextqual,"T_SCHREVWRSN",sed.oe_field_value)
     ENDIF
     IF (sea.sch_reason_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_SCHCNCLRSN",sea.sch_reason_cd)
     ENDIF
    WITH nocounter, expand = 1
   ;end select
   SELECT INTO "nl:"
    FROM referral_entity_reltn rer,
     referral r
    PLAN (rer
     WHERE expand(eidx,1,porigsize,rer.parent_entity_id,request->objarray[eidx].scheventid)
      AND rer.active_ind=true
      AND rer.parent_entity_name="SCH_EVENT")
     JOIN (r
     WHERE r.referral_id=rer.referral_id
      AND r.active_ind=true)
    HEAD REPORT
     ccnt = 0
    DETAIL
     ccnt += 1, cidx = locateval(lidx,1,porigsize,rer.parent_entity_id,request->objarray[lidx].
      scheventid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual"), hcontextqual = uar_srvadditem(hqual,"context_qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0), hcontextqual = uar_srvgetitem(hqual,"context_qual",
       0)
     ENDIF
     IF (r.referral_status_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_RFSTATUS",r.referral_status_cd)
     ENDIF
    WITH nocounter, expand = 1
   ;end select
   SELECT INTO "nl:"
    FROM sch_event se,
     sch_appt_option ao,
     sch_appt_option ao1
    PLAN (se
     WHERE expand(eidx,1,porigsize,se.sch_event_id,request->objarray[eidx].scheventid)
      AND se.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND se.end_effective_dt_tm > cnvtdatetime(sysdate)
      AND se.active_ind=true)
     JOIN (ao
     WHERE (ao.appt_type_cd= Outerjoin(se.appt_type_cd))
      AND (ao.active_ind= Outerjoin(true))
      AND (ao.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
      AND (ao.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
      AND (ao.option_meaning= Outerjoin("FOLLOWUP")) )
     JOIN (ao1
     WHERE (ao1.appt_type_cd= Outerjoin(se.appt_type_cd))
      AND (ao1.active_ind= Outerjoin(true))
      AND (ao1.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
      AND (ao1.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
      AND (ao1.option_meaning= Outerjoin("DIAGNOSTIC")) )
    HEAD REPORT
     ccnt = 0
    DETAIL
     ccnt += 1, cidx = locateval(lidx,1,porigsize,se.sch_event_id,request->objarray[lidx].scheventid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
     IF (ao.sch_option_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_POPTION",ao.sch_option_cd)
     ELSEIF (ao1.sch_option_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_POPTION",ao1.sch_option_cd)
     ENDIF
    WITH nocounter, expand = 1
   ;end select
   SELECT INTO "nl:"
    FROM referral_entity_reltn rer,
     referral_entity_reltn rer2,
     sch_event_detail sed
    PLAN (rer
     WHERE expand(eidx,1,porigsize,rer.parent_entity_id,request->objarray[eidx].scheventid)
      AND rer.parent_entity_name="SCH_EVENT"
      AND rer.active_ind=true)
     JOIN (rer2
     WHERE rer2.referral_id=rer.referral_id
      AND rer2.active_ind=true
      AND rer2.parent_entity_name="SCH_EVENT")
     JOIN (sed
     WHERE (sed.sch_event_id= Outerjoin(rer2.parent_entity_id))
      AND (sed.oe_field_meaning= Outerjoin("SCHREVIEWREASON"))
      AND (sed.version_dt_tm= Outerjoin(cnvtdatetime("31-DEC-2100")))
      AND (sed.sch_action_id> Outerjoin(0)) )
    ORDER BY rer.parent_entity_id
    HEAD REPORT
     ccnt = 0
    HEAD rer.parent_entity_id
     hasreviewreasonind = false
    DETAIL
     IF (sed.oe_field_value > 0.0)
      hasreviewreasonind = true
     ENDIF
    FOOT  rer.parent_entity_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,rer.parent_entity_id,request->objarray[lidx].
      scheventid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
     IF (hasreviewreasonind)
      CALL addtoken_f8(hcontextqual,"T_RFRLREVW",1.0)
     ELSE
      CALL addtoken_f8(hcontextqual,"T_RFRLREVW",0.0)
     ENDIF
    WITH nocounter, expand = 1
   ;end select
   FREE RECORD tmprequest
   RECORD tmprequest(
     1 objcnt = i4
     1 objarray[*]
       2 scheventid = f8
       2 t_futfuonrefsetind = i2
   )
   SET stat = alterlist(tmprequest->objarray,porigsize)
   FOR (eidx = 1 TO porigsize)
    SET tmprequest->objcnt += 1
    SET tmprequest->objarray[tmprequest->objcnt].scheventid = request->objarray[eidx].scheventid
   ENDFOR
   SELECT INTO "nl:"
    FROM sch_event se,
     sch_appt sa,
     referral_entity_reltn rer,
     referral_entity_reltn rer2,
     sch_event se2,
     sch_appt sa2
    PLAN (se
     WHERE expand(eidx,1,porigsize,se.sch_event_id,request->objarray[eidx].scheventid))
     JOIN (sa
     WHERE sa.sch_event_id=se.sch_event_id
      AND sa.schedule_seq=se.schedule_seq
      AND sa.sch_role_cd=cs14250_patient
      AND sa.active_ind=1
      AND sa.version_dt_tm > cnvtdatetime(sysdate))
     JOIN (rer
     WHERE rer.parent_entity_id=se.sch_event_id
      AND rer.parent_entity_name="SCH_EVENT"
      AND rer.active_ind=1)
     JOIN (rer2
     WHERE rer2.referral_id=rer.referral_id
      AND rer2.parent_entity_name="SCH_EVENT"
      AND rer2.active_ind=1)
     JOIN (se2
     WHERE se2.sch_event_id=rer2.parent_entity_id
      AND se2.active_ind=1
      AND se2.version_dt_tm > cnvtdatetime(sysdate)
      AND  NOT ( EXISTS (
     (SELECT
      1
      FROM sch_appt_option sao
      WHERE sao.appt_type_cd=se2.appt_type_cd
       AND sao.option_meaning="DIAGNOSTIC"
       AND sao.active_ind=1
       AND sao.version_dt_tm > cnvtdatetime(sysdate)))))
     JOIN (sa2
     WHERE sa2.sch_event_id=se2.sch_event_id
      AND sa2.schedule_seq=se2.schedule_seq
      AND sa2.sch_role_cd=cs14250_patient
      AND sa2.beg_dt_tm > sa.beg_dt_tm
      AND sa2.active_ind=1
      AND sa2.version_dt_tm > cnvtdatetime(sysdate)
      AND  NOT ( EXISTS (
     (SELECT
      1
      FROM sch_event_action sea
      WHERE sea.sch_event_id=sa2.sch_event_id
       AND sea.schedule_id=sa2.schedule_id
       AND sea.action_meaning="CANCEL"
       AND sea.sch_reason_cd IN (
      (SELECT
       cv.code_value
       FROM code_value_group cvg,
        code_value cv
       WHERE cvg.parent_code_value=cs16160_t_futfuonref
        AND cvg.code_set=14229
        AND cv.code_value=cvg.child_code_value
        AND cv.active_ind=1))
       AND sea.active_ind=1
       AND sea.version_dt_tm > cnvtdatetime(sysdate)))))
    ORDER BY se.sch_event_id
    HEAD REPORT
     ccnt = 0
    HEAD se.sch_event_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,se.sch_event_id,request->objarray[lidx].scheventid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0),
     CALL addtoken_f8(hcontextqual,"T_FUTFUONREF",1.0), cidx = locateval(lidx,1,tmprequest->objcnt,se
      .sch_event_id,tmprequest->objarray[lidx].scheventid),
     tmprequest->objarray[cidx].t_futfuonrefsetind = 1
    WITH nocounter, expand = 1
   ;end select
   FOR (eidx = 1 TO tmprequest->objcnt)
     IF ((tmprequest->objarray[eidx].t_futfuonrefsetind=0))
      SET cidx = locateval(lidx,1,porigsize,tmprequest->objarray[eidx].scheventid,request->objarray[
       lidx].scheventid)
      SET hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
      SET qualcnt = uar_srvgetitemcount(hobjarray,"qual")
      IF (qualcnt=0)
       SET hqual = uar_srvadditem(hobjarray,"qual")
      ELSE
       SET hqual = uar_srvgetitem(hobjarray,"qual",0)
      ENDIF
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
      CALL addtoken_f8(hcontextqual,"T_FUTFUONREF",0.0)
     ENDIF
   ENDFOR
   FREE RECORD tmprequest
   SELECT INTO "nl:"
    FROM referral_entity_reltn rer,
     referral_entity_reltn rer2,
     sch_event se,
     sch_entry sen,
     sch_appt_option sao
    PLAN (rer
     WHERE expand(eidx,1,porigsize,rer.parent_entity_id,request->objarray[eidx].scheventid)
      AND rer.parent_entity_name="SCH_EVENT"
      AND rer.active_ind=1)
     JOIN (rer2
     WHERE rer2.referral_id=rer.referral_id
      AND rer2.parent_entity_name="SCH_EVENT"
      AND rer2.active_ind=1)
     JOIN (se
     WHERE se.sch_event_id=rer2.parent_entity_id
      AND se.active_ind=1
      AND se.version_dt_tm > cnvtdatetime(sysdate))
     JOIN (sen
     WHERE (sen.sch_event_id= Outerjoin(se.sch_event_id))
      AND (sen.entry_state_cd= Outerjoin(cs23018_pending_cd))
      AND (sen.active_ind= Outerjoin(1))
      AND (sen.version_dt_tm> Outerjoin(cnvtdatetime(sysdate))) )
     JOIN (sao
     WHERE (sao.appt_type_cd= Outerjoin(se.appt_type_cd))
      AND (sao.sch_option_cd= Outerjoin(cs16127_followup_cd))
      AND (sao.active_ind= Outerjoin(1))
      AND (sao.version_dt_tm> Outerjoin(cnvtdatetime(sysdate))) )
    ORDER BY rer.parent_entity_id
    HEAD REPORT
     ccnt = 0
    HEAD rer.parent_entity_id
     hasfuapptrequestind = false
    DETAIL
     IF (sen.sch_entry_id > 0.0
      AND sao.sch_option_cd > 0.0)
      hasfuapptrequestind = true
     ENDIF
    FOOT  rer.parent_entity_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,rer.parent_entity_id,request->objarray[lidx].
      scheventid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
     IF (hasfuapptrequestind)
      CALL addtoken_f8(hcontextqual,"T_FUREQONREF",1.0)
     ELSE
      CALL addtoken_f8(hcontextqual,"T_FUREQONREF",0.0)
     ENDIF
    WITH nocounter, expand = 1
   ;end select
   SELECT INTO "nl:"
    FROM sch_event_detail sed,
     order_entry_fields oef
    PLAN (sed
     WHERE expand(eidx,1,porigsize,sed.sch_event_id,request->objarray[eidx].scheventid)
      AND sed.sch_action_id=0.0
      AND sed.version_dt_tm > cnvtdatetime(sysdate)
      AND sed.active_ind=true)
     JOIN (oef
     WHERE oef.oe_field_id=sed.oe_field_id)
    ORDER BY sed.sch_event_id
    HEAD REPORT
     ccnt = 0
    HEAD sed.sch_event_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,sed.sch_event_id,request->objarray[lidx].scheventid
      ), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
    DETAIL
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0),
     CALL addtoken_oef(hcontextqual,"T_EVENTDET",oef.field_type_flag,sed.oe_field_id,sed
     .oe_field_meaning_id,trim(sed.oe_field_meaning,3),sed.oe_field_dt_tm_value,sed.oe_field_value,
     trim(sed.oe_field_display_value,3),cnvtdatetime("01-JAN-1800 00:00:00.00"),cnvtdatetime(
      "31-DEC-2100 00:00:00.00"))
    FOOT  sed.sch_event_id
     null
    WITH nocounter, expand = 1
   ;end select
   SELECT INTO "nl:"
    FROM sch_event se,
     sch_event_attach sea,
     order_action oa,
     order_detail od,
     order_entry_fields oef
    PLAN (se
     WHERE expand(eidx,1,porigsize,se.sch_event_id,request->objarray[eidx].scheventid))
     JOIN (sea
     WHERE sea.sch_event_id=se.sch_event_id
      AND sea.beg_schedule_seq <= se.schedule_seq
      AND sea.end_schedule_seq >= se.schedule_seq
      AND sea.attach_type_cd=cs16110_order_cd
      AND ((sea.order_status_meaning = null) OR ( NOT (sea.order_status_meaning IN ("CANCELED",
     "COMPLETED", "DISCONTINUED", "ROLLBACK"))))
      AND sea.state_meaning != "REMOVED"
      AND sea.version_dt_tm > cnvtdatetime(sysdate)
      AND sea.active_ind=1)
     JOIN (oa
     WHERE oa.order_id=sea.order_id
      AND oa.action_type_cd IN (cs6003_order_cd, cs6003_modify_cd, cs6003_reschedule_cd,
     cs6003_activate_cd, cs6003_futuredc_cd,
     cs6003_renew_cd, cs6003_resume_renew_cd, cs6003_collection_cd)
      AND oa.action_rejected_ind=0)
     JOIN (od
     WHERE od.order_id=oa.order_id
      AND od.action_sequence=oa.action_sequence)
     JOIN (oef
     WHERE oef.oe_field_id=od.oe_field_id)
    ORDER BY se.sch_event_id, od.oe_field_id, od.action_sequence DESC
    HEAD REPORT
     ccnt = 0
    HEAD se.sch_event_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,se.sch_event_id,request->objarray[lidx].scheventid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
    HEAD od.oe_field_id
     act_seq = od.action_sequence, flag = true
    HEAD od.action_sequence
     IF (act_seq != od.action_sequence)
      flag = false
     ENDIF
    DETAIL
     IF (flag)
      qualcnt = uar_srvgetitemcount(hobjarray,"qual")
      IF (qualcnt=0)
       hqual = uar_srvadditem(hobjarray,"qual")
      ELSE
       hqual = uar_srvgetitem(hobjarray,"qual",0)
      ENDIF
      hcontextqual = uar_srvgetitem(hqual,"context_qual",0),
      CALL addtoken_oef(hcontextqual,"T_ORDERDET",oef.field_type_flag,od.oe_field_id,od
      .oe_field_meaning_id,trim(od.oe_field_meaning,3),od.oe_field_dt_tm_value,od.oe_field_value,trim
      (od.oe_field_display_value,3),cnvtdatetime("01-JAN-1800 00:00:00.00"),cnvtdatetime(
       "31-DEC-2100 00:00:00.00"))
     ENDIF
    FOOT  od.action_sequence
     null
    FOOT  od.oe_field_id
     null
    FOOT  se.sch_event_id
     null
    WITH nocounter, expand = 1
   ;end select
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getreferraltokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   DECLARE hasreviewreasonind = i2 WITH protect, noconstant(false)
   DECLARE diag_po_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",16127,"DIAGNOSTIC"))
   DECLARE accept_referral_action_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",4242006,
     "ACCEPT"))
   DECLARE create_referral_action_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",4242006,
     "CREATE"))
   DECLARE startidx = i4 WITH protect, noconstant(1)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE ccnt = i4 WITH protect, noconstant(0)
   DECLARE lreferralidx = i4 WITH protect, noconstant(1)
   DECLARE drefwaitliststatuscd = f8 WITH protect, noconstant(0.0)
   IF ( NOT (populatescheventactionclause(null)))
    CALL logmessage("getReferralTokens",
     "Could not resolve Oracle version for SCH_EVENT_ACTION query.",log_error)
    RETURN(false)
   ENDIF
   CALL addautoerrortoken(porigsize)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     referral r,
     referral_action ra
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (r
     WHERE expand(lreferralidx,startidx,(startidx+ (pbatchsize - 1)),r.referral_id,request->objarray[
      lreferralidx].referralid)
      AND r.active_ind=true)
     JOIN (ra
     WHERE ra.referral_action_id IN (
     (SELECT
      max(ramax.referral_action_id)
      FROM referral_action ramax
      WHERE ramax.referral_id=r.referral_id
       AND ramax.referral_action_type_cd IN (accept_referral_action_cd, create_referral_action_cd)
       AND ramax.active_ind=true)))
    DETAIL
     ccnt += 1, cidx = locateval(lidx,1,size(request->objarray,5),r.referral_id,request->objarray[
      lidx].referralid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual"), hcontextqual = uar_srvadditem(hqual,"context_qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0), hcontextqual = uar_srvgetitem(hqual,"context_qual",
       0)
     ENDIF
     drefwaitliststatuscd = uar_get_code_by("MEANING",14778,nullterm(uar_get_code_meaning(r
        .wait_status_cd))),
     CALL addtoken_f8(hcontextqual,"T_RFWAITSTAT",drefwaitliststatuscd),
     CALL addtoken_f8(hcontextqual,"T_INTBKTYPE",r.intended_booking_type_cd),
     CALL addtoken_f8(hcontextqual,"T_RFSTATUS",r.referral_status_cd),
     CALL addtoken_dq8(hcontextqual,"T_RFRECVDTTM",r.referral_received_dt_tm),
     CALL addtoken_dq8(hcontextqual,"T_ACCEPTDTTM",ra.action_dt_tm)
    WITH nocounter
   ;end select
   IF (ccnt != porigsize)
    CALL logmessage("getReferralTokens","Invalid referral ext ident specified",log_error)
    RETURN(false)
   ENDIF
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     referral_entity_reltn rer,
     sch_event se,
     sch_event_action sea,
     sch_event_detail sed,
     sch_appt_option ao,
     sch_appt_option ao1
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (rer
     WHERE expand(lreferralidx,startidx,(startidx+ (pbatchsize - 1)),rer.referral_id,request->
      objarray[lreferralidx].referralid)
      AND rer.parent_entity_name="SCH_EVENT"
      AND rer.active_ind=true)
     JOIN (se
     WHERE se.sch_event_id=rer.parent_entity_id
      AND se.active_ind=true)
     JOIN (sea
     WHERE sqlpassthru(ora_parser_str))
     JOIN (sed
     WHERE (sed.sch_event_id= Outerjoin(sea.sch_event_id))
      AND (sed.sch_action_id= Outerjoin(sea.sch_action_id))
      AND (sed.oe_field_meaning= Outerjoin("SCHREVIEWREASON"))
      AND (sed.version_dt_tm= Outerjoin(cnvtdatetime("31-DEC-2100"))) )
     JOIN (ao
     WHERE (ao.appt_type_cd= Outerjoin(se.appt_type_cd))
      AND (ao.active_ind= Outerjoin(true))
      AND (ao.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
      AND (ao.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
      AND (ao.option_meaning= Outerjoin("FOLLOWUP")) )
     JOIN (ao1
     WHERE (ao1.appt_type_cd= Outerjoin(se.appt_type_cd))
      AND (ao1.active_ind= Outerjoin(true))
      AND (ao1.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
      AND (ao1.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
      AND (ao1.option_meaning= Outerjoin("DIAGNOSTIC")) )
    HEAD REPORT
     ccnt = 0
    HEAD rer.referral_id
     ccnt += 1, cidx = locateval(lidx,1,size(request->objarray,5),rer.referral_id,request->objarray[
      lidx].referralid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=1)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",1)
     ENDIF
     hasreviewreasonind = false
    DETAIL
     hcontextqual = uar_srvadditem(hqual,"context_qual")
     IF (se.sch_state_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_APPTSTATE",se.sch_state_cd)
     ENDIF
     IF (ao.sch_option_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_POPTION",ao.sch_option_cd)
     ELSEIF (ao1.sch_option_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_POPTION",ao1.sch_option_cd)
     ENDIF
     IF (sed.oe_field_value > 0.0)
      hasreviewreasonind = true
     ENDIF
    FOOT  rer.referral_id
     hqual = uar_srvgetitem(hobjarray,"qual",0), hcontextqual = uar_srvgetitem(hqual,"context_qual",0
      )
     IF (hasreviewreasonind)
      CALL addtoken_f8(hcontextqual,"T_RFRLREVW",1.0)
     ELSE
      CALL addtoken_f8(hcontextqual,"T_RFRLREVW",0.0)
     ENDIF
    WITH nocounter
   ;end select
   IF (ccnt != porigsize)
    CALL logmessage("getReferralTokens","Invalid referral ext ident specified",log_error)
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getchargeitemtokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   CALL logmessage("getChargeItemTokens","Entering...",log_debug)
   DECLARE ml_requestarrayindex = i4 WITH protect, noconstant(0)
   FOR (ml_requestarrayindex = 1 TO size(request->objarray,5))
     IF ((request->objarray[ml_requestarrayindex].encounterid < 0.0))
      CALL logmessage("getChargeItemTokens",build("Encounter Id is not provided:",request->objarray[
        ml_requestarrayindex].encounterid),log_debug)
      RETURN(false)
     ENDIF
   ENDFOR
   FREE RECORD temp
   RECORD temp(
     1 qual[3]
       2 process_flg = i4
   ) WITH protect
   RECORD token_validation(
     1 qual[*]
       2 encntr_id = f8
       2 token_cnt = i4
   ) WITH protect
   DECLARE startidx = i4 WITH protect, noconstant(1)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE ml_index = i4 WITH protect, noconstant(0)
   DECLARE encntrtknidx = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   IF ( NOT (validate(cs13019_bill_code_cd)))
    DECLARE cs13019_bill_code_cd = f8 WITH protect, constant(getcodevalue(13019,"BILL CODE",0))
   ENDIF
   CALL logmessage("getChargeItemTokens","Retrieving insurance and encounter data...",log_debug)
   SET stat = alterlist(token_validation->qual,porigsize)
   FOR (encntrtknidx = 1 TO size(token_validation->qual,5))
    SET token_validation->qual[encntrtknidx].encntr_id = request->objarray[encntrtknidx].encounterid
    SET token_validation->qual[encntrtknidx].token_cnt = 0
   ENDFOR
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     encounter e,
     encntr_plan_reltn epr
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (e
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),e.encntr_id,request->objarray[eidx].
      encounterid)
      AND e.encntr_id > 0.0)
     JOIN (epr
     WHERE (epr.encntr_id= Outerjoin(e.encntr_id))
      AND (epr.active_ind= Outerjoin(true))
      AND (epr.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
      AND (epr.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate))) )
    ORDER BY e.encntr_id
    HEAD e.encntr_id
     cidx = locateval(lidx,1,porigsize,e.encntr_id,request->objarray[lidx].encounterid), hobjarray =
     uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvadditem(hobjarray,"qual"),
     hcontextqual = uar_srvadditem(hqual,"context_qual")
     IF (e.encntr_type_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_ENCTYPE",e.encntr_type_cd), token_validation->qual[cidx].
      token_cnt += 1
     ENDIF
     IF (e.loc_facility_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_FACILITY",e.loc_facility_cd), token_validation->qual[cidx].
      token_cnt += 1
     ENDIF
     IF (e.financial_class_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_FINCLASS",e.financial_class_cd), token_validation->qual[cidx].
      token_cnt += 1
     ENDIF
     IF (e.inpatient_admit_dt_tm != null)
      CALL addtoken_dq8(hcontextqual,"T_ENCADMITDT",e.inpatient_admit_dt_tm), token_validation->qual[
      cidx].token_cnt += 1
     ENDIF
     IF (e.reg_dt_tm != null)
      CALL addtoken_dq8(hcontextqual,"T_ENCREGDTTM",e.reg_dt_tm), token_validation->qual[cidx].
      token_cnt += 1
     ENDIF
     IF (e.disch_dt_tm != null)
      CALL addtoken_dq8(hcontextqual,"T_ENCDISCHDT",e.disch_dt_tm), token_validation->qual[cidx].
      token_cnt += 1
     ENDIF
     IF (e.loc_nurse_unit_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_ENCNURUNIT",e.loc_nurse_unit_cd), token_validation->qual[cidx]
      .token_cnt += 1
     ENDIF
    DETAIL
     IF (epr.encntr_plan_reltn_id > 0.0)
      IF (epr.priority_seq=1
       AND epr.health_plan_id > 0.0)
       CALL addtoken_f8(hcontextqual,"T_PRMHLTHPLN",epr.health_plan_id), token_validation->qual[cidx]
       .token_cnt += 1,
       CALL addtoken_f8(hcontextqual,"T_PAYER",epr.organization_id),
       token_validation->qual[cidx].token_cnt += 1
      ENDIF
      IF (epr.priority_seq=2
       AND epr.health_plan_id > 0.0)
       CALL addtoken_f8(hcontextqual,"T_SECHLTHPLN",epr.health_plan_id), token_validation->qual[cidx]
       .token_cnt += 1
      ENDIF
      IF (epr.priority_seq=3
       AND epr.health_plan_id > 0.0)
       CALL addtoken_f8(hcontextqual,"T_TERHLTHPLN",epr.health_plan_id), token_validation->qual[cidx]
       .token_cnt += 1
      ENDIF
     ENDIF
    WITH nocounter
   ;end select
   CALL logmessage("getChargeItemTokens","Retrieving charge bill codes data...",log_debug)
   SET startidx = 1
   SET temp->qual[1].process_flg = 0
   SET temp->qual[2].process_flg = 100
   SET temp->qual[3].process_flg = 999
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     charge c,
     charge_mod cm,
     nomenclature n
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (c
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),c.encntr_id,request->objarray[eidx].
      encounterid)
      AND expand(ml_index,1,size(temp->qual,5),c.process_flg,temp->qual[ml_index].process_flg)
      AND c.encntr_id > 0.0
      AND c.active_ind=true)
     JOIN (cm
     WHERE cm.charge_item_id=c.charge_item_id
      AND cm.charge_mod_type_cd=cs13019_bill_code_cd
      AND cm.active_ind=true
      AND cm.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND cm.end_effective_dt_tm > cnvtdatetime(sysdate))
     JOIN (n
     WHERE ((n.nomenclature_id=cm.nomen_id
      AND n.active_ind=true) OR (n.nomenclature_id=0.0)) )
    ORDER BY c.encntr_id, c.charge_item_id
    HEAD c.encntr_id
     cidx = locateval(lidx,1,porigsize,c.encntr_id,request->objarray[lidx].encounterid), hobjarray =
     uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual = uar_srvgetitem(hobjarray,"qual",0),
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
    HEAD c.charge_item_id
     IF (c.bill_item_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_BILLITEM",c.bill_item_id), token_validation->qual[cidx].
      token_cnt += 1
     ENDIF
    DETAIL
     IF (uar_get_code_meaning(cm.field1_id)="REVENUE")
      CALL addtoken_f8(hcontextqual,"T_REVCODE",cm.field3_id), token_validation->qual[cidx].token_cnt
       += 1
     ENDIF
     IF (uar_get_code_meaning(cm.field1_id)="HCPCS"
      AND n.nomenclature_id > 0.0)
      CALL addtoken_vc(hcontextqual,"T_CHRGHCPCS",n.source_identifier), token_validation->qual[cidx].
      token_cnt += 1
     ENDIF
     IF (uar_get_code_meaning(cm.field1_id)="CPT4"
      AND n.nomenclature_id > 0.0)
      CALL addtoken_vc(hcontextqual,"T_CHRGCPT4",n.source_identifier), token_validation->qual[cidx].
      token_cnt += 1
     ENDIF
    WITH nocounter
   ;end select
   DECLARE idx = i4 WITH protect, noconstant(0)
   FOR (idx = 1 TO porigsize)
     IF ((token_validation->qual[idx].token_cnt=0))
      CALL logmessage("getChargeItemTokens",concat("No tokens were found for encounter_id = ",
        cnvtstring(token_validation->qual[idx].encntr_id)),log_error)
      RETURN(false)
     ENDIF
   ENDFOR
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getpersontokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   CALL logmessage("getPersonTokens","Entering...",log_debug)
   DECLARE personid = f8 WITH protect, noconstant(0.0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE corspactid = f8 WITH protect, noconstant(0)
   DECLARE fidx = i4 WITH protect, noconstant(0)
   IF ( NOT (validate(cs29322_corrstatupdt_cd)))
    DECLARE cs29322_corrstatupdt_cd = f8 WITH protect, constant(getcodevalue(29322,"CORRSTATUPDT",1))
   ENDIF
   IF ( NOT (validate(cs4_ssn_alias_type_cd)))
    DECLARE cs4_ssn_alias_type_cd = f8 WITH protect, constant(getcodevalue(4,"SSN",0))
   ENDIF
   FOR (lidx = 1 TO porigsize)
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
     SET hqual = uar_srvadditem(hobjarray,"qual")
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
       SET hcontextqual = uar_srvadditem(hqual,"context_qual")
       FOR (fidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams,
        5))
        IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
         paramkey,3)=autoerr_type)
         CALL addtoken_vc(hcontextqual,aae_token,requestparamgroups->objarray[lidx].eventparamgroup[
          groupidx].eventparams[fidx].stringvalue)
        ENDIF
        IF ((requestparamgroups->objarray[lidx].eventid > 0))
         IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
          paramkey,3)="CONTRIBSYS")
          CALL addtoken_f8(hcontextqual,"T_EVCNTRBSYS",requestparamgroups->objarray[lidx].
           eventparamgroup[groupidx].eventparams[fidx].doublevalue)
         ENDIF
        ENDIF
       ENDFOR
       SET personid = request->objarray[lidx].personid
       IF (personid > 0.0)
        CALL addtoken_f8(hcontextqual,"T_PERSDTVALD",personid)
        SELECT INTO "nl:"
         FROM person p
         WHERE p.person_id=personid
          AND p.active_ind=true
         DETAIL
          CALL addtoken_f8(hcontextqual,"T_CUSTOM",p.person_id)
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM person_alias pa
         PLAN (pa
          WHERE pa.person_id=personid
           AND pa.person_alias_type_cd=cs4_ssn_alias_type_cd
           AND pa.beg_effective_dt_tm <= cnvtdatetime(sysdate)
           AND pa.end_effective_dt_tm > cnvtdatetime(sysdate)
           AND pa.active_ind=1)
         DETAIL
          CALL addtoken_vc(hcontextqual,"T_PTSSNNBR",pa.alias)
         WITH nocounter
        ;end select
        IF ((requestparamgroups->objarray[lidx].eventid > 0.0)
         AND (requestparamgroups->objarray[lidx].eventid=cs29322_corrstatupdt_cd))
         FOR (fidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].
          eventparams,5))
           IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
            paramkey,3)="CORSPACTID")
            SET corspactid = requestparamgroups->objarray[lidx].eventparamgroup[groupidx].
            eventparams[fidx].doublevalue
            SELECT INTO "nl:"
             FROM corsp_log cl
             PLAN (cl
              WHERE cl.activity_id=corspactid
               AND cl.active_ind=1)
             DETAIL
              CALL addtoken_f8(hcontextqual,"T_CORRESSTAT",cl.corsp_status_cd),
              CALL addtoken_f8(hcontextqual,"T_ADUPDTTYPE",cl.address_update_type_cd),
              CALL addtoken_f8(hcontextqual,"T_DPV",cl.dpv_cd),
              CALL addtoken_f8(hcontextqual,"T_BADADDRESS",cl.bad_address_cd),
              CALL addtoken_f8(hcontextqual,"T_MOVETYPE",cl.move_type_cd)
             WITH nocounter
            ;end select
           ENDIF
         ENDFOR
        ENDIF
        IF ( NOT (validate(cs338_school)))
         DECLARE cs338_school = f8 WITH protect, constant(getcodevalue(338,"SCHOOL",0))
        ENDIF
        IF ( NOT (validate(cs338_employer)))
         DECLARE cs338_employer = f8 WITH protect, constant(getcodevalue(338,"EMPLOYER",0))
        ENDIF
        SELECT INTO "nl:"
         FROM person p,
          person_org_reltn po,
          address a
         PLAN (p
          WHERE p.person_id=personid
           AND p.active_ind=true)
          JOIN (po
          WHERE po.person_id=p.person_id
           AND po.active_ind=true
           AND po.end_effective_dt_tm >= cnvtdatetime(sysdate)
           AND po.priority_seq=1)
          JOIN (a
          WHERE (a.parent_entity_id= Outerjoin(p.person_id))
           AND (a.parent_entity_name= Outerjoin("PERSON"))
           AND (a.active_ind= Outerjoin(true)) )
         HEAD REPORT
          IF (trim(po.person_org_nbr,3) != "")
           CALL addtoken_vc(hcontextqual,"T_PATNTSTDID",po.person_org_nbr)
          ENDIF
          IF (po.person_org_reltn_cd=cs338_school)
           CALL addtoken_vc(hcontextqual,"T_PATSCHLNM",po.ft_org_name)
          ENDIF
          IF (po.person_org_reltn_cd=cs338_employer)
           CALL addtoken_f8(hcontextqual,"T_PATEMPST",po.empl_status_cd)
          ENDIF
          IF (a.county_cd != 0.0)
           CALL addtoken_f8(hcontextqual,"T_PATADDCNTY",a.county_cd)
          ENDIF
          IF (po.person_org_reltn_cd=cs338_employer)
           CALL addtoken_vc(hcontextqual,"T_PATEMPNUM",po.ft_org_name)
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_PTAGEMIN",cnvtreal(notrim(substring(- (1),3,cnvtage2(p
              .birth_dt_tm)))))
         WITH nocounter
        ;end select
        CALL addtoken_f8(hcontextqual,"T_PAUTH",personid)
        CALL addtoken_f8(hcontextqual,"T_PORDTHRNUM",personid)
        CALL addtoken_f8(hcontextqual,"T_PAUTHOVER",personid)
        CALL addtoken_f8(hcontextqual,"T_PTHRSHDATE",personid)
        CALL addtoken_f8(hcontextqual,"T_PTHRSHNUM",personid)
       ELSE
        CALL logmessage("getPersonTokens","No personID in context",log_error)
        RETURN(false)
       ENDIF
     ENDFOR
   ENDFOR
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getbillingentitytokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   CALL logmessage("getBillingEntityTokens","Entering...",log_debug)
   DECLARE billingentityid = f8 WITH protect, noconstant(0.0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   FOR (lidx = 1 TO porigsize)
     SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
     SET hqual = uar_srvadditem(hobjarray,"qual")
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
       SET hcontextqual = uar_srvadditem(hqual,"context_qual")
       FOR (fidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams,
        5))
         IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
          paramkey,3)=autoerr_type)
          CALL addtoken_vc(hcontextqual,aae_token,requestparamgroups->objarray[lidx].eventparamgroup[
           groupidx].eventparams[fidx].stringvalue)
         ENDIF
       ENDFOR
       SET billingentityid = request->objarray[lidx].billingentityid
       IF (billingentityid > 0.0)
        CALL addtoken_f8(hcontextqual,"T_ENDOFMONTH",billingentityid)
        CALL addtoken_f8(hcontextqual,"T_CURRENTDAY",billingentityid)
       ELSE
        CALL logmessage("getBillingEntityTokens","No billingEntityId in context",log_error)
        RETURN(false)
       ENDIF
     ENDFOR
   ENDFOR
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getaccounttokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   CALL logmessage("getAccountTokens","Entering...",log_debug)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE groupidx = i4 WITH protect, noconstant(0)
   DECLARE startidx = i4 WITH protect, noconstant(1)
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE fidx = i4 WITH protect, noconstant(0)
   DECLARE returnflag = i2 WITH protect, noconstant(1)
   DECLARE acctcnt = i4 WITH protect, noconstant(0)
   DECLARE iacctcnt = i4 WITH protect, noconstant(0)
   RECORD acct_ids(
     1 arr_ids[*]
       2 acct_id = f8
       2 billing_entity_id = f8
   ) WITH protect
   IF ( NOT (validate(cs29322_collreturn)))
    DECLARE cs29322_collreturn = f8 WITH protect, constant(getcodevalue(29322,"COLLRETURN",0))
   ENDIF
   IF ( NOT (validate(cs29322_adjcreated)))
    DECLARE cs29322_adjcreated = f8 WITH protect, constant(getcodevalue(29322,"ADJCREATED",0))
   ENDIF
   IF ( NOT (validate(cs29322_dynamicevent_cd)))
    DECLARE cs29322_dynamicevent_cd = f8 WITH protect, constant(getcodevalue(29322,"DYNAMICEVENT",0))
   ENDIF
   CALL addautoerrortoken(porigsize)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = ploopcnt),
     account a
    PLAN (d1
     WHERE initarray(startidx,evaluate(d1.seq,1,1,(startidx+ pbatchsize))))
     JOIN (a
     WHERE expand(eidx,startidx,(startidx+ (pbatchsize - 1)),a.acct_id,request->objarray[eidx].
      accountid))
    HEAD a.acct_id
     acctcnt += 1, stat = alterlist(acct_ids->arr_ids,acctcnt), acct_ids->arr_ids[acctcnt].acct_id =
     a.acct_id,
     acct_ids->arr_ids[acctcnt].billing_entity_id = a.billing_entity_id
    WITH nocounter
   ;end select
   FOR (iacctcnt = 1 TO acctcnt)
     FOR (lidx = 1 TO porigsize)
       IF ((acct_ids->arr_ids[iacctcnt].acct_id=validate(request->objarray[eidx].accountid,0.0))
        AND validate(request->objarray[eidx].accountid,0.0) > 0)
        SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
        SET hqual = uar_srvadditem(hobjarray,"qual")
        FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
          SET hcontextqual = uar_srvadditem(hqual,"context_qual")
          IF ((requestparamgroups->objarray[lidx].eventid > 0.0))
           FOR (fidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].
            eventparams,5))
             IF ((((requestparamgroups->objarray[lidx].eventid=cs29322_adjcreated)) OR ((
             requestparamgroups->objarray[lidx].eventid=cs29322_dynamicevent_cd))) )
              IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx]
               .paramkey,3)="T_ADJUSTMENT")
               CALL addaccountleveladjustmenttokens(requestparamgroups->objarray[cidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue,acct_ids->arr_ids[iacctcnt].
                acct_id)
              ENDIF
              IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx]
               .paramkey,3)="ACTIONCODE")
               CALL addtoken_f8(hcontextqual,"T_LASTWIRES",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
              ENDIF
             ENDIF
             IF ((requestparamgroups->objarray[lidx].eventid=cs29322_collreturn))
              IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx]
               .paramkey,3)="COLLRETRSNCD")
               CALL addtoken_f8(hcontextqual,"T_COLLRETRSN",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
              ENDIF
              IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx]
               .paramkey,3)="AGENCYRETYPE")
               CALL addtoken_f8(hcontextqual,"T_MANRETAGN",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
              ENDIF
              IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx]
               .paramkey,3)="QUALNEXTAGN")
               CALL addtoken_f8(hcontextqual,"T_QUALNXTAGN",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
              ENDIF
              IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx]
               .paramkey,3)="COLLRETAGENC")
               CALL addtoken_f8(hcontextqual,"T_CRETAGENCY",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
              ENDIF
             ENDIF
             IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
              paramkey,3)="INVOICEID")
              CALL addaccountlevelinvoicetokens(requestparamgroups->objarray[cidx].eventparamgroup[
               groupidx].eventparams[fidx].doublevalue)
             ENDIF
             IF ((requestparamgroups->objarray[lidx].eventid=cs29322_dynamicevent_cd))
              IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx]
               .paramkey,3)="ACTIONCODE")
               CALL addtoken_f8(hcontextqual,"T_LASTWIRES",requestparamgroups->objarray[lidx].
                eventparamgroup[groupidx].eventparams[fidx].doublevalue)
              ENDIF
             ENDIF
           ENDFOR
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_BILLENTITY",acct_ids->arr_ids[iacctcnt].billing_entity_id)
        ENDFOR
       ELSE
        SET returnflag = 0
        CALL logmessage("getAccountTokens","No accountId in context",log_error)
       ENDIF
     ENDFOR
   ENDFOR
   RETURN(returnflag)
 END ;Subroutine
 SUBROUTINE (getcontinuousworkflowtokens(prequest=i4,porigsize=i4,ppbmencounterids=vc(ref),pbatchsize
  =i4) =i2)
   CALL logmessage("getContinuousWorkflowTokens","Entering...",log_debug)
   IF ( NOT (validate(cs212_home_cd)))
    DECLARE cs212_home_cd = f8 WITH public, constant(getcodevalue(212,"HOME",0))
   ENDIF
   IF ( NOT (validate(cs18649_payment_cd)))
    DECLARE cs18649_payment_cd = f8 WITH public, constant(getcodevalue(18649,"PAYMENT",0))
   ENDIF
   IF ( NOT (validate(cs48_active_cd)))
    DECLARE cs48_active_cd = f8 WITH protect, constant(getcodevalue(48,"ACTIVE",0))
   ENDIF
   IF ( NOT (validate(cs28120_atagency_cd)))
    DECLARE cs28120_atagency_cd = f8 WITH protect, constant(getcodevalue(28120,"ATAGENCY",0))
   ENDIF
   IF ( NOT (validate(cs28120_returned_cd)))
    DECLARE cs28120_returned_cd = f8 WITH protect, constant(getcodevalue(28120,"RETURNED",0))
   ENDIF
   IF ( NOT (validate(cs29322_dynamicevent_cd)))
    DECLARE cs29322_dynamicevent_cd = f8 WITH protect, constant(getcodevalue(29322,"DYNAMICEVENT",0))
   ENDIF
   IF ( NOT (validate(cs4002853_complete_cd)))
    DECLARE cs4002853_complete_cd = f8 WITH protect, constant(getcodevalue(4002853,"COMPLETE",0))
   ENDIF
   IF ( NOT (validate(cs24454_wfprocessid)))
    DECLARE cs24454_wfprocessid = f8 WITH protect, noconstant(getcodevalue(24454,"WFPROCESS_ID",0))
   ENDIF
   IF ( NOT (validate(cs354_selfpay_cd)))
    DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
   ENDIF
   IF ( NOT (validate(cs21749_patient_stmt_cd)))
    DECLARE cs21749_patient_stmt_cd = f8 WITH protect, constant(getcodevalue(21749,"PATIENT_STMT",0))
   ENDIF
   IF ( NOT (validate(cs19049_enc_wi_acct_cd)))
    DECLARE cs19049_enc_wi_acct_cd = f8 WITH protect, constant(getcodevalue(19049,"ENC WI ACCT",0))
   ENDIF
   IF ( NOT (validate(cs19049_family_bill_cd)))
    DECLARE cs19049_family_bill_cd = f8 WITH protect, constant(getcodevalue(19049,"FAMILY BILL",0))
   ENDIF
   IF ( NOT (validate(cs19049_nonconsencnt_cd)))
    DECLARE cs19049_nonconsencnt_cd = f8 WITH protect, constant(getcodevalue(19049,"NONCONSENCNT",0))
   ENDIF
   IF ( NOT (validate(cs351_defguar_cd)))
    DECLARE cs351_defguar_cd = f8 WITH protect, constant(getcodevalue(351,"DEFGUAR",0))
   ENDIF
   IF ( NOT (validate(cs69_recurring)))
    DECLARE cs69_recurring = f8 WITH protect, constant(getcodevalue(69,"RECURRING",0))
   ENDIF
   IF ( NOT (validate(cs24451_cancelled_cd)))
    DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
   ENDIF
   IF ( NOT (validate(cs24451_invalid_cd)))
    DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
   ENDIF
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE fidx = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE groupidx = i4 WITH protect, noconstant(0)
   FOR (lidx = 1 TO porigsize)
     IF ((pbmencounterids->ids[lidx].pftencntrid != 0.0))
      SET hobjarray = uar_srvgetitem(prequest,"objArray",(lidx - 1))
      SET hqual = uar_srvgetitem(hobjarray,"qual",0)
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup,5))
        SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
        DECLARE startidx = i4 WITH protect, noconstant(1)
        DECLARE encounterid = f8 WITH protect, noconstant(0.0)
        DECLARE diffindays = f8 WITH protect, noconstant(0.0)
        DECLARE totalpayamtsincelaststmt = f8 WITH protect, noconstant(0.0)
        DECLARE tempagencyage = f8 WITH protect, noconstant(0.0)
        DECLARE percentpaidsincelaststatement = f8 WITH protect, noconstant(0.0)
        DECLARE processid = f8 WITH protect, noconstant(0.0)
        DECLARE laststatementdate = dq8 WITH protect, noconstant(cnvtdatetime(sysdate))
        DECLARE pftencounterid = f8 WITH protect, noconstant(0.0)
        DECLARE paymentcount = i4 WITH protect, noconstant(0)
        DECLARE paymentindex = i4 WITH protect, noconstant(0)
        DECLARE statementbalance = f8 WITH protect, noconstant(0)
        DECLARE billgendatetime = dq8 WITH protect, noconstant(0.0)
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          encounter e,
          person p
         PLAN (pe
          WHERE expand(lidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->
           ids[lidx].pftencntrid))
          JOIN (e
          WHERE (e.encntr_id= Outerjoin(pe.encntr_id)) )
          JOIN (p
          WHERE (p.person_id= Outerjoin(e.person_id)) )
         DETAIL
          IF (e.encntr_type_cd > 0.0)
           CALL addtoken_f8(hcontextqual,"T_ENCTYPE",e.encntr_type_cd)
          ENDIF
          IF (e.med_service_cd > 0.0)
           CALL addtoken_f8(hcontextqual,"T_MEDSVC",e.med_service_cd)
          ENDIF
          encounterid = pe.encntr_id,
          CALL addtoken_f8(hcontextqual,"T_TCHARGES",evaluate(pe.chrg_bal_dr_cr_flag,2,(pe
           .charge_balance * - (1)),pe.charge_balance)),
          CALL addtoken_f8(hcontextqual,"T_TBALANCE",evaluate(pe.dr_cr_flag,2,(pe.balance * - (1)),pe
           .balance))
          IF (pe.last_stmt_dt_tm != null)
           diffindays = datetimecmp(cnvtdatetime(systimestamp),pe.last_stmt_dt_tm)
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_DSLASTSTMT",diffindays)
          IF (pe.last_patient_pay_dt_tm != null)
           diffindays = datetimecmp(cnvtdatetime(systimestamp),pe.last_patient_pay_dt_tm)
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_DSLASTPAY",diffindays),
          CALL addtoken_f8(hcontextqual,"T_FENCFINCLS",pe.fin_class_cd),
          CALL addtoken_f8(hcontextqual,"T_BADDEBT",cnvtreal(evaluate(pe.bad_debt_balance,0.0,false,
            true))),
          CALL addtoken_f8(hcontextqual,"T_FPPPRSNT",cnvtreal(evaluate(pe.payment_plan_flag,2,true,
            false))),
          CALL addtoken_f8(hcontextqual,"T_INFPPPRSNT",cnvtreal(evaluate(pe.payment_plan_flag,1,true,
            false))),
          CALL addtoken_f8(hcontextqual,"T_ENCNTRSTS",e.encntr_status_cd),
          CALL addtoken_f8(hcontextqual,"T_ENCNTRVIP",e.vip_cd),
          CALL addtoken_f8(hcontextqual,"T_PERSONVIP",p.vip_cd)
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          cbos_pe_reltn cpr,
          pft_pay_plan_pe_reltn ppppr,
          pft_payment_plan ppp
         PLAN (pe
          WHERE expand(lidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->
           ids[lidx].pftencntrid)
           AND pe.active_ind=true)
          JOIN (cpr
          WHERE cpr.pft_encntr_id=pe.pft_encntr_id
           AND cpr.active_ind=true)
          JOIN (ppppr
          WHERE ppppr.pft_encntr_id=cpr.pft_encntr_id
           AND ppppr.cbos_pe_reltn_id > 0.0
           AND ppppr.active_ind=true)
          JOIN (ppp
          WHERE ppp.pft_payment_plan_id=ppppr.pft_payment_plan_id
           AND ppp.active_ind=true)
         DETAIL
          CALL addtoken_f8(hcontextqual,"T_FPPPRSNT",cnvtreal(true))
         WITH nocounter, maxqual(ppp,1)
        ;end select
        RECORD relatedencntr(
          1 objarray[*]
            2 pftencntrid = f8
        ) WITH protect
        RECORD encntrwithhold(
          1 objarray[*]
            2 pftencntrid = f8
        ) WITH protect
        RECORD origbalrequest(
          1 pftencntrid = f8
        ) WITH protect
        RECORD origbalreply(
          1 origspbal = f8
          1 status_data
            2 status = c1
            2 subeventstatus[1]
              3 operationname = c25
              3 operationstatus = c1
              3 targetobjectname = c25
              3 targetobjectvalue = vc
        ) WITH protect
        SET stat = initrec(origbalrequest)
        SET stat = initrec(origbalreply)
        DECLARE consschedidx = i4 WITH protect, noconstant(0)
        DECLARE guarantorid = f8 WITH protect, noconstant(0.0)
        DECLARE consschedcd = f8 WITH protect, noconstant(0.0)
        DECLARE totalbalance = f8 WITH protect, noconstant(0.0)
        DECLARE totalpayamtsincelastconsstmt = f8 WITH protect, noconstant(0.0)
        DECLARE percentpaidsincelastconsstatement = f8 WITH protect, noconstant(0.0)
        DECLARE accountid = f8 WITH protect, noconstant(0.0)
        DECLARE loopcnt = i4 WITH protect, noconstant(0)
        DECLARE ncnt = i4 WITH protect, noconstant(0)
        DECLARE pcnt = i4 WITH protect, noconstant(0)
        DECLARE spcnt = i4 WITH protect, noconstant(0)
        DECLARE enctridx = i4 WITH protect, noconstant(0)
        DECLARE begroupid = f8 WITH protect, noconstant(0.0)
        DECLARE beid = f8 WITH protect, noconstant(0.0)
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          benefit_order bo,
          cons_bo_sched cbs,
          billing_entity_group_reltn begr
         PLAN (pe
          WHERE (pe.pft_encntr_id=pbmencounterids->ids[lidx].pftencntrid)
           AND pe.active_ind=true)
          JOIN (bo
          WHERE bo.pft_encntr_id=pe.pft_encntr_id
           AND  NOT (bo.bo_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd))
           AND bo.fin_class_cd=cs354_selfpay_cd
           AND bo.active_ind=true)
          JOIN (cbs
          WHERE cbs.cons_bo_sched_id=bo.cons_bo_sched_id
           AND cbs.active_ind=true)
          JOIN (begr
          WHERE (begr.billing_entity_id= Outerjoin(cbs.billing_entity_id))
           AND (begr.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
           AND (begr.active_ind= Outerjoin(true)) )
         DETAIL
          consschedcd = cbs.consolidation_cd, accountid = pe.acct_id, begroupid = begr
          .billing_entity_group_id,
          beid = pe.billing_entity_id
         WITH nocounter
        ;end select
        IF (consschedcd=cs19049_nonconsencnt_cd)
         SELECT INTO "nl:"
          FROM pft_encntr pe,
           benefit_order bo,
           bo_hp_reltn bhr,
           bill_rec br,
           bill_reltn brln
          PLAN (pe
           WHERE (pe.pft_encntr_id=pbmencounterids->ids[lidx].pftencntrid)
            AND pe.active_ind=true)
           JOIN (bo
           WHERE bo.pft_encntr_id=pe.pft_encntr_id
            AND  NOT (bo.bo_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd))
            AND bo.active_ind=true)
           JOIN (bhr
           WHERE bhr.benefit_order_id=bo.benefit_order_id
            AND bhr.fin_class_cd=cs354_selfpay_cd
            AND bhr.active_ind=true)
           JOIN (brln
           WHERE brln.parent_entity_name="BO_HP_RELTN"
            AND brln.parent_entity_id=bhr.bo_hp_reltn_id
            AND brln.active_ind=true)
           JOIN (br
           WHERE br.corsp_activity_id=brln.corsp_activity_id
            AND br.bill_vrsn_nbr=brln.bill_vrsn_nbr
            AND br.bill_type_cd=cs21749_patient_stmt_cd
            AND br.active_ind=true
            AND br.demand_ind=0
            AND br.gen_dt_tm <= cnvtdatetime((curdate - 1),curtime))
          ORDER BY br.gen_dt_tm DESC
          DETAIL
           billgendatetime = br.gen_dt_tm, statementbalance = round(br.balance,2), pftencounterid =
           pe.pft_encntr_id
          WITH nocounter, maxrec = 1
         ;end select
         IF (pftencounterid != 0
          AND billgendatetime != 0)
          SET totalpayamtsincelaststmt = getamountpaidsincepreviousbillgeneratedate(pftencounterid,
           billgendatetime)
         ENDIF
         CALL addtoken_f8(hcontextqual,"T_PAYSLSTMT",totalpayamtsincelaststmt)
         SET percentpaidsincelaststatement = round(((totalpayamtsincelaststmt/ statementbalance) *
          100),2)
         CALL addtoken_f8(hcontextqual,"T_PERCPAID",percentpaidsincelaststatement)
        ELSE
         CALL getguarantorbyfinencounter(pbmencounterids->ids[lidx].pftencntrid,guarantorid)
         IF (consschedcd=cs19049_enc_wi_acct_cd)
          SELECT INTO "nl:"
           FROM encntr_person_reltn epr,
            encounter e,
            pft_encntr pe,
            benefit_order bo,
            cons_bo_sched cbs,
            rc_cont_process_group rcpg
           PLAN (epr
            WHERE epr.related_person_id=guarantorid
             AND epr.person_reltn_type_cd=cs351_defguar_cd)
            JOIN (e
            WHERE e.encntr_id=epr.encntr_id
             AND ((e.disch_dt_tm != null) OR (e.encntr_type_cd=cs69_recurring)) )
            JOIN (pe
            WHERE pe.encntr_id=e.encntr_id
             AND pe.acct_id=accountid
             AND pe.active_ind=true)
            JOIN (bo
            WHERE bo.pft_encntr_id=pe.pft_encntr_id
             AND  NOT (bo.bo_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd))
             AND bo.fin_class_cd=cs354_selfpay_cd
             AND bo.active_ind=true)
            JOIN (cbs
            WHERE cbs.cons_bo_sched_id=bo.cons_bo_sched_id
             AND cbs.consolidation_cd=consschedcd)
            JOIN (rcpg
            WHERE rcpg.rc_cont_process_group_id=pe.rc_cont_process_group_id
             AND rcpg.active_ind=true)
           DETAIL
            ncnt += 1, stat = alterlist(relatedencntr->objarray,ncnt), relatedencntr->objarray[ncnt].
            pftencntrid = pe.pft_encntr_id
           WITH nocounter
          ;end select
         ELSEIF (consschedcd=cs19049_family_bill_cd)
          SELECT INTO "nl:"
           FROM encntr_person_reltn epr,
            encounter e,
            pft_encntr pe,
            benefit_order bo,
            cons_bo_sched cbs,
            rc_cont_process_group rcpg,
            billing_entity_group_reltn begr
           PLAN (epr
            WHERE epr.related_person_id=guarantorid
             AND epr.person_reltn_type_cd=cs351_defguar_cd)
            JOIN (e
            WHERE e.encntr_id=epr.encntr_id
             AND ((e.disch_dt_tm != null) OR (e.encntr_type_cd=cs69_recurring)) )
            JOIN (pe
            WHERE pe.encntr_id=e.encntr_id
             AND pe.active_ind=true)
            JOIN (bo
            WHERE bo.pft_encntr_id=pe.pft_encntr_id
             AND  NOT (bo.bo_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd))
             AND bo.fin_class_cd=cs354_selfpay_cd
             AND bo.active_ind=true)
            JOIN (cbs
            WHERE cbs.cons_bo_sched_id=bo.cons_bo_sched_id
             AND cbs.consolidation_cd=consschedcd)
            JOIN (rcpg
            WHERE rcpg.rc_cont_process_group_id=pe.rc_cont_process_group_id
             AND rcpg.active_ind=true)
            JOIN (begr
            WHERE (begr.billing_entity_id= Outerjoin(pe.billing_entity_id))
             AND (begr.billing_entity_group_id= Outerjoin(begroupid))
             AND (begr.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate))) )
           ORDER BY pe.pft_encntr_id
           HEAD pe.pft_encntr_id
            pcnt += 1
            IF (((pe.billing_entity_id=beid) OR (begroupid > 0.0)) )
             stat = alterlist(relatedencntr->objarray,pcnt), relatedencntr->objarray[pcnt].
             pftencntrid = pe.pft_encntr_id
            ENDIF
           WITH nocounter
          ;end select
         ENDIF
         IF (size(relatedencntr->objarray,5) > 0)
          SELECT INTO "nl:"
           FROM pft_encntr pe,
            benefit_order bo,
            bo_hp_reltn bhr,
            pft_trans_reltn ptr
           PLAN (pe
            WHERE expand(lidx,startidx,size(relatedencntr->objarray,5),pe.pft_encntr_id,relatedencntr
             ->objarray[lidx].pftencntrid))
            JOIN (bo
            WHERE bo.pft_encntr_id=pe.pft_encntr_id
             AND  NOT (bo.bo_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd))
             AND bo.fin_class_cd=cs354_selfpay_cd
             AND bo.active_ind=true)
            JOIN (bhr
            WHERE bhr.benefit_order_id=bo.benefit_order_id
             AND bhr.fin_class_cd=cs354_selfpay_cd)
            JOIN (ptr
            WHERE ptr.benefit_order_id=bhr.bo_hp_reltn_id
             AND ptr.parent_entity_name="PFTENCNTR"
             AND ptr.parent_entity_id=bo.pft_encntr_id
             AND ptr.trans_type_cd=cs18649_payment_cd
             AND ptr.dr_cr_flag=2
             AND ptr.active_ind=true
             AND ptr.beg_effective_dt_tm >= pe.last_stmt_dt_tm)
           DETAIL
            totalpayamtsincelastconsstmt += ptr.amount
           WITH nocounter
          ;end select
          CALL addtoken_f8(hcontextqual,"T_PAYSLSTMT",totalpayamtsincelastconsstmt)
          SELECT INTO "nl:"
           FROM pft_encntr pe,
            benefit_order bo,
            bo_hp_reltn bhr,
            pe_status_reason psr,
            pe_status_reason psr1
           PLAN (pe
            WHERE expand(lidx,startidx,size(relatedencntr->objarray,5),pe.pft_encntr_id,relatedencntr
             ->objarray[lidx].pftencntrid))
            JOIN (bo
            WHERE bo.pft_encntr_id=pe.pft_encntr_id
             AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
             AND bo.active_ind=true)
            JOIN (bhr
            WHERE bhr.benefit_order_id=bo.benefit_order_id
             AND bhr.fin_class_cd=cs354_selfpay_cd
             AND bhr.active_ind=true)
            JOIN (psr
            WHERE (psr.pft_encntr_id= Outerjoin(pe.pft_encntr_id))
             AND (psr.stmt_suppress_ind= Outerjoin(true))
             AND (psr.active_ind= Outerjoin(true)) )
            JOIN (psr1
            WHERE (psr1.bo_hp_reltn_id= Outerjoin(bhr.bo_hp_reltn_id))
             AND (psr1.active_ind= Outerjoin(true))
             AND (psr1.stmt_suppress_ind= Outerjoin(true)) )
           DETAIL
            enctridx += 1, stat = alterlist(encntrwithhold->objarray,enctridx)
            IF (psr.pe_status_reason_id <= 0.0
             AND psr1.pe_status_reason_id <= 0.0)
             encntrwithhold->objarray[enctridx].pftencntrid = pe.pft_encntr_id
            ENDIF
           WITH nocounter
          ;end select
          FOR (spcnt = 1 TO size(encntrwithhold->objarray,5))
            SET origbalrequest->pftencntrid = encntrwithhold->objarray[spcnt].pftencntrid
            EXECUTE pft_calc_orig_sp_bal  WITH replace("REQUEST",origbalrequest), replace("REPLY",
             origbalreply)
            IF ((origbalreply->status_data.status="S")
             AND (origbalreply->origspbal > 0.0))
             SET totalbalance = (origbalreply->origspbal+ totalbalance)
            ENDIF
          ENDFOR
          IF (totalbalance > 0.0)
           SET percentpaidsincelastconsstatement = round(((totalpayamtsincelastconsstmt/ totalbalance
            ) * 100),2)
           CALL addtoken_f8(hcontextqual,"T_PERCPAID",percentpaidsincelastconsstatement)
          ENDIF
         ENDIF
        ENDIF
        DECLARE totaldays = f8 WITH protect, noconstant(0.0)
        DECLARE numencounters = f8 WITH protect, noconstant(0.0)
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          encounter e,
          person p,
          encounter e2,
          pft_encntr pe2
         PLAN (pe
          WHERE expand(lidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->
           ids[lidx].pftencntrid))
          JOIN (e
          WHERE e.encntr_id=pe.encntr_id)
          JOIN (p
          WHERE p.person_id=e.person_id)
          JOIN (e2
          WHERE e2.person_id=p.person_id
           AND e2.disch_dt_tm IS NOT null)
          JOIN (pe2
          WHERE pe2.encntr_id=e2.encntr_id
           AND pe2.zero_balance_dt_tm IS NOT null)
         DETAIL
          numencounters += 1, totaldays += datetimediff(pe2.zero_balance_dt_tm,e2.disch_dt_tm,1)
         FOOT REPORT
          CALL addtoken_f8(hcontextqual,"T_PASTPAYHIS",(totaldays/ numencounters))
         WITH nocounter
        ;end select
        DECLARE balanceamount = f8 WITH protect, noconstant(0.0)
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          benefit_order bo,
          bo_hp_reltn bhr,
          pft_proration pp
         PLAN (pe
          WHERE expand(lidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->
           ids[lidx].pftencntrid))
          JOIN (bo
          WHERE bo.pft_encntr_id=pe.pft_encntr_id)
          JOIN (bhr
          WHERE bhr.benefit_order_id=bo.benefit_order_id
           AND bhr.fin_class_cd=cs354_selfpay_cd
           AND bhr.active_ind=1)
          JOIN (pp
          WHERE pp.pft_encntr_id=pe.pft_encntr_id
           AND pp.curr_amount_dr_cr_flag=1
           AND pp.bo_hp_reltn_id=bhr.bo_hp_reltn_id)
         DETAIL
          balanceamount = round(pp.curr_amt_due,2)
         FOOT REPORT
          CALL addtoken_f8(hcontextqual,"T_SELFPAYBAL",balanceamount)
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM encounter e,
          person p,
          address a
         PLAN (e
          WHERE e.encntr_id=encounterid)
          JOIN (p
          WHERE e.person_id=p.person_id)
          JOIN (a
          WHERE a.parent_entity_name="PERSON"
           AND p.person_id=a.parent_entity_id
           AND a.address_type_cd=cs212_home_cd
           AND a.beg_effective_dt_tm <= cnvtdatetime(sysdate)
           AND a.end_effective_dt_tm > cnvtdatetime(sysdate)
           AND a.active_ind=1)
         DETAIL
          CALL addtoken_vc(hcontextqual,"T_CITY",a.city),
          CALL addtoken_vc(hcontextqual,"T_STATE",a.state),
          CALL addtoken_vc(hcontextqual,"T_ZIPCODE",a.zipcode)
         WITH nocounter
        ;end select
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          pft_pay_plan_pe_reltn ppppr,
          pft_payment_plan ppp,
          credit_card_reltn ccr
         PLAN (pe
          WHERE expand(lidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->
           ids[lidx].pftencntrid))
          JOIN (ppppr
          WHERE (ppppr.pft_encntr_id= Outerjoin(pe.pft_encntr_id))
           AND (ppppr.active_ind= Outerjoin(true)) )
          JOIN (ppp
          WHERE (ppp.pft_payment_plan_id= Outerjoin(ppppr.pft_payment_plan_id))
           AND (ppp.active_ind= Outerjoin(true)) )
          JOIN (ccr
          WHERE (ccr.pft_payment_plan_id= Outerjoin(ppp.pft_payment_plan_id))
           AND (ccr.active_ind= Outerjoin(true)) )
         DETAIL
          CALL addtoken_f8(hcontextqual,"T_AUTOFPP",cnvtreal(evaluate(ccr.credit_card_reltn_id,0.0,
            false,true)))
         WITH nocounter
        ;end select
        DECLARE agencycnt = i4 WITH protect, noconstant(0)
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          pft_encntr_collection_reltn pecr,
          pft_collection_agency pca,
          organization o
         PLAN (pe
          WHERE expand(lidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->
           ids[lidx].pftencntrid))
          JOIN (pecr
          WHERE pecr.pft_encntr_id=pe.pft_encntr_id
           AND pecr.active_ind=true
           AND pecr.active_status_cd=cs48_active_cd)
          JOIN (pca
          WHERE pca.pft_collection_agency_id=pecr.parent_entity_id)
          JOIN (o
          WHERE o.organization_id=pca.organization_id
           AND o.active_ind=true)
         ORDER BY pecr.beg_effective_dt_tm DESC
         DETAIL
          agencycnt += 1
          IF (agencycnt=1)
           CALL addtoken_f8(hcontextqual,"T_AGENCYNAME",o.organization_id)
          ELSEIF (agencycnt=2)
           CALL addtoken_f8(hcontextqual,"T_PRIORAGEN",o.organization_id)
          ENDIF
         WITH nocounter, maxrec = 2
        ;end select
        DECLARE agencyage = f8 WITH protect, noconstant(0.0)
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          pft_encntr_collection_reltn pecr,
          pft_collection_agency pca,
          organization o
         PLAN (pe
          WHERE expand(lidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->
           ids[lidx].pftencntrid))
          JOIN (pecr
          WHERE pecr.pft_encntr_id=pe.pft_encntr_id
           AND pecr.active_ind=true
           AND pecr.active_status_cd=cs48_active_cd
           AND pecr.collection_state_cd IN (cs28120_atagency_cd, cs28120_returned_cd))
          JOIN (pca
          WHERE pca.pft_collection_agency_id=pecr.parent_entity_id)
          JOIN (o
          WHERE o.organization_id=pca.organization_id
           AND o.active_ind=true)
         ORDER BY pecr.beg_effective_dt_tm DESC
         DETAIL
          IF (pecr.send_dt_tm != null)
           IF (pecr.return_dt_tm != null)
            agencyage = datetimediff(pecr.return_dt_tm,pecr.send_dt_tm)
           ELSE
            agencyage = datetimediff(cnvtdatetime(sysdate),pecr.send_dt_tm)
           ENDIF
          ELSE
           IF (pecr.return_dt_tm != null)
            agencyage = datetimediff(pecr.return_dt_tm,pecr.beg_effective_dt_tm)
           ELSEIF (datetimecmp(pecr.end_effective_dt_tm,cnvtdatetime(sysdate)) > 0)
            agencyage = datetimediff(cnvtdatetime(sysdate),pecr.beg_effective_dt_tm)
           ELSE
            agencyage = datetimediff(pecr.end_effective_dt_tm,pecr.beg_effective_dt_tm)
           ENDIF
          ENDIF
          tempagencyage = round(agencyage,0)
          IF (agencyage > tempagencyage)
           agencyage = (tempagencyage+ 1)
          ELSE
           agencyage = tempagencyage
          ENDIF
          CALL addtoken_f8(hcontextqual,"T_AGENCYAGE",agencyage)
         WITH nocounter, maxrec = 1
        ;end select
        SELECT INTO "nl:"
         FROM pft_encntr pe,
          pft_encntr_collection_reltn pecr,
          pft_collection_agency pca,
          organization o
         PLAN (pe
          WHERE expand(lidx,startidx,(startidx+ (pbatchsize - 1)),pe.pft_encntr_id,pbmencounterids->
           ids[lidx].pftencntrid))
          JOIN (pecr
          WHERE pecr.pft_encntr_id=pe.pft_encntr_id
           AND pecr.active_ind=true
           AND pecr.active_status_cd=cs48_active_cd)
          JOIN (pca
          WHERE pca.pft_collection_agency_id=pecr.parent_entity_id)
          JOIN (o
          WHERE o.organization_id=pca.organization_id
           AND o.active_ind=true)
         ORDER BY pecr.beg_effective_dt_tm DESC
         DETAIL
          CALL addtoken_dq8(hcontextqual,"T_AGENPLCDT",pecr.beg_effective_dt_tm)
         WITH nocounter, maxrec = 1
        ;end select
        IF ((requestparamgroups->objarray[lidx].eventid=cs29322_dynamicevent_cd))
         FOR (fidx = 1 TO size(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].
          eventparams,5))
          IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
           paramkey,3)=uar_get_code_meaning(cs24454_wfprocessid))
           SET processid = requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[
           fidx].doublevalue
           SELECT INTO "nl:"
            FROM rc_cont_process_hist rcph,
             pft_queue_item_wf_hist pqiwh
            PLAN (rcph
             WHERE rcph.rc_cont_process_id=processid
              AND rcph.parent_entity_name="PFT_QUEUE_ITEM"
              AND rcph.status_cd=cs4002853_complete_cd)
             JOIN (pqiwh
             WHERE pqiwh.pft_queue_item_id=rcph.parent_entity_id)
            DETAIL
             CALL addtoken_f8(hcontextqual,"T_LASTWI",pqiwh.item_status_cd)
            WITH nocounter, maxrec = 1
           ;end select
          ENDIF
          IF (trim(requestparamgroups->objarray[lidx].eventparamgroup[groupidx].eventparams[fidx].
           paramkey,3)="ACTIONCODE")
           CALL addtoken_f8(hcontextqual,"T_LASTWIRES",requestparamgroups->objarray[lidx].
            eventparamgroup[groupidx].eventparams[fidx].doublevalue)
          ENDIF
         ENDFOR
        ENDIF
      ENDFOR
     ENDIF
   ENDFOR
   CALL logmessage("getContinuousWorkflowTokens","Exiting...",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getbillinginfo(pbalidx=i4) =i2)
   CALL logmessage("getBillingInfo","Entering...",log_debug)
   IF ( NOT (validate(cs18935_submitted_cd)))
    DECLARE cs18935_submitted_cd = f8 WITH protect, constant(getcodevalue(18935,"SUBMITTED",0))
   ENDIF
   IF ( NOT (validate(cs18935_transmitted_cd)))
    DECLARE cs18935_transmitted_cd = f8 WITH protect, constant(getcodevalue(18935,"TRANSMITTED",0))
   ENDIF
   IF ( NOT (validate(cs18935_readysubmit_cd)))
    DECLARE cs18935_readysubmit_cd = f8 WITH protect, constant(getcodevalue(18935,"READYSUBMIT",0))
   ENDIF
   IF ( NOT (validate(cs18935_deniedreview_cd)))
    DECLARE cs18935_deniedreview_cd = f8 WITH protect, constant(getcodevalue(18935,"DENIEDREVIEW",0))
   ENDIF
   IF ( NOT (validate(cs18935_pending_cd)))
    DECLARE cs18935_pending_cd = f8 WITH protect, constant(getcodevalue(18935,"PENDING",0))
   ENDIF
   IF ( NOT (validate(cs18935_rejected_cd)))
    DECLARE cs18935_rejected_cd = f8 WITH protect, constant(getcodevalue(18935,"REJECTED",0))
   ENDIF
   IF ( NOT (validate(cs354_selfpay_cd)))
    DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
   ENDIF
   DECLARE pftencntrlistsize = i4 WITH protect, constant(size(familybalancerec->balances[pbalidx].
     relatedfinencounters,5))
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     benefit_order bo,
     pft_charge_bo_reltn pcbr,
     pft_charge pc
    PLAN (pe
     WHERE expand(eidx,1,pftencntrlistsize,pe.pft_encntr_id,familybalancerec->balances[pbalidx].
      relatedfinencounters[eidx].pftencntrid)
      AND pe.active_ind=true)
     JOIN (bo
     WHERE bo.pft_encntr_id=pe.pft_encntr_id
      AND bo.active_ind=true)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=true)
     JOIN (pc
     WHERE pc.pft_charge_id=pcbr.pft_charge_id
      AND pc.active_ind=true
      AND  NOT ( EXISTS (
     (SELECT
      plicr.pft_charge_id
      FROM bill_reltn brel,
       bill_rec brec,
       bo_hp_reltn bhr,
       benefit_order bo,
       pft_line_item pli,
       pft_line_item_chrg_reltn plicr
      WHERE bo.pft_encntr_id=pe.pft_encntr_id
       AND bo.bo_status_cd != cs24451_invalid_cd
       AND bo.fin_class_cd != cs354_selfpay_cd
       AND bo.active_ind=true
       AND bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.bo_hp_status_cd != cs24451_invalid_cd
       AND bhr.active_ind=true
       AND brel.parent_entity_id=bhr.bo_hp_reltn_id
       AND brel.parent_entity_name="BO_HP_RELTN"
       AND brel.active_ind=true
       AND brec.corsp_activity_id=brel.corsp_activity_id
       AND brec.bill_vrsn_nbr=brel.bill_vrsn_nbr
       AND brec.bill_status_cd IN (cs18935_submitted_cd, cs18935_transmitted_cd,
      cs18935_readysubmit_cd, cs18935_deniedreview_cd, cs18935_pending_cd,
      cs18935_rejected_cd)
       AND brec.active_ind=true
       AND pli.corsp_activity_id=brec.corsp_activity_id
       AND pli.bill_vrsn_nbr=brec.bill_vrsn_nbr
       AND plicr.pft_line_item_id=pli.pft_line_item_id
       AND plicr.pft_charge_id=pc.pft_charge_id)))
      AND  NOT ( EXISTS (
     (SELECT
      pc.pft_charge_id
      FROM trans_log tl
      WHERE pe.fin_class_cd=cs354_selfpay_cd
       AND tl.activity_id=pc.activity_id
       AND tl.active_ind=true
       AND (((tl.total_trans_amount < - (0.009))) OR (tl.total_trans_amount > 0.009))
       AND tl.bill_ind=true))))
    HEAD pe.pft_encntr_id
     cidx = locateval(lidx,1,pftencntrlistsize,pe.pft_encntr_id,familybalancerec->balances[pbalidx].
      relatedfinencounters[lidx].pftencntrid), familybalancerec->balances[pbalidx].
     relatedfinencounters[lidx].unbillchargesind = true
    WITH nocounter, expand = 2
   ;end select
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getamountpaidsincepreviousbillgeneratedate(ppftencounterid=f8,mostrecentstatementdate=
  dq8) =f8)
   CALL logmessage("getAmountPaidSincePreviousBillGenerateDate","Entering...",log_debug)
   IF ( NOT (validate(cs354_selfpay_cd)))
    DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
   ENDIF
   IF ( NOT (validate(cs18649_payment_cd)))
    DECLARE cs18649_payment_cd = f8 WITH protect, constant(getcodevalue(18649,"PAYMENT",0))
   ENDIF
   DECLARE amountpaidsincepreviousstmnt = f8 WITH protect, noconstant(0.0)
   DECLARE debitcreditflag = i2 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     benefit_order bo,
     bo_hp_reltn bhr,
     pft_trans_reltn ptr
    PLAN (pe
     WHERE pe.pft_encntr_id=ppftencounterid)
     JOIN (bo
     WHERE bo.pft_encntr_id=pe.pft_encntr_id)
     JOIN (bhr
     WHERE bhr.benefit_order_id=bo.benefit_order_id
      AND bhr.fin_class_cd=cs354_selfpay_cd)
     JOIN (ptr
     WHERE ptr.benefit_order_id=bhr.bo_hp_reltn_id
      AND ptr.parent_entity_name="PFTENCNTR"
      AND ptr.parent_entity_id=bo.pft_encntr_id
      AND ptr.trans_type_cd=cs18649_payment_cd
      AND ptr.active_ind=1
      AND ptr.beg_effective_dt_tm >= cnvtdatetime(mostrecentstatementdate))
    DETAIL
     amountpaidsincepreviousstmnt += evaluate(ptr.dr_cr_flag,1,(ptr.amount * - (1.0)),2,ptr.amount,
      0.0)
    WITH nocounter
   ;end select
   SET amountpaidsincepreviousstmnt = round(amountpaidsincepreviousstmnt,2)
   RETURN(amountpaidsincepreviousstmnt)
 END ;Subroutine
 SUBROUTINE (addautoerrortoken(porigsize=i2) =null)
   FOR (eidx = 1 TO porigsize)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
       FOR (fidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams,
        5))
         IF (trim(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
          paramkey,3)=autoerr_type)
          SET hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1))
          SET hqual = uar_srvgetitem(hobjarray,"qual",0)
          SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
          CALL addtoken_vc(hcontextqual,aae_token,requestparamgroups->objarray[eidx].eventparamgroup[
           groupidx].eventparams[fidx].stringvalue)
         ENDIF
       ENDFOR
     ENDFOR
   ENDFOR
 END ;Subroutine
 SUBROUTINE addeditfailuretoken(porigsize)
   IF ( NOT (validate(edit_failure_entity)))
    DECLARE edit_failure_entity = vc WITH protect, constant("CLMEDITFAIL")
   ENDIF
   IF ( NOT (validate(cs29322_clmeditfail)))
    DECLARE cs29322_clmeditfail = f8 WITH protect, constant(getcodevalue(29322,edit_failure_entity,0)
     )
   ENDIF
   FOR (eidx = 1 TO porigsize)
     IF ((requestparamgroups->objarray[eidx].eventid=cs29322_clmeditfail))
      FOR (groupidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup,5))
        FOR (fidx = 1 TO size(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].
         eventparams,5))
          IF (trim(requestparamgroups->objarray[eidx].eventparamgroup[groupidx].eventparams[fidx].
           paramkey,3)=edit_failure_entity)
           SET hobjarray = uar_srvgetitem(prequest,"objArray",(eidx - 1))
           SET hqual = uar_srvgetitem(hobjarray,"qual",0)
           SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1))
           SELECT INTO "nl:"
            FROM pft_br_edit_failure_detail efd
            PLAN (efd
             WHERE (efd.pft_br_edit_failure_detail_id=requestparamgroups->objarray[cidx].
             eventparamgroup[groupidx].eventparams[fidx].doublevalue)
              AND efd.active_ind=true)
            ORDER BY efd.pft_br_edit_failure_detail_id
            HEAD efd.pft_br_edit_failure_detail_id
             CALL addtoken_f8(hcontextqual,"T_EDITCATGRY",efd.failure_category_cd)
            WITH nocounter
           ;end select
          ENDIF
        ENDFOR
      ENDFOR
     ENDIF
   ENDFOR
 END ;Subroutine
 SUBROUTINE (checkallchargesserviceconnectedforencounter(pftencnteridsrec=vc(ref)) =null)
   CALL logmessage("checkAllChargesServiceConnectedForEncounter","Entering...",log_debug)
   DECLARE totalchargescnt = i4 WITH protect, noconstant(0)
   DECLARE unqualifiedchargescnt = i4 WITH protect, noconstant(0)
   DECLARE qualifiedchargescnt = i4 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     pft_charge pc,
     charge c,
     charge_mod cm,
     dummyt d
    PLAN (pe
     WHERE expand(lidx,1,size(pftencnteridsrec->arr_ids,5),pe.pft_encntr_id,pftencnteridsrec->
      arr_ids[lidx].pft_encntr_id)
      AND pe.active_ind=true)
     JOIN (d)
     JOIN (pc
     WHERE pc.pft_encntr_id=pe.pft_encntr_id
      AND pc.active_ind=true
      AND pc.charge_item_id > 0)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.active_ind=true
      AND c.offset_charge_item_id=0
      AND c.charge_item_id > 0)
     JOIN (cm
     WHERE c.charge_item_id=cm.charge_item_id
      AND cm.active_ind=true
      AND cm.charge_item_id > 0)
    ORDER BY pe.pft_encntr_id, pc.charge_item_id
    HEAD pe.pft_encntr_id
     totalchargescnt = 0, unqualifiedchargescnt = 0, qualifiedchargescnt = 0
    HEAD pc.charge_item_id
     totalchargescnt += 1
    DETAIL
     IF (cm.field1_id=cs4002352_svcconnected_flex_field_cd
      AND cm.field2_id=0)
      unqualifiedchargescnt += 1
     ELSEIF (cm.field1_id=cs4002352_svcconnected_flex_field_cd
      AND cm.field2_id=1)
      qualifiedchargescnt += 1
     ENDIF
    FOOT  pe.pft_encntr_id
     cidx = locateval(lidx,1,size(pbmencounterids->ids,5),pe.pft_encntr_id,pbmencounterids->ids[lidx]
      .pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF (((totalchargescnt=unqualifiedchargescnt) OR (((unqualifiedchargescnt=0
       AND qualifiedchargescnt=0) OR (qualifiedchargescnt=0)) )) )
       CALL addtoken_f8(hcontextqual,"T_SVCCONNECT",0.0)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_SVCCONNECT",1.0)
      ENDIF
     ENDFOR
    WITH outerjoin = d
   ;end select
 END ;Subroutine
 SUBROUTINE (checkallchargesspecialauthorityforencounter(pftencnteridsrec=vc(ref)) =null)
   CALL logmessage("checkAllChargesSpecialAuthorityForEncounter","Entering...",log_debug)
   DECLARE totalchargescnt = i4 WITH protect, noconstant(0)
   DECLARE qualifiedchargescnt = i4 WITH protect, noconstant(0)
   DECLARE unqualifiedchargescnt = i4 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     pft_charge pc,
     charge c,
     charge_mod cm,
     dummyt d
    PLAN (pe
     WHERE expand(lidx,1,size(pftencnteridsrec->arr_ids,5),pe.pft_encntr_id,pftencnteridsrec->
      arr_ids[lidx].pft_encntr_id)
      AND pe.active_ind=true)
     JOIN (d)
     JOIN (pc
     WHERE pc.pft_encntr_id=pe.pft_encntr_id
      AND pc.active_ind=true
      AND pc.charge_item_id > 0)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.active_ind=true
      AND c.offset_charge_item_id=0
      AND c.charge_item_id > 0)
     JOIN (cm
     WHERE c.charge_item_id=cm.charge_item_id
      AND cm.active_ind=true
      AND cm.charge_item_id > 0)
    ORDER BY pe.pft_encntr_id, pc.charge_item_id
    HEAD pe.pft_encntr_id
     totalchargescnt = 0, qualifiedchargescnt = 0, unqualifiedchargescnt = 0
    HEAD pc.charge_item_id
     totalchargescnt += 1
    DETAIL
     IF (cm.field1_id=cs4002352_specialauth_flex_field_cd
      AND cm.field2_id=1)
      qualifiedchargescnt += 1
     ELSEIF (cm.field1_id=cs4002352_specialauth_flex_field_cd
      AND cm.field2_id=0)
      unqualifiedchargescnt += 1
     ENDIF
    FOOT  pe.pft_encntr_id
     cidx = locateval(lidx,1,size(pbmencounterids->ids,5),pe.pft_encntr_id,pbmencounterids->ids[lidx]
      .pftencntrid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF (((totalchargescnt=unqualifiedchargescnt) OR (((unqualifiedchargescnt=0
       AND qualifiedchargescnt=0) OR (qualifiedchargescnt=0)) )) )
       CALL addtoken_f8(hcontextqual,"T_SPECAUTH",0.0)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_SPECAUTH",1.0)
      ENDIF
     ENDFOR
    WITH outerjoin = d
   ;end select
 END ;Subroutine
 SUBROUTINE (checkallchargesserviceconnectedforbalance(balanceidsrec=vc(ref)) =null)
   CALL logmessage("checkAllChargesServiceConnectedForBalance","Entering...",log_debug)
   DECLARE totalchargescnt = i4 WITH protect, noconstant(0)
   DECLARE qualifiedchargescnt = i4 WITH protect, noconstant(0)
   DECLARE unqualifiedchargescnt = i4 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM bo_hp_reltn bhr,
     benefit_order bo,
     pft_charge_bo_reltn pcbr,
     pft_charge pc,
     charge c,
     charge_mod cm,
     dummyt d
    PLAN (bhr
     WHERE expand(lidx,1,size(balanceidsrec->bo_hp_reltn_ids,5),bhr.bo_hp_reltn_id,balanceidsrec->
      bo_hp_reltn_ids[lidx].bo_hp_relation_id))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (d)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=true
      AND pcbr.benefit_order_id > 0)
     JOIN (pc
     WHERE pc.pft_charge_id=pcbr.pft_charge_id
      AND pc.active_ind=true
      AND pc.pft_charge_id > 0)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.offset_charge_item_id=0
      AND c.active_ind=true
      AND c.charge_item_id > 0)
     JOIN (cm
     WHERE c.charge_item_id=cm.charge_item_id
      AND cm.active_ind=true
      AND cm.charge_item_id > 0)
    ORDER BY bhr.bo_hp_reltn_id, pc.pft_charge_id
    HEAD bhr.bo_hp_reltn_id
     totalchargescnt = 0, qualifiedchargescnt = 0, unqualifiedchargescnt = 0
    HEAD pc.pft_charge_id
     totalchargescnt += 1
    DETAIL
     IF (cm.field1_id=cs4002352_svcconnected_flex_field_cd
      AND cm.field2_id=1)
      qualifiedchargescnt += 1
     ELSEIF (cm.field1_id=cs4002352_svcconnected_flex_field_cd
      AND cm.field2_id=0)
      unqualifiedchargescnt += 1
     ENDIF
    FOOT  bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF (((totalchargescnt=qualifiedchargescnt) OR ((balanceidsrec->bo_hp_reltn_ids[lidx].
      serviceconnectindforbalance="Y")
       AND ((qualifiedchargescnt=0
       AND unqualifiedchargescnt=0) OR (unqualifiedchargescnt=0)) )) )
       CALL addtoken_f8(hcontextqual,"T_SVCCONNECT",1.0)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_SVCCONNECT",0.0)
      ENDIF
     ENDFOR
    WITH outerjoin = d
   ;end select
 END ;Subroutine
 SUBROUTINE (checkallchargesspecialauthorityforbalance(balanceidsrec=vc(ref)) =null)
   CALL logmessage("checkAllChargesSpecialAuthorityForBalance","Entering...",log_debug)
   DECLARE totalchargescnt = i4 WITH protect, noconstant(0)
   DECLARE qualifiedchargescnt = i4 WITH protect, noconstant(0)
   DECLARE unqualifiedchargescnt = i4 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM bo_hp_reltn bhr,
     benefit_order bo,
     pft_charge_bo_reltn pcbr,
     pft_charge pc,
     charge c,
     charge_mod cm,
     dummyt d
    PLAN (bhr
     WHERE expand(lidx,1,size(balanceidsrec->bo_hp_reltn_ids,5),bhr.bo_hp_reltn_id,balanceidsrec->
      bo_hp_reltn_ids[lidx].bo_hp_relation_id))
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (d)
     JOIN (pcbr
     WHERE pcbr.benefit_order_id=bo.benefit_order_id
      AND pcbr.active_ind=true
      AND pcbr.benefit_order_id > 0)
     JOIN (pc
     WHERE pc.pft_charge_id=pcbr.pft_charge_id
      AND pc.active_ind=true
      AND pc.pft_charge_id > 0)
     JOIN (c
     WHERE c.charge_item_id=pc.charge_item_id
      AND c.offset_charge_item_id=0
      AND c.active_ind=true
      AND c.charge_item_id > 0)
     JOIN (cm
     WHERE c.charge_item_id=cm.charge_item_id
      AND cm.active_ind=true
      AND cm.charge_item_id > 0)
    ORDER BY bhr.bo_hp_reltn_id, pc.pft_charge_id
    HEAD bhr.bo_hp_reltn_id
     totalchargescnt = 0, qualifiedchargescnt = 0, unqualifiedchargescnt = 0
    HEAD pc.pft_charge_id
     totalchargescnt += 1
    DETAIL
     IF (cm.field1_id=cs4002352_specialauth_flex_field_cd
      AND cm.field2_id=1)
      qualifiedchargescnt += 1
     ELSEIF (cm.field1_id=cs4002352_specialauth_flex_field_cd
      AND cm.field2_id=0)
      unqualifiedchargescnt += 1
     ENDIF
    FOOT  bhr.bo_hp_reltn_id
     cidx = locateval(lidx,1,porigsize,bhr.bo_hp_reltn_id,requestparamgroups->objarray[lidx].
      insurancebalanceid), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)), hqual =
     uar_srvgetitem(hobjarray,"qual",0)
     FOR (groupidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
      hcontextqual = uar_srvgetitem(hqual,"context_qual",(groupidx - 1)),
      IF (((totalchargescnt=qualifiedchargescnt) OR ((balance_ids->bo_hp_reltn_ids[lidx].
      specialauthorityindforbalance=true)
       AND ((qualifiedchargescnt=0
       AND unqualifiedchargescnt=0) OR (unqualifiedchargescnt=0)) )) )
       CALL addtoken_f8(hcontextqual,"T_SPECAUTH",1.0)
      ELSE
       CALL addtoken_f8(hcontextqual,"T_SPECAUTH",0.0)
      ENDIF
     ENDFOR
    WITH outerjoin = d
   ;end select
 END ;Subroutine
 SUBROUTINE (addencounterleveladjustmenttokens(pbatchtransfileid=f8) =null)
   DECLARE adjamount = f8 WITH protect, noconstant(0.0)
   DECLARE batchtypeflag = vc WITH protect, noconstant("")
   SELECT INTO "nl:"
    FROM batch_trans_file btf,
     batch_trans bt,
     pft_trans_alias pta,
     bo_hp_reltn bh,
     benefit_order bo,
     pft_proration pp
    PLAN (btf
     WHERE btf.batch_trans_file_id=pbatchtransfileid
      AND btf.active_ind=true)
     JOIN (bt
     WHERE bt.batch_trans_id=btf.batch_trans_id
      AND bt.active_ind=true)
     JOIN (pta
     WHERE pta.pft_trans_alias_id=evaluate(btf.trans_alias_id,0.0,pta.pft_trans_alias_id,btf
      .trans_alias_id)
      AND pta.trans_reason_cd=btf.trans_reason_cd
      AND pta.trans_sub_type_cd=btf.trans_subtype_cd
      AND pta.dr_cr_flag=evaluate2(
      IF (btf.dr_cr_flag=2) 2
      ELSEIF (btf.dr_cr_flag=1) 1
      ELSE 0
      ENDIF
      )
      AND pta.active_ind=true
      AND pta.logical_domain_id=bt.logical_domain_id)
     JOIN (bh
     WHERE bh.bo_hp_reltn_id=btf.benefit_order_id
      AND bh.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND bh.end_effective_dt_tm > cnvtdatetime(sysdate)
      AND bh.active_ind=true)
     JOIN (bo
     WHERE bo.benefit_order_id=bh.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pp
     WHERE pp.bo_hp_reltn_id=bh.bo_hp_reltn_id
      AND pp.active_ind=true)
    DETAIL
     batchtypeflag = cnvtstring(bt.batch_type_flag), adjamount = evaluate(btf.dr_cr_flag,2,(btf
      .trans_total_amount * - (1)),btf.trans_total_amount),
     CALL addtoken_f8(hcontextqual,"T_ADJAMOUNT",abs(adjamount)),
     CALL addtoken_f8(hcontextqual,"T_TRANSALIAS",pta.pft_trans_alias_id),
     CALL addtoken_f8(hcontextqual,"T_TRANREASON",pta.trans_reason_cd),
     CALL addtoken_f8(hcontextqual,"T_TRANSUBCD",pta.trans_sub_type_cd),
     CALL addtoken_f8(hcontextqual,"T_USER",btf.created_prsnl_id),
     CALL addtoken_f8(hcontextqual,"T_TRNSAMTPER",round(((btf.trans_total_amount/ pp.orig_amt_due) *
      100),5))
    WITH nocounter
   ;end select
   IF ( NOT (validate(cs4652021_srctrns_cd)))
    DECLARE cs4652021_srctrns_cd = f8 WITH protect, constant(getcodevalue(4652021,batchtypeflag,1))
   ENDIF
   CALL addtoken_f8(hcontextqual,"T_SRCTRNS",cs4652021_srctrns_cd)
 END ;Subroutine
 SUBROUTINE (addaccountleveladjustmenttokens(pbatchtransfileid=f8,paccountid=f8) =null)
   IF ( NOT (validate(cs24451_invalid_cd)))
    DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
   ENDIF
   IF ( NOT (validate(cs24451_cancelled_cd)))
    DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
   ENDIF
   IF ( NOT (validate(cs354_fin_class_cd)))
    DECLARE cs354_fin_class_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
   ENDIF
   DECLARE adjamount = f8 WITH protect, noconstant(0.0)
   DECLARE batchtypeflag = vc WITH protect, noconstant("")
   DECLARE totalaccountpatientbalance = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM account a,
     pft_encntr pe,
     benefit_order bo,
     bo_hp_reltn bhr,
     pft_proration pp
    PLAN (a
     WHERE a.acct_id=paccountid
      AND a.active_ind=true)
     JOIN (pe
     WHERE pe.acct_id=a.acct_id
      AND pe.active_ind=true)
     JOIN (bo
     WHERE bo.pft_encntr_id=pe.pft_encntr_id
      AND bo.active_ind=true)
     JOIN (bhr
     WHERE bhr.benefit_order_id=bo.benefit_order_id
      AND bhr.fin_class_cd=cs354_selfpay_cd
      AND  NOT (bhr.bo_hp_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd))
      AND bhr.active_ind=true
      AND bhr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND bhr.end_effective_dt_tm > cnvtdatetime(sysdate))
     JOIN (pp
     WHERE pp.bo_hp_reltn_id=bhr.bo_hp_reltn_id
      AND pp.active_ind=true)
    ORDER BY bhr.bo_hp_reltn_id
    HEAD bhr.bo_hp_reltn_id
     totalaccountpatientbalance += pp.orig_amt_due
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM batch_trans_file btf,
     pft_trans_alias pta,
     batch_trans bt
    PLAN (btf
     WHERE btf.batch_trans_file_id=pbatchtransfileid
      AND btf.active_ind=true)
     JOIN (pta
     WHERE pta.pft_trans_alias_id=btf.trans_alias_id)
     JOIN (bt
     WHERE bt.batch_trans_id=btf.batch_trans_id
      AND bt.active_ind=true)
    DETAIL
     batchtypeflag = cnvtstring(bt.batch_type_flag), adjamount = evaluate(btf.dr_cr_flag,2,(btf
      .trans_total_amount * - (1)),btf.trans_total_amount),
     CALL addtoken_f8(hcontextqual,"T_ADJAMOUNT",abs(adjamount)),
     CALL addtoken_f8(hcontextqual,"T_TRANSALIAS",pta.pft_trans_alias_id),
     CALL addtoken_f8(hcontextqual,"T_TRANREASON",pta.trans_reason_cd),
     CALL addtoken_f8(hcontextqual,"T_TRANSUBCD",pta.trans_sub_type_cd),
     CALL addtoken_f8(hcontextqual,"T_USER",btf.created_prsnl_id),
     CALL addtoken_f8(hcontextqual,"T_TRNSAMTPER",round(((btf.trans_total_amount/
      totalaccountpatientbalance) * 100),5))
    WITH nocounter
   ;end select
   IF ( NOT (validate(cs4652021_srctrns_cd)))
    DECLARE cs4652021_srctrns_cd = f8 WITH protect, constant(getcodevalue(4652021,batchtypeflag,1))
   ENDIF
   CALL addtoken_f8(hcontextqual,"T_SRCTRNS",cs4652021_srctrns_cd)
 END ;Subroutine
 SUBROUTINE (addcontractmgmterrorcategorytoken(prequest=i4) =null)
   CALL logmessage("addContractMgmtErrorCategoryToken","Entering...",log_debug)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE fidx = i4 WITH protect, noconstant(0)
   IF ( NOT (validate(cm_error_entity)))
    DECLARE cm_error_entity = vc WITH protect, constant("CMERRORREC")
   ENDIF
   IF ( NOT (validate(cs29322_cmerrorrec)))
    DECLARE cs29322_cmerrorrec = f8 WITH protect, constant(getcodevalue(29322,cm_error_entity,0))
   ENDIF
   FOR (cidx = 1 TO size(requestparamgroups->objarray,5))
     IF ((requestparamgroups->objarray[cidx].eventid=cs29322_cmerrorrec))
      FOR (eidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup,5))
        FOR (fidx = 1 TO size(requestparamgroups->objarray[cidx].eventparamgroup[eidx].eventparams,5)
         )
          IF (trim(requestparamgroups->objarray[cidx].eventparamgroup[eidx].eventparams[fidx].
           paramkey,3)=cm_error_entity)
           SET hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
           SET hqual = uar_srvgetitem(hobjarray,"qual",0)
           SET hcontextqual = uar_srvgetitem(hqual,"context_qual",(eidx - 1))
           SELECT INTO "nl:"
            FROM pft_cm_error_detail pced
            PLAN (pced
             WHERE (pced.pft_cm_error_detail_id=requestparamgroups->objarray[cidx].eventparamgroup[
             eidx].eventparams[fidx].doublevalue)
              AND pced.active_ind=true)
            ORDER BY pced.pft_cm_error_detail_id
            HEAD pced.pft_cm_error_detail_id
             CALL addtoken_f8(hcontextqual,"T_CMERRCAT",pced.ccm_error_cat_cd)
            WITH nocounter
           ;end select
          ENDIF
        ENDFOR
      ENDFOR
     ENDIF
   ENDFOR
 END ;Subroutine
 SUBROUTINE addaccountlevelinvoicetokens(pinvoiceid)
  IF ( NOT (validate(cs21749_client_inv_cd)))
   DECLARE cs21749_client_inv_cd = f8 WITH protect, constant(getcodevalue(21749,"CLIENT_INV",1))
  ENDIF
  SELECT INTO "nl:"
   FROM bill_rec br
   WHERE br.corsp_activity_id=pinvoiceid
    AND br.bill_type_cd=cs21749_client_inv_cd
    AND br.active_ind=true
   DETAIL
    IF (br.balance_due_dr_cr_flag=1)
     CALL addtoken_f8(hcontextqual,"T_INVBALANCE",br.balance_due)
    ELSEIF (br.balance_due_dr_cr_flag=2)
     CALL addtoken_f8(hcontextqual,"T_INVCRBAL",br.balance_due)
    ENDIF
   WITH nocounter
  ;end select
 END ;Subroutine
 SUBROUTINE (getschentrytokens(prequest=i4,porigsize=i4,pbatchsize=i4,ploopcnt=i4) =i2)
   DECLARE startidx = i4 WITH protect, noconstant(1)
   DECLARE cidx = i4 WITH protect, noconstant(0)
   DECLARE eidx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE ccnt = i4 WITH protect, noconstant(0)
   DECLARE qualcnt = i4 WITH protect, noconstant(0)
   CALL addautoerrortoken(porigsize)
   SELECT INTO "nl:"
    FROM sch_entry se,
     encounter e,
     referral r,
     referral_entity_reltn rer,
     sch_appt_option sao,
     sch_appt_option sao1
    PLAN (se
     WHERE expand(eidx,1,porigsize,se.sch_entry_id,request->objarray[eidx].schentryid)
      AND se.version_dt_tm > cnvtdatetime(sysdate)
      AND se.active_ind=true)
     JOIN (e
     WHERE (e.encntr_id= Outerjoin(se.encntr_id))
      AND (e.person_id= Outerjoin(se.person_id)) )
     JOIN (rer
     WHERE (rer.parent_entity_id= Outerjoin(se.sch_event_id))
      AND (rer.parent_entity_name= Outerjoin("SCH_EVENT"))
      AND (rer.active_ind= Outerjoin(true)) )
     JOIN (r
     WHERE (r.referral_id= Outerjoin(rer.referral_id))
      AND (r.active_ind= Outerjoin(true)) )
     JOIN (sao
     WHERE (sao.appt_type_cd= Outerjoin(se.appt_type_cd))
      AND (sao.active_ind= Outerjoin(true))
      AND (sao.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
      AND (sao.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
      AND (sao.option_meaning= Outerjoin("FOLLOWUP")) )
     JOIN (sao1
     WHERE (sao1.appt_type_cd= Outerjoin(se.appt_type_cd))
      AND (sao1.active_ind= Outerjoin(true))
      AND (sao1.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
      AND (sao1.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
      AND (sao1.option_meaning= Outerjoin("DIAGNOSTIC")) )
    DETAIL
     ccnt += 1, cidx = locateval(lidx,1,porigsize,se.sch_entry_id,request->objarray[lidx].schentryid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1)),
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual"), hcontextqual = uar_srvadditem(hqual,"context_qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0), hcontextqual = uar_srvgetitem(hqual,"context_qual",
       0)
     ENDIF
     IF (se.req_action_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_SCHACTION",se.req_action_cd)
     ENDIF
     IF (se.queue_id > 0.0)
      CALL addtoken_f8(hcontextqual,"T_REQLIST",se.queue_id)
     ENDIF
     IF (se.appt_type_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_APPTTYPE",se.appt_type_cd)
     ENDIF
     IF (e.encntr_type_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_ENCTYPE",e.encntr_type_cd)
     ENDIF
     IF (e.med_service_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_MEDSVC",e.med_service_cd)
     ENDIF
     IF (r.referral_status_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_RFSTATUS",r.referral_status_cd)
     ENDIF
     IF (sao.sch_option_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_POPTION",sao.sch_option_cd)
     ELSEIF (sao1.sch_option_cd > 0.0)
      CALL addtoken_f8(hcontextqual,"T_POPTION",sao1.sch_option_cd)
     ENDIF
    WITH nocounter, expand = 1
   ;end select
   IF (ccnt != porigsize)
    CALL logmessage("getSchEntryTokens","Invalid scheduling entry specified",log_error)
    RETURN(false)
   ENDIF
   SELECT INTO "nl:"
    FROM sch_entry se,
     sch_event_detail sed,
     order_entry_fields oef
    PLAN (se
     WHERE expand(eidx,1,porigsize,se.sch_entry_id,request->objarray[eidx].schentryid)
      AND se.version_dt_tm > cnvtdatetime(sysdate)
      AND se.active_ind=true)
     JOIN (sed
     WHERE sed.sch_event_id=se.sch_event_id
      AND sed.sch_action_id=0.0
      AND sed.version_dt_tm > cnvtdatetime(sysdate)
      AND sed.active_ind=true)
     JOIN (oef
     WHERE oef.oe_field_id=sed.oe_field_id)
    ORDER BY se.sch_entry_id
    HEAD REPORT
     ccnt = 0
    HEAD se.sch_entry_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,se.sch_entry_id,request->objarray[lidx].schentryid),
     hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
    DETAIL
     qualcnt = uar_srvgetitemcount(hobjarray,"qual")
     IF (qualcnt=0)
      hqual = uar_srvadditem(hobjarray,"qual")
     ELSE
      hqual = uar_srvgetitem(hobjarray,"qual",0)
     ENDIF
     hcontextqual = uar_srvgetitem(hqual,"context_qual",0),
     CALL addtoken_oef(hcontextqual,"T_EVENTDET",oef.field_type_flag,sed.oe_field_id,sed
     .oe_field_meaning_id,trim(sed.oe_field_meaning,3),sed.oe_field_dt_tm_value,sed.oe_field_value,
     trim(sed.oe_field_display_value,3),cnvtdatetime("01-JAN-1800 00:00:00.00"),cnvtdatetime(
      "31-DEC-2100 00:00:00.00"))
    FOOT  se.sch_entry_id
     null
    WITH nocounter, expand = 1
   ;end select
   SELECT INTO "nl:"
    FROM sch_entry sen,
     sch_event se,
     sch_event_attach sea,
     order_action oa,
     order_detail od,
     order_entry_fields oef
    PLAN (sen
     WHERE expand(eidx,1,porigsize,sen.sch_entry_id,request->objarray[eidx].schentryid)
      AND sen.version_dt_tm > cnvtdatetime(sysdate)
      AND sen.active_ind=true)
     JOIN (se
     WHERE se.sch_event_id=sen.sch_event_id
      AND se.version_dt_tm > cnvtdatetime(sysdate)
      AND se.active_ind=1)
     JOIN (sea
     WHERE sea.sch_event_id=se.sch_event_id
      AND sea.beg_schedule_seq <= se.schedule_seq
      AND sea.end_schedule_seq >= se.schedule_seq
      AND sea.attach_type_cd=cs16110_order_cd
      AND ((sea.order_status_meaning = null) OR ( NOT (sea.order_status_meaning IN ("CANCELED",
     "COMPLETED", "DISCONTINUED", "ROLLBACK"))))
      AND sea.state_meaning != "REMOVED"
      AND sea.version_dt_tm > cnvtdatetime(sysdate)
      AND sea.active_ind=1)
     JOIN (oa
     WHERE oa.order_id=sea.order_id
      AND oa.action_type_cd IN (cs6003_order_cd, cs6003_modify_cd, cs6003_reschedule_cd,
     cs6003_activate_cd, cs6003_futuredc_cd,
     cs6003_renew_cd, cs6003_resume_renew_cd, cs6003_collection_cd)
      AND oa.action_rejected_ind=0)
     JOIN (od
     WHERE od.order_id=oa.order_id
      AND od.action_sequence=oa.action_sequence)
     JOIN (oef
     WHERE oef.oe_field_id=od.oe_field_id)
    ORDER BY sen.sch_entry_id, od.oe_field_id, od.action_sequence DESC
    HEAD REPORT
     ccnt = 0
    HEAD sen.sch_entry_id
     ccnt += 1, cidx = locateval(lidx,1,porigsize,sen.sch_entry_id,request->objarray[lidx].schentryid
      ), hobjarray = uar_srvgetitem(prequest,"objArray",(cidx - 1))
    HEAD od.oe_field_id
     act_seq = od.action_sequence, flag = true
    HEAD od.action_sequence
     IF (act_seq != od.action_sequence)
      flag = false
     ENDIF
    DETAIL
     IF (flag)
      qualcnt = uar_srvgetitemcount(hobjarray,"qual")
      IF (qualcnt=0)
       hqual = uar_srvadditem(hobjarray,"qual")
      ELSE
       hqual = uar_srvgetitem(hobjarray,"qual",0)
      ENDIF
      hcontextqual = uar_srvgetitem(hqual,"context_qual",0),
      CALL addtoken_oef(hcontextqual,"T_ORDERDET",oef.field_type_flag,od.oe_field_id,od
      .oe_field_meaning_id,trim(od.oe_field_meaning,3),od.oe_field_dt_tm_value,od.oe_field_value,trim
      (od.oe_field_display_value,3),cnvtdatetime("01-JAN-1800 00:00:00.00"),cnvtdatetime(
       "31-DEC-2100 00:00:00.00"))
     ENDIF
    FOOT  od.action_sequence
     null
    FOOT  od.oe_field_id
     null
    FOOT  sen.sch_entry_id
     null
    WITH nocounter, expand = 1
   ;end select
   RETURN(true)
 END ;Subroutine
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 CALL echo("Begin PFT_WF_WORK_ITEM_COMMON.INC, version [ENABTECH-15949.033]")
 CALL echo("Begin PFT_WF_WORK_ITEM_CONST.INC, version [664227.020]")
 IF ( NOT (validate(wi_state_assessment)))
  DECLARE wi_state_assessment = vc WITH public, constant("ISSUEASSESS")
 ENDIF
 IF ( NOT (validate(wi_state_resolution)))
  DECLARE wi_state_resolution = vc WITH public, constant("ISSUERESOLUT")
 ENDIF
 IF ( NOT (validate(wi_state_review)))
  DECLARE wi_state_review = vc WITH public, constant("ISSUEREVIEW")
 ENDIF
 IF ( NOT (validate(wi_state_complete)))
  DECLARE wi_state_complete = vc WITH public, constant("COMPLETE")
 ENDIF
 IF ( NOT (validate(wi_role_assessor)))
  DECLARE wi_role_assessor = vc WITH public, constant("ISSUEASSESS")
 ENDIF
 IF ( NOT (validate(wi_role_resolver)))
  DECLARE wi_role_resolver = vc WITH public, constant("ISSUERESOLUT")
 ENDIF
 IF ( NOT (validate(wi_role_reviewer)))
  DECLARE wi_role_reviewer = vc WITH public, constant("ISSUEREVIEW")
 ENDIF
 IF ( NOT (validate(wi_owner_department)))
  DECLARE wi_owner_department = vc WITH constant("DEPARTMENT")
 ENDIF
 IF ( NOT (validate(wi_owner_guarantor)))
  DECLARE wi_owner_guarantor = vc WITH constant("GUARANTOR")
 ENDIF
 IF ( NOT (validate(wi_owner_personnel)))
  DECLARE wi_owner_personnel = vc WITH constant("PERSONNEL")
 ENDIF
 IF ( NOT (validate(wi_owner_subscriber)))
  DECLARE wi_owner_subscriber = vc WITH constant("SUBSCRIBER")
 ENDIF
 IF ( NOT (validate(wi_owner_healthplan)))
  DECLARE wi_owner_healthplan = vc WITH constant("HEALTHPLAN")
 ENDIF
 IF ( NOT (validate(wi_owner_advanced)))
  DECLARE wi_owner_advanced = vc WITH constant("ADVANCED")
 ENDIF
 IF ( NOT (validate(wi_owner_wicreator)))
  DECLARE wi_owner_wicreator = vc WITH constant("WICREATOR")
 ENDIF
 IF ( NOT (validate(wi_owner_patient)))
  DECLARE wi_owner_patient = vc WITH constant("PATIENT")
 ENDIF
 IF ( NOT (validate(wi_entity_clinical_encounter)))
  DECLARE wi_entity_clinical_encounter = vc WITH constant("ENCOUNTER")
 ENDIF
 IF ( NOT (validate(wi_entity_financial_encounter)))
  DECLARE wi_entity_financial_encounter = vc WITH constant("PFTENCNTR")
 ENDIF
 IF ( NOT (validate(wi_entity_insurance_balance)))
  DECLARE wi_entity_insurance_balance = vc WITH constant("INSURANCE")
 ENDIF
 IF ( NOT (validate(wi_entity_claim)))
  DECLARE wi_entity_claim = vc WITH constant("CLAIM")
 ENDIF
 IF ( NOT (validate(wi_entity_person)))
  DECLARE wi_entity_person = vc WITH constant("PERSON")
 ENDIF
 IF ( NOT (validate(wi_entity_scheduling_event)))
  DECLARE wi_entity_scheduling_event = vc WITH constant("SCHEVENT")
 ENDIF
 IF ( NOT (validate(wi_entity_referral)))
  DECLARE wi_entity_referral = vc WITH constant("REFERRAL")
 ENDIF
 IF ( NOT (validate(wi_entity_billing_entity)))
  DECLARE wi_entity_billing_entity = vc WITH constant("BILL_ENTITY")
 ENDIF
 IF ( NOT (validate(wi_entity_tenant)))
  DECLARE wi_entity_tenant = vc WITH constant("TENANT")
 ENDIF
 IF ( NOT (validate(wi_entity_account)))
  DECLARE wi_entity_account = vc WITH constant("ACCOUNT")
 ENDIF
 IF ( NOT (validate(wi_entity_scheduling_entry)))
  DECLARE wi_entity_scheduling_entry = vc WITH constant("SCHENTRY")
 ENDIF
 IF ( NOT (validate(pft_encntr_table)))
  DECLARE pft_encntr_table = vc WITH protect, constant("PFT_ENCNTR")
 ENDIF
 IF ( NOT (validate(bo_hp_reltn_table)))
  DECLARE bo_hp_reltn_table = vc WITH protect, constant("BO_HP_RELTN")
 ENDIF
 IF ( NOT (validate(encounter_table)))
  DECLARE encounter_table = vc WITH protect, constant("ENCOUNTER")
 ENDIF
 IF ( NOT (validate(person_table)))
  DECLARE person_table = vc WITH protect, constant("PERSON")
 ENDIF
 IF ( NOT (validate(bill_rec_table)))
  DECLARE bill_rec_table = vc WITH protect, constant("BILL_REC")
 ENDIF
 IF ( NOT (validate(pft_line_item_table)))
  DECLARE pft_line_item_table = vc WITH protect, constant("PFT_LINE_ITEM")
 ENDIF
 IF ( NOT (validate(sch_event_table)))
  DECLARE sch_event_table = vc WITH protect, constant("SCH_EVENT")
 ENDIF
 IF ( NOT (validate(referral_ext_table)))
  DECLARE referral_ext_table = vc WITH protect, constant("REFERRAL_EXT")
 ENDIF
 IF ( NOT (validate(billing_entity_table)))
  DECLARE billing_entity_table = vc WITH protect, constant("BILLING_ENTITY")
 ENDIF
 IF ( NOT (validate(logical_domain_table)))
  DECLARE logical_domain_table = vc WITH protect, constant("LOGICAL_DOMAIN")
 ENDIF
 IF ( NOT (validate(account_table)))
  DECLARE account_table = vc WITH protect, constant("ACCOUNT")
 ENDIF
 IF ( NOT (validate(pft_charge_table)))
  DECLARE pft_charge_table = vc WITH protect, constant("PFT_CHARGE")
 ENDIF
 IF ( NOT (validate(code_value_table)))
  DECLARE code_value_table = vc WITH protect, constant("CODE_VALUE")
 ENDIF
 IF ( NOT (validate(organization_table)))
  DECLARE organization_table = vc WITH protect, constant("ORGANIZATION")
 ENDIF
 IF ( NOT (validate(sch_entry_table)))
  DECLARE sch_entry_table = vc WITH protect, constant("SCH_ENTRY")
 ENDIF
 DECLARE identified_flag = i2 WITH protect, constant(1)
 DECLARE approved_flag = i2 WITH protect, constant(2)
 DECLARE denied_flag = i2 WITH protect, constant(3)
 DECLARE resolved_flag = i2 WITH protect, constant(4)
 DECLARE completed_flag = i2 WITH protect, constant(5)
 DECLARE incompleted_flag = i2 WITH protect, constant(6)
 DECLARE cancelled_flag = i2 WITH protect, constant(7)
 DECLARE reassign_flag = i2 WITH protect, constant(8)
 DECLARE no_action_flag = i2 WITH protect, constant(9)
 DECLARE follow_up_flag = i2 WITH protect, constant(10)
 DECLARE out_of_office_flag = i2 WITH protect, constant(11)
 IF ( NOT (validate(wi_action_identified)))
  DECLARE wi_action_identified = vc WITH protect, constant("IDENTIFIED")
 ENDIF
 IF ( NOT (validate(wi_action_approve)))
  DECLARE wi_action_approve = vc WITH protect, constant("APPROVE")
 ENDIF
 IF ( NOT (validate(wi_action_deny)))
  DECLARE wi_action_deny = vc WITH protect, constant("DENY")
 ENDIF
 IF ( NOT (validate(wi_action_resolve)))
  DECLARE wi_action_resolve = vc WITH protect, constant("RESOLVE")
 ENDIF
 IF ( NOT (validate(wi_action_complete)))
  DECLARE wi_action_complete = vc WITH protect, constant("COMPLETE")
 ENDIF
 IF ( NOT (validate(wi_action_incomplete)))
  DECLARE wi_action_incomplete = vc WITH protect, constant("INCOMPLETE")
 ENDIF
 IF ( NOT (validate(wi_action_cancelled)))
  DECLARE wi_action_cancelled = vc WITH protect, constant("CANCELLED")
 ENDIF
 IF ( NOT (validate(wi_no_action)))
  DECLARE wi_no_action = vc WITH protect, constant("NOACTION")
 ENDIF
 DECLARE assessment_flag = i2 WITH protect, constant(1)
 DECLARE resolution_flag = i2 WITH protect, constant(2)
 DECLARE review_flag = i2 WITH protect, constant(3)
 DECLARE systemuser_group_id = f8 WITH protect, constant(1.0)
 DECLARE pfs_dept_id = f8 WITH protect, constant(2.0)
 DECLARE personnel_group_id = f8 WITH protect, constant(3.0)
 IF ( NOT (validate(pfs)))
  DECLARE pfs = vc WITH constant("PFS")
 ENDIF
 IF ( NOT (validate(personnel)))
  DECLARE personnel = vc WITH protect, constant("PERSONNEL")
 ENDIF
 IF ( NOT (validate(system)))
  DECLARE system = vc WITH constant("SYSTEM")
 ENDIF
 IF ( NOT (validate(claim_queue_claim_status)))
  DECLARE claim_queue_claim_status = i2 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(claim_queue_facility)))
  DECLARE claim_queue_facility = i2 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(claim_queue_payer)))
  DECLARE claim_queue_payer = i2 WITH protect, constant(3)
 ENDIF
 IF ( NOT (validate(claim_queue_encounter_type)))
  DECLARE claim_queue_encounter_type = i2 WITH protect, constant(4)
 ENDIF
 IF ( NOT (validate(selfpay_queue_balance_status)))
  DECLARE selfpay_queue_balance_status = i2 WITH protect, constant(5)
 ENDIF
 IF ( NOT (validate(insurance_queue_balance_status)))
  DECLARE insurance_queue_balance_status = i2 WITH protect, constant(6)
 ENDIF
 IF ( NOT (validate(insurance_queue_payer)))
  DECLARE insurance_queue_payer = i2 WITH protect, constant(7)
 ENDIF
 IF ( NOT (validate(encounter_queue_encounter_type)))
  DECLARE encounter_queue_encounter_type = i2 WITH protect, constant(8)
 ENDIF
 IF ( NOT (validate(encounter_queue_fin_class)))
  DECLARE encounter_queue_fin_class = i2 WITH protect, constant(9)
 ENDIF
 IF ( NOT (validate(encounter_queue_facility)))
  DECLARE encounter_queue_facility = i2 WITH protect, constant(10)
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(cs14250_patient_meaning)))
  DECLARE cs14250_patient_meaning = vc WITH protect, constant("PATIENT")
 ENDIF
 IF (validate(getpatientbyencounter,char(128))=char(128))
  SUBROUTINE (getpatientbyencounter(pencntrid=f8,prpatientid=f8(ref)) =i2)
    SET prpatientid = 0.0
    SELECT INTO "nl:"
     FROM encounter e
     WHERE e.encntr_id=pencntrid
      AND e.active_ind=true
     DETAIL
      prpatientid = e.person_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getpatientbyfinencounter,char(128))=char(128))
  SUBROUTINE (getpatientbyfinencounter(ppftencntrid=f8,prpatientid=f8(ref)) =i2)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM pft_encntr pe
     WHERE pe.pft_encntr_id=ppftencntrid
      AND pe.active_ind=true
     DETAIL
      encntrid = pe.encntr_id
     WITH nocounter
    ;end select
    RETURN(getpatientbyencounter(encntrid,prpatientid))
  END ;Subroutine
 ENDIF
 IF (validate(getpatientbyappointment,char(128))=char(128))
  SUBROUTINE (getpatientbyappointment(pscheventid=f8,prpatientid=f8(ref)) =i2)
    SET prpatientid = 0.0
    SELECT INTO "nl:"
     FROM sch_appt sa
     WHERE sa.sch_event_id=pscheventid
      AND sa.role_meaning=cs14250_patient_meaning
      AND sa.version_dt_tm=cnvtdatetime("31-DEC-2100 00:00:00")
      AND sa.active_ind=true
     DETAIL
      prpatientid = sa.person_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getpatientbyschedulingentry,char(128))=char(128))
  SUBROUTINE (getpatientbyschedulingentry(pschentryid=f8,prpatientid=f8(ref)) =i2)
    DECLARE prpatientid = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM sch_entry se
     WHERE se.sch_entry_id=pschentryid
      AND se.version_dt_tm=cnvtdatetime("31-DEC-2100 00:00:00")
      AND se.active_ind=true
     DETAIL
      prpatientid = se.person_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(ownertypescache)))
  RECORD ownertypescache(
    1 isinitialized = i2
    1 ownertypes[*]
      2 ownertypekey = vc
      2 isexternal = i2
      2 isvalidassessor = i2
      2 isvalidresolver = i2
      2 isvalidreviewer = i2
  )
 ENDIF
 IF ( NOT (validate(publishworkfloweventrequest)))
  RECORD publishworkfloweventrequest(
    1 eventlist[*]
      2 entitytypekey = vc
      2 entityid = f8
      2 eventcd = f8
      2 parameters[*]
        3 paramcd = f8
        3 paramvalue = vc
        3 newparamind = i2
        3 doublevalue = f8
        3 stringvalue = vc
        3 datevalue = dq8
        3 parententityname = vc
        3 parententityid = f8
  ) WITH protect
 ENDIF
 IF ( NOT (validate(workitementitylist)))
  RECORD workitementitylist(
    1 workitementity[*]
      2 workitemid = f8
      2 entityid = f8
      2 entitytypekey = vc
      2 queuename = vc
  ) WITH protect
 ENDIF
 IF ( NOT (validate(cs23369_wfevent)))
  DECLARE cs23369_wfevent = f8 WITH protect, constant(getcodevalue(23369,"WFEVENT",1))
 ENDIF
 IF ( NOT (validate(cs29322_workitemcrtd)))
  DECLARE cs29322_workitemcrtd = f8 WITH constant(getcodevalue(29322,"WORKITEMCRTD",1))
 ENDIF
 IF ( NOT (validate(cs29322_workitemuptd)))
  DECLARE cs29322_workitemuptd = f8 WITH constant(getcodevalue(29322,"WORKITEMUPTD",1))
 ENDIF
 IF ( NOT (validate(cs29322_workitemrslv)))
  DECLARE cs29322_workitemrslv = f8 WITH constant(getcodevalue(29322,"WORKITEMRSLV",1))
 ENDIF
 IF ( NOT (validate(cs29322_workitemcncl)))
  DECLARE cs29322_workitemcncl = f8 WITH constant(getcodevalue(29322,"WORKITEMCNCL",1))
 ENDIF
 IF ( NOT (validate(cs29320_pftencntr)))
  DECLARE cs29320_pftencntr = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"PFTENCNTR"))
 ENDIF
 IF ( NOT (validate(cs29320_insurance)))
  DECLARE cs29320_insurance = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"INSURANCE"))
 ENDIF
 IF ( NOT (validate(cs29320_clin_encounter)))
  DECLARE cs29320_clin_encounter = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,
    "ENCOUNTER"))
 ENDIF
 IF ( NOT (validate(cs29320_person)))
  DECLARE cs29320_person = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"PERSON"))
 ENDIF
 IF ( NOT (validate(cs29320_claim)))
  DECLARE cs29320_claim = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"CLAIM"))
 ENDIF
 IF ( NOT (validate(cs29320_schevent)))
  DECLARE cs29320_schevent = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"SCHEVENT"))
 ENDIF
 IF ( NOT (validate(cs29320_schentry)))
  DECLARE cs29320_schentry = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"SCHENTRY"))
 ENDIF
 IF ( NOT (validate(cs29320_referral)))
  DECLARE cs29320_referral = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"REFERRAL"))
 ENDIF
 IF ( NOT (validate(cs29320_tenant)))
  DECLARE cs29320_tenant = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"TENANT"))
 ENDIF
 IF ( NOT (validate(cs29320_bill_entity)))
  DECLARE cs29320_bill_entity = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,
    "BILL_ENTITY"))
 ENDIF
 IF ( NOT (validate(cs29320_account)))
  DECLARE cs29320_account = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"ACCOUNT"))
 ENDIF
 IF ( NOT (validate(cs29320_selfpay)))
  DECLARE cs29320_selfpay = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"SELFPAY"))
 ENDIF
 IF ( NOT (validate(cs29320_transbatch)))
  DECLARE cs29320_transbatch = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"TRANSBATCH"
    ))
 ENDIF
 IF ( NOT (validate(cs29320_image)))
  DECLARE cs29320_image = f8 WITH protect, constant(uar_get_code_by("MEANING",29320,"IMAGE"))
 ENDIF
 IF ( NOT (validate(cs24454_wfqueuename)))
  DECLARE cs24454_wfqueuename = f8 WITH constant(getcodevalue(24454,"WFQUEUENAME",1))
 ENDIF
 IF ( NOT (validate(pft_queue_item)))
  DECLARE pft_queue_item = vc WITH protect, constant("PFT_QUEUE_ITEM")
 ENDIF
 IF ( NOT (validate(insurance_type_key)))
  DECLARE insurance_type_key = vc WITH protect, constant("INSURANCE")
 ENDIF
 IF (validate(isvalidworkitementitytype,char(128))=char(128))
  SUBROUTINE (isvalidworkitementitytype(pentitytype=vc) =i2)
    DECLARE isvalid = i2 WITH protect, noconstant(false)
    IF (pentitytype IN (wi_entity_clinical_encounter, wi_entity_financial_encounter,
    wi_entity_insurance_balance, wi_entity_claim, wi_entity_person,
    wi_entity_scheduling_event, wi_entity_referral, wi_entity_billing_entity, wi_entity_tenant,
    wi_entity_account,
    wi_entity_scheduling_entry))
     SET isvalid = true
    ENDIF
    RETURN(isvalid)
  END ;Subroutine
 ENDIF
 IF (validate(parententitynametowientity,char(128))=char(128))
  SUBROUTINE (parententitynametowientity(pparententityname=vc) =vc)
    RETURN(evaluate(pparententityname,pft_encntr_table,wi_entity_financial_encounter,
     bo_hp_reltn_table,wi_entity_insurance_balance,
     encounter_table,wi_entity_clinical_encounter,person_table,wi_entity_person,bill_rec_table,
     wi_entity_claim,pft_line_item_table,wi_entity_claim,sch_event_table,wi_entity_scheduling_event,
     referral_ext_table,wi_entity_referral,billing_entity_table,wi_entity_billing_entity,
     logical_domain_table,
     wi_entity_tenant,account_table,wi_entity_account,sch_entry_table,wi_entity_scheduling_entry,
     ""))
  END ;Subroutine
 ENDIF
 IF (validate(isvalidassessortype,char(128))=char(128))
  SUBROUTINE (isvalidassessortype(pownertype=vc) =i2)
    RETURN(isvalidownertypeforrole(pownertype,wi_role_assessor))
  END ;Subroutine
 ENDIF
 IF (validate(initializeownertypescache,char(128))=char(128))
  SUBROUTINE (initializeownertypescache(null=i2) =i2)
    DECLARE index = i4 WITH protect, noconstant(0)
    DECLARE ownertypecount = i4 WITH protect, noconstant(0)
    FREE RECORD retrieveownertypesrequest
    RECORD retrieveownertypesrequest(
      1 role = vc
    )
    FREE RECORD retrieveownertypesreply
    RECORD retrieveownertypesreply(
      1 ownertypes[*]
        2 ownertypeid = f8
        2 ownertypekey = vc
        2 ownertypedisplay = vc
        2 isexternal = i2
        2 isvalidassessor = i2
        2 isvalidresolver = i2
        2 isvalidreviewer = i2
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    )
    EXECUTE pft_r_work_item_owner_type  WITH replace("REQUEST",retrieveownertypesrequest), replace(
     "REPLY",retrieveownertypesreply)
    IF ((retrieveownertypesreply->status_data.status="F"))
     CALL logmessage("retrieveOwnerTypesRequest","Failed to retrieve owner types",log_error)
     RETURN(false)
    ENDIF
    SET ownertypecount = size(retrieveownertypesreply->ownertypes,5)
    SET stat = alterlist(ownertypescache->ownertypes,ownertypecount)
    FOR (index = 1 TO ownertypecount)
      SET ownertypescache->ownertypes[index].ownertypekey = retrieveownertypesreply->ownertypes[index
      ].ownertypekey
      SET ownertypescache->ownertypes[index].isexternal = retrieveownertypesreply->ownertypes[index].
      isexternal
      SET ownertypescache->ownertypes[index].isvalidassessor = retrieveownertypesreply->ownertypes[
      index].isvalidassessor
      SET ownertypescache->ownertypes[index].isvalidresolver = retrieveownertypesreply->ownertypes[
      index].isvalidresolver
      SET ownertypescache->ownertypes[index].isvalidreviewer = retrieveownertypesreply->ownertypes[
      index].isvalidreviewer
    ENDFOR
    SET ownertypescache->isinitialized = true
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(isvalidresolvertype,char(128))=char(128))
  SUBROUTINE (isvalidresolvertype(pownertype=vc) =i2)
    RETURN(isvalidownertypeforrole(pownertype,wi_role_resolver))
  END ;Subroutine
 ENDIF
 IF (validate(isvalidreviewertype,char(128))=char(128))
  SUBROUTINE (isvalidreviewertype(pownertype=vc) =i2)
    RETURN(isvalidownertypeforrole(pownertype,wi_role_reviewer))
  END ;Subroutine
 ENDIF
 IF (validate(isvalidownertypeforrole,char(128))=char(128))
  SUBROUTINE (isvalidownertypeforrole(pownertype=vc,prole=vc) =i2)
    DECLARE isvalid = i2 WITH protect, noconstant(false)
    DECLARE index = i4 WITH protect, noconstant(0)
    IF ( NOT (ownertypescache->isinitialized))
     IF ( NOT (initializeownertypescache(0)))
      CALL logmessage("isValidOwnerType","Failed to retrieve valid owner types",log_error)
      RETURN(false)
     ENDIF
    ENDIF
    SET index = locateval(index,1,size(ownertypescache->ownertypes,5),pownertype,ownertypescache->
     ownertypes[index].ownertypekey)
    IF (index > 0)
     IF (((prole=wi_role_assessor
      AND ownertypescache->ownertypes[index].isvalidassessor) OR (((prole=wi_role_resolver
      AND ownertypescache->ownertypes[index].isvalidresolver) OR (prole=wi_role_reviewer
      AND ownertypescache->ownertypes[index].isvalidreviewer)) )) )
      SET isvalid = true
     ENDIF
    ENDIF
    RETURN(isvalid)
  END ;Subroutine
 ENDIF
 IF (validate(isexternalresolvertype,char(128))=char(128))
  SUBROUTINE (isexternalresolvertype(presolvertype=vc) =i2)
    DECLARE isexternal = i2 WITH protect, noconstant(false)
    DECLARE index = i4 WITH protect, noconstant(0)
    IF ( NOT (isvalidresolvertype(presolvertype)))
     CALL logmessage("isExternalResolverType",build2("Invalid resolver type specified: ",
       presolvertype),log_error)
     RETURN(false)
    ENDIF
    SET index = locateval(index,1,size(ownertypescache->ownertypes,5),presolvertype,ownertypescache->
     ownertypes[index].ownertypekey)
    IF (index > 0)
     SET isexternal = ownertypescache->ownertypes[index].isexternal
    ENDIF
    RETURN(isexternal)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorforentity,char(128))=char(128))
  SUBROUTINE (getguarantorforentity(pentitytype=vc,pentityid=f8,prguarantorid=f8(ref)) =i2)
    SET prguarantorid = 0.0
    CASE (pentitytype)
     OF wi_entity_clinical_encounter:
      RETURN(getguarantorbyencounter(pentityid,prguarantorid))
     OF wi_entity_financial_encounter:
      RETURN(getguarantorbyfinencounter(pentityid,prguarantorid))
     OF wi_entity_insurance_balance:
      RETURN(getguarantorbybalance(pentityid,prguarantorid))
     OF wi_entity_claim:
      RETURN(getguarantorbyclaim(pentityid,prguarantorid))
     OF wi_entity_scheduling_event:
      RETURN(getguarantorbyappointment(pentityid,prguarantorid))
     OF wi_entity_scheduling_entry:
      RETURN(getguarantorbyschedulingentry(pentityid,prguarantorid))
     OF wi_entity_person:
      RETURN(getguarantoratpatientlevel(pentityid,prguarantorid))
    ENDCASE
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorbyclaim,char(128))=char(128))
  SUBROUTINE (getguarantorbyclaim(pentityid=f8,prguarantorid=f8(ref)) =i2)
    DECLARE relatedfinancialencounterid = f8 WITH protect, noconstant(0.00)
    SELECT INTO "nl:"
     FROM bill_rec brec,
      bill_reltn br,
      bo_hp_reltn bhr,
      benefit_order bo
     PLAN (brec
      WHERE brec.corsp_activity_id=pentityid)
      JOIN (br
      WHERE br.corsp_activity_id=brec.corsp_activity_id
       AND br.parent_entity_name="BO_HP_RELTN"
       AND br.active_ind=true)
      JOIN (bhr
      WHERE bhr.bo_hp_reltn_id=br.parent_entity_id
       AND bhr.active_ind=true)
      JOIN (bo
      WHERE bo.benefit_order_id=bhr.benefit_order_id
       AND bo.active_ind=true)
     DETAIL
      relatedfinancialencounterid = bo.pft_encntr_id
     WITH nocounter
    ;end select
    IF (curqual=0)
     RETURN(false)
    ENDIF
    RETURN(getguarantorbyfinencounter(relatedfinancialencounterid,prguarantorid))
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorbybalance,char(128))=char(128))
  SUBROUTINE (getguarantorbybalance(pentityid=f8,prguarantorid=f8(ref)) =i2)
    DECLARE relatedfinancialencounterid = f8 WITH protect, noconstant(0.00)
    SELECT INTO "nl:"
     FROM bo_hp_reltn bhr,
      benefit_order bo
     PLAN (bhr
      WHERE bhr.bo_hp_reltn_id=pentityid
       AND bhr.active_ind=true)
      JOIN (bo
      WHERE bo.benefit_order_id=bhr.benefit_order_id
       AND bo.active_ind=true)
     DETAIL
      relatedfinancialencounterid = bo.pft_encntr_id
     WITH nocounter
    ;end select
    IF (curqual=0)
     RETURN(false)
    ENDIF
    RETURN(getguarantorbyfinencounter(relatedfinancialencounterid,prguarantorid))
  END ;Subroutine
 ENDIF
 IF (validate(getsubscriberforentity,char(128))=char(128))
  SUBROUTINE (getsubscriberforentity(pentityid=f8,prsubscriberid=f8(ref)) =i2)
    IF ( NOT (validate(cs351_insured_cd)))
     DECLARE cs351_insured_cd = f8 WITH protect, constant(getcodevalue(351,"INSURED",1))
    ENDIF
    SELECT INTO "nl:"
     FROM bo_hp_reltn bhr,
      encntr_plan_reltn epr,
      encntr_person_reltn epr2
     PLAN (bhr
      WHERE bhr.bo_hp_reltn_id=pentityid
       AND bhr.active_ind=true)
      JOIN (epr
      WHERE epr.encntr_plan_reltn_id=bhr.encntr_plan_reltn_id
       AND epr.active_ind=true)
      JOIN (epr2
      WHERE epr2.encntr_id=epr.encntr_id
       AND epr2.related_person_id=epr.person_id
       AND epr2.person_reltn_type_cd=cs351_insured_cd
       AND epr2.active_ind=true)
     ORDER BY epr2.beg_effective_dt_tm
     HEAD epr.encntr_plan_reltn_id
      null
     DETAIL
      null
     FOOT  epr.encntr_plan_reltn_id
      prsubscriberid = epr.person_id
     WITH nocounter
    ;end select
    IF (curqual > 0)
     RETURN(true)
    ELSE
     SELECT INTO "nl:"
      FROM bill_rec br,
       bill_reltn brl,
       bo_hp_reltn bhr,
       encntr_plan_reltn epr,
       encntr_person_reltn epr2
      PLAN (br
       WHERE br.corsp_activity_id=pentityid)
       JOIN (brl
       WHERE brl.corsp_activity_id=br.corsp_activity_id
        AND brl.parent_entity_name="BO_HP_RELTN"
        AND brl.bill_vrsn_nbr=br.bill_vrsn_nbr)
       JOIN (bhr
       WHERE bhr.bo_hp_reltn_id=brl.parent_entity_id
        AND bhr.active_ind=true)
       JOIN (epr
       WHERE epr.encntr_plan_reltn_id=bhr.encntr_plan_reltn_id
        AND epr.active_ind=true)
       JOIN (epr2
       WHERE epr2.encntr_id=epr.encntr_id
        AND epr2.related_person_id=epr.person_id
        AND epr2.active_ind=true)
      ORDER BY epr2.beg_effective_dt_tm
      HEAD epr.encntr_plan_reltn_id
       null
      DETAIL
       null
      FOOT  epr.encntr_plan_reltn_id
       prsubscriberid = epr.person_id
      WITH nocounter
     ;end select
    ENDIF
    IF (curqual > 0)
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(gethealthplanforentity,char(128))=char(128))
  SUBROUTINE (gethealthplanforentity(pentityid=f8,prhealthplanid=f8(ref)) =i2)
    IF ( NOT (validate(cs351_insured_cd)))
     DECLARE cs351_insured_cd = f8 WITH protect, constant(getcodevalue(351,"INSURED",1))
    ENDIF
    SELECT INTO "nl:"
     FROM bo_hp_reltn bhr,
      encntr_plan_reltn epr,
      encntr_person_reltn epr2
     PLAN (bhr
      WHERE bhr.bo_hp_reltn_id=pentityid
       AND bhr.active_ind=true)
      JOIN (epr
      WHERE epr.encntr_plan_reltn_id=bhr.encntr_plan_reltn_id
       AND epr.active_ind=true)
      JOIN (epr2
      WHERE epr2.encntr_id=epr.encntr_id
       AND epr2.related_person_id=epr.person_id
       AND epr2.person_reltn_type_cd=cs351_insured_cd
       AND epr2.active_ind=true)
     ORDER BY epr2.beg_effective_dt_tm
     HEAD epr.encntr_plan_reltn_id
      null
     DETAIL
      null
     FOOT  epr.encntr_plan_reltn_id
      prhealthplanid = epr.health_plan_id
     WITH nocounter
    ;end select
    IF (curqual > 0)
     RETURN(true)
    ELSE
     SELECT INTO "nl:"
      FROM bill_rec br,
       bill_reltn brl,
       bo_hp_reltn bhr
      PLAN (br
       WHERE br.corsp_activity_id=pentityid)
       JOIN (brl
       WHERE brl.corsp_activity_id=br.corsp_activity_id
        AND brl.parent_entity_name="BO_HP_RELTN"
        AND brl.bill_vrsn_nbr=br.bill_vrsn_nbr)
       JOIN (bhr
       WHERE bhr.bo_hp_reltn_id=brl.parent_entity_id
        AND bhr.active_ind=true)
      DETAIL
       prhealthplanid = bhr.health_plan_id
      WITH nocounter
     ;end select
    ENDIF
    IF (curqual > 0)
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(getpatientforentity,char(128))=char(128))
  SUBROUTINE (getpatientforentity(pentitytype=vc,pentityid=f8,prpatientid=f8(ref)) =i2)
    SET prpatientid = 0.0
    CASE (pentitytype)
     OF wi_entity_clinical_encounter:
      RETURN(getpatientbyencounter(pentityid,prpatientid))
     OF wi_entity_financial_encounter:
      RETURN(getpatientbyfinencounter(pentityid,prpatientid))
     OF wi_entity_person:
      SET prpatientid = pentityid
     OF wi_entity_scheduling_event:
      RETURN(getpatientbyappointment(pentityid,prpatientid))
     OF wi_entity_scheduling_entry:
      RETURN(getpatientbyschedulingentry(pentityid,prpatientid))
    ENDCASE
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(determineexternalresolver,char(128))=char(128))
  SUBROUTINE (determineexternalresolver(pentitytype=vc,pentityid=f8,presolvertype=vc,prresolverid=f8(
    ref)) =i2)
    IF ( NOT (isvalidworkitementitytype(pentitytype)))
     CALL logmessage("determineExternalResolver",build2("Invalid entity type specified: ",pentitytype
       ),log_error)
     RETURN(false)
    ENDIF
    IF (pentityid <= 0.0
     AND pentitytype != wi_entity_tenant)
     CALL logmessage("determineExternalResolver",build2("Invalid entity ID specified: ",pentityid),
      log_error)
     RETURN(false)
    ENDIF
    IF ( NOT (isexternalresolvertype(presolvertype)))
     CALL logmessage("determineExternalResolver",build2("Invalid external resolver type specified: ",
       presolvertype),log_error)
     RETURN(false)
    ENDIF
    SET prresolverid = 0.0
    CASE (presolvertype)
     OF wi_owner_guarantor:
      RETURN(getguarantorforentity(pentitytype,pentityid,prresolverid))
     OF wi_owner_subscriber:
      RETURN(getsubscriberforentity(pentityid,prresolverid))
     OF wi_owner_healthplan:
      RETURN(gethealthplanforentity(pentityid,prresolverid))
     OF wi_owner_patient:
      RETURN(getpatientforentity(pentitytype,pentityid,prresolverid))
    ENDCASE
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getpersonname,char(128))=char(128))
  SUBROUTINE (getpersonname(ppersonid=f8,prname=vc(ref)) =i2)
    SET prname = ""
    SELECT INTO "nl:"
     FROM person p
     WHERE person_id=ppersonid
     DETAIL
      prname = p.name_full_formatted
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("getPersonName",build2("Invalid person specified: ",ppersonid),log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getdepartmentname,char(128))=char(128))
  SUBROUTINE (getdepartmentname(pdepartmentid=f8,prname=vc(ref)) =i2)
    SET prname = ""
    SELECT INTO "nl:"
     FROM prsnl_group p
     WHERE p.prsnl_group_id=pdepartmentid
     DETAIL
      prname = p.prsnl_group_name
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("getDepartmentName",build2("Invalid department specified: ",pdepartmentid),
      log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(gethealthplanname,char(128))=char(128))
  SUBROUTINE (gethealthplanname(phealthplanid=f8,prname=vc(ref)) =i2)
    SET prname = ""
    SELECT INTO "nl:"
     FROM health_plan hp
     WHERE hp.health_plan_id=phealthplanid
     DETAIL
      prname = hp.plan_name
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("getHealthPlanName",build2("Invalid health plan specified: ",phealthplanid),
      log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getadvancedrulename,char(128))=char(128))
  SUBROUTINE (getadvancedrulename(passignmentid=f8,prname=vc(ref)) =i2)
    SET prname = ""
    SELECT INTO "nl:"
     FROM pft_assignment_rule par
     WHERE par.pft_assignment_rule_id=passignmentid
     DETAIL
      prname = par.assignment_rule_name
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("getAdvancedRuleName",build2("Invalid Assignment Id specified: ",passignmentid),
      log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getworkitemownername,char(128))=char(128))
  SUBROUTINE (getworkitemownername(pownertype=vc,pownerid=f8,prname=vc(ref)) =i2)
    SET prname = ""
    CASE (pownertype)
     OF wi_owner_guarantor:
     OF wi_owner_personnel:
     OF wi_owner_subscriber:
     OF wi_owner_patient:
      RETURN(getpersonname(pownerid,prname))
     OF wi_owner_department:
      RETURN(getdepartmentname(pownerid,prname))
     OF wi_owner_healthplan:
      RETURN(gethealthplanname(pownerid,prname))
     OF wi_owner_advanced:
      RETURN(getadvancedrulename(pownerid,prname))
    ENDCASE
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(entityhadworkitem,char(128))=char(128))
  SUBROUTINE (entityhadworkitem(pentityid=f8,pentitytype=vc,pworkitemid=f8) =i2)
    CALL logmessage("entityHadWorkItem","Entering...",log_debug)
    DECLARE hadworkitem = i2 WITH protect, noconstant(false)
    DECLARE entityparser = vc WITH protect, noconstant("")
    IF (entityhasworkitem(pentityid,pentitytype,pworkitemid))
     CALL logmessage("entityHadWorkItem","Entity currently has work items that are not completed",
      log_debug)
     RETURN(false)
    ENDIF
    IF (pentitytype=wi_entity_clinical_encounter)
     SET entityparser = concat("pq.encntr_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_financial_encounter)
     SET entityparser = concat("pq.pft_encntr_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_insurance_balance)
     SET entityparser = concat("pq.bo_hp_reltn_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_claim)
     SET entityparser = concat("pq.corsp_activity_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_scheduling_event)
     SET entityparser = concat("pq.sch_event_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_referral)
     SET entityparser = concat("pq.referral_ext_ident = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_person)
     SET entityparser = concat("pq.person_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_tenant)
     SET entityparser = concat("pq.logical_domain_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_billing_entity)
     SET entityparser = concat("pq.billing_entity_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_account)
     SET entityparser = concat("pq.acct_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_scheduling_entry)
     SET entityparser = concat("pq.sch_entry_id = ",cnvtstring(pentityid,17,3))
    ENDIF
    SELECT INTO "nl:"
     FROM pft_queue_item_hist pq,
      pft_wf_issue pi
     PLAN (pi
      WHERE pi.pft_wf_issue_id=pworkitemid)
      JOIN (pq
      WHERE pq.item_status_cd=pi.issue_cd
       AND pq.active_ind=true
       AND parser(entityparser))
     WITH nocounter
    ;end select
    IF (curqual > 0)
     SET hadworkitem = true
    ENDIF
    CALL logmessage("entityHadWorkItem","Exiting...",log_debug)
    RETURN(hadworkitem)
  END ;Subroutine
 ENDIF
 IF (validate(entityhasworkitem,char(128))=char(128))
  SUBROUTINE (entityhasworkitem(pentityid=f8,pentitytype=vc,pworkitemid=f8) =i2)
    CALL logmessage("entityHasWorkItem","Entering...",log_debug)
    DECLARE hasworkitem = i2 WITH protect, noconstant(false)
    DECLARE entityparser = vc WITH protect, noconstant("")
    IF (pentitytype=wi_entity_clinical_encounter)
     SET entityparser = concat("pq.encntr_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_financial_encounter)
     SET entityparser = concat("pq.pft_encntr_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_insurance_balance)
     SET entityparser = concat("pq.bo_hp_reltn_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_claim)
     SET entityparser = concat("pq.corsp_activity_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_scheduling_event)
     SET entityparser = concat("pq.sch_event_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_referral)
     SET entityparser = concat("pq.referral_ext_ident = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_person)
     SET entityparser = concat("pq.person_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_tenant)
     SET entityparser = concat("pq.logical_domain_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_billing_entity)
     SET entityparser = concat("pq.billing_entity_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_account)
     SET entityparser = concat("pq.acct_id = ",cnvtstring(pentityid,17,3))
    ELSEIF (pentitytype=wi_entity_scheduling_entry)
     SET entityparser = concat("pq.sch_entry_id = ",cnvtstring(pentityid,17,3))
    ENDIF
    SELECT INTO "nl:"
     FROM pft_queue_item pq,
      pft_wf_issue pi
     PLAN (pq
      WHERE pq.active_ind=true
       AND parser(entityparser))
      JOIN (pi
      WHERE pi.issue_cd=pq.item_status_cd
       AND pi.pft_wf_issue_id=pworkitemid)
    ;end select
    IF (curqual > 0)
     SET hasworkitem = true
    ENDIF
    CALL logmessage("entityHasWorkItem","Exiting...",log_debug)
    RETURN(hasworkitem)
  END ;Subroutine
 ENDIF
 IF (validate(entityhasclaimworkitem,char(128))=char(128))
  SUBROUTINE (entityhasclaimworkitem(pentityid=f8,pentitytype=vc,pworkflowitemid=f8) =i2)
    CALL logmessage("entityHasClaimWorkItem","Entering...",log_debug)
    DECLARE hasworkitem = i2 WITH protect, noconstant(false)
    IF (pentitytype=wi_entity_insurance_balance)
     SELECT INTO "nl:"
      FROM bo_hp_reltn bohp,
       bill_reltn brl,
       bill_rec br,
       pft_queue_item pqi,
       pft_queue_item_wf_hist pqiwh
      PLAN (bohp
       WHERE bohp.bo_hp_reltn_id=pentityid)
       JOIN (brl
       WHERE brl.parent_entity_id=bohp.bo_hp_reltn_id
        AND brl.parent_entity_name="BO_HP_RELTN")
       JOIN (br
       WHERE br.corsp_activity_id=brl.corsp_activity_id)
       JOIN (pqi
       WHERE pqi.corsp_activity_id=br.corsp_activity_id
        AND pqi.active_ind=true)
       JOIN (pqiwh
       WHERE pqiwh.parent_entity_id=br.corsp_activity_id
        AND pqiwh.parent_entity_name="BILL_REC"
        AND pqiwh.pft_queue_item_id != pworkflowitemid)
      HEAD pqiwh.pft_queue_item_id
       hasworkitem = true
      WITH nocounter
     ;end select
    ELSEIF (pentitytype=wi_entity_claim)
     SELECT INTO "nl:"
      FROM pft_queue_item_wf_hist pqiwh
      PLAN (pqiwh
       WHERE pqiwh.parent_entity_id=pentityid
        AND pqiwh.parent_entity_name="BILL_REC"
        AND pqiwh.pft_queue_item_id != pworkflowitemid)
      HEAD pqiwh.pft_queue_item_id
       hasworkitem = true
      WITH nocounter
     ;end select
    ENDIF
    CALL logmessage("entityHasClaimWorkItem","Exiting...",log_debug)
    RETURN(hasworkitem)
  END ;Subroutine
 ENDIF
 SUBROUTINE containsworkflowitem(workflowitemid,workflowitemhaswi)
   DECLARE hasworkitemind = i2 WITH protect, noconstant(false)
   DECLARE idx = i4 WITH protect, noconstant(0)
   SET locindex = locateval(idx,1,size(workflowitemhaswi->array,5),workflowitemid,workflowitemhaswi->
    array[idx].workflowitemid)
   IF (locindex > 0)
    SET hasworkitemind = true
   ENDIF
   CALL logmessage("containsWorkFlowItem:",build("workFlowItemId: ",workflowitemid,"-",hasworkitemind
     ),log_debug)
   RETURN(hasworkitemind)
 END ;Subroutine
 SUBROUTINE getamountforcontvar(claimid,varianceamt)
   CALL logmessage("getAmountForContVar","Entering",log_debug)
   DECLARE contvaramount = f8 WITH protect, noconstant(0.0)
   IF ( NOT (isequal(varianceamt,0.0)))
    SET contvaramount = varianceamt
   ELSE
    SELECT INTO "nl:"
     FROM pft_line_item pli
     PLAN (pli
      WHERE pli.corsp_activity_id=claimid)
     DETAIL
      contvaramount += pli.variance_amt
     WITH nocounter
    ;end select
   ENDIF
   RETURN(contvaramount)
 END ;Subroutine
 SUBROUTINE getamountforclaimworkitem(workitemid,workitemamt)
   CALL logmessage("getAmountForClaimWorkItem","Entering",log_debug)
   DECLARE claimworkitemamt = f8 WITH protect, noconstant(0.0)
   IF ( NOT (validate(cs29322_calcadjpost)))
    DECLARE cs29322_calcadjpost = f8 WITH protect, constant(getcodevalue(29322,"CALCADJPOST",1))
   ENDIF
   SELECT INTO "nl:"
    FROM pft_queue_item pqi,
     pft_queue_item_wf_hist pqiwh,
     pft_queue_item_wf_reltn pqiwr,
     pft_line_item pli
    PLAN (pqi
     WHERE pqi.pft_queue_item_id=workitemid
      AND pqi.event_cd != cs29322_calcadjpost
      AND pqi.active_ind=true)
     JOIN (pqiwh
     WHERE pqiwh.pft_queue_item_id=pqi.pft_queue_item_id
      AND pqiwh.active_ind=true)
     JOIN (pqiwr
     WHERE pqiwr.pft_queue_item_wf_hist_id=pqiwh.pft_queue_item_wf_hist_id
      AND pqiwr.parent_entity_name=pft_line_item_table
      AND pqiwr.parent_entity_id != 0.00)
     JOIN (pli
     WHERE pli.pft_line_item_id=pqiwr.parent_entity_id)
    DETAIL
     claimworkitemamt = pli.variance_amt
    WITH nocounter
   ;end select
   IF (curqual=0)
    SET claimworkitemamt = workitemamt
   ENDIF
   RETURN(claimworkitemamt)
 END ;Subroutine
 IF (validate(checkforexcludedactioncode,char(128))=char(128))
  SUBROUTINE (checkforexcludedactioncode(pactioncode=f8,prisactioncodeexcluded=i2(ref)) =i2)
    CALL logmessage("checkForExcludedActionCode","Entering",log_debug)
    DECLARE actionjson = vc WITH protect, noconstant(" ")
    DECLARE noerrorhasoccurred = i2 WITH protect, noconstant(true)
    SELECT INTO "nl:"
     FROM long_text_reference ltr
     PLAN (ltr
      WHERE ltr.parent_entity_name="CODE_VALUE"
       AND ltr.parent_entity_id=pactioncode
       AND ltr.active_ind=true)
     DETAIL
      actionjson = ltr.long_text
     WITH nocounter
    ;end select
    IF (curqual > 0)
     SET stat = cnvtjsontorec(actionjson)
     IF (stat=0)
      CALL logmessage("checkForExcludedActionCode",
       "Error: Unable to convert JSON string to ACTION structure",log_error)
      SET noerrorhasoccurred = false
     ELSE
      IF ( NOT (validate(action)))
       CALL logmessage("checkForExcludedActionCode","Error: Missing ACTION",log_error)
       SET noerrorhasoccurred = false
      ELSEIF ( NOT (validate(action->name)))
       CALL logmessage("checkForExcludedActionCode","Error: Missing ACTION->name",log_error)
       SET noerrorhasoccurred = false
      ELSEIF ( NOT (validate(action->actionkey)))
       CALL logmessage("checkForExcludedActionCode","Error: Missing ACTION->actionKey",log_error)
       SET noerrorhasoccurred = false
      ELSEIF ( NOT (validate(action->adapter)))
       CALL logmessage("checkForExcludedActionCode","Error: Missing ACTION->adapter",log_error)
       SET noerrorhasoccurred = false
      ENDIF
      IF (noerrorhasoccurred)
       IF ((action->actionkey IN ("REPRICE_CLAIM")))
        SET prisactioncodeexcluded = true
       ENDIF
      ENDIF
     ENDIF
    ENDIF
    CALL logmessage("checkForExcludedActionCode","Exiting...",log_debug)
    RETURN(noerrorhasoccurred)
  END ;Subroutine
 ENDIF
 IF (validate(publishworkfloweventfactory,char(128))=char(128))
  SUBROUTINE (publishworkfloweventfactory(prscriptrequest=vc(ref)) =null)
    CALL logmessage("publishWorkflowEventFactory","Entering...",log_debug)
    DECLARE entitytypekey = vc WITH noconstant(""), protect
    DECLARE entityid = f8 WITH noconstant(0), protect
    DECLARE eventcd = f8 WITH noconstant(0), protect
    DECLARE eventoccurid = f8 WITH noconstant(0), protect
    DECLARE eventidx = i4 WITH noconstant(0), protect
    DECLARE stringvalue = vc WITH noconstant(""), protect
    DECLARE paramcd = f8 WITH noconstant(0), protect
    DECLARE parententityid = f8 WITH noconstant(0), protect
    DECLARE parententityname = vc WITH noconstant(""), protect
    IF (size(prscriptrequest,5) > 0)
     FOR (eventidx = 1 TO size(prscriptrequest->eventlist,5))
       SET entitytypekey = prscriptrequest->eventlist[eventidx].entitytypekey
       SET eventcd = prscriptrequest->eventlist[eventidx].eventcd
       SET entityid = prscriptrequest->eventlist[eventidx].entityid
       SET stringvalue = prscriptrequest->eventlist[eventidx].parameters[1].stringvalue
       SET parententityid = prscriptrequest->eventlist[eventidx].parameters[1].parententityid
       SET parententityname = prscriptrequest->eventlist[eventidx].parameters[1].parententityname
       SET paramcd = prscriptrequest->eventlist[eventidx].parameters[1].paramcd
       IF (entitytypekey != ""
        AND entityid > 0
        AND eventcd > 0)
        IF (entitytypekey=insurance_type_key
         AND ((eventcd=cs29322_workitemcrtd) OR (eventcd=cs29322_workitemrslv))
         AND paramcd=cs24454_wfqueuename
         AND ((stringvalue="At Risk Claim") OR (stringvalue="Past Due")) )
         SET eventoccurid = savecommonworklistworkflowevent(prscriptrequest,eventidx)
         IF (eventoccurid != 0)
          IF (shouldeventbebridged(eventcd))
           CALL prepareforeventbridging(prscriptrequest,eventidx,eventoccurid)
          ELSE
           CALL logmessage("publishWorkflowEventFactory","shouldEventBeBridged() returned false.",
            log_error)
          ENDIF
         ELSE
          CALL logmessage("publishWorkflowEventFactory",
           "Publishing failed - eventOccurId is equals to 0.",log_error)
         ENDIF
        ENDIF
       ELSE
        CALL logmessage("publishWorkflowEventFactory",
         "entityTypeKey, entityId, and eventCd should be populated to publish the event.",log_error)
       ENDIF
     ENDFOR
    ENDIF
    CALL logmessage("publishWorkflowEventFactory","Exiting...",log_debug)
  END ;Subroutine
 ENDIF
 IF (validate(populateentitydetailsforworkitems,char(128))=char(128))
  SUBROUTINE (populateentitydetailsforworkitems(prworkitementitylist=vc(ref)) =null)
    CALL logmessage("populateEntityDetailsForWorkItems","Entering...",log_debug)
    DECLARE entitytypekey = vc WITH noconstant(""), protect
    DECLARE entityid = f8 WITH noconstant(0), protect
    IF (validate(prworkitementitylist)
     AND size(prworkitementitylist->workitementity,5) > 0)
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = size(prworkitementitylist->workitementity,5)),
       pft_queue_item q
      PLAN (d)
       JOIN (q
       WHERE (q.pft_queue_item_id=prworkitementitylist->workitementity[d.seq].workitemid)
        AND q.active_ind=true)
      DETAIL
       IF (q.pft_encntr_id > 0.0
        AND q.pft_entity_type_cd=cs29320_pftencntr)
        entityid = q.pft_encntr_id
       ELSEIF (q.bo_hp_reltn_id > 0.0
        AND ((q.pft_entity_type_cd=cs29320_insurance) OR (q.pft_entity_type_cd=cs29320_selfpay)) )
        entityid = q.bo_hp_reltn_id
       ELSEIF (q.encntr_id > 0.0
        AND q.pft_entity_type_cd=cs29320_clin_encounter)
        entityid = q.encntr_id
       ELSEIF (q.person_id > 0.0
        AND q.pft_entity_type_cd=cs29320_person)
        entityid = q.person_id
       ELSEIF (q.corsp_activity_id > 0.0
        AND q.pft_entity_type_cd=cs29320_claim)
        entityid = q.corsp_activity_id
       ELSEIF (q.sch_event_id > 0.0
        AND q.pft_entity_type_cd=cs29320_schevent)
        entityid = q.sch_event_id
       ELSEIF (q.sch_entry_id > 0.0
        AND q.pft_entity_type_cd=cs29320_schentry)
        entityid = q.sch_entry_id
       ELSEIF (q.referral_ext_ident > 0.0
        AND q.pft_entity_type_cd=cs29320_referral)
        entityid = q.referral_ext_ident
       ELSEIF (q.pft_entity_type_cd=cs29320_tenant)
        entityid = q.logical_domain_id
       ELSEIF (q.billing_entity_id > 0.0
        AND q.pft_entity_type_cd=cs29320_bill_entity)
        entityid = q.billing_entity_id
       ELSEIF (q.acct_id > 0.0
        AND q.pft_entity_type_cd=cs29320_account)
        entityid = q.acct_id
       ELSEIF (q.batch_trans_id > 0.0
        AND q.pft_entity_type_cd=cs29320_transbatch)
        entityid = q.batch_trans_id
       ELSEIF (q.blob_ref_id > 0.0
        AND q.pft_entity_type_cd=cs29320_image)
        entityid = q.blob_ref_id
       ENDIF
       entitytypekey = uar_get_code_meaning(q.pft_entity_type_cd)
       IF (entitytypekey != ""
        AND entityid > 0)
        prworkitementitylist->workitementity[d.seq].entityid = entityid, prworkitementitylist->
        workitementity[d.seq].entitytypekey = entitytypekey, prworkitementitylist->workitementity[d
        .seq].queuename = uar_get_code_display(q.pft_entity_status_cd)
       ENDIF
       entityid = 0, entitytypekey = ""
      WITH nocounter
     ;end select
    ENDIF
    CALL logmessage("populateEntityDetailsForWorkItems","Exiting...",log_debug)
  END ;Subroutine
 ENDIF
 IF (validate(savecommonworklistworkflowevent,char(128))=char(128))
  SUBROUTINE (savecommonworklistworkflowevent(prscriptrequest=vc(ref),peventidx=i4) =i2)
    CALL logmessage("saveCommonWorkListWorkflowEvent","Entering...",log_debug)
    RECORD wfeventreq(
      1 eventcd = f8
      1 entityid = f8
      1 entityname = vc
      1 params[*]
        2 paramcd = f8
        2 paramvalue = vc
        2 newparamind = i2
        2 doublevalue = f8
        2 stringvalue = vc
        2 datevalue = dq8
        2 parententityname = vc
        2 parententityid = f8
    ) WITH protect
    RECORD wfeventrep(
      1 pfteventoccurid = f8
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    DECLARE eventoccurid = f8 WITH protect, noconstant(0)
    SET stat = alterlist(wfeventreq->params,1)
    SET wfeventreq->eventcd = prscriptrequest->eventlist[peventidx].eventcd
    SET wfeventreq->entityid = prscriptrequest->eventlist[peventidx].entityid
    SET wfeventreq->entityname = prscriptrequest->eventlist[peventidx].entitytypekey
    IF ((prscriptrequest->eventlist[peventidx].parameters[1].paramcd=cs24454_wfqueuename))
     SET wfeventreq->params[1].paramcd = prscriptrequest->eventlist[peventidx].parameters[1].paramcd
     SET wfeventreq->params[1].stringvalue = prscriptrequest->eventlist[peventidx].parameters[1].
     stringvalue
     SET wfeventreq->params[1].parententityid = prscriptrequest->eventlist[peventidx].parameters[1].
     parententityid
     SET wfeventreq->params[1].parententityname = prscriptrequest->eventlist[eventidx].parameters[1].
     parententityname
     SET wfeventreq->params[1].newparamind = 1
    ENDIF
    EXECUTE pft_r_workflow_event_save  WITH replace("REQUEST",wfeventreq), replace("REPLY",wfeventrep
     )
    IF ((wfeventrep->status_data.status != "S"))
     SET eventoccurid = 0
     CALL logmessage("saveCommonWorkListWorkflowEvent","Error: Failed to save event occurance",
      log_error)
    ELSE
     SET eventoccurid = wfeventrep->pfteventoccurid
     CALL logmessage("saveCommonWorkListWorkflowEvent","Exiting...",log_debug)
    ENDIF
    RETURN(eventoccurid)
  END ;Subroutine
 ENDIF
 IF (validate(shouldeventbebridged,char(128))=char(128))
  SUBROUTINE (shouldeventbebridged(peventcd=f8) =i2)
    CALL logmessage("shouldEventBeBridged","Entering...",log_debug)
    DECLARE eventbridgingvalue = vc WITH protect, noconstant("0")
    DECLARE iseventbridgingenabled = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM code_value_extension cve
     PLAN (cve
      WHERE cve.code_value=peventcd
       AND cve.field_name="EVENT BRIDGING")
     DETAIL
      eventbridgingvalue = cve.field_value
     WITH nocounter
    ;end select
    IF (eventbridgingvalue="1")
     SET iseventbridgingenabled = true
    ENDIF
    CALL logmessage("shouldEventBeBridged","Exiting...",log_debug)
    RETURN(iseventbridgingenabled)
  END ;Subroutine
 ENDIF
 IF (validate(prepareforeventbridging,char(128))=char(128))
  SUBROUTINE (prepareforeventbridging(prscriptrequest=vc(ref),peventidx=i4,peventoccurid=f8) =null)
    CALL logmessage("prepareForEventBridging","Entering...",log_debug)
    RECORD addtaskqueuerequest(
      1 workflowtaskqueueid = f8
      1 requestjson = vc
      1 replyjson = vc
      1 originaltaskqueueid = f8
      1 processdttm = dq8
      1 taskident = vc
      1 retrycount = i4
      1 queuestatuscd = f8
      1 entityid = f8
      1 entityname = vc
      1 taskdatatxt = vc
    ) WITH protect
    RECORD addtaskqueuereply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD publisheventsbridging(
      1 entitytypekey = vc
      1 entityid = f8
      1 eventcd = f8
      1 eventoccurid = f8
      1 parameters[*]
        2 name = vc
        2 value = vc
    ) WITH protect
    SET stat = alterlist(publisheventsbridging->parameters,1)
    SET publisheventsbridging->entitytypekey = prscriptrequest->eventlist[peventidx].entitytypekey
    SET publisheventsbridging->entityid = prscriptrequest->eventlist[peventidx].entityid
    SET publisheventsbridging->eventcd = prscriptrequest->eventlist[peventidx].eventcd
    SET publisheventsbridging->eventoccurid = peventoccurid
    IF ((prscriptrequest->eventlist[peventidx].parameters[1].paramcd=cs24454_wfqueuename))
     SET publisheventsbridging->parameters[1].name = uar_get_code_display(prscriptrequest->eventlist[
      peventidx].parameters[1].paramcd)
     SET publisheventsbridging->parameters[1].value = prscriptrequest->eventlist[peventidx].
     parameters[1].stringvalue
    ENDIF
    SET addtaskqueuerequest->requestjson = replace(cnvtrectojson(publisheventsbridging),
     "PUBLISHEVENTSBRIDGING","WTPTASKREQUEST")
    SET addtaskqueuerequest->taskident = "PFT_PUBLISH_EVENT_TO_ENT"
    SET addtaskqueuerequest->processdttm = cnvtdatetime(sysdate)
    SET addtaskqueuerequest->entityid = prscriptrequest->eventlist[peventidx].entityid
    SET addtaskqueuerequest->entityname = prscriptrequest->eventlist[peventidx].entitytypekey
    EXECUTE wtp_workflow_task_save  WITH replace("REQUEST",addtaskqueuerequest), replace("REPLY",
     addtaskqueuereply)
    IF ((addtaskqueuereply->status_data.status != "S"))
     CALL logmessage("prepareForEventBridging","Error: Failed to bridge event",log_error)
    ELSE
     CALL logmessage("prepareForEventBridging","Exiting...",log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(false,0)=0
  AND validate(false,1)=1)
  DECLARE false = i2 WITH public, constant(0)
 ENDIF
 IF (validate(true,0)=0
  AND validate(true,1)=1)
  DECLARE true = i2 WITH public, constant(1)
 ENDIF
 IF (validate(gen_nbr_error,0)=0
  AND validate(gen_nbr_error,1)=1)
  DECLARE gen_nbr_error = i2 WITH public, constant(3)
 ENDIF
 IF (validate(insert_error,0)=0
  AND validate(insert_error,1)=1)
  DECLARE insert_error = i2 WITH public, constant(4)
 ENDIF
 IF (validate(update_error,0)=0
  AND validate(update_error,1)=1)
  DECLARE update_error = i2 WITH public, constant(5)
 ENDIF
 IF (validate(replace_error,0)=0
  AND validate(replace_error,1)=1)
  DECLARE replace_error = i2 WITH public, constant(6)
 ENDIF
 IF (validate(delete_error,0)=0
  AND validate(delete_error,1)=1)
  DECLARE delete_error = i2 WITH public, constant(7)
 ENDIF
 IF (validate(undelete_error,0)=0
  AND validate(undelete_error,1)=1)
  DECLARE undelete_error = i2 WITH public, constant(8)
 ENDIF
 IF (validate(remove_error,0)=0
  AND validate(remove_error,1)=1)
  DECLARE remove_error = i2 WITH public, constant(9)
 ENDIF
 IF (validate(attribute_error,0)=0
  AND validate(attribute_error,1)=1)
  DECLARE attribute_error = i2 WITH public, constant(10)
 ENDIF
 IF (validate(lock_error,0)=0
  AND validate(lock_error,1)=1)
  DECLARE lock_error = i2 WITH public, constant(11)
 ENDIF
 IF (validate(none_found,0)=0
  AND validate(none_found,1)=1)
  DECLARE none_found = i2 WITH public, constant(12)
 ENDIF
 IF (validate(select_error,0)=0
  AND validate(select_error,1)=1)
  DECLARE select_error = i2 WITH public, constant(13)
 ENDIF
 IF (validate(update_cnt_error,0)=0
  AND validate(update_cnt_error,1)=1)
  DECLARE update_cnt_error = i2 WITH public, constant(14)
 ENDIF
 IF (validate(not_found,0)=0
  AND validate(not_found,1)=1)
  DECLARE not_found = i2 WITH public, constant(15)
 ENDIF
 IF (validate(inactivate_error,0)=0
  AND validate(inactivate_error,1)=1)
  DECLARE inactivate_error = i2 WITH public, constant(17)
 ENDIF
 IF (validate(activate_error,0)=0
  AND validate(activate_error,1)=1)
  DECLARE activate_error = i2 WITH public, constant(18)
 ENDIF
 IF (validate(uar_error,0)=0
  AND validate(uar_error,1)=1)
  DECLARE uar_error = i2 WITH public, constant(20)
 ENDIF
 IF (validate(duplicate_error,- (1)) != 21)
  DECLARE duplicate_error = i2 WITH protect, noconstant(21)
 ENDIF
 IF (validate(ccl_error,- (1)) != 22)
  DECLARE ccl_error = i2 WITH protect, noconstant(22)
 ENDIF
 IF (validate(execute_error,- (1)) != 23)
  DECLARE execute_error = i2 WITH protect, noconstant(23)
 ENDIF
 DECLARE failed = i2 WITH protect, noconstant(false)
 DECLARE table_name = vc WITH protect, noconstant(" ")
 DECLARE call_echo_ind = i2 WITH protect, noconstant(0)
 DECLARE pmhc_contributory_system_cd = f8 WITH protect, noconstant(0.0)
 IF ( NOT (validate(cs20849_client_cd)))
  DECLARE cs20849_client_cd = f8 WITH protect, constant(getcodevalue(20849,"CLIENT",1))
 ENDIF
 IF ( NOT (validate(cs20849_research_cd)))
  DECLARE cs20849_research_cd = f8 WITH protect, constant(getcodevalue(20849,"RESEARCH",1))
 ENDIF
 SUBROUTINE (checkworkitemexist(paccountid=f8,prpftqueueitemid=f8(ref),prpreworkitemamount=f8(ref),
  prupdatecnt=i4(ref),prworkitemupdtdate=f8(ref)) =i2)
   CALL logmsg(curprog,"Entering... checkWorkItemExist()",log_debug)
   IF ( NOT (validate(cs29320_account_cd)))
    DECLARE cs29320_account_cd = f8 WITH protect, constant(getcodevalue(29320,"ACCOUNT",1))
   ENDIF
   IF ( NOT (validate(cs29322_unbillinv_cd)))
    DECLARE cs29322_unbillinv_cd = f8 WITH protect, constant(getcodevalue(29322,"UNBILLINV",1))
   ENDIF
   DECLARE workitemexistsind = i2 WITH protect, noconstant(false)
   SELECT INTO "nl:"
    FROM pft_queue_item pqi
    PLAN (pqi
     WHERE pqi.acct_id=paccountid
      AND pqi.pft_entity_type_cd=cs29320_account_cd
      AND pqi.event_cd=cs29322_unbillinv_cd
      AND pqi.active_ind=true)
    ORDER BY pqi.pft_queue_item_id DESC
    DETAIL
     workitemexistsind = true, prpftqueueitemid = pqi.pft_queue_item_id, prpreworkitemamount = pqi
     .work_item_amt,
     prworkitemupdtdate = pqi.updt_dt_tm, prupdatecnt = pqi.updt_cnt
    WITH nocounter, maxrec = 1
   ;end select
   CALL logmsg(curprog,"Exiting... checkWorkItemExist()",log_debug)
   RETURN(workitemexistsind)
 END ;Subroutine
 SUBROUTINE (checkequalbalances(paccountid=f8,pworkitemamount=f8,prlastinvbilleddate=f8(ref)) =i2)
   CALL logmsg(curprog,"Entering... checkEqualBalances()",log_debug)
   DECLARE totalinvoicebalance = f8 WITH protect, noconstant(0.0)
   DECLARE amountdiff = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM account a,
     bill_reltn brl,
     bill_rec br
    PLAN (a
     WHERE a.acct_id=paccountid
      AND a.acct_sub_type_cd IN (cs20849_client_cd, cs20849_research_cd)
      AND a.active_ind=true)
     JOIN (brl
     WHERE brl.parent_entity_id=a.acct_id
      AND brl.active_ind=true
      AND brl.parent_entity_name="ACCOUNT")
     JOIN (br
     WHERE br.corsp_activity_id=brl.corsp_activity_id
      AND br.balance > 0.0
      AND br.active_ind=true)
    ORDER BY br.corsp_activity_id DESC
    DETAIL
     totalinvoicebalance = br.balance, prlastinvbilleddate = br.updt_dt_tm
    WITH nocounter, maxrec = 1
   ;end select
   SET amountdiff = abs((totalinvoicebalance - pworkitemamount))
   IF (amountdiff < 0.009)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
 END ;Subroutine
 CALL echo(build("Begin PFT_RCA_WORKFLOW_COMMON_INC, version [",nullterm("ENABTECH-15032.015"),"]"))
 CALL echo("Begin pft_feature_toggle_common.inc, version[674984.002]")
 IF ("Z"=validate(pft_common_vrsn,"Z"))
  DECLARE pft_common_vrsn = vc WITH noconstant(""), public
 ENDIF
 SET pft_common_vrsn = "500383.087"
 IF ((validate(pft_neither,- (1))=- (1)))
  DECLARE pft_neither = i2 WITH constant(0)
 ENDIF
 IF ((validate(pft_debit,- (1))=- (1)))
  DECLARE pft_debit = i2 WITH constant(1)
 ENDIF
 IF ((validate(pft_credit,- (1))=- (1)))
  DECLARE pft_credit = i2 WITH constant(2)
 ENDIF
 IF (validate(null_f8,0.0)=0.0)
  DECLARE null_f8 = f8 WITH constant(- (0.00001))
 ENDIF
 IF (validate(null_i2,0)=0)
  DECLARE null_i2 = i2 WITH constant(- (1))
 ENDIF
 IF (validate(null_i4,0)=0)
  DECLARE null_i4 = i4 WITH constant(- (1))
 ENDIF
 IF ((validate(null_dt,- (1.0))=- (1.0)))
  DECLARE null_dt = q8 WITH constant(0.0)
 ENDIF
 IF (validate(null_vc,"Z")="Z")
  DECLARE null_vc = vc WITH constant("")
 ENDIF
 IF ((validate(upt_force,- (1))=- (1)))
  DECLARE upt_force = i4 WITH constant(- (99999))
 ENDIF
 IF ((validate(log_error,- (1))=- (1)))
  DECLARE log_error = i4 WITH constant(0)
 ENDIF
 IF ((validate(log_warning,- (1))=- (1)))
  DECLARE log_warning = i4 WITH constant(1)
 ENDIF
 IF ((validate(log_audit,- (1))=- (1)))
  DECLARE log_audit = i4 WITH constant(2)
 ENDIF
 IF ((validate(log_info,- (1))=- (1)))
  DECLARE log_info = i4 WITH constant(3)
 ENDIF
 IF ((validate(log_debug,- (1))=- (1)))
  DECLARE log_debug = i4 WITH constant(4)
 ENDIF
 IF (validate(ein_pft_charge,0)=0)
  DECLARE ein_pft_charge = i4 WITH constant(1)
 ENDIF
 IF (validate(ein_charge_item,0)=0)
  DECLARE ein_charge_item = i4 WITH constant(2)
 ENDIF
 IF (validate(ein_bill_header,0)=0)
  DECLARE ein_bill_header = i4 WITH constant(3)
 ENDIF
 IF (validate(ein_pft_encntr,0)=0)
  DECLARE ein_pft_encntr = i4 WITH constant(4)
 ENDIF
 IF (validate(ein_benefit_order,0)=0)
  DECLARE ein_benefit_order = i4 WITH constant(5)
 ENDIF
 IF (validate(ein_guarantor,0)=0)
  DECLARE ein_guarantor = i4 WITH constant(6)
 ENDIF
 IF (validate(ein_encounter,0)=0)
  DECLARE ein_encounter = i4 WITH constant(7)
 ENDIF
 IF (validate(ein_account,0)=0)
  DECLARE ein_account = i4 WITH constant(8)
 ENDIF
 IF (validate(ein_remittance,0)=0)
  DECLARE ein_remittance = i4 WITH constant(9)
 ENDIF
 IF (validate(ein_eob,0)=0)
  DECLARE ein_eob = i4 WITH constant(10)
 ENDIF
 IF (validate(ein_billing_entity,0)=0)
  DECLARE ein_billing_entity = i4 WITH constant(11)
 ENDIF
 IF (validate(ein_person,0)=0)
  DECLARE ein_person = i4 WITH constant(12)
 ENDIF
 IF (validate(ein_activity,0)=0)
  DECLARE ein_activity = i4 WITH constant(13)
 ENDIF
 IF (validate(ein_fin_nbr,0)=0)
  DECLARE ein_fin_nbr = i4 WITH constant(14)
 ENDIF
 IF (validate(ein_bo_hp_reltn,0)=0)
  DECLARE ein_bo_hp_reltn = i4 WITH constant(15)
 ENDIF
 IF (validate(ein_denial,0)=0)
  DECLARE ein_denial = i4 WITH constant(16)
 ENDIF
 IF (validate(ein_client_account,0)=0)
  DECLARE ein_client_account = i4 WITH constant(17)
 ENDIF
 IF (validate(ein_encntr_clln_reltn,0)=0)
  DECLARE ein_encntr_clln_reltn = i4 WITH constant(18)
 ENDIF
 IF (validate(ein_bill_nbr,0)=0)
  DECLARE ein_bill_nbr = i4 WITH constant(19)
 ENDIF
 IF (validate(ein_trans_alias,0)=0)
  DECLARE ein_trans_alias = i4 WITH constant(20)
 ENDIF
 IF (validate(ein_trans_alias_elements,0)=0)
  DECLARE ein_trans_alias_elements = i4 WITH constant(21)
 ENDIF
 IF (validate(ein_hold,0)=0)
  DECLARE ein_hold = i4 WITH constant(22)
 ENDIF
 IF (validate(ein_hold_prompt,0)=0)
  DECLARE ein_hold_prompt = i4 WITH constant(23)
 ENDIF
 IF (validate(ein_person_at,0)=0)
  DECLARE ein_person_at = i4 WITH constant(24)
 ENDIF
 IF (validate(ein_reversal,0)=0)
  DECLARE ein_reversal = i4 WITH constant(25)
 ENDIF
 IF (validate(ein_ext_acct_id_txt,0)=0)
  DECLARE ein_ext_acct_id_txt = i4 WITH constant(26)
 ENDIF
 IF (validate(ein_organization,0)=0)
  DECLARE ein_organization = i4 WITH constant(27)
 ENDIF
 IF (validate(ein_fifo,0)=0)
  DECLARE ein_fifo = i4 WITH constant(28)
 ENDIF
 IF (validate(ein_nopost,0)=0)
  DECLARE ein_nopost = i4 WITH constant(29)
 ENDIF
 IF (validate(ein_date_time,0)=0)
  DECLARE ein_date_time = i4 WITH constant(30)
 ENDIF
 IF (validate(ein_encntr_package,0)=0)
  DECLARE ein_encntr_package = i4 WITH constant(31)
 ENDIF
 IF (validate(ein_pay_plan_hist,0)=0)
  DECLARE ein_pay_plan_hist = i4 WITH constant(32)
 ENDIF
 IF (validate(ein_report_date,0)=0)
  DECLARE ein_report_date = i4 WITH constant(33)
 ENDIF
 IF (validate(ein_parent_entity,0)=0)
  DECLARE ein_parent_entity = i4 WITH constant(34)
 ENDIF
 IF (validate(ein_pay_plan_suggest,0)=0)
  DECLARE ein_pay_plan_suggest = i4 WITH constant(35)
 ENDIF
 IF (validate(ein_report_instance,0)=0)
  DECLARE ein_report_instance = i4 WITH constant(36)
 ENDIF
 IF (validate(ein_pft_fiscal_daily_id,0)=0)
  DECLARE ein_pft_fiscal_daily_id = i4 WITH constant(37)
 ENDIF
 IF (validate(ein_pft_encntr_fact_active,0)=0)
  DECLARE ein_pft_encntr_fact_active = i4 WITH constant(38)
 ENDIF
 IF (validate(ein_pft_encntr_fact_history,0)=0)
  DECLARE ein_pft_encntr_fact_history = i4 WITH constant(39)
 ENDIF
 IF (validate(ein_invoice,0)=0)
  DECLARE ein_invoice = i4 WITH constant(40)
 ENDIF
 IF (validate(ein_pending_batch,0)=0)
  DECLARE ein_pending_batch = i4 WITH constant(41)
 ENDIF
 IF (validate(ein_application,0)=0)
  DECLARE ein_application = i4 WITH constant(42)
 ENDIF
 IF (validate(ein_view,0)=0)
  DECLARE ein_view = i4 WITH constant(43)
 ENDIF
 IF (validate(ein_test,0)=0)
  DECLARE ein_test = i4 WITH constant(44)
 ENDIF
 IF (validate(ein_trans_alias_best_guess_wo_reason,0)=0)
  DECLARE ein_trans_alias_best_guess_wo_reason = i4 WITH constant(45)
 ENDIF
 IF (validate(ein_submitted_batch,0)=0)
  DECLARE ein_submitted_batch = i4 WITH constant(46)
 ENDIF
 IF (validate(ein_dequeue_wf_batch,0)=0)
  DECLARE ein_dequeue_wf_batch = i4 WITH constant(47)
 ENDIF
 IF (validate(ein_account_date,0)=0)
  DECLARE ein_account_date = i4 WITH constant(48)
 ENDIF
 IF (validate(ein_entity,0)=0)
  DECLARE ein_entity = i4 WITH constant(49)
 ENDIF
 IF (validate(ein_pft_line_item,0)=0)
  DECLARE ein_pft_line_item = i4 WITH constant(50)
 ENDIF
 IF (validate(ein_transfer,0)=0)
  DECLARE ein_transfer = i4 WITH constant(51)
 ENDIF
 IF (validate(ein_suppress,0)=0)
  DECLARE ein_suppress = i4 WITH constant(52)
 ENDIF
 IF (validate(ein_related_trans,0)=0)
  DECLARE ein_related_trans = i4 WITH constant(53)
 ENDIF
 IF (validate(ein_wf_entity_status,0)=0)
  DECLARE ein_wf_entity_status = i4 WITH constant(54)
 ENDIF
 IF (validate(ein_health_plan,0)=0)
  DECLARE ein_health_plan = i4 WITH constant(55)
 ENDIF
 IF (validate(ein_global_preference,0)=0)
  DECLARE ein_global_preference = i4 WITH constant(56)
 ENDIF
 IF (validate(ein_balance,0)=0)
  DECLARE ein_balance = i4 WITH constant(57)
 ENDIF
 IF (validate(ein_user_name,0)=0)
  DECLARE ein_user_name = i4 WITH constant(58)
 ENDIF
 IF (validate(ein_ready_to_bill,0)=0)
  DECLARE ein_ready_to_bill = i4 WITH constant(59)
 ENDIF
 IF (validate(ein_ready_to_bill_claim,0)=0)
  DECLARE ein_ready_to_bill_claim = i4 WITH constant(60)
 ENDIF
 IF (validate(ein_umdap_del,0)=0)
  DECLARE ein_umdap_del = i4 WITH constant(61)
 ENDIF
 IF (validate(ein_umdap_quest,0)=0)
  DECLARE ein_umdap_quest = i4 WITH constant(62)
 ENDIF
 IF (validate(ein_umdap_hist,0)=0)
  DECLARE ein_umdap_hist = i4 WITH constant(63)
 ENDIF
 IF (validate(ein_new_entity,0)=0)
  DECLARE ein_new_entity = i4 WITH constant(64)
 ENDIF
 IF (validate(ein_account_selfpay_bal,0)=0)
  DECLARE ein_account_selfpay_bal = i4 WITH constant(65)
 ENDIF
 IF (validate(ein_guarantor_selfpay_bal,0)=0)
  DECLARE ein_guarantor_selfpay_bal = i4 WITH constant(66)
 ENDIF
 IF (validate(ein_queue,0)=0)
  DECLARE ein_queue = i4 WITH constant(67)
 ENDIF
 IF (validate(ein_supervisor,0)=0)
  DECLARE ein_supervisor = i4 WITH constant(68)
 ENDIF
 IF (validate(ein_ar_management,0)=0)
  DECLARE ein_ar_management = i4 WITH constant(69)
 ENDIF
 IF (validate(ein_status,0)=0)
  DECLARE ein_status = i4 WITH constant(70)
 ENDIF
 IF (validate(ein_status_type_event,0)=0)
  DECLARE ein_status_type_event = i4 WITH constant(71)
 ENDIF
 IF (validate(ein_pftencntr_selfpay_bal,0)=0)
  DECLARE ein_pftencntr_selfpay_bal = i4 WITH constant(72)
 ENDIF
 IF (validate(ein_batch_event,0)=0)
  DECLARE ein_batch_event = i4 WITH constant(73)
 ENDIF
 IF (validate(ein_ready_to_bill_all_sp,0)=0)
  DECLARE ein_ready_to_bill_all_sp = i4 WITH constant(74)
 ENDIF
 IF (validate(ein_account_stmt,0)=0)
  DECLARE ein_account_stmt = i4 WITH constant(75)
 ENDIF
 IF (validate(ein_pft_encntr_stmt,0)=0)
  DECLARE ein_pft_encntr_stmt = i4 WITH constant(76)
 ENDIF
 IF (validate(ein_guarantor_stmt,0)=0)
  DECLARE ein_guarantor_stmt = i4 WITH constant(77)
 ENDIF
 IF (validate(ein_pft_encntr_claim,0)=0)
  DECLARE ein_pft_encntr_claim = i4 WITH constant(78)
 ENDIF
 IF (validate(ein_pftencntr_combine,0)=0)
  DECLARE ein_pftencntr_combine = i4 WITH constant(79)
 ENDIF
 IF (validate(ein_current_eob,0)=0)
  DECLARE ein_current_eob = i4 WITH constant(80)
 ENDIF
 IF (validate(ein_prior_eobs,0)=0)
  DECLARE ein_prior_eobs = i4 WITH constant(81)
 ENDIF
 IF (validate(ein_last,0)=0)
  DECLARE ein_last = i4 WITH constant(82)
 ENDIF
 IF (validate(ein_cob,0)=0)
  DECLARE ein_cob = i4 WITH constant(83)
 ENDIF
 IF (validate(ein_encounter_active,0)=0)
  DECLARE ein_encounter_active = i4 WITH constant(84)
 ENDIF
 IF (validate(ein_remittance_all,0)=0)
  DECLARE ein_remittance_all = i4 WITH constant(85)
 ENDIF
 IF (validate(ein_pay_plan,0)=0)
  DECLARE ein_pay_plan = i4 WITH constant(86)
 ENDIF
 IF (validate(ein_guar_acct,0)=0)
  DECLARE ein_guar_acct = i4 WITH constant(87)
 ENDIF
 IF (validate(ein_report,0)=0)
  DECLARE ein_report = i4 WITH constant(88)
 ENDIF
 IF (validate(ein_ime_benefit_order,0)=0)
  DECLARE ein_ime_benefit_order = i4 WITH constant(89)
 ENDIF
 IF (validate(ein_formal_payment_plan,0)=0)
  DECLARE ein_formal_payment_plan = i4 WITH constant(90)
 ENDIF
 IF (validate(ein_guarantor_account,0)=0)
  DECLARE ein_guarantor_account = i4 WITH constant(91)
 ENDIF
 IF ((validate(gnstat,- (1))=- (1)))
  DECLARE gnstat = i4 WITH noconstant(0)
 ENDIF
 IF (validate(none_action,0)=0
  AND validate(none_action,1)=1)
  DECLARE none_action = i4 WITH public, constant(0)
 ENDIF
 IF (validate(add_action,0)=0
  AND validate(add_action,1)=1)
  DECLARE add_action = i4 WITH public, constant(1)
 ENDIF
 IF (validate(chg_action,0)=0
  AND validate(chg_action,1)=1)
  DECLARE chg_action = i4 WITH public, constant(2)
 ENDIF
 IF (validate(del_action,0)=0
  AND validate(del_action,1)=1)
  DECLARE del_action = i4 WITH public, constant(3)
 ENDIF
 IF (validate(pft_publish_event_flag,null_i2)=null_i2)
  DECLARE pft_publish_event_flag = i2 WITH public, noconstant(0)
 ENDIF
 DECLARE __hpsys = i4 WITH protect, noconstant(0)
 DECLARE __lpsysstat = i4 WITH protect, noconstant(0)
 IF ( NOT (validate(threads)))
  FREE RECORD threads
  RECORD threads(
    1 objarray[*]
      2 request_handle = i4
      2 start_time = dq8
  )
 ENDIF
 IF ( NOT (validate(codevalueslist)))
  RECORD codevalueslist(
    1 codevalues[*]
      2 codevalue = f8
  ) WITH protect
 ENDIF
 IF (validate(logmsg,char(128))=char(128))
  SUBROUTINE (logmsg(sname=vc,smsg=vc,llevel=i4) =null)
    DECLARE hmsg = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrep = i4 WITH protect, noconstant(0)
    DECLARE hobjarray = i4 WITH protect, noconstant(0)
    DECLARE srvstatus = i4 WITH protect, noconstant(0)
    DECLARE submit_log = i4 WITH protect, constant(4099455)
    DECLARE cs23372_failed_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",23372,"FAILED"))
    CALL echo("")
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    CALL echo(concat(sname,": ",smsg))
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    CALL echo("")
    SET __hpsys = 0
    SET __lpsysstat = 0
    CALL uar_syscreatehandle(__hpsys,__lpsysstat)
    IF (__hpsys > 0)
     CALL uar_sysevent(__hpsys,llevel,nullterm(sname),nullterm(smsg))
     CALL uar_sysdestroyhandle(__hpsys)
    ENDIF
    IF (llevel=log_error)
     SET hmsg = uar_srvselectmessage(submit_log)
     SET hreq = uar_srvcreaterequest(hmsg)
     SET hrep = uar_srvcreatereply(hmsg)
     SET hobjarray = uar_srvadditem(hreq,"objArray")
     SET stat = uar_srvsetdouble(hobjarray,"final_status_cd",cs23372_failed_cd)
     SET stat = uar_srvsetstring(hobjarray,"task_name",nullterm(curprog))
     SET stat = uar_srvsetstring(hobjarray,"completion_msg",nullterm(smsg))
     SET stat = uar_srvsetdate(hobjarray,"end_dt_tm",cnvtdatetime(sysdate))
     SET stat = uar_srvsetstring(hobjarray,"current_node_name",nullterm(curnode))
     SET stat = uar_srvsetstring(hobjarray,"server_name",nullterm(build(curserver)))
     SET srvstatus = uar_srvexecute(hmsg,hreq,hrep)
     IF (srvstatus != 0)
      CALL echo(build2("Execution of pft_save_system_activity_log was not successful"))
     ENDIF
     CALL uar_srvdestroyinstance(hreq)
     CALL uar_srvdestroyinstance(hrep)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setreply,char(128))=char(128))
  SUBROUTINE (setreply(sstatus=vc,sname=vc,svalue=vc) =null)
    IF (validate(reply,char(128)) != char(128))
     SET reply->status_data.status = nullterm(sstatus)
     SET reply->status_data.subeventstatus[1].operationstatus = nullterm(sstatus)
     SET reply->status_data.subeventstatus[1].operationname = nullterm(sname)
     SET reply->status_data.subeventstatus[1].targetobjectvalue = nullterm(svalue)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setreplyblock,char(128))=char(128))
  SUBROUTINE (setreplyblock(sstatus=c1,soperstatus=c1,sname=vc,svalue=vc) =null)
   CALL logmsg(sname,svalue,log_debug)
   IF (validate(reply,char(128)) != char(128))
    SET reply->status_data.status = nullterm(sstatus)
    SET reply->status_data.subeventstatus[1].operationstatus = nullterm(soperstatus)
    SET reply->status_data.subeventstatus[1].operationname = nullterm(sname)
    SET reply->status_data.subeventstatus[1].targetobjectvalue = nullterm(svalue)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(beginscript,char(128))=char(128))
  SUBROUTINE (beginscript(sname=vc) =null)
   CALL logmsg(sname,"Begin Script",log_debug)
   CALL setreply("F",sname,"Begin Script")
  END ;Subroutine
 ENDIF
 IF (validate(exitscript,char(128))=char(128))
  SUBROUTINE (exitscript(sname=vc) =null)
   CALL logmsg(sname,"Exit Script",log_debug)
   CALL setreply("S",sname,"Exit Script")
  END ;Subroutine
 ENDIF
 IF (validate(abortscript,char(128))=char(128))
  SUBROUTINE (abortscript(sname=vc,smsg=vc) =null)
   CALL logmsg(sname,smsg,log_warning)
   CALL setreply("F",sname,smsg)
  END ;Subroutine
 ENDIF
 IF (validate(setfieldheader,char(128))=char(128))
  SUBROUTINE (setfieldheader(sfield=vc,stype=vc,sdisplay=vc) =null)
   DECLARE nheadersize = i2 WITH noconstant(0)
   IF (validate(objreply->headers)=1)
    SET nheadersize = (size(objreply->headers,5)+ 1)
    SET stat = alterlist(objreply->headers,nheadersize)
    SET objreply->headers[nheadersize].field_name = sfield
    SET objreply->headers[nheadersize].field_type = stype
    SET objreply->headers[nheadersize].header_display = sdisplay
   ELSEIF (validate(reply->headers)=1)
    SET nheadersize = (size(reply->headers,5)+ 1)
    SET stat = alterlist(reply->headers,nheadersize)
    SET reply->headers[nheadersize].field_name = sfield
    SET reply->headers[nheadersize].field_type = stype
    SET reply->headers[nheadersize].header_display = sdisplay
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setfieldheaderattr,char(128))=char(128))
  SUBROUTINE (setfieldheaderattr(sfield=vc,stype=vc,sdisplay=vc,sgroupprefix=vc,sgrpaggrprefix=vc,
   sgrpaggrfnctn=vc,stotalprefix=vc,stotalfunction=vc) =null)
   DECLARE nheadersize = i2 WITH noconstant(0)
   IF (validate(objreply->headers,char(128)) != char(128))
    SET nheadersize = (size(objreply->headers,5)+ 1)
    SET stat = alterlist(objreply->headers,nheadersize)
    SET objreply->headers[nheadersize].field_name = sfield
    SET objreply->headers[nheadersize].field_type = stype
    SET objreply->headers[nheadersize].header_display = sdisplay
    SET objreply->headers[nheadersize].group_prefix = sgroupprefix
    SET objreply->headers[nheadersize].group_aggr_prefix = sgrpaggrprefix
    SET objreply->headers[nheadersize].group_aggr_func = sgrpaggrfnctn
    SET objreply->headers[nheadersize].total_prefix = stotalprefix
    SET objreply->headers[nheadersize].total_func = stotalfunction
   ELSEIF (validate(reply->headers,char(128)) != char(128))
    SET nheadersize = (size(reply->headers,5)+ 1)
    SET stat = alterlist(reply->headers,nheadersize)
    SET reply->headers[nheadersize].field_name = sfield
    SET reply->headers[nheadersize].field_type = stype
    SET reply->headers[nheadersize].header_display = sdisplay
    SET reply->headers[nheadersize].group_prefix = sgroupprefix
    SET reply->headers[nheadersize].group_aggr_prefix = sgrpaggrprefix
    SET reply->headers[nheadersize].group_aggr_func = sgrpaggrfnctn
    SET reply->headers[nheadersize].total_prefix = stotalprefix
    SET reply->headers[nheadersize].total_func = stotalfunction
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(formatcurrency,char(128))=char(128))
  SUBROUTINE (formatcurrency(damt=f8) =vc)
    DECLARE sformattedamt = vc WITH noconstant("")
    SET sformattedamt = format(damt,"#########.##;I$,;F")
    IF (damt <= 0)
     SET sformattedamt = trim(sformattedamt,3)
     SET sformattedamt = substring(2,textlen(sformattedamt),sformattedamt)
     SET sformattedamt = concat("(",trim(sformattedamt,3),")")
    ENDIF
    SET sformattedamt = trim(sformattedamt,3)
    RETURN(sformattedamt)
  END ;Subroutine
 ENDIF
 IF (validate(setsrvdouble,char(128))=char(128))
  SUBROUTINE (setsrvdouble(hhandle=i4,sfield=vc,dvalue=f8) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetdouble(hhandle,nullterm(sfield),dvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvstring,char(128))=char(128))
  SUBROUTINE (setsrvstring(hhandle=i4,sfield=vc,svalue=vc) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetstring(hhandle,nullterm(sfield),nullterm(svalue))
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvlong,char(128))=char(128))
  SUBROUTINE (setsrvlong(hhandle=i4,sfield=vc,lvalue=i4) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetlong(hhandle,nullterm(sfield),lvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvshort,char(128))=char(128))
  SUBROUTINE (setsrvshort(hhandle=i4,sfield=vc,nvalue=i4) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetshort(hhandle,nullterm(sfield),nvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvdate,char(128))=char(128))
  SUBROUTINE (setsrvdate(hhandle=i4,sfield=vc,dtvalue=q8) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetdate(hhandle,nullterm(sfield),dtvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(publishevent,char(128))=char(128))
  SUBROUTINE (publishevent(dummyvar=i4) =null)
    CALL logmsg(curprog,"IN PublishEvent",log_debug)
    DECLARE nappid = i4 WITH protect, constant(4080000)
    DECLARE ntaskid = i4 WITH protect, constant(4080000)
    DECLARE nreqid = i4 WITH protect, constant(4080140)
    DECLARE sreq = vc WITH protect, constant("pft_manage_event_completion")
    DECLARE happ = i4 WITH protect, noconstant(0)
    DECLARE htask = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrequest = i4 WITH protect, noconstant(0)
    DECLARE hitem = i4 WITH protect, noconstant(0)
    DECLARE hreply = i4 WITH protect, noconstant(0)
    DECLARE hstatus = i4 WITH protect, noconstant(0)
    DECLARE ncnt = i4 WITH protect, noconstant(0)
    DECLARE npidx = i4 WITH protect, noconstant(0)
    DECLARE ipublisheventflg = i2 WITH constant(validate(pft_publish_event_flag,0))
    IF (validate(pft_publish_event_flag))
     CALL logmsg(curprog,concat("pft_publish_event_flag exist. value:: ",cnvtstring(
        pft_publish_event_flag,5)),4)
    ELSE
     CALL logmsg(curprog,"pft_publish_event_flag doesn't exist",4)
    ENDIF
    IF (validate(reply->objarray,char(128))=char(128))
     CALL logmsg(curprog,"No objArray found in reply",log_debug)
     RETURN
    ENDIF
    IF (validate(reply->status_data.status,"F") != "S")
     CALL logmsg(curprog,concat("Reply status as (",validate(reply->status_data.status,"F"),
       "). Not publishing events."),log_debug)
     RETURN
    ENDIF
    CASE (ipublisheventflg)
     OF 0:
      SET curalias eventrec reply->objarray[npidx]
      SET ncnt = size(reply->objarray,5)
     OF 1:
      CALL queueitemstoeventrec(0)
      RETURN
     OF 2:
      SET curalias eventrec pft_event_rec->objarray[npidx]
      SET ncnt = size(pft_event_rec->objarray,5)
    ENDCASE
    IF (ncnt > 0)
     SET npidx = 1
     IF (validate(eventrec->published_ind,null_i2)=null_i2)
      CALL logmsg(curprog,"Field published_ind not found in objArray",log_debug)
      RETURN
     ENDIF
     SET gnstat = uar_crmbeginapp(nappid,happ)
     IF (gnstat != 0)
      CALL logmsg(curprog,"Unable to create application instance (4080000)",log_error)
      RETURN
     ENDIF
     SET gnstat = uar_crmbegintask(happ,ntaskid,htask)
     IF (gnstat != 0)
      CALL logmsg(curprog,"Unable to create task instance (4080000)",log_error)
      IF (happ > 0)
       CALL uar_crmendapp(happ)
      ENDIF
      RETURN
     ENDIF
     FOR (npidx = 1 TO ncnt)
       IF ((eventrec->published_ind=false))
        SET gnstat = uar_crmbeginreq(htask,nullterm(sreq),nreqid,hreq)
        IF (gnstat != 0)
         CALL logmsg(curprog,"Unable to create request instance (4080140)",log_error)
        ELSE
         SET hrequest = uar_crmgetrequest(hreq)
         IF (hrequest=0)
          CALL logmsg(curprog,"Unable to retrieve request handle for (4080140)",log_error)
         ELSE
          SET hitem = uar_srvadditem(hrequest,"objArray")
          IF (hitem=0)
           CALL logmsg(curprog,"Unable to add item to request (4080140)",log_error)
          ELSE
           IF (validate(eventrec->event_key,char(128)) != char(128))
            CALL setsrvstring(hitem,"event_key",eventrec->event_key)
           ELSE
            CALL logmsg(curprog,"Field event_key not found in objArray",log_debug)
           ENDIF
           IF (validate(eventrec->category_key,char(128)) != char(128))
            CALL setsrvstring(hitem,"category_key",eventrec->category_key)
           ELSE
            CALL logmsg(curprog,"Field category_key not found in objArray",log_debug)
           ENDIF
           IF (validate(eventrec->acct_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"acct_id",eventrec->acct_id)
           ENDIF
           IF (validate(eventrec->pft_encntr_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_encntr_id",eventrec->pft_encntr_id)
           ENDIF
           IF (validate(eventrec->encntr_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"encntr_id",eventrec->encntr_id)
           ENDIF
           IF (validate(eventrec->bo_hp_reltn_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"bo_hp_reltn_id",eventrec->bo_hp_reltn_id)
           ENDIF
           IF (validate(eventrec->corsp_activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"corsp_activity_id",eventrec->corsp_activity_id)
           ENDIF
           IF (validate(eventrec->activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"activity_id",eventrec->activity_id)
           ENDIF
           IF (validate(eventrec->pft_charge_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_charge_id",eventrec->pft_charge_id)
           ENDIF
           IF (validate(eventrec->service_cd,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"entity_service_cd",eventrec->service_cd)
           ENDIF
           IF (validate(eventrec->batch_trans_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"batch_trans_id",eventrec->batch_trans_id)
           ENDIF
           IF (validate(eventrec->pft_bill_activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_bill_activity_id",eventrec->pft_bill_activity_id)
           ENDIF
           IF (validate(eventrec->bill_vrsn_nbr,null_i4) != null_i4)
            CALL setsrvlong(hitem,"bill_vrsn_nbr",eventrec->bill_vrsn_nbr)
           ENDIF
           IF (validate(eventrec->pe_status_reason_cd,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pe_status_reason_cd",eventrec->pe_status_reason_cd)
           ENDIF
           CALL logmsg("PFT_COMMON",build("pft_publish_event_binding::",validate(
              pft_publish_event_binding,"N/A")),log_debug)
           IF (validate(pft_publish_event_binding,"") != "")
            SET gnstat = uar_crmperformas(hreq,nullterm(pft_publish_event_binding))
           ELSE
            SET gnstat = uar_crmperform(hreq)
           ENDIF
           IF (gnstat != 0)
            CALL logmsg(curprog,concat("Failed to execute server step (",cnvtstring(nreqid,11),")"),
             log_error)
           ELSE
            SET hreply = uar_crmgetreply(hreq)
            IF (hreply=0)
             CALL logmsg(curprog,"Failed to retrieve reply structure",log_error)
            ELSE
             SET hstatus = uar_srvgetstruct(hreply,"status_data")
             IF (hstatus=0)
              CALL logmsg(curprog,"Failed to retrieve status_block",log_error)
             ELSE
              IF (uar_srvgetstringptr(hstatus,"status")="S")
               SET eventrec->published_ind = true
              ENDIF
             ENDIF
            ENDIF
           ENDIF
          ENDIF
         ENDIF
        ENDIF
        IF (hreq > 0)
         CALL uar_crmendreq(hreq)
        ENDIF
       ENDIF
     ENDFOR
     IF (htask > 0)
      CALL uar_crmendtask(htask)
     ENDIF
     IF (happ > 0)
      CALL uar_crmendapp(happ)
     ENDIF
    ELSE
     CALL logmsg(curprog,"Not objects in objArray",log_debug)
    ENDIF
    SET curalias eventrec off
  END ;Subroutine
 ENDIF
 IF (validate(queueitemstoeventrec,char(128))=char(128))
  SUBROUTINE (queueitemstoeventrec(dummyvar=i4) =null)
    DECLARE ncnt = i4 WITH protect, noconstant(0)
    DECLARE npeventidx = i4 WITH protect, noconstant(0)
    DECLARE npidx = i4 WITH protect, noconstant(0)
    IF (validate(pft_event_rec,char(128))=char(128))
     CALL logmsg(curprog,"pft_event_rec must be declared by call InitEvents",4)
    ENDIF
    SET curalias event_rec pft_event_rec->objarray[npeventidx]
    SET curalias reply_rec reply->objarray[npidx]
    SET ncnt = size(reply->objarray,5)
    FOR (npidx = 1 TO ncnt)
      IF (validate(reply_rec->published_ind,true)=false)
       SET npeventidx = (size(pft_event_rec->objarray,5)+ 1)
       SET stat = alterlist(pft_event_rec->objarray,npeventidx)
       SET event_rec->published_ind = false
       SET event_rec->event_key = validate(reply_rec->event_key,"")
       SET event_rec->category_key = validate(reply_rec->category_key,"")
       SET event_rec->acct_id = validate(reply_rec->acct_id,0.0)
       SET event_rec->pft_encntr_id = validate(reply_rec->pft_encntr_id,0.0)
       SET event_rec->encntr_id = validate(reply_rec->encntr_id,0.0)
       SET event_rec->bo_hp_reltn_id = validate(reply_rec->bo_hp_reltn_id,0.0)
       SET event_rec->corsp_activity_id = validate(reply_rec->corsp_activity_id,0.0)
       SET event_rec->activity_id = validate(reply_rec->activity_id,0.0)
       SET event_rec->pft_charge_id = validate(reply_rec->pft_charge_id,0.0)
       SET event_rec->service_cd = validate(reply_rec->service_cd,0.0)
       SET event_rec->batch_trans_id = validate(reply_rec->batch_trans_id,0.0)
       SET event_rec->pft_bill_activity_id = validate(reply_rec->pft_bill_activity_id,0.0)
       SET event_rec->bill_vrsn_nbr = validate(reply_rec->bill_vrsn_nbr,0)
       SET event_rec->pe_status_reason_cd = validate(reply_rec->pe_status_reason_cd,0.0)
       SET reply_rec->published_ind = true
      ENDIF
    ENDFOR
    SET curalias event_rec off
    SET curalias reply_rec off
  END ;Subroutine
 ENDIF
 IF (validate(initevents,char(128))=char(128))
  SUBROUTINE (initevents(publishflag=i2) =null)
    SET pft_publish_event_flag = publishflag
    FREE RECORD pft_event_rec
    RECORD pft_event_rec(
      1 objarray[*]
        2 service_cd = f8
        2 updt_id = f8
        2 event_key = vc
        2 category_key = vc
        2 published_ind = i2
        2 pe_status_reason_cd = f8
        2 acct_id = f8
        2 activity_id = f8
        2 batch_denial_file_r_id = f8
        2 batch_trans_ext_id = f8
        2 batch_trans_file_id = f8
        2 batch_trans_id = f8
        2 benefit_order_id = f8
        2 bill_item_id = f8
        2 bill_templ_id = f8
        2 bill_vrsn_nbr = i4
        2 billing_entity_id = f8
        2 bo_hp_reltn_id = f8
        2 charge_item_id = f8
        2 chrg_activity_id = f8
        2 claim_status_id = f8
        2 client_org_id = f8
        2 corsp_activity_id = f8
        2 corsp_log_reltn_id = f8
        2 denial_id = f8
        2 dirty_flag = i4
        2 encntr_id = f8
        2 guar_acct_id = f8
        2 guarantor_id = f8
        2 health_plan_id = f8
        2 long_text_id = f8
        2 organization_id = f8
        2 payor_org_id = f8
        2 pe_status_reason_id = f8
        2 person_id = f8
        2 pft_balance_id = f8
        2 pft_bill_activity_id = f8
        2 pft_charge_id = f8
        2 pft_encntr_fact_id = f8
        2 pft_encntr_id = f8
        2 pft_line_item_id = f8
        2 trans_alias_id = f8
        2 pft_payment_plan_id = f8
        2 daily_encntr_bal_id = f8
        2 daily_acct_bal_id = f8
        2 active_ind = i2
        2 active_status_cd = f8
        2 active_status_disp = vc
        2 active_status_desc = vc
        2 active_status_mean = vc
        2 active_status_code_set = f8
        2 active_status_dt_tm = dq8
        2 active_status_prsnl_id = f8
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 updt_applctx = f8
        2 updt_cnt = i4
        2 updt_dt_tm = dq8
        2 updt_id = f8
        2 updt_task = f8
        2 benefit_status_cd = f8
        2 financial_class_cd = f8
        2 payment_plan_flag = i2
        2 payment_location_id = f8
        2 encntr_plan_cob_id = f8
        2 guarantor_account_id = f8
        2 guarantor_id1 = f8
        2 guarantor_id2 = f8
        2 cbos_pe_reltn_id = f8
        2 post_dt_tm = dq8
        2 posting_category_type_flag = i2
    ) WITH persistscript
  END ;Subroutine
 ENDIF
 IF (validate(processevents,char(128))=char(128))
  SUBROUTINE (processevents(dummyvar=i4) =null)
    DECLARE itmppublishflag = i2 WITH private, noconstant(pft_publish_event_flag)
    SET pft_publish_event_flag = 2
    CALL publishevent(0)
    SET pft_publish_event_flag = itmppublishflag
  END ;Subroutine
 ENDIF
 IF (validate(stamptime,char(128))=char(128))
  SUBROUTINE (stamptime(dummyvar=i4) =null)
    CALL echo("-----------------TIME STAMP----------------")
    CALL echo(build("-----------",curprog,"-----------"))
    CALL echo(format(curtime3,"hh:mm:ss:cc;3;M"))
    CALL echo("-----------------TIME STAMP----------------")
  END ;Subroutine
 ENDIF
 IF (validate(isequal,char(128))=char(128))
  SUBROUTINE (isequal(damt1=f8,damt2=f8) =i2)
   DECLARE tmpdiff = f8 WITH private, noconstant(abs((abs(damt1) - abs(damt2))))
   IF (tmpdiff < 0.009)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(nextavailablethread,char(128))=char(128))
  DECLARE nextavailablethread(null) = i4
  SUBROUTINE nextavailablethread(null)
    DECLARE thread_cnt = i4 WITH noconstant(size(threads->objarray,5))
    DECLARE i = i4 WITH noconstant(thread_cnt)
    DECLARE looping = i2 WITH noconstant(true)
    WHILE (thread_cnt > 0
     AND looping)
     IF ((threads->objarray[i].request_handle > 0))
      IF ((threads->objarray[i].start_time=null))
       SET threads->objarray[i].start_time = cnvtdatetime(sysdate)
      ENDIF
      IF (uar_crmperformpeek(threads->objarray[i].request_handle) IN (0, 1, 4, 5))
       SET stat = uar_crmsynch(threads->objarray[i].request_handle)
       CALL uar_crmendreq(threads->objarray[i].request_handle)
       SET threads->objarray[i].request_handle = 0
       SET threads->objarray[i].start_time = null
       SET looping = false
      ENDIF
     ELSE
      SET looping = false
     ENDIF
     IF (looping)
      SET i = evaluate(i,1,thread_cnt,(i - 1))
     ENDIF
    ENDWHILE
    RETURN(i)
  END ;Subroutine
 ENDIF
 IF (validate(waituntilthreadscomplete,char(128))=char(128))
  DECLARE waituntilthreadscomplete(null) = i4
  SUBROUTINE waituntilthreadscomplete(null)
    DECLARE thread_cnt = i4 WITH noconstant(size(threads->objarray,5))
    DECLARE i = i4 WITH noconstant(thread_cnt)
    FOR (i = 1 TO thread_cnt)
      IF ((threads->objarray[i].request_handle > 0))
       IF ((threads->objarray[i].start_time=null))
        SET threads->objarray[i].start_time = cnvtdatetime(sysdate)
       ENDIF
       SET stat = uar_crmsynch(threads->objarray[i].request_handle)
       CALL uar_crmendreq(threads->objarray[i].request_handle)
       SET threads->objarray[i].request_handle = 0
       SET threads->objarray[i].start_time = null
      ENDIF
    ENDFOR
    RETURN
  END ;Subroutine
 ENDIF
 IF (validate(waitforthreadtocomplete,char(128))=char(128))
  SUBROUTINE (waitforthreadtocomplete(thread=i4) =i4)
    IF ( NOT (validate(threads)))
     RETURN(0)
    ENDIF
    IF ( NOT (size(threads->objarray,5) > 0))
     RETURN(0)
    ENDIF
    IF ((threads->objarray[thread].request_handle > 0))
     IF ((threads->objarray[thread].start_time=null))
      SET threads->objarray[thread].start_time = cnvtdatetime(sysdate)
     ENDIF
     SET stat = uar_crmsynch(threads->objarray[thread].request_handle)
     CALL uar_crmendreq(threads->objarray[thread].request_handle)
     SET threads->objarray[thread].request_handle = 0
     SET threads->objarray[thread].start_time = null
    ENDIF
    RETURN(thread)
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalueindex,char(128))=char(128))
  SUBROUTINE (getcodevalueindex(pcodevalue=f8,prcodevalueslist=vc(ref)) =i4)
    IF (((pcodevalue <= 0.0) OR (size(prcodevalueslist->codevalues,5)=0)) )
     RETURN(0)
    ENDIF
    DECLARE num = i4 WITH protect, noconstant(0)
    RETURN(locateval(num,1,size(prcodevalueslist->codevalues,5),pcodevalue,prcodevalueslist->
     codevalues[num].codevalue))
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(getfeaturetoggledetail)))
  SUBROUTINE (getfeaturetoggledetail(pfeaturetogglekey=vc,prisfeatureenabled=i2(ref)) =i2)
    RECORD featuretogglerequest(
      1 togglename = vc
      1 username = vc
      1 positioncd = f8
      1 systemidentifier = vc
      1 solutionname = vc
    ) WITH protect
    RECORD featuretogglereply(
      1 togglename = vc
      1 isenabled = i2
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET featuretogglerequest->togglename = pfeaturetogglekey
    SET featuretogglerequest->systemidentifier = "urn:cerner:revenue-cycle"
    EXECUTE sys_check_feature_toggle  WITH replace("REQUEST",featuretogglerequest), replace("REPLY",
     featuretogglereply)
    IF ((featuretogglereply->status_data.status="S"))
     SET prisfeatureenabled = featuretogglereply->isenabled
     CALL logmsg("getFeatureToggleDetail",build("Feature Toggle of ",pfeaturetogglekey," : ",
       prisfeatureenabled),log_debug)
    ELSE
     CALL logmsg("getFeatureToggleDetail","Call to sys_check_feature_toggle failed",log_debug)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(event_default)))
  DECLARE event_default = vc WITH protect, constant("DEFAULT")
 ENDIF
 IF ( NOT (validate(event_edit_failure)))
  DECLARE event_edit_failure = vc WITH protect, constant("CLMEDITFAIL")
 ENDIF
 IF ( NOT (validate(event_variance)))
  DECLARE event_variance = vc WITH protect, constant("VARCREATE")
 ENDIF
 IF ( NOT (validate(event_remit_failure)))
  DECLARE event_remit_failure = vc WITH protect, constant("REMITFAILURE")
 ENDIF
 IF ( NOT (validate(sort_status_date)))
  DECLARE sort_status_date = i2 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(sort_amount)))
  DECLARE sort_amount = i2 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(sort_failure_category)))
  DECLARE sort_failure_category = i2 WITH protect, constant(4)
 ENDIF
 IF ( NOT (validate(sort_failure_category_group)))
  DECLARE sort_failure_category_group = i2 WITH protect, constant(5)
 ENDIF
 IF ( NOT (validate(sort_failure_severity)))
  DECLARE sort_failure_severity = i2 WITH protect, constant(6)
 ENDIF
 IF ( NOT (validate(sort_failure_alias)))
  DECLARE sort_failure_alias = i2 WITH protect, constant(7)
 ENDIF
 IF ( NOT (validate(sort_patient_last_name)))
  DECLARE sort_patient_last_name = i2 WITH protect, constant(8)
 ENDIF
 IF ( NOT (validate(sort_encntr_nbr)))
  DECLARE sort_encntr_nbr = i2 WITH protect, constant(9)
 ENDIF
 IF ( NOT (validate(sort_mrn)))
  DECLARE sort_mrn = i2 WITH protect, constant(10)
 ENDIF
 IF ( NOT (validate(sort_adm_date)))
  DECLARE sort_adm_date = i2 WITH protect, constant(11)
 ENDIF
 IF ( NOT (validate(sort_timely_filing_deadline)))
  DECLARE sort_timely_filing_deadline = i2 WITH protect, constant(12)
 ENDIF
 IF ( NOT (validate(sort_updated_status_date)))
  DECLARE sort_updated_status_date = i2 WITH protect, constant(13)
 ENDIF
 IF ( NOT (validate(sort_priority)))
  DECLARE sort_priority = i2 WITH protect, constant(14)
 ENDIF
 IF ( NOT (validate(cs4002623_department)))
  DECLARE cs4002623_department = f8 WITH protect, constant(getcodevalue(4002623,"DEPARTMENT",0))
 ENDIF
 IF ( NOT (validate(cs19189_department)))
  DECLARE cs19189_department = f8 WITH protect, constant(getcodevalue(19189,"DEPARTMENT",0))
 ENDIF
 IF ( NOT (validate(cs4002623_advanced)))
  DECLARE cs4002623_advanced = f8 WITH protect, constant(getcodevalue(4002623,"ADVANCED",0))
 ENDIF
 IF ( NOT (validate(cs649723_nondept)))
  DECLARE cs649723_nondept = f8 WITH protect, constant(getcodevalue(649723,"NONDEPT",0))
 ENDIF
 IF ( NOT (validate(cs649723_loadbalanced)))
  DECLARE cs649723_loadbalanced = f8 WITH protect, constant(getcodevalue(649723,"LOADBALANCED",0))
 ENDIF
 IF ( NOT (validate(cs649723_usergroup)))
  DECLARE cs649723_usergroup = f8 WITH protect, constant(getcodevalue(649723,"USERGROUP",0))
 ENDIF
 IF ( NOT (validate(cs649723_justintime)))
  DECLARE cs649723_justintime = f8 WITH protect, constant(getcodevalue(649723,"JUSTINTIME",0))
 ENDIF
 IF ( NOT (validate(wf_group_queue_feature_toggle_key)))
  DECLARE wf_group_queue_feature_toggle_key = vc WITH protect, constant(
   "urn:cerner:revenue-cycle:cpa:wf.group.queue.enabled")
 ENDIF
 IF ( NOT (validate(wf_jit_feature_toggle_key)))
  DECLARE wf_jit_feature_toggle_key = vc WITH protect, constant(
   "urn:cerner:revenue-cycle:cpa:wf.jit.assignment.queue.enabled")
 ENDIF
 IF ( NOT (validate(wf_cwl_feature_toggle_key)))
  DECLARE wf_cwl_feature_toggle_key = vc WITH protect, constant(
   "urn:cerner:revenue-cycle:cpa:wf.common.work.list.enabled")
 ENDIF
 DECLARE work_item_owner_unassigned = vc WITH protect, constant("<unassigned>")
 DECLARE locvalcnt = i4 WITH protect, noconstant(0)
 DECLARE locvalindex = i4 WITH protect, noconstant(0)
 DECLARE expidx = i4 WITH protect, noconstant(0)
 DECLARE isgqfeatureenabled = i2 WITH protect, noconstant(true)
 DECLARE isjitfeatureenabled = i2 WITH protect, noconstant(true)
 DECLARE prsnlvaluewithoutzeroprsnlid = vc WITH protect, noconstant("(0.0)")
 RECORD supportedworkflowevents(
   1 events[*]
     2 workfloweventcdfmeaning = vc
     2 workfloweventcd = f8
 ) WITH protect
 RECORD personnellist(
   1 personnels[*]
     2 personnelid = f8
 ) WITH protect
 RECORD usergroupprsnllist(
   1 personnels[*]
     2 personnelid = f8
 ) WITH protect
 SET stat = alterlist(supportedworkflowevents->events,3)
 SET supportedworkflowevents->events[1].workfloweventcdfmeaning = event_edit_failure
 SET supportedworkflowevents->events[1].workfloweventcd = uar_get_code_by("MEANING",29322,
  event_edit_failure)
 SET supportedworkflowevents->events[2].workfloweventcdfmeaning = event_variance
 SET supportedworkflowevents->events[2].workfloweventcd = uar_get_code_by("MEANING",29322,
  event_variance)
 SET supportedworkflowevents->events[3].workfloweventcdfmeaning = event_remit_failure
 SET supportedworkflowevents->events[3].workfloweventcd = uar_get_code_by("MEANING",29322,
  event_remit_failure)
 IF ( NOT (validate(constructworkfloweventqual)))
  SUBROUTINE (constructworkfloweventqual(ptablealias=vc,peventtypeflag=i2) =vc)
    DECLARE eventidx = i4 WITH protect, noconstant(0)
    DECLARE eventcdstring = vc WITH protect, noconstant(" ")
    DECLARE eventqualstring = vc WITH protect, noconstant(" 1=1 ")
    FOR (eventidx = 1 TO size(supportedworkflowevents->events,5))
      SET eventcdstring = concat(eventcdstring,trim(cnvtstring(supportedworkflowevents->events[
         eventidx].workfloweventcd,17,2),3),",")
    ENDFOR
    IF (size(supportedworkflowevents->events,5) > 0
     AND size(trim(validate(ptablealias,""),3)) > 0)
     IF (peventtypeflag=1)
      SET eventqualstring = concat(" ",ptablealias,".event_cd"," in (",eventcdstring)
     ELSEIF (peventtypeflag=0)
      SET eventqualstring = concat(" ",ptablealias,".event_cd"," not in (",eventcdstring)
     ENDIF
     SET eventqualstring = substring(1,(size(eventqualstring,3) - 1),eventqualstring)
     SET eventqualstring = concat(eventqualstring," ) ")
    ENDIF
    RETURN(eventqualstring)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(isstatebasedqueue)))
  SUBROUTINE (isstatebasedqueue(plogicaldomainid=f8,pworkflowstatecd=f8) =i2)
    SELECT INTO "nl:"
     FROM pft_queue_item pq,
      pft_wf_issue pw
     PLAN (pq
      WHERE pq.pft_entity_status_cd=pworkflowstatecd
       AND pq.logical_domain_id=plogicaldomainid
       AND pq.active_ind=true)
      JOIN (pw
      WHERE pw.issue_cd=pq.item_status_cd
       AND pw.active_ind=true)
     WITH nocounter
    ;end select
    IF (curqual > 0)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(populatepersonneldata)))
  SUBROUTINE (populatepersonneldata(prsnlvalue=vc(ref)) =i2)
    CALL logmessage("populatePersonnelData","Entering..",log_debug)
    DECLARE prsnlcnt = i4 WITH protect, noconstant(0)
    IF (validate(request->personnels) > 0)
     IF (size(request->personnels,5) > 0)
      FOR (prsnlcnt = 1 TO size(request->personnels,5))
       SET stat = alterlist(personnellist->personnels,prsnlcnt)
       SET personnellist->personnels[prsnlcnt].personnelid = request->personnels[prsnlcnt].
       personnelid
      ENDFOR
     ENDIF
    ENDIF
    IF (size(personnellist->personnels,5)=0)
     SET stat = alterlist(personnellist->personnels,1)
     IF (isjitfeatureenabled
      AND validate(request->personnelid,0.0)=0.0)
      SET personnellist->personnels[1].personnelid = 0.0
     ELSEIF (validate(request->personnelid,0.0) > 0.0)
      SET personnellist->personnels[1].personnelid = request->personnelid
     ENDIF
    ENDIF
    IF (size(personnellist->personnels,5) > 0)
     IF (validate(request->filters.workitemownerind,0)=1)
      IF (isjitfeatureenabled
       AND validate(request->filters.workitemownercd,0.0)=0.0)
       SET prsnlvalue = build2("(",0.0,")")
      ELSEIF (validate(request->filters.workitemownercd,0.0) > 0.0)
       SET prsnlvalue = build2("(",request->filters.workitemownercd,")")
       SET prsnlvaluewithoutzeroprsnlid = prsnlvalue
      ENDIF
      CALL logmessage("populatePersonnelData","Exiting - Success with owner filter",log_debug)
      RETURN(true)
     ELSE
      FOR (prsnlcnt = 1 TO size(personnellist->personnels,5))
        IF (prsnlcnt=1)
         SET prsnlvalue = build2(personnellist->personnels[prsnlcnt].personnelid)
         IF ((personnellist->personnels[prsnlcnt].personnelid > 0.0))
          SET prsnlvaluewithoutzeroprsnlid = prsnlvalue
         ENDIF
        ELSE
         SET prsnlvalue = build2(prsnlvalue,", ",personnellist->personnels[prsnlcnt].personnelid)
         IF ((personnellist->personnels[prsnlcnt].personnelid > 0.0))
          SET prsnlvaluewithoutzeroprsnlid = build2(prsnlvaluewithoutzeroprsnlid,", ",personnellist->
           personnels[prsnlcnt].personnelid)
         ENDIF
        ENDIF
      ENDFOR
      SET prsnlvalue = build2("(",prsnlvalue,")")
      SET prsnlvaluewithoutzeroprsnlid = build2("(",prsnlvaluewithoutzeroprsnlid,")")
      CALL logmessage("populatePersonnelData","Exiting - Success with personnel",log_debug)
      RETURN(true)
     ENDIF
    ENDIF
    CALL logmessage("populatePersonnelData",
     "Exiting - Failed to populate prsnl list. No personnelIds in request",log_debug)
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(populatedepartmentdata)))
  SUBROUTINE (populatedepartmentdata(prsnldeptlist=vc(ref),deptids=vc(ref)) =i2)
    CALL logmessage("populateDepartmentData","Entering..",log_debug)
    DECLARE prsnlcnt = i4 WITH protect, noconstant(0)
    DECLARE deptcnt = i4 WITH protect, noconstant(0)
    DECLARE deptind = i2 WITH protect, noconstant(false)
    IF (size(prsnldeptlist->personnellist,5) > 0)
     FOR (prsnlcnt = 1 TO size(prsnldeptlist->personnellist,5))
       IF (validate(prsnldeptlist->personnellist[prsnlcnt].departmentlist))
        IF (size(prsnldeptlist->personnellist[prsnlcnt].departmentlist,5) > 0)
         SET deptind = true
         FOR (deptcnt = 1 TO size(prsnldeptlist->personnellist[prsnlcnt].departmentlist,5))
           IF (prsnlcnt=1
            AND deptcnt=1)
            SET deptids = build2(prsnldeptlist->personnellist[prsnlcnt].departmentlist[deptcnt].
             departmentid)
           ELSE
            SET deptids = build2(deptids,", ",prsnldeptlist->personnellist[prsnlcnt].departmentlist[
             deptcnt].departmentid)
           ENDIF
         ENDFOR
        ENDIF
       ENDIF
     ENDFOR
     IF (deptind)
      CALL logmessage("populateDepartmentData","Exiting - Success with departments in prsnlDeptList",
       log_debug)
      RETURN(true)
     ELSE
      CALL logmessage("populateDepartmentData","Exiting - Failure no departments in prsnlDeptList",
       log_debug)
      RETURN(false)
     ENDIF
    ENDIF
    CALL logmessage("populateDepartmentData","Exiting - Failure no personnels in prsnlDeptList",
     log_debug)
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(populateworkitemownerfilter)))
  SUBROUTINE (populateworkitemownerfilter(dummyvar=i2) =i2)
    CALL logmessage("populateWorkItemOwnerFilter","Entering..",log_debug)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE filtercnt = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM prsnl p
     PLAN (p
      WHERE expand(expidx,1,size(personnellist->personnels,5),p.person_id,personnellist->personnels[
       expidx].personnelid)
       AND p.active_ind=true)
     DETAIL
      IF (size(trim(p.name_full_formatted)) > 0)
       filtercnt += 1, stat = alterlist(reply->filtervalues.workitemowners,filtercnt), reply->
       filtervalues.workitemowners[filtercnt].workitemownercd = p.person_id,
       reply->filtervalues.workitemowners[filtercnt].workitemownername = p.name_full_formatted
      ENDIF
     WITH nocounter
    ;end select
    IF (isjitfeatureenabled)
     FOR (idx = 1 TO size(personnellist->personnels,5))
       IF ((personnellist->personnels[idx].personnelid=0.0))
        SET filtercnt += 1
        SET stat = alterlist(reply->filtervalues.workitemowners,filtercnt)
        SET reply->filtervalues.workitemowners[filtercnt].workitemownercd = 0.0
        SET reply->filtervalues.workitemowners[filtercnt].workitemownername =
        work_item_owner_unassigned
       ENDIF
     ENDFOR
    ENDIF
    IF (size(reply->filtervalues.workitemowners,5) > 0)
     CALL logmessage("populateWorkItemOwnerFilter",
      "Exiting - Successfully populated workitem owner filter",log_debug)
     RETURN(true)
    ENDIF
    CALL logmessage("populateWorkItemOwnerFilter",
     "Exiting - Failed to populate workitem owner filter",log_debug)
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(setworkflowitemownerdisplay)))
  SUBROUTINE (setworkflowitemownerdisplay(dummyvar=i2) =null)
    CALL logmessage("setWorkflowItemOwnerDisplay","Entering..",log_debug)
    SELECT INTO "nl:"
     FROM pft_queue_item pqi,
      prsnl p
     PLAN (pqi
      WHERE expand(expidx,1,size(reply->workflowitemlist,5),pqi.pft_queue_item_id,reply->
       workflowitemlist[expidx].workflowitemid)
       AND pqi.active_ind=true)
      JOIN (p
      WHERE (p.person_id= Outerjoin(pqi.assigned_prsnl_id))
       AND (p.active_ind= Outerjoin(true)) )
     DETAIL
      locvalindex = 0, locvalindex = locateval(locvalcnt,1,size(reply->workflowitemlist,5),pqi
       .pft_queue_item_id,reply->workflowitemlist[locvalcnt].workflowitemid)
      IF (locvalindex > 0)
       IF (isjitfeatureenabled
        AND pqi.assigned_prsnl_id=0)
        reply->workflowitemlist[locvalindex].workitemownerdisplay = work_item_owner_unassigned
       ELSE
        reply->workflowitemlist[locvalindex].workitemownerdisplay = p.name_full_formatted
       ENDIF
      ENDIF
     WITH nocounter
    ;end select
    CALL logmessage("setWorkflowItemOwnerDisplay","Exiting..",log_debug)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(populateusergroupworkitemownerfilter)))
  SUBROUTINE (populateusergroupworkitemownerfilter(dummyvar=i2) =i2)
    CALL logmessage("populateUserGroupWorkItemOwnerFilter","Entering..",log_debug)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE filtercnt = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM prsnl p
     PLAN (p
      WHERE expand(idx,1,size(usergroupprsnllist->personnels,5),p.person_id,usergroupprsnllist->
       personnels[idx].personnelid)
       AND p.active_ind=true)
     DETAIL
      IF (size(trim(p.name_full_formatted)) > 0)
       filtercnt += 1, stat = alterlist(reply->filtervalues.workitemowners,filtercnt), reply->
       filtervalues.workitemowners[filtercnt].workitemownercd = p.person_id,
       reply->filtervalues.workitemowners[filtercnt].workitemownername = p.name_full_formatted
      ENDIF
     WITH nocounter
    ;end select
    IF (size(reply->filtervalues.workitemowners,5) > 0)
     CALL logmessage("populateUserGroupWorkItemOwnerFilter",
      "Exiting - Successfully populated workitem owner filter",log_debug)
     RETURN(true)
    ENDIF
    CALL logmessage("populateUserGroupWorkItemOwnerFilter",
     "Exiting - Failed to populate workitem owner filter",log_debug)
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(isgroupqueuefeatureenabled)))
  DECLARE isgroupqueuefeatureenabled(null) = i2
  SUBROUTINE isgroupqueuefeatureenabled(null)
    CALL logmessage("isGroupQueueFeatureEnabled","Entering..",log_debug)
    IF (size(trim(wf_group_queue_feature_toggle_key),1) > 0)
     IF ( NOT (getfeaturetoggledetail(wf_group_queue_feature_toggle_key,isgqfeatureenabled)))
      CALL logmessage("getFeatureToggleDetail",build("Failed to get Feature Toggle details : ",
        wf_group_queue_feature_toggle_key),log_debug)
     ENDIF
    ENDIF
    CALL logmessage("isGroupQueueFeatureEnabled","Exiting..",log_debug)
    RETURN(isgqfeatureenabled)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(isjitqueuefeatureenabled)))
  DECLARE isjitqueuefeatureenabled(null) = i2
  SUBROUTINE isjitqueuefeatureenabled(null)
    CALL logmessage("isJITQueueFeatureEnabled","Entering..",log_debug)
    IF (size(trim(wf_jit_feature_toggle_key),1) > 0)
     IF ( NOT (getfeaturetoggledetail(wf_jit_feature_toggle_key,isjitfeatureenabled)))
      CALL logmessage("getFeatureToggleDetail",build("Failed to get Feature Toggle details : ",
        wf_jit_feature_toggle_key),log_debug)
     ENDIF
    ENDIF
    CALL logmessage("isJITQueueFeatureEnabled","Exiting..",log_debug)
    RETURN(isjitfeatureenabled)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(iscwlfeatureenabled)))
  DECLARE iscwlfeatureenabled(null) = i2
  SUBROUTINE iscwlfeatureenabled(null)
    CALL logmessage("isCWLFeatureEnabled","Entering..",log_debug)
    DECLARE iscfeatureenabled = i2 WITH protect, noconstant(true)
    IF (size(trim(wf_cwl_feature_toggle_key),1) > 0)
     IF ( NOT (getfeaturetoggledetail(wf_cwl_feature_toggle_key,iscfeatureenabled)))
      CALL logmessage("getFeatureToggleDetail",build("Failed to get Feature Toggle details : ",
        wf_cwl_feature_toggle_key),log_debug)
     ENDIF
    ENDIF
    CALL logmessage("isCWLFeatureEnabled","Exiting..",log_debug)
    RETURN(iscfeatureenabled)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(isrevelatefeaturetoggleenabled)))
  SUBROUTINE (isrevelatefeaturetoggleenabled(dummyvar=i2) =i2)
    DECLARE system_identifier_feature_toggle_key = vc WITH protect, constant("urn:cerner:revelate")
    DECLARE revelate_enable_feature_toggle_key = vc WITH protect, constant(
     "urn:cerner:revelate:enable")
    DECLARE isrevelatefeatureenabled = i2 WITH noconstant(false)
    SET isrevelatefeatureenabled = revelategetfeaturetoggle(revelate_enable_feature_toggle_key,
     system_identifier_feature_toggle_key)
    CALL logmessage("isRevElateFeatureToggleEnabled",build2(" Feature Toggle - ",
      revelate_enable_feature_toggle_key," value is = ",isrevelatefeatureenabled),log_debug)
    RETURN(isrevelatefeatureenabled)
  END ;Subroutine
 ENDIF
 IF (validate(revelategetfeaturetoggle,char(128))=char(128))
  SUBROUTINE (revelategetfeaturetoggle(pfeaturetogglekey=vc,psystemidentifier=vc) =i2)
    DECLARE isfeatureenabled = i2 WITH noconstant(false)
    DECLARE syscheckfeaturetoggleexistind = i4 WITH noconstant(0)
    DECLARE pftgetdminfoexistind = i4 WITH noconstant(0)
    SET syscheckfeaturetoggleexistind = checkprg("SYS_CHECK_FEATURE_TOGGLE")
    SET pftgetdminfoexistind = checkprg("PFT_GET_DM_INFO")
    IF (syscheckfeaturetoggleexistind > 0
     AND pftgetdminfoexistind > 0)
     RECORD featuretogglerequest(
       1 togglename = vc
       1 username = vc
       1 positioncd = f8
       1 systemidentifier = vc
       1 solutionname = vc
     ) WITH protect
     RECORD featuretogglereply(
       1 togglename = vc
       1 isenabled = i2
       1 status_data
         2 status = c1
         2 subeventstatus[1]
           3 operationname = c25
           3 operationstatus = c1
           3 targetobjectname = c25
           3 targetobjectvalue = vc
     ) WITH protect
     SET featuretogglerequest->togglename = pfeaturetogglekey
     SET featuretogglerequest->systemidentifier = psystemidentifier
     EXECUTE sys_check_feature_toggle  WITH replace("REQUEST",featuretogglerequest), replace("REPLY",
      featuretogglereply)
     IF (validate(debug,false))
      CALL echorecord(featuretogglerequest)
      CALL echorecord(featuretogglereply)
     ENDIF
     IF ((featuretogglereply->status_data.status="S"))
      SET isfeatureenabled = featuretogglereply->isenabled
      CALL logmessage("revElateGetFeatureToggle",build("Feature Toggle for Key - ",pfeaturetogglekey,
        " : ",isfeatureenabled),log_debug)
     ELSE
      CALL logmessage("revElateGetFeatureToggle","Call to sys_check_feature_toggle failed",log_debug)
     ENDIF
    ELSE
     CALL logmessage("revElateGetFeatureToggle",build2("sys_check_feature_toggle.prg and / or ",
       " pft_get_dm_info.prg do not exist in domain.",
       " Contact Patient Accounting Team for assistance."),log_debug)
    ENDIF
    RETURN(isfeatureenabled)
  END ;Subroutine
 ENDIF
 SUBROUTINE (isworkitemoftypejit(workflowitemid=f8) =i2)
  SELECT INTO "nl:"
   FROM pft_queue_item pqi
   WHERE pqi.pft_queue_item_id=workflowitemid
    AND pqi.department_type_cd=cs649723_justintime
    AND pqi.pft_entity_status_cd > 0.0
    AND pqi.active_ind=1
   WITH nocounter
  ;end select
  IF (curqual > 0)
   RETURN(true)
  ELSE
   RETURN(false)
  ENDIF
 END ;Subroutine
 IF ( NOT (validate(fetchworkflowqueueassignmenttype)))
  SUBROUTINE (fetchworkflowqueueassignmenttype(pworkflowstatuscd=f8) =f8)
    CALL logmessage("fetchWorkflowQueueAssignmentType","Entering..",log_debug)
    DECLARE workflowqueueassignmenttype = f8 WITH protect, noconstant(0)
    SELECT DISTINCT INTO "nl:"
     pqi.department_type_cd
     FROM pft_queue_item pqi
     WHERE pqi.pft_entity_status_cd=pworkflowstatuscd
      AND pqi.active_ind=true
     DETAIL
      IF (pqi.department_type_cd=cs649723_nondept)
       workflowqueueassignmenttype = cs649723_nondept
      ELSEIF (pqi.department_type_cd=cs649723_loadbalanced)
       workflowqueueassignmenttype = cs649723_loadbalanced
      ELSEIF (pqi.department_type_cd=cs649723_usergroup)
       workflowqueueassignmenttype = cs649723_usergroup
      ELSEIF (pqi.department_type_cd=cs649723_justintime)
       workflowqueueassignmenttype = cs649723_justintime
      ELSE
       workflowqueueassignmenttype = cs649723_nondept
      ENDIF
     WITH nocounter
    ;end select
    CALL logmessage("fetchWorkflowQueueAssignmentType","Exiting..",log_debug)
    RETURN(workflowqueueassignmenttype)
  END ;Subroutine
 ENDIF
 RECORD ocreq(
   1 charge_item_id = f8
   1 charge_items[*]
     2 charge_item_id = f8
 ) WITH protect
 RECORD ocrep(
   1 charge_item_count = i4
   1 charge_items[*]
     2 charge_item_id = f8
     2 parent_charge_item_id = f8
     2 charge_event_act_id = f8
     2 charge_event_id = f8
     2 bill_item_id = f8
     2 order_id = f8
     2 encntr_id = f8
     2 person_id = f8
     2 person_name = vc
     2 username = vc
     2 payor_id = f8
     2 ord_loc_cd = f8
     2 perf_loc_cd = f8
     2 perf_loc_disp = vc
     2 ord_phys_id = f8
     2 perf_phys_id = f8
     2 charge_description = vc
     2 price_sched_id = f8
     2 item_quantity = f8
     2 item_price = f8
     2 item_extended_price = f8
     2 item_allowable = f8
     2 item_copay = f8
     2 charge_type_cd = f8
     2 charge_type_dis = vc
     2 charge_type_mean = vc
     2 research_acct_id = f8
     2 suspense_rsn_cd = f8
     2 reason_comment = vc
     2 posted_cd = f8
     2 posted_dt_tm = dq8
     2 process_flg = i4
     2 service_dt_tm = dq8
     2 activity_dt_tm = dq8
     2 updt_cnt = i4
     2 updt_dt_tm = dq8
     2 updt_id = f8
     2 updt_task = i4
     2 updt_applctx = i4
     2 active_status_dt_tm = dq8
     2 active_status_prsnl_id = f8
     2 active_ind = i2
     2 active_status_cd = f8
     2 beg_effective_dt_tm = dq8
     2 end_effective_dt_tm = dq8
     2 credited_dt_tm = dq8
     2 adjusted_dt_tm = dq8
     2 interface_file_id = f8
     2 tier_group_cd = f8
     2 def_bill_item_id = f8
     2 verify_phys_id = f8
     2 gross_price = f8
     2 discount_amount = f8
     2 manual_ind = i2
     2 combine_ind = i2
     2 activity_type_cd = f8
     2 admit_type_cd = f8
     2 bundle_id = f8
     2 department_cd = f8
     2 institution_cd = f8
     2 level5_cd = f8
     2 med_service_cd = f8
     2 section_cd = f8
     2 subsection_cd = f8
     2 abn_status_cd = f8
     2 cost_center_cd = f8
     2 inst_fin_nbr = vc
     2 fin_class_cd = f8
     2 health_plan_id = f8
     2 item_interval_id = f8
     2 item_list_price = f8
     2 item_reimbursement = f8
     2 list_price_sched_id = f8
     2 payor_type_cd = f8
     2 epsdt_ind = i2
     2 ref_phys_id = f8
     2 start_dt_tm = dq8
     2 stop_dt_tm = dq8
     2 alpha_nomen_id = f8
     2 server_process_flag = i2
     2 offset_charge_item_id = f8
     2 item_deductible_amt = f8
     2 patient_responsibility_flag = i2
     2 ext_parent_reference_id = f8
     2 ext_parent_contributor_cd = f8
     2 activity_sub_type_cd = f8
     2 provider_specialty_cd = f8
     2 charge_mod_count = i4
     2 charge_mods[*]
       3 charge_mod_id = f8
       3 charge_mod_type_cd = f8
       3 field1 = vc
       3 field2 = vc
       3 field3 = vc
       3 field4 = vc
       3 field5 = vc
       3 field6 = vc
       3 field7 = vc
       3 field8 = vc
       3 field9 = vc
       3 field10 = vc
       3 field1_id = f8
       3 field2_id = f8
       3 field3_id = f8
       3 field4_id = f8
       3 field5_id = f8
       3 nomen_id = f8
       3 cm1_nbr = f8
       3 activity_dt_tm = dq8
       3 active_ind = i2
       3 chk_presence_flg = i2
       3 delete_flg = i2
   1 status_data
     2 status = c1
     2 subeventstatus[1]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 ) WITH protect
 RECORD changelogrecord(
   1 charge_modifications[*]
     2 charge_item_id = f8
     2 old_value = vc
     2 new_value = vc
     2 mod_type = vc
     2 old_value_id = f8
     2 new_value_id = f8
     2 reason_cd = vc
     2 reason_comment = vc
 ) WITH protect
 RECORD cmreq(
   1 objarray[*]
     2 action_type = c3
     2 charge_mod_id = f8
     2 charge_item_id = f8
     2 charge_mod_type_cd = f8
     2 field1 = vc
     2 field2 = vc
     2 field3 = vc
     2 field4 = vc
     2 field5 = vc
     2 field6 = vc
     2 field7 = vc
     2 field8 = vc
     2 field9 = vc
     2 field10 = vc
     2 updt_cnt = i4
     2 active_ind = i2
     2 active_status_cd = f8
     2 active_status_dt_tm = dq8
     2 active_status_prsnl_id = f8
     2 beg_effective_dt_tm = dq8
     2 end_effective_dt_tm = dq8
     2 code1_cd = f8
     2 nomen_id = f8
     2 field1_id = f8
     2 field2_id = f8
     2 field3_id = f8
     2 field4_id = f8
     2 field5_id = f8
     2 cm1_nbr = f8
     2 activity_dt_tm = dq8
 ) WITH protect
 RECORD cmrep(
   1 pft_status_data
     2 status = c1
     2 subeventstatus[*]
       3 status = c1
       3 table_name = vc
       3 pk_values = vc
   1 mod_objs[*]
     2 entity_type = vc
     2 mod_recs[*]
       3 table_name = vc
       3 pk_values = vc
       3 mod_flds[*]
         4 field_name = vc
         4 field_type = vc
         4 field_value_obj = vc
         4 field_value_db = vc
   1 failure_stack
     2 failures[*]
       3 programname = vc
       3 routinename = vc
       3 message = vc
   1 status_data
     2 status = c1
     2 subeventstatus[1]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 ) WITH protect
 DECLARE hi18n = i4 WITH protect, noconstant(0)
 SET stat = uar_i18nlocalizationinit(hi18n,curprog,"",curcclrev)
 DECLARE i18n_ordering_physician = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "Ordering Physician","Ordering Physician"))
 DECLARE i18n_rendering_physician = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "Rendering Physician","Rendering Physician"))
 IF ( NOT (validate(i18n_research_account)))
  DECLARE i18n_research_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "Research Account","Research Account"))
 ENDIF
 DECLARE i18n_abn_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"ABN Status",
   "ABN Status"))
 DECLARE i18n_service_date = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"Service Date",
   "Service Date"))
 DECLARE i18n_performing_location = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "Performing Location","Performing Location"))
 DECLARE i18n_charge_description = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
   "Charge Description","Charge Description"))
 DECLARE i18n_price = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"Price","Price"))
 DECLARE i18n_quantity = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"Quantity","Quantity"))
 DECLARE i18n_extended_price = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"Extended Price",
   "Extended Price"))
 DECLARE i18n_priority = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"Priority","Priority"))
 DECLARE i18n_qcf = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"QCF","QCF"))
 DECLARE i18n_ndc_code = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"NDC Code","NDC Code"))
 DECLARE i18n_ndc_factor = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"NDC Factor",
   "NDC Factor"))
 DECLARE i18n_ndc_uom = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"NDC UOM","NDC UOM"))
 IF ( NOT (validate(cs13019_changelog)))
  DECLARE cs13019_changelog = f8 WITH protect, constant(getcodevalue(13019,"CHANGELOG",0))
 ENDIF
 IF ( NOT (validate(cs13019_billcode)))
  DECLARE cs13019_billcode = f8 WITH protect, constant(getcodevalue(13019,"BILL CODE",0))
 ENDIF
 IF ( NOT (validate(cs13019_user_def)))
  DECLARE cs13019_user_def = f8 WITH protect, constant(getcodevalue(13019,"USER DEF",0))
 ENDIF
 IF ( NOT (validate(cs13019_mod_rsn)))
  DECLARE cs13019_mod_rsn = f8 WITH protect, constant(getcodevalue(13019,"MOD RSN",0))
 ENDIF
 IF ( NOT (validate(cs29322_chargeupdate)))
  DECLARE cs29322_chargeupdate = f8 WITH protect, constant(getcodevalue(29322,"CHARGEUPDATE",0))
 ENDIF
 IF ( NOT (validate(cs23369_wfevent)))
  DECLARE cs23369_wfevent = f8 WITH protect, noconstant(getcodevalue(23369,"WFEVENT",0))
 ENDIF
 IF ( NOT (validate(cs13028_debit_cd)))
  DECLARE cs13028_debit_cd = f8 WITH protect, noconstant(getcodevalue(13028,"DR",0))
 ENDIF
 IF ( NOT (validate(cs24454_chrgitemid)))
  DECLARE cs24454_chrgitemid = f8 WITH protect, noconstant(getcodevalue(24454,"CHRGITEMID",0))
 ENDIF
 IF ( NOT (validate(cs24454_contributor_cd)))
  DECLARE cs24454_contributor_cd = f8 WITH protect, noconstant(getcodevalue(24454,"CONTRIBSYS",0))
 ENDIF
 IF ( NOT (validate(cs24454_chrggrpid)))
  DECLARE cs24454_chrggrpid = f8 WITH protect, noconstant(getcodevalue(24454,"CHRGGRPID",0))
 ENDIF
 IF ( NOT (validate(interfaced)))
  DECLARE interfaced = i4 WITH protect, constant(999)
 ENDIF
 IF ( NOT (validate(posted)))
  DECLARE posted = i4 WITH protect, constant(100)
 ENDIF
 DECLARE addbcschedmodifydetails(pchargeitemid=f8,pchargemodpos1=i4,pchargemodpos2=i4) = null
 SUBROUTINE (savechargechangelogattributes(prcharge=vc(ref)) =i2)
   IF (validate(prcharge->charge_qual)=0)
    CALL logmessage("saveChargeChangeLogAttributes",
     "The record item charge_qual in prCharge does not exist: ",log_error)
    RETURN(false)
   ENDIF
   IF ((prcharge->charge_qual <= 0))
    CALL logmessage("saveChargeChangeLogAttributes",
     "Can not create changelog for charge attribute modification: ",log_error)
    RETURN(false)
   ENDIF
   CALL comparechargeattributes(prcharge)
   CALL addchargemodrsncomment(prcharge->charge[1].charge_item_id)
   CALL savechangelog(changelogrecord)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (savechargemodchangelogattributes(prchargemod=vc(ref)) =i2)
   IF (validate(prchargemod->charge_mod_qual)=0)
    CALL logmessage("saveChargeModChangeLogAttributes",
     "The record item CHARGE_MOD_QUAL in prChargeMod does not exist: ",log_error)
    RETURN(false)
   ENDIF
   IF ((prchargemod->charge_mod_qual <= 0))
    CALL logmessage("saveChargeModChangeLogAttributes",
     "Cannot create changelog for charge Mod attribute modification: ",log_error)
    RETURN(false)
   ENDIF
   CALL comparechargemodattributes(prchargemod)
   IF (size(prchargemod->charge_mod,5)=1)
    IF (validate(prchargemod->charge_mod[1].charge_mod_type_cd) > 0)
     IF ((prchargemod->charge_mod[1].charge_mod_type_cd=cs13019_user_def))
      CALL addchargemodrsncomment(prchargemod->charge_mod[1].charge_item_id)
     ENDIF
    ENDIF
   ENDIF
   CALL savechangelog(changelogrecord)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getoldchargeitemdetails(poldchargeitemid=f8) =i2)
   SET stat = initrec(ocreq)
   SET stat = initrec(ocrep)
   SET ocreq->charge_item_id = poldchargeitemid
   EXECUTE afc_charge_find  WITH replace("REQUEST",ocreq), replace("REPLY",ocrep)
   IF ((ocrep->status_data.status != "S"))
    CALL logmessage("AFC_CHARGE_FIND","Cannot find the charge details: ",log_error)
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (savechangelogdetails(poldchargeitemid=f8,pnewchargeitemid=f8) =i2)
   IF (((poldchargeitemid <= 0.0) OR (pnewchargeitemid <= 0.0)) )
    CALL logmessage("saveChangeLogDetails",
     "Cannot create changelog for charge and charge mod attribute modification: ",log_error)
    RETURN(false)
   ENDIF
   CALL getoldnewchargeitemdetails(poldchargeitemid,pnewchargeitemid)
   CALL comparepostedchargeattributes(poldchargeitemid)
   CALL comparepostedchargemodattributes(poldchargeitemid)
   CALL addchargemodrsncomment(pnewchargeitemid)
   CALL savechangelog(changelogrecord)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (savechangelogforencntrmod(proldcharge=vc(ref),prnewcharge=vc(ref)) =i2)
   DECLARE num = i4 WITH protect, noconstant(0)
   DECLARE pos = i4 WITH protect, noconstant(0)
   DECLARE occount = i4 WITH protect, noconstant(0)
   IF (((validate(proldcharge->charges)=0) OR (validate(prnewcharge->charges)=0)) )
    CALL logmessage("saveChangeLogForEncntrMod",
     "The record item CHARGES in prOldCharge or in prNewCharge does not exist: ",log_error)
    RETURN(false)
   ENDIF
   IF (((size(proldcharge->charges,5) <= 0) OR (size(prnewcharge->charges,5) <= 0)) )
    CALL logmessage("saveChangeLogForEncntrMod",
     "Cannot create changelog for charge or charge Mod attribute modification: ",log_error)
    RETURN(false)
   ENDIF
   FOR (occount = 1 TO size(proldcharge->charges,5))
     SET num = 0
     SET pos = locateval(num,1,size(prnewcharge->charges,5),proldcharge->charges[occount].
      charge_item_id,prnewcharge->charges[num].parent_charge_item_id)
     IF (pos > 0)
      CALL getoldnewchargeitemdetails(proldcharge->charges[occount].charge_item_id,prnewcharge->
       charges[pos].charge_item_id)
      CALL comparepostedchargeattributes(proldcharge->charges[occount].charge_item_id)
      CALL comparepostedchargemodattributes(proldcharge->charges[occount].charge_item_id)
      CALL addchargemodrsncomment(prnewcharge->charges[pos].charge_item_id)
     ENDIF
   ENDFOR
   CALL savechangelog(changelogrecord)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (savechargemodchangelogforencntrmod(prchargemod=vc(ref)) =i2)
   SET stat = initrec(changelogrecord)
   IF (validate(prchargemod->charge_mod_qual)=0)
    CALL logmessage("saveChargeModChangeLogAttributes",
     "The record item CHARGE_MOD_QUAL in prChargeMod does not exist: ",log_error)
    RETURN(false)
   ENDIF
   IF ((prchargemod->charge_mod_qual <= 0))
    CALL logmessage("saveChargeModChangeLogAttributes",
     "Cannot create changelog for charge Mod attribute modification: ",log_error)
    RETURN(false)
   ENDIF
   CALL comparechargemodattributesencntrmod(prchargemod)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = value(size(changelogrecord->charge_modifications,5))),
     charge c
    PLAN (d1)
     JOIN (c
     WHERE (c.charge_item_id=changelogrecord->charge_modifications[d1.seq].charge_item_id))
    DETAIL
     changelogrecord->charge_modifications[d1.seq].reason_cd = uar_get_code_display(c.suspense_rsn_cd
      ), changelogrecord->charge_modifications[d1.seq].reason_comment = c.reason_comment
    WITH nocounter
   ;end select
   CALL savechangelog(changelogrecord)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (updatechargemodrsncomment(prcharge=vc(ref)) =i2)
   DECLARE suspensersn = vc WITH protect, noconstant("")
   IF (validate(prcharge->charge_qual)=0)
    CALL logmessage("updateChargeModRsnComment",
     "The record item CHARGE_QUAL in prCharge does not exist: ",log_error)
    RETURN(false)
   ENDIF
   IF ((prcharge->charge_qual <= 0))
    CALL logmessage("updateChargeModRsnComment","Cannot update changelog in charge mod with modrsn: ",
     log_error)
    RETURN(false)
   ENDIF
   SET suspensersn = uar_get_code_display(prcharge->charge[1].suspense_rsn_cd)
   DECLARE billcdcnt = i4 WITH protect, noconstant(0)
   SET stat = alterlist(cmreq->objarray,0)
   SELECT INTO "nl:"
    FROM charge_mod cm
    WHERE (cm.charge_item_id=prcharge->charge[1].charge_item_id)
     AND cm.charge_mod_type_cd=cs13019_changelog
     AND trim(cm.field4)=null
     AND trim(cm.field5)=null
    DETAIL
     billcdcnt += 1, stat = alterlist(cmreq->objarray,billcdcnt), cmreq->objarray[billcdcnt].
     action_type = "UPT",
     cmreq->objarray[billcdcnt].charge_mod_id = cm.charge_mod_id, cmreq->objarray[billcdcnt].
     charge_item_id = cm.charge_item_id, cmreq->objarray[billcdcnt].updt_cnt = cm.updt_cnt,
     cmreq->objarray[billcdcnt].field4 = suspensersn, cmreq->objarray[billcdcnt].field5 = prcharge->
     charge[1].reason_comment, cmreq->objarray[billcdcnt].charge_mod_type_cd = cm.charge_mod_type_cd,
     cmreq->objarray[billcdcnt].field1 = cm.field1, cmreq->objarray[billcdcnt].field2 = cm.field2,
     cmreq->objarray[billcdcnt].field3 = cm.field3,
     cmreq->objarray[billcdcnt].field6 = cm.field6, cmreq->objarray[billcdcnt].field7 = cm.field7,
     cmreq->objarray[billcdcnt].field8 = cm.field8,
     cmreq->objarray[billcdcnt].field9 = cm.field9, cmreq->objarray[billcdcnt].field10 = cm.field10,
     cmreq->objarray[billcdcnt].active_ind = cm.active_ind,
     cmreq->objarray[billcdcnt].active_status_cd = cm.active_status_cd, cmreq->objarray[billcdcnt].
     active_status_dt_tm = cm.active_status_dt_tm, cmreq->objarray[billcdcnt].active_status_prsnl_id
      = cm.active_status_prsnl_id,
     cmreq->objarray[billcdcnt].beg_effective_dt_tm = cm.beg_effective_dt_tm, cmreq->objarray[
     billcdcnt].end_effective_dt_tm = cm.end_effective_dt_tm, cmreq->objarray[billcdcnt].code1_cd =
     cm.code1_cd,
     cmreq->objarray[billcdcnt].nomen_id = cm.nomen_id, cmreq->objarray[billcdcnt].field1_id = cm
     .field1_id, cmreq->objarray[billcdcnt].field2_id = cm.field2_id,
     cmreq->objarray[billcdcnt].field3_id = cm.field3_id, cmreq->objarray[billcdcnt].field4_id = cm
     .field4_id, cmreq->objarray[billcdcnt].field5_id = cm.field5_id,
     cmreq->objarray[billcdcnt].cm1_nbr = cm.cm1_nbr, cmreq->objarray[billcdcnt].activity_dt_tm = cm
     .activity_dt_tm
    WITH nocounter
   ;end select
   IF (size(cmreq->objarray,5) <= 0)
    CALL echo("No charge_mods to update")
   ELSE
    EXECUTE afc_val_charge_mod  WITH replace("REQUEST",cmreq), replace("REPLY",cmrep)
    IF ((cmrep->status_data.status != "S"))
     CALL logmessage(curprog,"afc_val_charge_mod did not return success",log_debug)
     IF (validate(debug,- (1)) > 0)
      CALL echorecord(cmreq)
      CALL echorecord(cmrep)
     ENDIF
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getoldchargeitemdetailsforencntrmod(prchargemod=vc(ref)) =i2)
   DECLARE count = i4 WITH protect, noconstant(0)
   DECLARE chargeitemid = f8 WITH protect, noconstant(0.0)
   SET stat = initrec(ocreq)
   SET stat = initrec(ocrep)
   SELECT INTO "nl:"
    chargeitemid = prchargemod->charge_mod[d1.seq].charge_item_id
    FROM (dummyt d1  WITH seq = value(prchargemod->charge_mod_qual))
    HEAD chargeitemid
     count += 1, stat = alterlist(ocreq->charge_items,count), ocreq->charge_items[count].
     charge_item_id = prchargemod->charge_mod[d1.seq].charge_item_id
    WITH nocounter
   ;end select
   EXECUTE afc_charge_find  WITH replace("REQUEST",ocreq), replace("REPLY",ocrep)
   IF ((ocrep->status_data.status != "S"))
    CALL logmessage("AFC_CHARGE_FIND","Cannot find the charge details: ",log_error)
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getoldnewchargeitemdetails(poldchargeitemid=f8,pnewchargeitemid=f8) =i2)
   SET stat = initrec(ocreq)
   SET stat = initrec(ocrep)
   SET stat = alterlist(ocreq->charge_items,2)
   SET ocreq->charge_items[1].charge_item_id = poldchargeitemid
   SET ocreq->charge_items[2].charge_item_id = pnewchargeitemid
   EXECUTE afc_charge_find  WITH replace("REQUEST",ocreq), replace("REPLY",ocrep)
   IF ((ocrep->status_data.status != "S"))
    CALL logmessage("AFC_CHARGE_FIND","Cannot find the charge details: ",log_error)
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (comparechargeattributes(prnewcharge=vc(ref)) =null)
   DECLARE extendedpricenew = f8 WITH protect, noconstant(0.0)
   SET curalias oldcharge ocrep->charge_items[1]
   SET curalias newcharge prnewcharge->charge[1]
   IF (validate(newcharge->perf_loc_cd) > 0)
    IF ((newcharge->perf_loc_cd != oldcharge->perf_loc_cd)
     AND  NOT ((oldcharge->perf_loc_cd=0)
     AND (newcharge->perf_loc_cd=- (1))))
     CALL fillidfields(newcharge->charge_item_id,i18n_performing_location,oldcharge->perf_loc_cd,
      newcharge->perf_loc_cd)
    ENDIF
   ENDIF
   IF (validate(newcharge->ord_phys_id) > 0)
    IF ((newcharge->ord_phys_id != oldcharge->ord_phys_id)
     AND  NOT ((oldcharge->ord_phys_id=0)
     AND (newcharge->ord_phys_id=- (1))))
     CALL fillidfields(newcharge->charge_item_id,i18n_ordering_physician,oldcharge->ord_phys_id,
      newcharge->ord_phys_id)
    ENDIF
   ENDIF
   IF (validate(newcharge->verify_phys_id) > 0)
    IF ((newcharge->verify_phys_id != oldcharge->verify_phys_id)
     AND  NOT ((oldcharge->verify_phys_id=0)
     AND (newcharge->verify_phys_id=- (1))))
     CALL fillidfields(newcharge->charge_item_id,i18n_rendering_physician,oldcharge->verify_phys_id,
      newcharge->verify_phys_id)
    ENDIF
   ENDIF
   IF (validate(newcharge->research_acct_id) > 0)
    IF ((newcharge->research_acct_id != oldcharge->research_acct_id)
     AND  NOT ((oldcharge->research_acct_id=0)
     AND (newcharge->research_acct_id=- (1))))
     CALL fillidfields(newcharge->charge_item_id,i18n_research_account,oldcharge->research_acct_id,
      newcharge->research_acct_id)
    ENDIF
   ENDIF
   IF (validate(newcharge->abn_status_cd) > 0)
    IF ((newcharge->abn_status_cd != oldcharge->abn_status_cd)
     AND  NOT ((oldcharge->abn_status_cd=0)
     AND (newcharge->abn_status_cd=- (1))))
     CALL fillidfields(newcharge->charge_item_id,i18n_abn_status,oldcharge->abn_status_cd,newcharge->
      abn_status_cd)
    ENDIF
   ENDIF
   IF (validate(newcharge->service_dt_tm) > 0)
    IF ((newcharge->service_dt_tm != oldcharge->service_dt_tm)
     AND (newcharge->service_dt_tm != 0))
     CALL fillvcfields(newcharge->charge_item_id,i18n_service_date,format(oldcharge->service_dt_tm,
       ";;Q"),format(newcharge->service_dt_tm,";;Q"))
    ENDIF
   ENDIF
   IF (validate(newcharge->item_quantity) > 0)
    IF ((newcharge->item_quantity != oldcharge->item_quantity)
     AND (newcharge->item_quantity != 0.0))
     CALL fillidfields(newcharge->charge_item_id,i18n_quantity,oldcharge->item_quantity,newcharge->
      item_quantity)
    ENDIF
   ENDIF
   IF (validate(newcharge->item_price) > 0)
    IF ((newcharge->item_price != oldcharge->item_price)
     AND (newcharge->item_price != 0.0))
     CALL fillidfields(newcharge->charge_item_id,i18n_price,oldcharge->item_price,newcharge->
      item_price)
    ENDIF
   ENDIF
   IF (validate(newcharge->item_price) > 0
    AND validate(newcharge->item_quantity) > 0)
    SET extendedpricenew = (newcharge->item_price * newcharge->item_quantity)
    IF ((extendedpricenew != oldcharge->item_extended_price)
     AND extendedpricenew != 0.0)
     CALL fillidfields(newcharge->charge_item_id,i18n_extended_price,oldcharge->item_extended_price,
      extendedpricenew)
    ENDIF
   ENDIF
   IF (validate(newcharge->charge_description) > 0)
    IF ((newcharge->charge_description != oldcharge->charge_description)
     AND trim(newcharge->charge_description) != "")
     CALL fillvcfields(newcharge->charge_item_id,i18n_charge_description,oldcharge->
      charge_description,newcharge->charge_description)
    ENDIF
   ENDIF
   SET curalias oldcharge off
   SET curalias newcharge off
 END ;Subroutine
 SUBROUTINE (comparepostedchargeattributes(poldchargeitemid=f8) =null)
   DECLARE extendedpricenew = f8 WITH protect, noconstant(0.0)
   IF ((ocrep->charge_items[1].charge_item_id=poldchargeitemid))
    SET curalias oldcharge ocrep->charge_items[1]
    SET curalias newcharge ocrep->charge_items[2]
   ELSE
    SET curalias newcharge ocrep->charge_items[1]
    SET curalias oldcharge ocrep->charge_items[2]
   ENDIF
   IF ((newcharge->perf_loc_cd != oldcharge->perf_loc_cd)
    AND  NOT ((oldcharge->perf_loc_cd=0)
    AND (newcharge->perf_loc_cd=- (1))))
    CALL fillidfields(newcharge->charge_item_id,i18n_performing_location,oldcharge->perf_loc_cd,
     newcharge->perf_loc_cd)
   ENDIF
   IF ((newcharge->ord_phys_id != oldcharge->ord_phys_id)
    AND  NOT ((oldcharge->ord_phys_id=0)
    AND (newcharge->ord_phys_id=- (1))))
    CALL fillidfields(newcharge->charge_item_id,i18n_ordering_physician,oldcharge->ord_phys_id,
     newcharge->ord_phys_id)
   ENDIF
   IF ((newcharge->verify_phys_id != oldcharge->verify_phys_id)
    AND  NOT ((oldcharge->verify_phys_id=0)
    AND (newcharge->verify_phys_id=- (1))))
    CALL fillidfields(newcharge->charge_item_id,i18n_rendering_physician,oldcharge->verify_phys_id,
     newcharge->verify_phys_id)
   ENDIF
   IF ((newcharge->research_acct_id != oldcharge->research_acct_id)
    AND  NOT ((oldcharge->research_acct_id=0)
    AND (newcharge->research_acct_id=- (1))))
    CALL fillidfields(newcharge->charge_item_id,i18n_research_account,oldcharge->research_acct_id,
     newcharge->research_acct_id)
   ENDIF
   IF ((newcharge->abn_status_cd != oldcharge->abn_status_cd)
    AND  NOT ((oldcharge->abn_status_cd=0)
    AND (newcharge->abn_status_cd=- (1))))
    CALL fillidfields(newcharge->charge_item_id,i18n_abn_status,oldcharge->abn_status_cd,newcharge->
     abn_status_cd)
   ENDIF
   IF ((newcharge->service_dt_tm != oldcharge->service_dt_tm)
    AND (newcharge->service_dt_tm != 0))
    CALL fillvcfields(newcharge->charge_item_id,i18n_service_date,format(oldcharge->service_dt_tm,
      ";;Q"),format(newcharge->service_dt_tm,";;Q"))
   ENDIF
   IF ((newcharge->item_quantity != oldcharge->item_quantity)
    AND (newcharge->item_quantity != 0.0))
    CALL fillidfields(newcharge->charge_item_id,i18n_quantity,oldcharge->item_quantity,newcharge->
     item_quantity)
   ENDIF
   IF ((newcharge->item_price != oldcharge->item_price)
    AND (newcharge->item_price != 0.0))
    CALL fillidfields(newcharge->charge_item_id,i18n_price,oldcharge->item_price,newcharge->
     item_price)
   ENDIF
   SET extendedpricenew = (newcharge->item_price * newcharge->item_quantity)
   IF ((extendedpricenew != oldcharge->item_extended_price)
    AND extendedpricenew != 0.0)
    CALL fillidfields(newcharge->charge_item_id,i18n_extended_price,oldcharge->item_extended_price,
     extendedpricenew)
   ENDIF
   IF ((newcharge->charge_description != oldcharge->charge_description)
    AND trim(newcharge->charge_description) != "")
    CALL fillvcfields(newcharge->charge_item_id,i18n_charge_description,oldcharge->charge_description,
     newcharge->charge_description)
   ENDIF
   SET curalias oldcharge off
   SET curalias newcharge off
 END ;Subroutine
 SUBROUTINE (comparechargemodattributes(prnewchargemod=vc(ref)) =null)
   DECLARE num = i4 WITH protect, noconstant(0)
   DECLARE pos = i4 WITH protect, noconstant(0)
   SET curalias oldc ocrep->charge_items[1]
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = value(prnewchargemod->charge_mod_qual))
    DETAIL
     IF ((prnewchargemod->charge_mod[d1.seq].action_type="ADD"))
      IF ((prnewchargemod->charge_mod[d1.seq].charge_mod_type_cd=cs13019_user_def))
       CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,prnewchargemod->charge_mod[d1
       .seq].field6,"",prnewchargemod->charge_mod[d1.seq].field7)
      ELSE
       IF (uar_get_code_meaning(prnewchargemod->charge_mod[d1.seq].field1_id)="NDC")
        CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,i18n_ndc_code,"",
        prnewchargemod->charge_mod[d1.seq].field6),
        CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,i18n_ndc_factor,"",cnvtstring(
         prnewchargemod->charge_mod[d1.seq].field3_id))
        IF ((prnewchargemod->charge_mod[d1.seq].field4_id > 0.0))
         CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,i18n_ndc_uom,"",
         uar_get_code_display(prnewchargemod->charge_mod[d1.seq].field4_id))
        ENDIF
       ELSE
        CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,uar_get_code_display(
         prnewchargemod->charge_mod[d1.seq].field1_id),"",prnewchargemod->charge_mod[d1.seq].field6)
       ENDIF
      ENDIF
     ELSEIF ((prnewchargemod->charge_mod[d1.seq].action_type="DEL"))
      pos = locateval(num,1,size(oldc->charge_mods,5),prnewchargemod->charge_mod[d1.seq].
       charge_mod_id,oldc->charge_mods[num].charge_mod_id)
      IF (pos > 0)
       IF ((oldc->charge_mods[pos].charge_mod_type_cd=cs13019_user_def))
        CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,oldc->charge_mods[pos].field6,
        oldc->charge_mods[pos].field7,"")
       ELSE
        CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,uar_get_code_display(oldc->
         charge_mods[pos].field1_id),oldc->charge_mods[pos].field6,"")
       ENDIF
      ENDIF
     ELSEIF ((prnewchargemod->charge_mod[d1.seq].action_type="UPT"))
      num = 0, pos = locateval(num,1,size(oldc->charge_mods,5),prnewchargemod->charge_mod[d1.seq].
       charge_mod_id,oldc->charge_mods[num].charge_mod_id)
      IF (pos > 0)
       IF ((prnewchargemod->charge_mod[d1.seq].charge_mod_type_cd=cs13019_user_def))
        IF ((oldc->charge_mods[pos].field7 != prnewchargemod->charge_mod[d1.seq].field7))
         CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,prnewchargemod->charge_mod[d1
         .seq].field6,oldc->charge_mods[pos].field7,prnewchargemod->charge_mod[d1.seq].field7)
        ENDIF
       ELSE
        IF ((oldc->charge_mods[pos].field6 != prnewchargemod->charge_mod[d1.seq].field6))
         CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,uar_get_code_display(
          prnewchargemod->charge_mod[d1.seq].field1_id),oldc->charge_mods[pos].field6,prnewchargemod
         ->charge_mod[d1.seq].field6)
        ENDIF
        IF ((oldc->charge_mods[pos].field2_id != prnewchargemod->charge_mod[d1.seq].field2_id))
         CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,concat(trim(
           uar_get_code_display(oldc->charge_mods[pos].field1_id)),"-",oldc->charge_mods[pos].field6,
          "(",i18n_priority,
          ")"),cnvtstring(oldc->charge_mods[pos].field2_id,17,2),cnvtstring(prnewchargemod->
          charge_mod[d1.seq].field2_id,17,2))
        ENDIF
        IF ((oldc->charge_mods[pos].cm1_nbr != prnewchargemod->charge_mod[d1.seq].cm1_nbr))
         CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,concat(trim(
           uar_get_code_display(oldc->charge_mods[pos].field1_id)),"-",oldc->charge_mods[pos].field6,
          "(",i18n_qcf,
          ")"),cnvtstring(oldc->charge_mods[pos].cm1_nbr,17,2),cnvtstring(prnewchargemod->charge_mod[
          d1.seq].cm1_nbr,17,2))
        ENDIF
        IF ((oldc->charge_mods[pos].field3_id != prnewchargemod->charge_mod[d1.seq].field3_id)
         AND uar_get_code_meaning(prnewchargemod->charge_mod[d1.seq].field1_id)="NDC")
         CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,i18n_ndc_factor,cnvtstring(
          oldc->charge_mods[pos].field3_id),cnvtstring(prnewchargemod->charge_mod[d1.seq].field3_id))
        ENDIF
        IF ((oldc->charge_mods[pos].field4_id != prnewchargemod->charge_mod[d1.seq].field4_id)
         AND uar_get_code_meaning(prnewchargemod->charge_mod[d1.seq].field1_id)="NDC")
         CALL fillvcfields(prnewchargemod->charge_mod[1].charge_item_id,i18n_ndc_uom,
         uar_get_code_display(oldc->charge_mods[pos].field4_id),uar_get_code_display(prnewchargemod->
          charge_mod[d1.seq].field4_id))
        ENDIF
       ENDIF
      ENDIF
     ENDIF
    WITH nocounter
   ;end select
   SET curalias oldc off
 END ;Subroutine
 SUBROUTINE (comparechargemodattributesencntrmod(prnewchargemod=vc(ref)) =null)
   DECLARE num = i4 WITH protect, noconstant(0)
   DECLARE pos = i4 WITH protect, noconstant(0)
   DECLARE pos1 = i4 WITH protect, noconstant(0)
   DECLARE cmqcount = i4 WITH protect, noconstant(0)
   FOR (cmqcount = 1 TO prnewchargemod->charge_mod_qual)
     IF ((prnewchargemod->charge_mod[cmqcount].action_type="ADD"))
      CALL fillvcfields(prnewchargemod->charge_mod[cmqcount].charge_item_id,uar_get_code_display(
        prnewchargemod->charge_mod[cmqcount].field1_id),"",prnewchargemod->charge_mod[cmqcount].
       field6)
     ELSEIF ((prnewchargemod->charge_mod[cmqcount].action_type="DEL"))
      SET pos1 = locateval(num,1,ocrep->charge_item_count,prnewchargemod->charge_mod[cmqcount].
       charge_item_id,ocrep->charge_items[num].charge_item_id)
      SET num = 0
      IF (pos1 > 0)
       SET pos = locateval(num,1,size(ocrep->charge_items[pos1].charge_mods,5),prnewchargemod->
        charge_mod[cmqcount].charge_mod_id,ocrep->charge_items[pos1].charge_mods[num].charge_mod_id)
       IF (pos > 0)
        CALL fillvcfields(prnewchargemod->charge_mod[cmqcount].charge_item_id,uar_get_code_display(
          ocrep->charge_items[pos1].charge_mods[pos].field1_id),ocrep->charge_items[pos1].
         charge_mods[pos].field6,"")
       ENDIF
      ENDIF
     ENDIF
   ENDFOR
 END ;Subroutine
 SUBROUTINE (comparepostedchargemodattributes(poldchargeitemid=f8) =null)
   DECLARE num = i4 WITH protect, noconstant(0)
   DECLARE pos1 = i4 WITH protect, noconstant(0)
   DECLARE pos2 = i4 WITH protect, noconstant(0)
   DECLARE pos3 = i4 WITH protect, noconstant(0)
   DECLARE pos4 = i4 WITH protect, noconstant(0)
   DECLARE pos5 = i4 WITH protect, noconstant(0)
   DECLARE pos6 = i4 WITH protect, noconstant(0)
   DECLARE occnt = i4 WITH protect, noconstant(0)
   DECLARE nccnt = i4 WITH protect, noconstant(0)
   DECLARE occnt1 = i4 WITH protect, noconstant(0)
   DECLARE field1_disp = vc WITH protect, noconstant("")
   IF ((ocrep->charge_items[1].charge_item_id=poldchargeitemid))
    SET curalias oldcharge ocrep->charge_items[1]
    SET curalias newcharge ocrep->charge_items[2]
   ELSE
    SET curalias newcharge ocrep->charge_items[1]
    SET curalias oldcharge ocrep->charge_items[2]
   ENDIF
   FOR (occnt = 1 TO oldcharge->charge_mod_count)
     IF ((oldcharge->charge_mods[occnt].charge_mod_type_cd=cs13019_billcode))
      IF ((oldcharge->charge_mods[occnt].active_ind=1))
       SET oldcharge->charge_mods[occnt].chk_presence_flg = 0
       SET pos1 = locateval(num,1,newcharge->charge_mod_count,oldcharge->charge_mods[occnt].field1_id,
        newcharge->charge_mods[num].field1_id,
        oldcharge->charge_mods[occnt].field6,newcharge->charge_mods[num].field6,oldcharge->
        charge_mods[occnt].field3_id,newcharge->charge_mods[num].field3_id,oldcharge->charge_mods[
        occnt].field4_id,
        newcharge->charge_mods[num].field4_id)
       IF (pos1 > 0)
        SET newcharge->charge_mods[pos1].chk_presence_flg = 1
        SET oldcharge->charge_mods[occnt].chk_presence_flg = 1
       ENDIF
      ENDIF
     ENDIF
   ENDFOR
   FOR (nccnt = 1 TO newcharge->charge_mod_count)
     IF ((newcharge->charge_mods[nccnt].charge_mod_type_cd=cs13019_billcode))
      IF ((newcharge->charge_mods[nccnt].active_ind=1))
       IF (uar_get_code_meaning(newcharge->charge_mods[nccnt].field1_id)="NDC")
        SET field1_disp = i18n_ndc_code
       ELSE
        SET field1_disp = uar_get_code_display(newcharge->charge_mods[nccnt].field1_id)
       ENDIF
       SET pos2 = locateval(num,1,oldcharge->charge_mod_count,newcharge->charge_mods[nccnt].field1_id,
        oldcharge->charge_mods[num].field1_id,
        newcharge->charge_mods[nccnt].field6,oldcharge->charge_mods[num].field6,newcharge->
        charge_mods[nccnt].field2_id,oldcharge->charge_mods[num].field2_id,newcharge->charge_mods[
        nccnt].field3_id,
        oldcharge->charge_mods[num].field3_id,newcharge->charge_mods[nccnt].field4_id,oldcharge->
        charge_mods[num].field4_id,0,oldcharge->charge_mods[num].delete_flg)
       IF (pos2 > 0)
        CALL addbcqcfmodifydetails(newcharge->charge_item_id,pos2,nccnt)
        SET oldcharge->charge_mods[pos2].delete_flg = 1
       ELSE
        SET pos3 = locateval(num,1,oldcharge->charge_mod_count,newcharge->charge_mods[nccnt].
         field1_id,oldcharge->charge_mods[num].field1_id,
         newcharge->charge_mods[nccnt].field6,oldcharge->charge_mods[num].field6,0,oldcharge->
         charge_mods[num].delete_flg)
        IF (pos3 > 0)
         IF ((newcharge->charge_mods[nccnt].field2_id != oldcharge->charge_mods[pos3].field2_id)
          AND (newcharge->charge_mods[nccnt].chk_presence_flg=1))
          CALL addbcprioritymodifydetails(newcharge->charge_item_id,pos3,nccnt)
         ENDIF
         IF ((newcharge->charge_mods[nccnt].field3_id != oldcharge->charge_mods[pos3].field3_id)
          AND uar_get_code_meaning(newcharge->charge_mods[nccnt].field1_id)="NDC"
          AND (newcharge->charge_mods[nccnt].chk_presence_flg=0))
          SET oldcharge->charge_mods[pos3].delete_flg = 1
          CALL fillvcfields(newcharge->charge_item_id,i18n_ndc_factor,cnvtstring(oldcharge->
            charge_mods[pos3].field3_id),cnvtstring(newcharge->charge_mods[nccnt].field3_id))
         ENDIF
         IF ((newcharge->charge_mods[nccnt].field4_id != oldcharge->charge_mods[pos3].field4_id)
          AND uar_get_code_meaning(newcharge->charge_mods[nccnt].field1_id)="NDC"
          AND (newcharge->charge_mods[nccnt].chk_presence_flg=0))
          SET oldcharge->charge_mods[pos3].delete_flg = 1
          CALL fillvcfields(newcharge->charge_item_id,i18n_ndc_uom,uar_get_code_display(oldcharge->
            charge_mods[pos3].field4_id),uar_get_code_display(newcharge->charge_mods[nccnt].field4_id
            ))
         ENDIF
         CALL addbcqcfmodifydetails(newcharge->charge_item_id,pos3,nccnt)
        ELSE
         SET pos4 = locateval(num,1,oldcharge->charge_mod_count,newcharge->charge_mods[nccnt].
          field1_id,oldcharge->charge_mods[num].field1_id,
          newcharge->charge_mods[nccnt].field2_id,oldcharge->charge_mods[num].field2_id,0,oldcharge->
          charge_mods[num].delete_flg)
         IF (pos4 > 0)
          IF ((newcharge->charge_mods[nccnt].field6 != oldcharge->charge_mods[pos4].field6)
           AND (newcharge->charge_mods[nccnt].chk_presence_flg=0)
           AND (oldcharge->charge_mods[pos4].chk_presence_flg=1))
           CALL fillvcfields(newcharge->charge_item_id,field1_disp,"",newcharge->charge_mods[nccnt].
            field6)
          ELSEIF ((newcharge->charge_mods[nccnt].field6 != oldcharge->charge_mods[pos4].field6)
           AND (newcharge->charge_mods[nccnt].chk_presence_flg=0))
           SET oldcharge->charge_mods[pos4].delete_flg = 1
           CALL fillvcfields(newcharge->charge_item_id,field1_disp,oldcharge->charge_mods[pos4].
            field6,newcharge->charge_mods[nccnt].field6)
           CALL addbcqcfmodifydetails(newcharge->charge_item_id,pos4,nccnt)
          ENDIF
          IF ((newcharge->charge_mods[nccnt].field3_id != oldcharge->charge_mods[pos4].field3_id)
           AND uar_get_code_meaning(newcharge->charge_mods[nccnt].field1_id)="NDC"
           AND (newcharge->charge_mods[nccnt].chk_presence_flg=0))
           SET oldcharge->charge_mods[pos4].delete_flg = 1
           CALL fillvcfields(newcharge->charge_item_id,i18n_ndc_factor,cnvtstring(oldcharge->
             charge_mods[pos4].field3_id),cnvtstring(newcharge->charge_mods[nccnt].field3_id))
          ENDIF
          IF ((newcharge->charge_mods[nccnt].field4_id != oldcharge->charge_mods[pos4].field4_id)
           AND uar_get_code_meaning(newcharge->charge_mods[nccnt].field1_id)="NDC"
           AND (newcharge->charge_mods[nccnt].chk_presence_flg=0))
           SET oldcharge->charge_mods[pos4].delete_flg = 1
           CALL fillvcfields(newcharge->charge_item_id,i18n_ndc_uom,uar_get_code_display(oldcharge->
             charge_mods[pos4].field4_id),uar_get_code_display(newcharge->charge_mods[nccnt].
             field4_id))
          ENDIF
         ELSE
          SET pos5 = locateval(num,1,oldcharge->charge_mod_count,newcharge->charge_mods[nccnt].
           field1_id,oldcharge->charge_mods[num].field1_id,
           0,oldcharge->charge_mods[num].delete_flg)
          IF (pos5 > 0)
           IF ((newcharge->charge_mods[nccnt].field6 != oldcharge->charge_mods[pos5].field6)
            AND (newcharge->charge_mods[nccnt].field2_id != oldcharge->charge_mods[pos5].field2_id)
            AND (newcharge->charge_mods[nccnt].chk_presence_flg=0)
            AND (oldcharge->charge_mods[pos5].chk_presence_flg=0))
            SET oldcharge->charge_mods[pos5].delete_flg = 1
            CALL fillvcfields(newcharge->charge_item_id,field1_disp,oldcharge->charge_mods[pos5].
             field6,newcharge->charge_mods[nccnt].field6)
            CALL addbcprioritymodifydetails(newcharge->charge_item_id,pos5,nccnt)
            CALL addbcqcfmodifydetails(newcharge->charge_item_id,pos5,nccnt)
           ELSEIF ((newcharge->charge_mods[nccnt].field6 != oldcharge->charge_mods[pos5].field6)
            AND (newcharge->charge_mods[nccnt].field2_id != oldcharge->charge_mods[pos5].field2_id)
            AND (newcharge->charge_mods[nccnt].chk_presence_flg=0)
            AND (oldcharge->charge_mods[pos5].chk_presence_flg=1))
            CALL fillvcfields(newcharge->charge_item_id,field1_disp,"",newcharge->charge_mods[nccnt].
             field6)
           ENDIF
          ELSE
           CALL fillvcfields(newcharge->charge_item_id,field1_disp,"",newcharge->charge_mods[nccnt].
            field6)
           IF ((newcharge->charge_mods[nccnt].field3_id > 0.0)
            AND uar_get_code_meaning(newcharge->charge_mods[nccnt].field1_id)="NDC")
            CALL fillvcfields(newcharge->charge_item_id,i18n_ndc_factor,"",cnvtstring(newcharge->
              charge_mods[nccnt].field3_id))
           ENDIF
           IF ((newcharge->charge_mods[nccnt].field4_id > 0.0)
            AND uar_get_code_meaning(newcharge->charge_mods[nccnt].field1_id)="NDC")
            CALL fillvcfields(newcharge->charge_item_id,i18n_ndc_uom,"",uar_get_code_display(
              newcharge->charge_mods[nccnt].field4_id))
           ENDIF
          ENDIF
         ENDIF
        ENDIF
       ENDIF
      ENDIF
     ELSEIF ((newcharge->charge_mods[nccnt].charge_mod_type_cd=cs13019_user_def))
      SET pos6 = locateval(num,1,oldcharge->charge_mod_count,newcharge->charge_mods[nccnt].
       charge_mod_type_cd,oldcharge->charge_mods[num].charge_mod_type_cd)
      IF (pos6 > 0)
       IF ((newcharge->charge_mods[nccnt].field7=oldcharge->charge_mods[pos6].field7)
        AND (oldcharge->charge_mods[pos6].delete_flg=0))
        SET oldcharge->charge_mods[pos6].delete_flg = 1
       ELSEIF ((newcharge->charge_mods[nccnt].field7 != oldcharge->charge_mods[pos6].field7))
        CALL fillvcfields(newcharge->charge_item_id,newcharge->charge_mods[nccnt].field6,oldcharge->
         charge_mods[pos6].field7,newcharge->charge_mods[nccnt].field7)
        SET oldcharge->charge_mods[pos6].delete_flg = 1
       ENDIF
      ELSEIF (pos6=0)
       CALL fillvcfields(newcharge->charge_item_id,newcharge->charge_mods[nccnt].field6,"",newcharge
        ->charge_mods[nccnt].field7)
      ENDIF
     ENDIF
   ENDFOR
   FOR (occnt1 = 1 TO oldcharge->charge_mod_count)
    IF (uar_get_code_meaning(oldcharge->charge_mods[occnt1].field1_id)="NDC")
     SET field1_disp = i18n_ndc_code
    ELSE
     SET field1_disp = uar_get_code_display(oldcharge->charge_mods[occnt1].field1_id)
    ENDIF
    IF ((oldcharge->charge_mods[occnt1].charge_mod_type_cd=cs13019_billcode))
     IF ((oldcharge->charge_mods[occnt1].delete_flg=0)
      AND (oldcharge->charge_mods[occnt1].active_ind=1))
      CALL fillvcfields(newcharge->charge_item_id,field1_disp,oldcharge->charge_mods[occnt1].field6,
       "")
     ENDIF
    ELSEIF ((oldcharge->charge_mods[occnt1].charge_mod_type_cd=cs13019_user_def))
     IF ((oldcharge->charge_mods[occnt1].delete_flg=0)
      AND (oldcharge->charge_mods[occnt1].active_ind=1))
      CALL fillvcfields(newcharge->charge_item_id,oldcharge->charge_mods[occnt1].field6,oldcharge->
       charge_mods[occnt1].field7,"")
     ENDIF
    ENDIF
   ENDFOR
   SET curalias oldcharge off
   SET curalias newcharge off
 END ;Subroutine
 SUBROUTINE (addbcprioritymodifydetails(pchargeitemid=f8,pchrgmodpos1=i4,pchrgmodpos2=i4) =null)
   IF ((ocrep->charge_items[1].charge_item_id=pchargeitemid))
    SET curalias newc ocrep->charge_items[1]
    SET curalias oldc ocrep->charge_items[2]
   ELSE
    SET curalias oldc ocrep->charge_items[1]
    SET curalias newc ocrep->charge_items[2]
   ENDIF
   SET oldc->charge_mods[pchrgmodpos1].delete_flg = 1
   CALL fillvcfields(pchargeitemid,concat(trim(uar_get_code_display(oldc->charge_mods[pchrgmodpos1].
       field1_id)),"-",oldc->charge_mods[pchrgmodpos1].field6,"(",i18n_priority,
     ")"),cnvtstring(oldc->charge_mods[pchrgmodpos1].field2_id,17,2),cnvtstring(newc->charge_mods[
     pchrgmodpos2].field2_id,17,2))
   SET curalias oldc off
   SET curalias newc off
 END ;Subroutine
 SUBROUTINE (addbcqcfmodifydetails(pchargeitemid=f8,pchrgmodpos1=i4,pchrgmodpos2=i4) =null)
   IF ((ocrep->charge_items[1].charge_item_id=pchargeitemid))
    SET curalias newc ocrep->charge_items[1]
    SET curalias oldc ocrep->charge_items[2]
   ELSE
    SET curalias oldc ocrep->charge_items[1]
    SET curalias newc ocrep->charge_items[2]
   ENDIF
   IF ((newc->charge_mods[pchrgmodpos2].cm1_nbr > 0.0)
    AND (newc->charge_mods[pchrgmodpos2].cm1_nbr != oldc->charge_mods[pchrgmodpos1].cm1_nbr))
    SET oldc->charge_mods[pchrgmodpos1].delete_flg = 1
    CALL fillvcfields(pchargeitemid,concat(trim(uar_get_code_display(oldc->charge_mods[pchrgmodpos1].
        field1_id)),"-",oldc->charge_mods[pchrgmodpos1].field6,"(",i18n_qcf,
      ")"),cnvtstring(oldc->charge_mods[pchrgmodpos1].cm1_nbr,17,2),cnvtstring(newc->charge_mods[
      pchrgmodpos2].cm1_nbr,17,2))
   ENDIF
   SET curalias oldc off
   SET curalias newc off
 END ;Subroutine
 SUBROUTINE (fillvcfields(pchargeitemid=f8,pmodtype=vc,poldvalue=vc,pnewvalue=vc) =null)
   DECLARE count = i4 WITH protect, noconstant(0)
   SET count = (size(changelogrecord->charge_modifications,5)+ 1)
   SET stat = alterlist(changelogrecord->charge_modifications,count)
   SET changelogrecord->charge_modifications[count].charge_item_id = pchargeitemid
   SET changelogrecord->charge_modifications[count].mod_type = pmodtype
   SET changelogrecord->charge_modifications[count].old_value = poldvalue
   SET changelogrecord->charge_modifications[count].new_value = pnewvalue
 END ;Subroutine
 SUBROUTINE (fillidfields(pchargeitemid=f8,pmodtype=vc,poldvalueid=f8,pnewvalueid=f8) =null)
   DECLARE count = i4 WITH protect, noconstant(0)
   SET count = (size(changelogrecord->charge_modifications,5)+ 1)
   SET stat = alterlist(changelogrecord->charge_modifications,count)
   SET changelogrecord->charge_modifications[count].charge_item_id = pchargeitemid
   SET changelogrecord->charge_modifications[count].mod_type = pmodtype
   SET changelogrecord->charge_modifications[count].old_value_id = poldvalueid
   SET changelogrecord->charge_modifications[count].new_value_id = evaluate(pnewvalueid,- (1.0),0.0,
    pnewvalueid)
 END ;Subroutine
 SUBROUTINE (addchargemodrsncomment(pchargeitemid=f8) =null)
   DECLARE chnglogcnt = i4 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM charge_mod cm
    WHERE cm.charge_item_id=pchargeitemid
     AND cm.charge_mod_type_cd=cs13019_mod_rsn
    ORDER BY cm.charge_mod_id DESC
    DETAIL
     FOR (chnglogcnt = 1 TO size(changelogrecord->charge_modifications,5))
      changelogrecord->charge_modifications[chnglogcnt].reason_cd = uar_get_code_display(cm.field2_id
       ),changelogrecord->charge_modifications[chnglogcnt].reason_comment = cm.field7
     ENDFOR
    WITH maxrec = 1
   ;end select
   IF (curqual=0)
    SELECT INTO "nl:"
     FROM charge c
     WHERE c.charge_item_id=pchargeitemid
     DETAIL
      FOR (chnglogcnt = 1 TO size(changelogrecord->charge_modifications,5))
       changelogrecord->charge_modifications[chnglogcnt].reason_cd = uar_get_code_display(c
        .suspense_rsn_cd),changelogrecord->charge_modifications[chnglogcnt].reason_comment = c
       .reason_comment
      ENDFOR
     WITH nocounter
    ;end select
   ENDIF
 END ;Subroutine
 SUBROUTINE (savechangelog(changelogrecord=vc) =i2)
   DECLARE new_nbr = f8 WITH protect, noconstant(0.0)
   DECLARE clcnt = i4 WITH protect, noconstant(0)
   DECLARE billcdcnt = i4 WITH protect, noconstant(0)
   SET stat = alterlist(cmreq->objarray,0)
   FOR (clcnt = 1 TO size(changelogrecord->charge_modifications,5))
     SET new_nbr = 0.0
     SELECT INTO "nl:"
      nextnum = seq(charge_event_seq,nextval)"##################;rp0"
      FROM dual
      DETAIL
       new_nbr = cnvtreal(nextnum)
      WITH format, counter
     ;end select
     IF (curqual=0)
      CALL logmessage("saveChangeLog","Failed to generate Unique charge mod id ",log_error)
      RETURN(false)
     ENDIF
     SET billcdcnt += 1
     SET stat = alterlist(cmreq->objarray,billcdcnt)
     SET cmreq->objarray[billcdcnt].action_type = "ADD"
     SET cmreq->objarray[billcdcnt].charge_mod_id = new_nbr
     SET cmreq->objarray[billcdcnt].charge_item_id = changelogrecord->charge_modifications[clcnt].
     charge_item_id
     SET cmreq->objarray[billcdcnt].charge_mod_type_cd = cs13019_changelog
     SET cmreq->objarray[billcdcnt].field2 = changelogrecord->charge_modifications[clcnt].old_value
     SET cmreq->objarray[billcdcnt].field3 = changelogrecord->charge_modifications[clcnt].new_value
     SET cmreq->objarray[billcdcnt].field2_id = changelogrecord->charge_modifications[clcnt].
     old_value_id
     SET cmreq->objarray[billcdcnt].field3_id = changelogrecord->charge_modifications[clcnt].
     new_value_id
     SET cmreq->objarray[billcdcnt].field7 = changelogrecord->charge_modifications[clcnt].mod_type
     SET cmreq->objarray[billcdcnt].field4 = changelogrecord->charge_modifications[clcnt].reason_cd
     SET cmreq->objarray[billcdcnt].field5 = changelogrecord->charge_modifications[clcnt].
     reason_comment
     SET cmreq->objarray[billcdcnt].activity_dt_tm = cnvtdatetime(sysdate)
     SET cmreq->objarray[billcdcnt].beg_effective_dt_tm = cnvtdatetime(sysdate)
     SET cmreq->objarray[billcdcnt].end_effective_dt_tm = cnvtdatetime("31-DEC-2100 00:00:00.00")
     SET cmreq->objarray[billcdcnt].active_ind = 1
     SET cmreq->objarray[billcdcnt].active_status_prsnl_id = reqinfo->updt_id
     SET cmreq->objarray[billcdcnt].active_status_dt_tm = cnvtdatetime(sysdate)
   ENDFOR
   IF (size(cmreq->objarray,5) <= 0)
    CALL echo("No charge_mods to insert")
   ELSE
    EXECUTE afc_val_charge_mod  WITH replace("REQUEST",cmreq), replace("REPLY",cmrep)
    IF ((cmrep->status_data.status != "S"))
     CALL logmessage(curprog,"afc_val_charge_mod did not return success",log_debug)
     IF (validate(debug,- (1)) > 0)
      CALL echorecord(cmreq)
      CALL echorecord(cmrep)
     ENDIF
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (publisheventforchargeupdate(prpublishchargerequest=vc(ref),processflag=i4) =i2)
   CALL logmsg(curprog,"Entering... publishEventForChargeUpdate()",log_debug)
   DECLARE eventcount = i4 WITH protect, noconstant(0)
   DECLARE paramcount = i4 WITH protect, noconstant(0)
   RECORD publisheventrequest(
     1 eventlist[*]
       2 entitytypekey = vc
       2 entityid = f8
       2 eventcd = f8
       2 eventtypecd = f8
       2 workitemamount = f8
       2 params[*]
         3 paramcd = f8
         3 paramvalue = f8
         3 newparamind = i2
         3 doublevalue = f8
   ) WITH protect
   RECORD publisheventreply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   IF (processflag=interfaced)
    SELECT INTO "nl:"
     FROM (dummyt d  WITH seq = value(prpublishchargerequest->charges)),
      charge c,
      charge_mod cm,
      encounter e
     PLAN (d
      WHERE (prpublishchargerequest->charges[d.seq].charge_item_id > 0.0))
      JOIN (c
      WHERE (c.charge_item_id=prpublishchargerequest->charges[d.seq].charge_item_id)
       AND c.active_ind=true
       AND c.process_flg=interfaced
       AND c.charge_type_cd=cs13028_debit_cd)
      JOIN (cm
      WHERE cm.charge_item_id=c.charge_item_id
       AND cm.charge_mod_type_cd=cs13019_mod_rsn
       AND cm.active_ind=true)
      JOIN (e
      WHERE e.encntr_id=c.encntr_id
       AND e.active_ind=true)
     ORDER BY c.charge_item_id DESC, cm.charge_mod_id DESC
     HEAD c.charge_item_id
      eventcount += 1, stat = alterlist(publisheventrequest->eventlist,eventcount),
      publisheventrequest->eventlist[eventcount].entitytypekey = "ENCOUNTER",
      publisheventrequest->eventlist[eventcount].entityid = e.encntr_id, publisheventrequest->
      eventlist[eventcount].eventtypecd = cs23369_wfevent, publisheventrequest->eventlist[eventcount]
      .eventcd = cs29322_chargeupdate,
      publisheventrequest->eventlist[eventcount].workitemamount = c.item_extended_price, paramcount
       += 1, stat = alterlist(publisheventrequest->eventlist[eventcount].params,paramcount),
      publisheventrequest->eventlist[eventcount].params[paramcount].paramcd = cs24454_chrgitemid,
      publisheventrequest->eventlist[eventcount].params[paramcount].doublevalue = c.charge_item_id,
      publisheventrequest->eventlist[eventcount].params[paramcount].newparamind = true,
      paramcount += 1, stat = alterlist(publisheventrequest->eventlist[eventcount].params,paramcount),
      publisheventrequest->eventlist[eventcount].params[paramcount].paramcd = cs24454_contributor_cd,
      publisheventrequest->eventlist[eventcount].params[paramcount].doublevalue = cm.code1_cd,
      publisheventrequest->eventlist[eventcount].params[paramcount].newparamind = true
     WITH nocounter
    ;end select
   ELSEIF (processflag=posted)
    SELECT INTO "nl:"
     FROM (dummyt d  WITH seq = value(prpublishchargerequest->charges)),
      charge c,
      charge_mod cm,
      pft_charge pc,
      pft_charge_bo_reltn pcbr,
      benefit_order bo,
      pft_encntr pe
     PLAN (d
      WHERE (prpublishchargerequest->charges[d.seq].charge_item_id > 0.0))
      JOIN (c
      WHERE (c.charge_item_id=prpublishchargerequest->charges[d.seq].charge_item_id)
       AND c.active_ind=true
       AND c.process_flg=posted
       AND c.charge_type_cd=cs13028_debit_cd)
      JOIN (cm
      WHERE cm.charge_item_id=c.charge_item_id
       AND cm.charge_mod_type_cd=cs13019_mod_rsn
       AND cm.active_ind=true)
      JOIN (pc
      WHERE pc.charge_item_id=c.charge_item_id
       AND pc.ext_billed_ind=false
       AND pc.active_ind=true)
      JOIN (pcbr
      WHERE pcbr.pft_charge_id=pc.pft_charge_id
       AND pcbr.active_ind=true)
      JOIN (bo
      WHERE bo.benefit_order_id=pcbr.benefit_order_id
       AND bo.active_ind=true)
      JOIN (pe
      WHERE pe.pft_encntr_id=bo.pft_encntr_id
       AND pe.active_ind=true)
     ORDER BY c.charge_item_id DESC, cm.charge_mod_id DESC
     HEAD c.charge_item_id
      eventcount += 1, stat = alterlist(publisheventrequest->eventlist,eventcount),
      publisheventrequest->eventlist[eventcount].entitytypekey = "PFTENCNTR",
      publisheventrequest->eventlist[eventcount].entityid = pe.pft_encntr_id, publisheventrequest->
      eventlist[eventcount].eventtypecd = cs23369_wfevent, publisheventrequest->eventlist[eventcount]
      .eventcd = cs29322_chargeupdate,
      publisheventrequest->eventlist[eventcount].workitemamount = c.item_extended_price, paramcount
       += 1, stat = alterlist(publisheventrequest->eventlist[eventcount].params,paramcount),
      publisheventrequest->eventlist[eventcount].params[paramcount].paramcd = cs24454_chrgitemid,
      publisheventrequest->eventlist[eventcount].params[paramcount].doublevalue = c.charge_item_id,
      publisheventrequest->eventlist[eventcount].params[paramcount].newparamind = true,
      paramcount += 1, stat = alterlist(publisheventrequest->eventlist[eventcount].params,paramcount),
      publisheventrequest->eventlist[eventcount].params[paramcount].paramcd = cs24454_contributor_cd,
      publisheventrequest->eventlist[eventcount].params[paramcount].doublevalue = cm.code1_cd,
      publisheventrequest->eventlist[eventcount].params[paramcount].newparamind = true, paramcount
       += 1,
      stat = alterlist(publisheventrequest->eventlist[eventcount].params,paramcount),
      publisheventrequest->eventlist[eventcount].params[paramcount].paramcd = cs24454_chrggrpid,
      publisheventrequest->eventlist[eventcount].params[paramcount].doublevalue = bo.bt_condition_id,
      publisheventrequest->eventlist[eventcount].params[paramcount].newparamind = true
     WITH nocounter
    ;end select
   ENDIF
   IF (size(publisheventrequest->eventlist,5) > 0)
    EXECUTE pft_publish_event  WITH replace("REQUEST",publisheventrequest), replace("REPLY",
     publisheventreply)
    IF ((publisheventreply->status_data.status != "S"))
     IF (validate(debug,0)=1)
      CALL echorecord(publisheventrequest)
      CALL echorecord(publisheventreply)
     ENDIF
     RETURN(false)
    ENDIF
   ENDIF
   CALL logmsg(curprog,"Exiting... publishEventForChargeUpdate()",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (publishunbilledinvoiceworkitem(prpublishchargerequest=vc(ref)) =i2)
   CALL logmsg(curprog,"Entering.. publishUnbilledInvoiceWorkItem()",log_debug)
   IF ( NOT (validate(cs23369_wfevent_cd)))
    DECLARE cs23369_wfevent_cd = f8 WITH protect, constant(getcodevalue(23369,"WFEVENT",1))
   ENDIF
   IF ( NOT (validate(cs20509_posted_cd)))
    DECLARE cs20509_posted_cd = f8 WITH protect, constant(getcodevalue(20509,"POSTED",1))
   ENDIF
   IF ( NOT (validate(cs20849_client_cd)))
    DECLARE cs20849_client_cd = f8 WITH protect, constant(getcodevalue(20849,"CLIENT",1))
   ENDIF
   IF ( NOT (validate(cs20849_research_cd)))
    DECLARE cs20849_research_cd = f8 WITH protect, constant(getcodevalue(20849,"RESEARCH",1))
   ENDIF
   IF ( NOT (validate(cs29322_unbillinv_cd)))
    DECLARE cs29322_unbillinv_cd = f8 WITH protect, constant(getcodevalue(29322,"UNBILLINV",1))
   ENDIF
   DECLARE workitemexists = i2 WITH protect, noconstant(false)
   DECLARE pftqueueitemid = f8 WITH protect, noconstant(0.0)
   DECLARE prupdatecnt = i4 WITH protect, noconstant(0)
   DECLARE preworkitemamount = f8 WITH protect, noconstant(0.0)
   DECLARE prworkitemupdtdate = f8 WITH protect, noconstant(0.0)
   DECLARE workitemamount = f8 WITH protect, noconstant(0.0)
   DECLARE modchrgamount = f8 WITH protect, noconstant(0.0)
   RECORD addwihistoryrequest(
     1 objarray[*]
       2 pftqueueitemid = f8
       2 workitemamount = f8
       2 transactionactioncodeflag = i2
       2 entitystatuscd = f8
   ) WITH protect
   RECORD addwihistoryreply(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   RECORD uptworkitemrequest(
     1 objarray[*]
       2 pft_queue_item_id = f8
       2 work_item_amt = f8
       2 updt_cnt = i4
   ) WITH protect
   RECORD uptworkitemreply(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   RECORD publishunbilledinvoiceeventrequest(
     1 eventlist[*]
       2 entitytypekey = vc
       2 entityid = f8
       2 eventcd = f8
       2 eventtypecd = f8
       2 workitemamount = f8
       2 params[*]
         3 paramcd = f8
         3 paramvalue = f8
         3 newparamind = i2
         3 doublevalue = f8
   ) WITH protect
   RECORD publishunbilledinvoiceeventreply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   RECORD unbilledinvoiceaccountdetails(
     1 acct[*]
       2 accountid = f8
       2 amount = f8
   ) WITH protect
   SELECT INTO "nl:"
    FROM charge c,
     charge c2,
     pft_charge pc,
     account a
    PLAN (c
     WHERE (c.charge_item_id=prpublishchargerequest->charges[1].charge_item_id)
      AND c.active_ind=true)
     JOIN (c2
     WHERE c2.parent_charge_item_id=c.parent_charge_item_id
      AND c2.active_ind=true)
     JOIN (pc
     WHERE pc.charge_item_id=c.charge_item_id
      AND pc.pft_charge_status_cd=cs20509_posted_cd
      AND pc.active_ind=true)
     JOIN (a
     WHERE a.acct_id=pc.dr_acct_id
      AND a.acct_sub_type_cd IN (cs20849_client_cd, cs20849_research_cd)
      AND a.active_ind=true)
    HEAD REPORT
     stat = alterlist(unbilledinvoiceaccountdetails->acct,1), unbilledinvoiceaccountdetails->acct[1].
     accountid = a.acct_id
    DETAIL
     IF (c2.item_price < 0.0)
      modchrgamount = abs(c2.item_price)
     ENDIF
     unbilledinvoiceaccountdetails->acct[1].amount += c2.item_price
    WITH nocounter
   ;end select
   IF (size(unbilledinvoiceaccountdetails->acct,5) > 0)
    SET workitemexists = checkworkitemexist(unbilledinvoiceaccountdetails->acct[1].accountid,
     pftqueueitemid,preworkitemamount,prupdatecnt,prworkitemupdtdate)
    IF (workitemexists)
     SET stat = alterlist(uptworkitemrequest->objarray,1)
     SET uptworkitemrequest->objarray[1].pft_queue_item_id = pftqueueitemid
     SET uptworkitemrequest->objarray[1].work_item_amt = (preworkitemamount+
     unbilledinvoiceaccountdetails->acct[1].amount)
     SET uptworkitemrequest->objarray[1].updt_cnt = prupdatecnt
     EXECUTE pft_da_upt_wf_item  WITH replace("REQUEST",uptworkitemrequest), replace("REPLY",
      uptworkitemreply)
     IF ((uptworkitemreply->status_data.status != "S"))
      CALL logmsg(curprog,"Work item's amount could not updated in the pft_queue_item table",
       log_error)
      RETURN(false)
     ENDIF
     SET workitemamount = uptworkitemrequest->objarray[1].work_item_amt
     IF (iscwlfeatureenabled(null))
      SET stat = alterlist(workitementitylist->workitementity,1)
      SET workitementitylist->workitementity[1].workitemid = uptworkitemrequest->objarray[1].
      pft_queue_item_id
      CALL populateentitydetailsforworkitems(workitementitylist)
      SET stat = alterlist(publishworkfloweventrequest->eventlist,1)
      SET stat = alterlist(publishworkfloweventrequest->eventlist[1].parameters,1)
      SET publishworkfloweventrequest->eventlist[1].entitytypekey = workitementitylist->
      workitementity[1].entitytypekey
      SET publishworkfloweventrequest->eventlist[1].entityid = workitementitylist->workitementity[1].
      entityid
      SET publishworkfloweventrequest->eventlist[1].parameters[1].stringvalue = workitementitylist->
      workitementity[1].queuename
      SET publishworkfloweventrequest->eventlist[1].parameters[1].parententityid = workitementitylist
      ->workitementity[1].workitemid
      SET publishworkfloweventrequest->eventlist[1].parameters[1].parententityname = pft_queue_item
      SET publishworkfloweventrequest->eventlist[1].parameters[1].paramcd = cs24454_wfqueuename
      SET publishworkfloweventrequest->eventlist[1].eventcd = cs29322_workitemuptd
      CALL publishworkfloweventfactory(publishworkfloweventrequest)
     ENDIF
     SELECT INTO "nl:"
      FROM pft_queue_item_wf_hist pqiwh
      PLAN (pqiwh
       WHERE pqiwh.pft_queue_item_id=pftqueueitemid
        AND pqiwh.active_ind=true)
      DETAIL
       stat = alterlist(addwihistoryrequest->objarray,1), addwihistoryrequest->objarray[1].
       pftqueueitemid = pqiwh.pft_queue_item_id, addwihistoryrequest->objarray[1].workitemamount =
       workitemamount,
       addwihistoryrequest->objarray[1].transactionactioncodeflag = pqiwh.work_item_action_flag,
       addwihistoryrequest->objarray[1].entitystatuscd = pqiwh.pft_entity_status_cd
      WITH nocounter
     ;end select
     EXECUTE pft_wf_add_wi_hist_transition  WITH replace("REQUEST",addwihistoryrequest), replace(
      "REPLY",addwihistoryreply)
     IF ((addwihistoryreply->status_data.status != "S"))
      CALL logmsg(curprog,"Work item's amount could not updated in the history table",log_error)
      RETURN(false)
     ENDIF
    ELSE
     SET stat = alterlist(publishunbilledinvoiceeventrequest->eventlist,1)
     SET publishunbilledinvoiceeventrequest->eventlist[1].entitytypekey = "ACCOUNT"
     SET publishunbilledinvoiceeventrequest->eventlist[1].entityid = unbilledinvoiceaccountdetails->
     acct[1].accountid
     SET publishunbilledinvoiceeventrequest->eventlist[1].eventtypecd = cs23369_wfevent_cd
     SET publishunbilledinvoiceeventrequest->eventlist[1].eventcd = cs29322_unbillinv_cd
     SET publishunbilledinvoiceeventrequest->eventlist[1].workitemamount = (
     unbilledinvoiceaccountdetails->acct[1].amount+ modchrgamount)
    ENDIF
    IF (size(publishunbilledinvoiceeventrequest->eventlist,5) > 0)
     EXECUTE pft_publish_event  WITH replace("REQUEST",publishunbilledinvoiceeventrequest), replace(
      "REPLY",publishunbilledinvoiceeventreply)
     IF ((publishunbilledinvoiceeventreply->status_data.status != "S"))
      IF ((publishunbilledinvoiceeventreply->status_data.status="Z"))
       CALL logmsg(curprog,"Reply did not return any value to publish the Unbilled Invoice Event ",
        log_debug)
      ELSE
       CALL logmsg(curprog,"Failed to publish the Unbilled Invoice Event",log_debug)
      ENDIF
      IF (validate(debug,0)=1)
       CALL echorecord(publishunbilledinvoiceeventrequest)
       CALL echorecord(publishunbilledinvoiceeventreply)
      ENDIF
      RETURN(false)
     ENDIF
    ENDIF
    CALL logmsg(curprog,"Exiting.. publishUnbilledInvoiceWorkItem()",log_debug)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
 END ;Subroutine
 SUBROUTINE (removeregroupinghold(encntrid=f8) =i2)
   CALL logmessage("removeRegroupingHold","Entering",log_debug)
   IF ( NOT (validate(removeregroupids)))
    RECORD removeregroupids(
      1 objarray[*]
        2 pe_status_reason_id = f8
        2 active_ind = i2
        2 updt_cnt = i4
    ) WITH protect
   ENDIF
   IF ( NOT (validate(removeregroupreply)))
    RECORD removeregroupreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    )
   ENDIF
   DECLARE regroupcnt = i4 WITH protect, noconstant(0)
   IF ( NOT (validate(cs24450_regroupenc)))
    DECLARE cs24450_regroupenc = f8 WITH protect, constant(uar_get_code_by("MEANING",24450,
      "REGROUPENC"))
   ENDIF
   IF ( NOT (validate(cs24450_regroupchgev)))
    DECLARE cs24450_regroupchgev = f8 WITH protect, constant(uar_get_code_by("MEANING",24450,
      "REGROUPCHGEV"))
   ENDIF
   IF ( NOT (cs24450_regroupenc > 0.0
    AND cs24450_regroupchgev > 0.0))
    CALL logmessage("removeRegroupingHold",
     "Code values (CS24450_REGROUPENC, CS24450_REGROUPCHGEV) not set up.",log_debug)
    RETURN(true)
   ENDIF
   IF (encntrid=0.0)
    CALL logmessage("removeRegroupingHold","Received a 0.0 id.",log_debug)
    RETURN(false)
   ENDIF
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     pe_status_reason psr
    PLAN (pe
     WHERE pe.encntr_id=encntrid
      AND pe.active_ind=true)
     JOIN (psr
     WHERE psr.pft_encntr_id=pe.pft_encntr_id
      AND psr.pe_status_reason_cd IN (cs24450_regroupenc, cs24450_regroupchgev)
      AND psr.active_ind=true)
    DETAIL
     regroupcnt += 1, stat = alterlist(removeregroupids->objarray,regroupcnt), removeregroupids->
     objarray[regroupcnt].pe_status_reason_id = psr.pe_status_reason_id,
     removeregroupids->objarray[regroupcnt].active_ind = false, removeregroupids->objarray[regroupcnt
     ].updt_cnt = psr.updt_cnt
    WITH nocounter
   ;end select
   IF (size(removeregroupids->objarray,5) > 0)
    EXECUTE pft_da_upt_pe_status_reason  WITH replace("REQUEST",removeregroupids), replace("REPLY",
     removeregroupreply)
    IF ((removeregroupreply->status_data.status != "S"))
     CALL logmessage("removeRegroupingHold","pft_da_upt_pe_status_reason failed",log_debug)
     RETURN(false)
    ENDIF
   ENDIF
   CALL logmessage("removeRegroupingHold","Exiting",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (publishcodingcompleteevent(encntrid=f8) =i2)
   CALL logmessage("publishCodingCompleteEvent","Entering",log_debug)
   IF (encntrid=0.0)
    CALL logmessage("publishCodingCompleteEvent","Received a 0.0 id.",log_debug)
    RETURN(false)
   ENDIF
   IF ( NOT (validate(cs23369_wfevent)))
    DECLARE cs23369_wfevent = f8 WITH protect, constant(uar_get_code_by("MEANING",23369,"WFEVENT"))
   ENDIF
   IF ( NOT (validate(cs29322_codingcomplt)))
    DECLARE cs29322_codingcomplt = f8 WITH protect, constant(uar_get_code_by("MEANING",29322,
      "CODINGCOMPLT"))
   ENDIF
   IF ( NOT (cs23369_wfevent > 0.0
    AND cs29322_codingcomplt > 0.0))
    CALL logmessage("publishCodingCompleteEvent",
     "Code values (CS23369_WFEVENT, CS29322_CODINGCOMPLT) not set up.",log_debug)
    RETURN(true)
   ENDIF
   IF ( NOT (validate(publisheventrequest)))
    RECORD publisheventrequest(
      1 eventlist[*]
        2 entitytypekey = vc
        2 entityid = f8
        2 eventtypecd = f8
        2 eventcd = f8
        2 params[*]
          3 paramcd = f8
          3 paramvalue = f8
    ) WITH protect
   ENDIF
   IF ( NOT (validate(publisheventreply)))
    RECORD publisheventreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
   ENDIF
   SET stat = alterlist(publisheventrequest->eventlist,1)
   SET publisheventrequest->eventlist[1].entitytypekey = "ENCOUNTER"
   SET publisheventrequest->eventlist[1].entityid = encntrid
   SET publisheventrequest->eventlist[1].eventcd = cs29322_codingcomplt
   SET publisheventrequest->eventlist[1].eventtypecd = cs23369_wfevent
   EXECUTE pft_publish_event  WITH replace("REQUEST",publisheventrequest), replace("REPLY",
    publisheventreply)
   IF ((publisheventreply->status_data.status != "S"))
    CALL logmessage("publishCodingCompleteEvent","Call to pft_publish_event failed",log_debug)
    RETURN(false)
   ENDIF
   CALL logmessage("publishCodingCompleteEvent","Exiting",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (publishpftchargeevent(req=vc(ref)) =i2)
   DECLARE chgevidx = i4 WITH protect, noconstant(0)
   DECLARE loopidx = i4 WITH protect, noconstant(0)
   IF ( NOT (validate(cs13028_debit_cd)))
    DECLARE cs13028_debit_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",13028,"DR"))
   ENDIF
   IF ( NOT (cs13028_debit_cd > 0.0))
    CALL logmessage("publishPftChargeEvent","Code value CS13028_DEBIT_CD not set up.",log_debug)
    RETURN(true)
   ENDIF
   IF ( NOT (validate(chargeeventreq)))
    RECORD chargeeventreq(
      1 charges[*]
        2 chargeitemid = f8
      1 revelatechargeind = i2
    ) WITH protect
   ENDIF
   IF ( NOT (validate(chargeeventreply)))
    RECORD chargeeventreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
   ENDIF
   IF (validate(req->charges))
    IF (size(req->charges,5) > 0)
     SET stat = alterlist(chargeeventreq->charges,size(req->charges,5))
     FOR (chgevidx = 1 TO size(req->charges,5))
       SET chargeeventreq->charges[chgevidx].chargeitemid = req->charges[chgevidx].charge_item_id
     ENDFOR
    ENDIF
   ELSEIF (validate(req->charge))
    IF (size(req->charge,5) > 0)
     SET stat = alterlist(chargeeventreq->charges,size(req->charge,5))
     FOR (loopidx = 1 TO size(req->charge,5))
       IF ((req->charge[loopidx].charge_type_cd IN (cs13028_debit_cd, 0.0))
        AND (req->charge[loopidx].process_flg != 1))
        SET chgevidx += 1
        SET chargeeventreq->charges[chgevidx].chargeitemid = req->charge[loopidx].charge_item_id
       ENDIF
     ENDFOR
     SET stat = alterlist(chargeeventreq->charges,chgevidx)
    ENDIF
   ENDIF
   IF (validate(req->revelatechargeind))
    SET chargeeventreq->revelatechargeind = req->revelatechargeind
   ENDIF
   IF (size(chargeeventreq->charges,5) > 0)
    EXECUTE pft_process_charge_event  WITH replace("REQUEST",chargeeventreq), replace("REPLY",
     chargeeventreply)
    IF ((chargeeventreply->status_data.status != "S"))
     CALL logmessage("publishPftChargeEvent","Call to pft_process_charge_event failed",log_debug)
     RETURN(false)
    ENDIF
   ENDIF
   FREE RECORD chargeeventreq
   RETURN(true)
 END ;Subroutine
 CALL echo("Begin PFT_GLOBAL_PERIOD_SUBS.INC, version [689724.003]")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 RECORD getissuesreply(
   1 issues[*]
     2 issueid = f8
     2 issuecd = f8
     2 issuestatuscd = f8
     2 modelid = f8
     2 alias = vc
     2 display = vc
     2 description = vc
     2 owner[*]
       3 role = vc
       3 name = vc
       3 id = f8
       3 type = vc
     2 actioncodes
       3 approve = f8
       3 complete = f8
       3 deny = f8
       3 incomplete = f8
       3 resolve = f8
       3 resolveactioncodes[*]
         4 code = f8
     2 resolvingaction
       3 name = vc
       3 actionkey = vc
       3 adapter = vc
       3 parameters[*]
         4 name = vc
         4 paramkey = vc
         4 doublevalue = f8
         4 stringvalue = vc
         4 integervalue = i4
         4 datevalue = f8
         4 datatypeflag = vc
     2 billingholdcd = f8
     2 eventdefinition[*]
       3 eventcd = f8
       3 processingkey = vc
       3 iscancelevent = i2
       3 iscompleteevent = i2
     2 manualassignind = i2
     2 iscwfissue = i2
   1 status_data
     2 status = c1
     2 subeventstatus[1]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 ) WITH protect
 IF ( NOT (validate(cs29322_globalreview)))
  DECLARE cs29322_globalreview = f8 WITH protect, constant(getcodevalue(29322,"GLOBALREVIEW",0))
 ENDIF
 IF (validate(isissuecreatedforevent,char(128))=char(128))
  SUBROUTINE (isissuecreatedforevent(peventcd=f8,ppftencntrid=f8) =i2)
    CALL logmessage("isIssueCreatedForEvent","Entering",log_debug)
    RECORD getissuesrequest(
      1 eventcd = f8
      1 entitytype = vc
      1 entityid = f8
    ) WITH protect
    SET getissuesrequest->eventcd = peventcd
    SET getissuesrequest->entitytype = "PFTENCNTR"
    SET getissuesrequest->entityid = ppftencntrid
    EXECUTE pft_wf_get_event_issue  WITH replace("REQUEST",getissuesrequest), replace("REPLY",
     getissuesreply)
    IF ((getissuesreply->status_data.status != "S"))
     RETURN(false)
    ENDIF
    CALL logmessage("isIssueCreatedForEvent","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getchargeinfo,char(128))=char(128))
  SUBROUTINE (getchargeinfo(ppftchrgid=f8,pglobaldaysreq=vc(ref)) =i2)
    CALL logmessage("getChargeInfo","Entering",log_debug)
    IF (ppftchrgid <= 0.0)
     CALL logmessage("getChargeInfo","Invalid pftCharge Id Passed",log_debug)
     RETURN(false)
    ENDIF
    IF ( NOT (validate(cs401_modifier)))
     DECLARE cs401_modifier = f8 WITH protect, constant(getcodevalue(401,"MODIFIER",0))
    ENDIF
    IF ( NOT (validate(cs401_procedure)))
     DECLARE cs401_procedure = f8 WITH protect, constant(getcodevalue(401,"PROCEDURE",0))
    ENDIF
    IF ( NOT (validate(cs13019_bill_code)))
     DECLARE cs13019_bill_code = f8 WITH protect, constant(getcodevalue(13019,"BILL CODE",0))
    ENDIF
    DECLARE priority_seq_1 = i4 WITH protect, constant(1)
    DECLARE pftencntr_id = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM pft_charge pc,
      charge c,
      encounter e,
      charge_mod cm,
      code_value cv
     PLAN (pc
      WHERE pc.pft_charge_id=ppftchrgid
       AND ((pc.active_ind+ 0)=true))
      JOIN (c
      WHERE c.charge_item_id=pc.charge_item_id
       AND ((c.active_ind+ 0)=true))
      JOIN (e
      WHERE e.encntr_id=c.encntr_id
       AND ((e.active_ind+ 0)=true))
      JOIN (cm
      WHERE cm.charge_item_id=c.charge_item_id
       AND cm.charge_mod_type_cd=cs13019_bill_code
       AND cm.field2_id=priority_seq_1
       AND ((cm.active_ind+ 0)=true))
      JOIN (cv
      WHERE cv.code_value=cm.field1_id
       AND cv.code_set=14002
       AND cv.cdf_meaning IN ("CPT4", "HCPCS", "MODIFIER")
       AND ((cv.active_ind+ 0)=true))
     HEAD c.charge_item_id
      pglobaldaysreq->objarray[1].pft_charge_id = pc.pft_charge_id, pglobaldaysreq->objarray[1].
      encntr_id = c.encntr_id, pglobaldaysreq->objarray[1].person_id = c.person_id,
      pglobaldaysreq->objarray[1].service_dt_tm = c.service_dt_tm, pglobaldaysreq->objarray[1].
      verify_phys_id = c.verify_phys_id, pglobaldaysreq->objarray[1].organization_id = e
      .organization_id,
      pglobaldaysreq->objarray[1].active_ind = true, pftencntr_id = pc.pft_encntr_id
     DETAIL
      IF (((cv.cdf_meaning="CPT4") OR (cv.cdf_meaning="HCPCS")) )
       pglobaldaysreq->objarray[1].procsourceidentifier = cm.field6
      ELSEIF (cv.cdf_meaning="MODIFIER")
       pglobaldaysreq->objarray[1].sourceidentifier = cm.field6
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      billing_entity be
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntr_id
       AND ((pe.active_ind+ 0)=true))
      JOIN (be
      WHERE be.billing_entity_id=pe.billing_entity_id
       AND ((be.active_ind+ 0)=true))
     DETAIL
      IF (be.parent_be_id > 0.0)
       pglobaldaysreq->objarray[1].billing_entity_id = be.parent_be_id
      ELSE
       pglobaldaysreq->objarray[1].billing_entity_id = be.billing_entity_id
      ENDIF
     WITH nocounter
    ;end select
    IF (trim(pglobaldaysreq->objarray[1].sourceidentifier) != "")
     SELECT INTO "nl:"
      FROM nomenclature n
      WHERE n.nomenclature_id > 0.0
       AND n.source_identifier=trim(pglobaldaysreq->objarray[1].sourceidentifier)
       AND n.principle_type_cd=cs401_modifier
       AND ((n.active_ind+ 0)=true)
      DETAIL
       pglobaldaysreq->objarray[1].mod_nomen_id = n.nomenclature_id
      WITH nocounter
     ;end select
    ENDIF
    IF (trim(pglobaldaysreq->objarray[1].procsourceidentifier) != "")
     SELECT INTO "nl:"
      FROM nomenclature n
      WHERE n.nomenclature_id > 0.0
       AND n.source_identifier=trim(pglobaldaysreq->objarray[1].procsourceidentifier)
       AND n.principle_type_cd=cs401_procedure
       AND ((n.active_ind+ 0)=true)
      DETAIL
       pglobaldaysreq->objarray[1].proc_nomen_id = n.nomenclature_id
      WITH nocounter
     ;end select
    ENDIF
    CALL logmessage("getChargeInfo","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getglobalperiod,char(128))=char(128))
  SUBROUTINE (getglobalperiod(pglobaldaysreq=vc(ref)) =i2)
    CALL logmessage("getGlobalPeriod","Entering",log_debug)
    IF (size(pglobaldaysreq->objarray,5)=0)
     CALL logmessage("getGlobalPeriod","pGlobalDaysReq structure is empty",log_debug)
     RETURN(false)
    ENDIF
    DECLARE mod_txtparser = vc WITH protect
    DECLARE source_txtparser = vc WITH protect
    DECLARE baseglobalcd = f8 WITH protect, noconstant(0.0)
    DECLARE isbaservu = i2 WITH protect, noconstant(true)
    IF ((pglobaldaysreq->objarray[1].procsourceidentifier=""))
     SET source_txtparser = build(source_txtparser,"rvu.source_txt = null")
    ELSE
     SET source_txtparser = build(source_txtparser,
      "rvu.source_txt = pGlobalDaysReq->objarray[1].procSourceIdentifier")
    ENDIF
    IF ((pglobaldaysreq->objarray[1].sourceidentifier=""))
     SET mod_txtparser = build(mod_txtparser,"rvu.mod_txt = null")
    ELSE
     SET mod_txtparser = build(mod_txtparser,
      "rvu.mod_txt = pGlobalDaysReq->objarray[1].sourceIdentifier")
    ENDIF
    SELECT INTO "nl:"
     FROM pft_rvu_content prc
     WHERE (prc.source_txt=pglobaldaysreq->objarray[1].procsourceidentifier)
      AND prc.mod_txt=null
      AND prc.active_ind=true
     DETAIL
      baseglobalcd = prc.global_surgery_cd
     WITH nocounter
    ;end select
    IF (checkdic("PFT_RVU_CONTENT.SOURCE_TXT","A",0)=2
     AND checkdic("PFT_RVU_CONTENT.MOD_TXT","A",0)=2)
     SELECT INTO "nl:"
      FROM pft_rvu_content rvu
      WHERE parser(source_txtparser)
       AND (rvu.billing_entity_id=pglobaldaysreq->objarray[1].billing_entity_id)
       AND rvu.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime)
       AND rvu.end_effective_dt_tm >= cnvtdatetime(curdate,curtime)
       AND ((rvu.active_ind+ 0)=true)
      DETAIL
       IF ((rvu.mod_txt=pglobaldaysreq->objarray[1].sourceidentifier)
        AND isbaservu=true)
        pglobaldaysreq->objarray[1].global_days = cnvtint(uar_get_code_meaning(rvu.global_surgery_cd)
         ), pglobaldaysreq->objarray[1].global_days_end_dt_tm = cnvtlookahead(build(pglobaldaysreq->
          objarray[1].global_days,",D"),pglobaldaysreq->objarray[1].service_dt_tm), pglobaldaysreq->
        objarray[1].global_days_end_dt_tm = cnvtdatetime(concat(format(pglobaldaysreq->objarray[1].
           global_days_end_dt_tm,"DD-MMM-YYYY;;DATE")," 23:59:59.00")),
        isbaservu = false
       ELSEIF (((rvu.mod_txt=null) OR ((rvu.mod_txt != pglobaldaysreq->objarray[1].sourceidentifier)
       ))
        AND isbaservu=true)
        pglobaldaysreq->objarray[1].global_days = cnvtint(uar_get_code_meaning(baseglobalcd)),
        pglobaldaysreq->objarray[1].global_days_end_dt_tm = cnvtlookahead(build(pglobaldaysreq->
          objarray[1].global_days,",D"),pglobaldaysreq->objarray[1].service_dt_tm), pglobaldaysreq->
        objarray[1].global_days_end_dt_tm = cnvtdatetime(concat(format(pglobaldaysreq->objarray[1].
           global_days_end_dt_tm,"DD-MMM-YYYY;;DATE")," 23:59:59.00"))
       ENDIF
      WITH nocounter
     ;end select
    ELSE
     SELECT INTO "nl:"
      FROM pft_rvu_content rvu
      WHERE (rvu.proc_nomen_id=pglobaldaysreq->objarray[1].proc_nomen_id)
       AND (rvu.mod_nomen_id=pglobaldaysreq->objarray[1].mod_nomen_id)
       AND (rvu.billing_entity_id=pglobaldaysreq->objarray[1].billing_entity_id)
       AND rvu.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime)
       AND rvu.end_effective_dt_tm >= cnvtdatetime(curdate,curtime)
       AND ((rvu.active_ind+ 0)=true)
      DETAIL
       pglobaldaysreq->objarray[1].global_days = cnvtint(uar_get_code_meaning(rvu.global_surgery_cd)),
       pglobaldaysreq->objarray[1].global_days_end_dt_tm = cnvtlookahead(build(pglobaldaysreq->
         objarray[1].global_days,",D"),pglobaldaysreq->objarray[1].service_dt_tm), pglobaldaysreq->
       objarray[1].global_days_end_dt_tm = cnvtdatetime(concat(format(pglobaldaysreq->objarray[1].
          global_days_end_dt_tm,"DD-MMM-YYYY;;DATE")," 23:59:59.00"))
      WITH nocounter
     ;end select
    ENDIF
    IF (curqual=0)
     RETURN(false)
    ENDIF
    CALL logmessage("getGlobalPeriod","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(createglobaldaysactivitydata,char(128))=char(128))
  SUBROUTINE (createglobaldaysactivitydata(pglobaldaysaddrequest=vc(ref),pglobaldaysaddreply=vc(ref)
   ) =i2)
    CALL logmessage("createGlobalDaysActivityData","Entering",log_debug)
    IF (size(pglobaldaysaddrequest->objarray,5)=0)
     CALL logmessage("createGlobalDaysActivityData","pGlobaldaysAddRequest structure is empty",
      log_debug)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_charge_global_days pg
     WHERE (pg.pft_charge_id=pglobaldaysaddrequest->objarray[1].pft_charge_id)
      AND (pg.person_id=pglobaldaysaddrequest->objarray[1].person_id)
      AND (pg.organization_id=pglobaldaysaddrequest->objarray[1].organization_id)
      AND (pg.encntr_id=pglobaldaysaddrequest->objarray[1].encntr_id)
      AND (pg.proc_nomen_id=pglobaldaysaddrequest->objarray[1].proc_nomen_id)
      AND (pg.mod_nomen_id=pglobaldaysaddrequest->objarray[1].mod_nomen_id)
      AND pg.service_dt_tm=cnvtdatetime(pglobaldaysaddrequest->objarray[1].service_dt_tm)
      AND ((pg.active_ind+ 0)=true)
    ;end select
    IF (curqual=0)
     EXECUTE pft_da_add_pft_chrg_global_day  WITH replace("REQUEST",pglobaldaysaddrequest), replace(
      "REPLY",pglobaldaysaddreply)
     IF ((pglobaldaysaddreply->status_data.status != "S"))
      CALL logmessage("createGlobalDaysActivityData",
       "pft_da_add_pft_chrg_global_day did not return success",log_debug)
      RETURN(false)
     ENDIF
    ELSE
     CALL logmessage("createGlobalDaysActivityData",
      "Activity not created since Charge Information already available",log_debug)
     RETURN(false)
    ENDIF
    CALL logmessage("createGlobalDaysActivityData","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(verifypersonregisteredforglobalpackage,char(128))=char(128))
  SUBROUTINE (verifypersonregisteredforglobalpackage(ppftchrgid=f8) =i2)
    CALL logmessage("verifyPersonRegisteredforGlobalPackage","Entering",log_debug)
    IF (ppftchrgid <= 0.0)
     CALL logmessage("verifyPersonRegisteredforGlobalPackage","Invalid pftCharge Id Passed",log_debug
      )
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_charge pc,
      charge c,
      encounter e,
      pft_charge_global_days pg
     PLAN (pc
      WHERE pc.pft_charge_id=ppftchrgid
       AND ((pc.active_ind+ 0)=true))
      JOIN (c
      WHERE c.charge_item_id=pc.charge_item_id
       AND ((c.active_ind+ 0)=true))
      JOIN (e
      WHERE e.encntr_id=c.encntr_id
       AND ((e.active_ind+ 0)=true))
      JOIN (pg
      WHERE pg.person_id=c.person_id
       AND pg.organization_id=e.organization_id
       AND pg.encntr_id != c.encntr_id
       AND ((pg.active_ind+ 0)=true)
       AND pg.service_dt_tm <= c.service_dt_tm
       AND pg.global_days_end_dt_tm >= c.service_dt_tm
       AND pg.global_days > 0)
    ;end select
    IF (curqual=0)
     RETURN(false)
    ENDIF
    CALL logmessage("verifyPersonRegisteredforGlobalPackage","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(verifyencounterforglobalpackage,char(128))=char(128))
  SUBROUTINE (verifyencounterforglobalpackage(pglobaldaysreq=vc(ref)) =i2)
    CALL logmessage("verifyEncounterforGlobalPackage","Entering",log_debug)
    IF (size(pglobaldaysreq->objarray,5)=0)
     CALL logmessage("verifyEncounterforGlobalPackage","pGlobalDaysReq structure is empty",log_debug)
     RETURN(false)
    ENDIF
    DECLARE iencntrcnt = i4 WITH protect, noconstant(0)
    IF ((pglobaldaysreq->objarray[1].global_days > 0))
     SELECT INTO "nl:"
      FROM encounter e,
       pft_encntr pe
      PLAN (e
       WHERE (e.person_id=pglobaldaysreq->objarray[1].person_id)
        AND (e.organization_id=pglobaldaysreq->objarray[1].organization_id)
        AND (e.encntr_id != pglobaldaysreq->objarray[1].encntr_id)
        AND ((e.active_ind+ 0)=true)
        AND e.reg_dt_tm >= cnvtdatetime(pglobaldaysreq->objarray[1].service_dt_tm)
        AND e.reg_dt_tm <= cnvtdatetime(pglobaldaysreq->objarray[1].global_days_end_dt_tm))
       JOIN (pe
       WHERE pe.encntr_id=e.encntr_id
        AND ((pe.active_ind+ 0)=true))
      DETAIL
       iencntrcnt += 1, stat = alterlist(pglobaldaysreq->objarray[1].pft_encntrs,iencntrcnt),
       pglobaldaysreq->objarray[1].pft_encntrs[iencntrcnt].pftencntr_id = pe.pft_encntr_id
      WITH nocoutner
     ;end select
     IF (curqual=0)
      CALL logmessage("verifyEncounterforGlobalPackage","There are no encounters qualified",log_debug
       )
      RETURN(false)
     ENDIF
    ELSE
     CALL logmessage("verifyEncounterforGlobalPackage","Global days value is zero",log_debug)
     RETURN(false)
    ENDIF
    CALL logmessage("verifyEncounterforGlobalPackage","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(verifywfqueueexists,char(128))=char(128))
  SUBROUTINE (verifywfqueueexists(pgetissuesreply=vc(ref),ppftencntrid=f8) =null)
    CALL logmessage("verifyWFQueueExists","Entering",log_debug)
    IF (size(pgetissuesreply->issues,5)=0)
     CALL logmessage("verifyWFQueueExists","pGetIssuesReply structure is empty",log_debug)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = value(size(pgetissuesreply->issues,5))),
      pft_queue_item pq
     PLAN (d1)
      JOIN (pq
      WHERE pq.pft_encntr_id=ppftencntrid
       AND (pq.item_status_cd=pgetissuesreply->issues[d1.seq].issuecd)
       AND ((pq.active_ind+ 0)=true))
    ;end select
    IF (curqual=0)
     RETURN(false)
    ENDIF
    CALL logmessage("verifyWFQueueExists","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(publishglobalperiodqueueevent,char(128))=char(128))
  SUBROUTINE (publishglobalperiodqueueevent(ppftencntrid=f8) =i2)
    CALL logmessage("publishGlobalPeriodQueueEvent","Entering",log_debug)
    IF (ppftencntrid <= 0.0)
     CALL logmessage("publishGlobalPeriodQueueEvent","Invalid pftEncounter Id Passed",log_debug)
     RETURN(false)
    ENDIF
    RECORD publisheventrequest(
      1 eventlist[*]
        2 entitytypekey = vc
        2 entityid = f8
        2 eventtypecd = f8
        2 eventcd = f8
        2 params[*]
          3 paramcd = f8
          3 paramvalue = f8
    ) WITH protect
    RECORD publisheventreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF ( NOT (validate(cs23369_wfevent)))
     DECLARE cs23369_wfevent = f8 WITH protect, noconstant(getcodevalue(23369,"WFEVENT",1))
    ENDIF
    SET stat = alterlist(publisheventrequest->eventlist,1)
    SET publisheventrequest->eventlist[1].entitytypekey = "PFTENCNTR"
    SET publisheventrequest->eventlist[1].entityid = ppftencntrid
    SET publisheventrequest->eventlist[1].eventcd = cs29322_globalreview
    SET publisheventrequest->eventlist[1].eventtypecd = cs23369_wfevent
    EXECUTE pft_publish_event  WITH replace("REQUEST",publisheventrequest), replace("REPLY",
     publisheventreply)
    IF ((publisheventreply->status_data.status != "S"))
     RETURN(false)
    ENDIF
    CALL logmessage("publishGlobalPeriodQueueEvent","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(evaluatechargeforglobalpackage,char(128))=char(128))
  SUBROUTINE (evaluatechargeforglobalpackage(ppftchrgid=f8,pglobaldaysreq=vc(ref)) =i2)
    CALL logmessage("evaluateChargeforGlobalPackage","Entering",log_debug)
    IF ( NOT (getchargeinfo(ppftchrgid,pglobaldaysreq)))
     CALL logmessage("evaluateChargeforGlobalPackage","getChargeInfo did not return success",
      log_debug)
     RETURN(false)
    ENDIF
    IF ( NOT (getglobalperiod(pglobaldaysreq)))
     CALL logmessage("evaluateChargeforGlobalPackage","getGlobalPeriod did not return success",
      log_debug)
     RETURN(false)
    ENDIF
    CALL logmessage("evaluateChargeforGlobalPackage","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(performglobalpackageevaluation,char(128))=char(128))
  SUBROUTINE (performglobalpackageevaluation(ppftchrgid=f8,ppftencntrid=f8) =i2)
    CALL logmessage("performGlobalPackageEvaluation","Entering",log_debug)
    IF (ppftchrgid <= 0.0)
     CALL logmessage("performGlobalPackageEvaluation","Invalid pftCharge Id Passed",log_debug)
     RETURN(false)
    ENDIF
    IF (ppftencntrid <= 0.0)
     CALL logmessage("performGlobalPackageEvaluation","Invalid pftEncounter Id Passed",log_debug)
     RETURN(false)
    ENDIF
    RECORD globaldaysreq(
      1 objarray[1]
        2 pft_charge_global_days_id = f8
        2 person_id = f8
        2 organization_id = f8
        2 billing_entity_id = f8
        2 encntr_id = f8
        2 pft_encntrs[*]
          3 pftencntr_id = f8
        2 pft_charge_id = f8
        2 proc_nomen_id = f8
        2 mod_nomen_id = f8
        2 procsourceidentifier = vc
        2 sourceidentifier = vc
        2 verify_phys_id = f8
        2 global_days = i4
        2 service_dt_tm = dq8
        2 service_dt_tm_null = i2
        2 global_days_end_dt_tm = dq8
        2 active_ind = i2
        2 updt_cnt = i4
    ) WITH protect
    RECORD globaldaysrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    DECLARE ipftencntrent = i4 WITH protect, noconstant(0)
    IF (isissuecreatedforevent(cs29322_globalreview,ppftencntrid))
     IF (verifypersonregisteredforglobalpackage(ppftchrgid))
      CALL publishglobalperiodqueueevent(ppftencntrid)
     ENDIF
     IF (evaluatechargeforglobalpackage(ppftchrgid,globaldaysreq))
      CALL createglobaldaysactivitydata(globaldaysreq,globaldaysrep)
      IF (verifyencounterforglobalpackage(globaldaysreq))
       FOR (ipftencntrent = 1 TO size(globaldaysreq->objarray[1].pft_encntrs,5))
         CALL publishglobalperiodqueueevent(globaldaysreq->objarray[1].pft_encntrs[ipftencntrent].
          pftencntr_id)
       ENDFOR
      ENDIF
     ENDIF
    ENDIF
    CALL logmessage("performGlobalPackageEvaluation","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(inactivateglobaldaysactivitydata,char(128))=char(128))
  SUBROUTINE (inactivateglobaldaysactivitydata(pparentchargeid=f8) =i2)
    CALL logmessage("inActivateGlobalDaysActivityData","Entering",log_debug)
    IF (pparentchargeid <= 0.0)
     CALL logmessage("inActivateGlobalDaysActivityData","Invalid Charge Id Passed",log_debug)
     RETURN(false)
    ENDIF
    RECORD globaldaysuptreq(
      1 objarray[1]
        2 pft_charge_global_days_id = f8
        2 active_ind = i2
        2 updt_cnt = f8
    ) WITH protect
    RECORD globaldaysuptrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM pft_charge pc,
      pft_charge_global_days pg
     PLAN (pc
      WHERE pc.charge_item_id=pparentchargeid
       AND ((pc.active_ind+ 0)=true))
      JOIN (pg
      WHERE pg.pft_charge_id=pc.pft_charge_id
       AND ((pg.active_ind+ 0)=true))
     DETAIL
      globaldaysuptreq->objarray[1].pft_charge_global_days_id = pg.pft_charge_global_days_id,
      globaldaysuptreq->objarray[1].active_ind = false, globaldaysuptreq->objarray[1].updt_cnt = - (
      99999)
     WITH nocounter
    ;end select
    IF (curqual > 0)
     EXECUTE pft_da_upt_pft_chrg_global_day  WITH replace("REQUEST",globaldaysuptreq), replace(
      "REPLY",globaldaysuptrep)
     IF ((globaldaysuptrep->status_data.status != "S"))
      CALL logmessage("inActivateGlobalDaysActivityData",
       "pft_da_upt_pft_chrg_global_day did not return success",log_debug)
      RETURN(false)
     ENDIF
    ELSE
     CALL logmessage("inActivateGlobalDaysActivityData","Activity Data Not Found",log_debug)
     RETURN(false)
    ENDIF
    CALL logmessage("inActivateGlobalDaysActivityData","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(performglobalpackageevaluationformultiplechrg,char(128))=char(128))
  SUBROUTINE (performglobalpackageevaluationformultiplechrg(prcharge=vc(ref)) =i2)
    CALL logmessage("performGlobalPackageEvaluationForMultipleChrg","entering",log_debug)
    IF (validate(prcharge->charge_mod_qual,0)=0)
     CALL logmessage("performGlobalPackageEvaluationForMultipleChrg",
      "the record item charge_qual in prCharge does not exist: ",log_error)
     RETURN(false)
    ENDIF
    DECLARE chrgcnt = i4 WITH protect, noconstant(0)
    DECLARE chrgmodcnt = i4 WITH protect, noconstant(0)
    DECLARE chrgidx = i4 WITH protect, noconstant(0)
    DECLARE isissuecreated = i2 WITH protect, noconstant(0)
    IF ( NOT (validate(cs401_modifier)))
     DECLARE cs401_modifier = f8 WITH protect, constant(getcodevalue(401,"MODIFIER",0))
    ENDIF
    IF ( NOT (validate(cs401_procedure)))
     DECLARE cs401_procedure = f8 WITH protect, constant(getcodevalue(401,"PROCEDURE",0))
    ENDIF
    IF ( NOT (validate(cs13019_bill_code)))
     DECLARE cs13019_bill_code = f8 WITH protect, constant(getcodevalue(13019,"BILL CODE",0))
    ENDIF
    DECLARE priority_seq_1 = i4 WITH protect, constant(1)
    DECLARE pftencntr_id = f8 WITH protect, noconstant(0.0)
    RECORD pftcharge(
      1 objarray[*]
        2 pft_charge_id = f8
        2 pft_encntr_id = f8
        2 charge_mod[*]
          3 charge_item_id = f8
          3 field1_id = f8
          3 field6 = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = value(size(prcharge->charge_mod,5))),
      pft_charge pc
     PLAN (d1)
      JOIN (pc
      WHERE (pc.charge_item_id=prcharge->charge_mod[d1.seq].charge_item_id))
     ORDER BY pc.charge_item_id
     HEAD pc.charge_item_id
      chrgcnt += 1, chrgmodcnt = 0, stat = alterlist(pftcharge->objarray,chrgcnt),
      pftcharge->objarray[chrgcnt].pft_charge_id = pc.pft_charge_id, pftcharge->objarray[chrgcnt].
      pft_encntr_id = pc.pft_encntr_id
     DETAIL
      chrgmodcnt += 1, stat = alterlist(pftcharge->objarray[chrgcnt].charge_mod,chrgmodcnt),
      pftcharge->objarray[chrgcnt].charge_mod[chrgmodcnt].charge_item_id = prcharge->charge_mod[d1
      .seq].charge_item_id,
      pftcharge->objarray[chrgcnt].charge_mod[chrgmodcnt].field1_id = prcharge->charge_mod[d1.seq].
      field1_id, pftcharge->objarray[chrgcnt].charge_mod[chrgmodcnt].field6 = prcharge->charge_mod[d1
      .seq].field6
     WITH nocounter
    ;end select
    CALL echorecord(pftcharge)
    RECORD globaldaysreq(
      1 objarray[1]
        2 pft_charge_global_days_id = f8
        2 person_id = f8
        2 organization_id = f8
        2 billing_entity_id = f8
        2 encntr_id = f8
        2 pft_encntrs[*]
          3 pftencntr_id = f8
        2 pft_charge_id = f8
        2 proc_nomen_id = f8
        2 mod_nomen_id = f8
        2 procsourceidentifier = vc
        2 sourceidentifier = vc
        2 verify_phys_id = f8
        2 global_days = i4
        2 service_dt_tm = dq8
        2 service_dt_tm_null = i2
        2 global_days_end_dt_tm = dq8
        2 active_ind = i2
        2 updt_cnt = i4
    ) WITH protect
    RECORD globaldaysrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    FOR (chrgidx = 1 TO chrgcnt)
      SET stat = initrec(globaldaysreq)
      SET stat = initrec(globaldaysrep)
      IF (isissuecreatedforevent(cs29322_globalreview,pftcharge->objarray[chrgidx].pft_encntr_id))
       IF (verifypersonregisteredforglobalpackage(pftcharge->objarray[chrgidx].pft_charge_id))
        CALL publishglobalperiodqueueevent(pftcharge->objarray[chrgidx].pft_encntr_id)
       ENDIF
       SELECT INTO "nl:"
        FROM (dummyt d1  WITH seq = value(size(pftcharge->objarray[chrgidx].charge_mod,5))),
         pft_charge pc,
         charge c,
         encounter e,
         code_value cv
        PLAN (d1)
         JOIN (pc
         WHERE (pc.charge_item_id=pftcharge->objarray[chrgidx].charge_mod[d1.seq].charge_item_id)
          AND ((pc.active_ind+ 0)=true))
         JOIN (c
         WHERE c.charge_item_id=pc.charge_item_id
          AND ((c.active_ind+ 0)=true))
         JOIN (e
         WHERE e.encntr_id=c.encntr_id
          AND ((e.active_ind+ 0)=true))
         JOIN (cv
         WHERE (cv.code_value=pftcharge->objarray[chrgidx].charge_mod[d1.seq].field1_id)
          AND cv.code_set=14002
          AND cv.cdf_meaning IN ("CPT4", "HCPCS", "MODIFIER")
          AND ((cv.active_ind+ 0)=true))
        ORDER BY c.charge_item_id
        HEAD c.charge_item_id
         globaldaysreq->objarray[1].pft_charge_id = pc.pft_charge_id, globaldaysreq->objarray[1].
         encntr_id = c.encntr_id, globaldaysreq->objarray[1].person_id = c.person_id,
         globaldaysreq->objarray[1].service_dt_tm = c.service_dt_tm, globaldaysreq->objarray[1].
         verify_phys_id = c.verify_phys_id, globaldaysreq->objarray[1].organization_id = e
         .organization_id,
         globaldaysreq->objarray[1].active_ind = true, pftencntr_id = pc.pft_encntr_id
        DETAIL
         IF (((cv.cdf_meaning="CPT4") OR (cv.cdf_meaning="HCPCS")) )
          globaldaysreq->objarray[1].procsourceidentifier = pftcharge->objarray[chrgidx].charge_mod[
          d1.seq].field6
         ELSEIF (cv.cdf_meaning="MODIFIER")
          globaldaysreq->objarray[1].sourceidentifier = pftcharge->objarray[chrgidx].charge_mod[d1
          .seq].field6
         ENDIF
        WITH nocounter
       ;end select
       SELECT INTO "nl:"
        FROM pft_encntr pe,
         billing_entity be
        PLAN (pe
         WHERE pe.pft_encntr_id=pftencntr_id
          AND ((pe.active_ind+ 0)=true))
         JOIN (be
         WHERE be.billing_entity_id=pe.billing_entity_id
          AND ((be.active_ind+ 0)=true))
        DETAIL
         IF (be.parent_be_id > 0.0)
          globaldaysreq->objarray[1].billing_entity_id = be.parent_be_id
         ELSE
          globaldaysreq->objarray[1].billing_entity_id = be.billing_entity_id
         ENDIF
        WITH nocounter
       ;end select
       IF (trim(globaldaysreq->objarray[1].sourceidentifier) != "")
        SELECT INTO "nl:"
         FROM nomenclature n
         WHERE n.nomenclature_id > 0.0
          AND n.source_identifier=trim(globaldaysreq->objarray[1].sourceidentifier)
          AND n.principle_type_cd=cs401_modifier
          AND ((n.active_ind+ 0)=true)
         DETAIL
          globaldaysreq->objarray[1].mod_nomen_id = n.nomenclature_id
         WITH nocounter
        ;end select
       ENDIF
       IF (trim(globaldaysreq->objarray[1].procsourceidentifier) != "")
        SELECT INTO "nl:"
         FROM nomenclature n
         WHERE n.nomenclature_id > 0.0
          AND n.source_identifier=trim(globaldaysreq->objarray[1].procsourceidentifier)
          AND n.principle_type_cd=cs401_procedure
          AND ((n.active_ind+ 0)=true)
         DETAIL
          globaldaysreq->objarray[1].proc_nomen_id = n.nomenclature_id
         WITH nocounter
        ;end select
       ENDIF
       IF ( NOT (getglobalperiod(globaldaysreq)))
        CALL logmessage("evaluateChargeforGlobalPackage","getGlobalPeriod did not return success",
         log_debug)
        RETURN(false)
       ENDIF
       CALL createglobaldaysactivitydata(globaldaysreq,globaldaysrep)
       IF (verifyencounterforglobalpackage(globaldaysreq))
        FOR (ipftencntrent = 1 TO size(globaldaysreq->objarray[1].pft_encntrs,5))
          CALL publishglobalperiodqueueevent(globaldaysreq->objarray[1].pft_encntrs[ipftencntrent].
           pftencntr_id)
        ENDFOR
       ENDIF
      ENDIF
    ENDFOR
    CALL logmessage("performGlobalPackageEvaluationForMultipleChrg","exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(inactivateglobaldaysformultiplechrg,char(128))=char(128))
  SUBROUTINE (inactivateglobaldaysformultiplechrg(prcharge=vc(ref)) =null)
    CALL logmessage("inActivateGlobalDaysForMultipleChrg","entering",log_debug)
    IF (validate(prcharge->charge_mod_qual,0)=0)
     CALL logmessage("inactivateglobaldaysformultiplechrg",
      "the record item charge_qual in prCharge does not exist: ",log_error)
     RETURN(false)
    ENDIF
    DECLARE chrgcnt = i4 WITH protect, noconstant(0)
    DECLARE chrgidx = i4 WITH protect, noconstant(0)
    IF ((prcharge->charge_mod_qual <= 0))
     CALL logmessage("inactivateglobaldaysformultiplechrg",
      "there is no charge to perform inactivation: ",log_error)
     RETURN(false)
    ENDIF
    IF ( NOT (validate(cs401_modifier)))
     DECLARE cs401_modifier = f8 WITH protect, constant(getcodevalue(401,"MODIFIER",0))
    ENDIF
    IF ( NOT (validate(cs401_procedure)))
     DECLARE cs401_procedure = f8 WITH protect, constant(getcodevalue(401,"PROCEDURE",0))
    ENDIF
    RECORD globaldaysuptreqtemp(
      1 objarray[*]
        2 pft_charge_id = f8
        2 mod_nomen_id = f8
        2 sourceidentifier = vc
        2 proc_nomen_id = f8
        2 procsourceidentifier = vc
    ) WITH protect
    RECORD globaldaysuptreq(
      1 objarray[*]
        2 pft_charge_global_days_id = f8
        2 active_ind = i2
        2 updt_cnt = f8
    ) WITH protect
    RECORD globaldaysuptrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = value(size(prcharge->charge_mod,5))),
      pft_charge pc,
      charge_mod cm,
      code_value cv
     PLAN (d1)
      JOIN (pc
      WHERE (pc.charge_item_id=prcharge->charge_mod[d1.seq].charge_item_id)
       AND ((pc.active_ind+ 0)=true))
      JOIN (cm
      WHERE (cm.charge_mod_id=prcharge->charge_mod[d1.seq].charge_mod_id))
      JOIN (cv
      WHERE cv.code_value=cm.field1_id
       AND cv.code_set=14002
       AND cv.cdf_meaning IN ("CPT4", "HCPCS", "MODIFIER")
       AND ((cv.active_ind+ 0)=true))
     ORDER BY pc.charge_item_id
     HEAD pc.charge_item_id
      chrgcnt += 1, stat = alterlist(globaldaysuptreqtemp->objarray,chrgcnt), globaldaysuptreqtemp->
      objarray[chrgcnt].pft_charge_id = pc.pft_charge_id
     DETAIL
      IF (((cv.cdf_meaning="CPT4") OR (cv.cdf_meaning="HCPCS")) )
       globaldaysuptreqtemp->objarray[chrgcnt].procsourceidentifier = cm.field6
      ELSEIF (cv.cdf_meaning="MODIFIER")
       globaldaysuptreqtemp->objarray[chrgcnt].sourceidentifier = cm.field6
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = value(size(globaldaysuptreqtemp->objarray,5))),
      nomenclature n
     PLAN (d1)
      JOIN (n
      WHERE n.nomenclature_id > 0.0
       AND n.source_identifier=trim(globaldaysuptreqtemp->objarray[d1.seq].sourceidentifier)
       AND n.principle_type_cd=cs401_modifier
       AND ((n.active_ind+ 0)=true))
     DETAIL
      globaldaysuptreqtemp->objarray[d1.seq].mod_nomen_id = n.nomenclature_id
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = value(size(globaldaysuptreqtemp->objarray,5))),
      nomenclature n
     PLAN (d1)
      JOIN (n
      WHERE n.nomenclature_id > 0.0
       AND n.source_identifier=trim(globaldaysuptreqtemp->objarray[d1.seq].procsourceidentifier)
       AND n.principle_type_cd=cs401_procedure
       AND ((n.active_ind+ 0)=true))
     DETAIL
      globaldaysuptreqtemp->objarray[d1.seq].proc_nomen_id = n.nomenclature_id
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = value(size(globaldaysuptreqtemp->objarray,5))),
      pft_charge_global_days pg
     PLAN (d1)
      JOIN (pg
      WHERE (pg.pft_charge_id=globaldaysuptreqtemp->objarray[d1.seq].pft_charge_id)
       AND (pg.mod_nomen_id=globaldaysuptreqtemp->objarray[d1.seq].mod_nomen_id)
       AND (pg.proc_nomen_id=globaldaysuptreqtemp->objarray[d1.seq].proc_nomen_id)
       AND ((pg.active_ind+ 0)=true))
     DETAIL
      chrgidx += 1, stat = alterlist(globaldaysuptreq->objarray,chrgidx), globaldaysuptreq->objarray[
      chrgidx].pft_charge_global_days_id = pg.pft_charge_global_days_id,
      globaldaysuptreq->objarray[chrgidx].active_ind = false, globaldaysuptreq->objarray[chrgidx].
      updt_cnt = - (99999)
     WITH nocounter
    ;end select
    IF (chrgidx > 0)
     EXECUTE pft_da_upt_pft_chrg_global_day  WITH replace("REQUEST",globaldaysuptreq), replace(
      "REPLY",globaldaysuptrep)
     IF ((globaldaysuptrep->status_data.status != "S"))
      CALL logmessage("inActivateGlobalDaysActivityData",
       "pft_da_upt_pft_chrg_global_day did not return success",log_debug)
      RETURN(false)
     ENDIF
    ELSE
     CALL logmessage("inActivateGlobalDaysForMultipleChrg","Activity Data Not Found",log_debug)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo("End PFT_GLOBAL_PERIOD_SUBS.INC")
 IF ( NOT (validate(cs13028_debit_cd)))
  DECLARE cs13028_debit_cd = f8 WITH protect, constant(getcodevalue(13028,"DR",1))
 ENDIF
 IF ( NOT (validate(cs13028_credit_cd)))
  DECLARE cs13028_credit_cd = f8 WITH protect, constant(getcodevalue(13028,"CR",1))
 ENDIF
 IF ( NOT (validate(cs13028_no_charge_cd)))
  DECLARE cs13028_no_charge_cd = f8 WITH protect, constant(getcodevalue(13028,"NO CHARGE",1))
 ENDIF
 IF ( NOT (validate(cs106_person_mgmt_cd)))
  DECLARE cs106_person_mgmt_cd = f8 WITH protect, constant(getcodevalue(106,"PM",1))
 ENDIF
 IF ( NOT (validate(cs13019_bill_code_cd)))
  DECLARE cs13019_bill_code_cd = f8 WITH protect, constant(getcodevalue(13019,"BILL CODE",1))
 ENDIF
 IF ( NOT (validate(cs354_selfpay_cd)))
  DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",1))
 ENDIF
 IF ( NOT (validate(cs20849_patient_cd)))
  DECLARE cs20849_patient_cd = f8 WITH protect, constant(getcodevalue(20849,"PATIENT",1))
 ENDIF
 IF ( NOT (validate(cs18736_ar_cd)))
  DECLARE cs18736_ar_cd = f8 WITH protect, constant(getcodevalue(18736,"A/R",1))
 ENDIF
 IF ( NOT (validate(cs20549_discount_adj_cd)))
  DECLARE cs20549_discount_adj_cd = f8 WITH protect, constant(getcodevalue(20549,"DISCOUNT ADJ",1))
 ENDIF
 IF ( NOT (validate(cs18937_disc_adj_cd)))
  DECLARE cs18937_disc_adj_cd = f8 WITH protect, constant(getcodevalue(18937,"DISC ADJ",1))
 ENDIF
 IF ( NOT (validate(cs25753_reversal_cd)))
  DECLARE cs25753_reversal_cd = f8 WITH protect, constant(getcodevalue(25753,"REVERSAL",1))
 ENDIF
 IF ( NOT (validate(cs18649_adjust_cd)))
  DECLARE cs18649_adjust_cd = f8 WITH protect, constant(getcodevalue(18649,"ADJUST",1))
 ENDIF
 IF ( NOT (validate(cs24451_invalid_cd)))
  DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
 ENDIF
 IF ( NOT (validate(cs24451_cancelled_cd)))
  DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
 ENDIF
 IF ( NOT (validate(cs69_recurring_class_cd)))
  DECLARE cs69_recurring_class_cd = f8 WITH protect, constant(getcodevalue(69,"RECURRING",0))
 ENDIF
 IF ( NOT (validate(cs13019_billencntr_cd)))
  DECLARE cs13019_billencntr_cd = f8 WITH protect, constant(getcodevalue(13019,"BILLENCNTR",0))
 ENDIF
 IF ( NOT (validate(cs13019_other_cd)))
  DECLARE cs13019_other_cd = f8 WITH protect, constant(getcodevalue(13019,"OTHER",0))
 ENDIF
 IF ( NOT (validate(flag_pending)))
  DECLARE flag_pending = i4 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(flag_suspended)))
  DECLARE flag_suspended = i4 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(flag_review)))
  DECLARE flag_review = i4 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(flag_on_hold)))
  DECLARE flag_on_hold = i4 WITH protect, constant(3)
 ENDIF
 IF ( NOT (validate(flag_manual)))
  DECLARE flag_manual = i4 WITH protect, constant(4)
 ENDIF
 IF ( NOT (validate(flag_abn_required)))
  DECLARE flag_abn_required = i4 WITH protect, constant(8)
 ENDIF
 IF ( NOT (validate(flag_offset)))
  DECLARE flag_offset = i4 WITH protect, constant(10)
 ENDIF
 IF ( NOT (validate(flag_posted)))
  DECLARE flag_posted = i4 WITH protect, constant(100)
 ENDIF
 IF ( NOT (validate(flag_interfaced)))
  DECLARE flag_interfaced = i4 WITH protect, constant(999)
 ENDIF
 IF ( NOT (validate(chrg_type_credit)))
  DECLARE chrg_type_credit = i4 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(chrg_type_debit)))
  DECLARE chrg_type_debit = i4 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(finfacilitycd)))
  DECLARE finfacilitycd = f8 WITH protect, noconstant(0)
 ENDIF
 IF ( NOT (validate(regfacilitycd)))
  DECLARE regfacilitycd = f8 WITH protect, noconstant(0)
 ENDIF
 DECLARE repostpmchargesind = i2 WITH protect, noconstant(false)
 IF ( NOT (validate(affectedpftencntrs)))
  RECORD affectedpftencntrs(
    1 pft_encntrs[*]
      2 pft_encntr_id = f8
  ) WITH protect
 ENDIF
 IF ( NOT (validate(tempcreditcharges)))
  RECORD tempcreditcharges(
    1 objarray[*]
      2 chargeitemid = f8
  ) WITH protect
 ENDIF
 IF ( NOT (validate(afcrmtimerevents)))
  RECORD afcrmtimerevents(
    1 timerevents[*]
      2 elapsedtime = f8
      2 timername = vc
      2 subtimername = vc
      2 metadata1 = vc
      2 metadata2 = vc
      2 metadata3 = vc
  ) WITH protect
 ENDIF
 IF (validate(doupdatecharges,char(128))=char(128))
  SUBROUTINE (doupdatecharges(retierorchargemodchangeflag=i2(ref)) =i2)
    DECLARE doupdatechargestimerstartdttm = dm12 WITH protect, noconstant(systimestamp)
    SET retierorchargemodchangeflag = false
    IF ( NOT (repcharges->syncedbackind))
     IF ( NOT (getreprocessedchargesend(repcharges)))
      CALL addtracemessage("doUpdateCharges","getReprocessedChargesEnd did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF ( NOT (repcharges->reevaluatedind))
     IF ( NOT (reevaluatecharges(enccharges,repcharges,aac,csac,auc,
      aacm,adcm)))
      CALL addtracemessage("doUpdateCharges","reevaluateCharges did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF (repcharges->retierind)
     SET retierorchargemodchangeflag = true
    ENDIF
    IF (size(auc->charge,5) > 0
     AND  NOT (auc->processedind))
     IF ( NOT (updateencountercharges(auc)))
      CALL addtracemessage("doUpdateCharges","updateEncounterCharges did not return success")
      RETURN(false)
     ENDIF
     IF ( NOT (publishpftchargeevent(auc)))
      CALL addtracemessage("doUpdateCharges","publishPftChargeEvent did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF (size(aacm->charge_mod,5) > 0
     AND  NOT (aacm->processedind))
     IF ( NOT (addchargemods(aacm)))
      CALL addtracemessage("reevaluateEncounterCharges","addChargeMods did not return success")
      RETURN(false)
     ENDIF
     CALL savechargemodchangelogforencntrmod(aacm)
     CALL performglobalpackageevaluationformultiplechrg(aacm)
     SET retierorchargemodchangeflag = true
    ENDIF
    IF (size(adcm->charge_mod,5) > 0
     AND  NOT (adcm->processedind))
     IF ((adcm->charge_mod_qual > 0))
      IF ( NOT (getoldchargeitemdetailsforencntrmod(adcm)))
       CALL addtracemessage("reevaluateEncounterCharges",
        "getOldChargeItemDetailsForEncntrMod did not return success")
      ENDIF
     ENDIF
     IF ( NOT (removechargemods(adcm)))
      CALL addtracemessage("reevaluateEncounterCharges","removeChargeMods did not return success")
      RETURN(false)
     ENDIF
     CALL savechargemodchangelogforencntrmod(adcm)
     CALL inactivateglobaldaysformultiplechrg(adcm)
     SET retierorchargemodchangeflag = true
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"doUpdateCharges",doupdatechargestimerstartdttm,"",
     "",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(docreditcharges,char(128))=char(128))
  SUBROUTINE (docreditcharges(suspcharges=vc(ref),ppftencntrid=f8(value,0.0)) =i2)
    DECLARE docreditchargesstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE detailidx = i4 WITH protect, noconstant(0)
    FREE RECORD newcharges
    RECORD newcharges(
      1 charges[*]
        2 chargeitemid = f8
        2 interfacefileid = f8
        2 processflag = i4
    )
    IF ( NOT (repcharges->syncedbackind))
     IF ( NOT (getreprocessedchargesend(repcharges)))
      CALL addtracemessage("doCreditCharges","getReprocessedChargesEnd did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF ( NOT (repcharges->reevaluatedind))
     IF ( NOT (reevaluatecharges(enccharges,repcharges,aac,csac,auc,
      aacm,adcm)))
      CALL addtracemessage("doCreditCharges","reevaluateCharges did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF (encounterhaspmcharges(ppftencntrid)
     AND repostpmchargesind)
     IF ( NOT (repostpmcharges(ppftencntrid,enccharges,repcharges,aac,csac)))
      CALL addtracemessage("doCreditCharges","repostPMCharges did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF (size(aac->charge,5) > 0
     AND  NOT (aac->processedind))
     IF ( NOT (addcreditcharges(aac,newcharges)))
      CALL addtracemessage("doCreditCharges","addCreditCharges did not return success")
      RETURN(false)
     ENDIF
     IF (size(newcharges->charges,5) > 0)
      IF ( NOT (postcharges(newcharges,suspcharges,chrg_type_credit)))
       CALL addtracemessage("doCreditCharges","postCharges did not return success")
       RETURN(false)
      ENDIF
     ENDIF
     IF (size(tempcreditcharges->objarray,5) > 0)
      IF ( NOT (addcreditchargemod(tempcreditcharges,aacm)))
       CALL addtracemessage("addCreditChargeMod","addCreditChargeMod did not return success")
       RETURN(false)
      ENDIF
      IF (size(aacm->charge_mod,5) > 0)
       IF ( NOT (addchargemods(aacm)))
        CALL addtracemessage("doCreditCharges","addChargeMods did not return success")
       ENDIF
       CALL savechargemodchangelogforencntrmod(aacm)
      ENDIF
     ENDIF
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"doCreditCharges",docreditchargesstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(dodebitcharges,char(128))=char(128))
  SUBROUTINE (dodebitcharges(suspendedcharges=vc(ref)) =i2)
    DECLARE dodebitchargesstartdttm = dm12 WITH protect, noconstant(systimestamp)
    FREE RECORD newcharges
    RECORD newcharges(
      1 charges[*]
        2 chargeitemid = f8
        2 interfacefileid = f8
        2 processflag = i4
    )
    IF ( NOT (repcharges->syncedbackind))
     IF ( NOT (getreprocessedchargesend(repcharges)))
      CALL addtracemessage("doUpdateCharges","getReprocessedChargesEnd did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF ( NOT (repcharges->reevaluatedind))
     IF ( NOT (reevaluatecharges(enccharges,repcharges,aac,csac,auc,
      aacm,adcm)))
      CALL addtracemessage("doUpdateCharges","reevaluateCharges did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF (size(csac->charges,5) > 0
     AND  NOT (csac->processedind))
     IF ( NOT (adddebitcharges(csac,newcharges)))
      CALL addtracemessage("reevaluateEncounterCharges","addDebitCharges did not return success")
      RETURN(false)
     ENDIF
     IF (size(newcharges->charges,5) > 0)
      IF ( NOT (postcharges(newcharges,suspendedcharges,chrg_type_debit)))
       CALL addtracemessage("doDebitCharges","postCharges did not return success")
       RETURN(false)
      ENDIF
     ENDIF
     CALL savechangelogforencntrmod(repcharges,csac)
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"doDebitCharges",dodebitchargesstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getreprocessedchargesend,char(128))=char(128))
  SUBROUTINE (getreprocessedchargesend(reprocessedcharges=vc(ref)) =i2)
    DECLARE getrpcestartdttm = dm12 WITH protect, noconstant(systimestamp)
    FREE RECORD reprocrequest
    RECORD reprocrequest(
      1 nocommitind = i2
      1 asyncprocessingind = i2
      1 asyncrequesthandle = i4
      1 process_type_cd = f8
      1 charge_event_qual = i4
      1 process_event[*]
        2 charge_event_id = f8
        2 charge_item[*]
          3 charge_item_id = f8
      1 facility_transfer_ind = i2
    )
    SET reprocrequest->asyncprocessingind = true
    SET reprocrequest->asyncrequesthandle = reprocreply->asyncrequesthandle
    EXECUTE afc_release_charge_sync  WITH replace("REQUEST",reprocrequest), replace("REPLY",
     reprocessedcharges)
    IF ((reprocessedcharges->status_data.status="F"))
     CALL addtracemessage("getReprocessedChargesEnd",
      "afc_release_charge_sync returned failure status")
     RETURN(false)
    ENDIF
    SET reprocessedcharges->syncedbackind = true
    CALL adddiscretetimerevent(mods_disrete_timer,"getReprocessedChargesEnd",getrpcestartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(addcreditcharges,char(128))=char(128))
  SUBROUTINE (addcreditcharges(creditcharges=vc(ref),postcharges=vc(ref)) =i2)
    DECLARE chargeidx = i4 WITH protect, noconstant(0)
    DECLARE paiidx = i4 WITH protect, noconstant(size(postcharges->charges,5))
    DECLARE addcreditchargesstartdttm = dm12 WITH protect, noconstant(systimestamp)
    IF (size(creditcharges->charge,5) > 0)
     EXECUTE afc_add_credit  WITH replace("REQUEST",creditcharges), replace("REPLY",afcaddcreditreply
      )
     IF ((afcaddcreditreply->status_data.status != "S"))
      CALL addtracemessage("addCreditCharges","afc_add_credit did not return success")
      RETURN(false)
     ENDIF
     SET creditcharges->processedind = true
     FOR (chargeidx = 1 TO size(afcaddcreditreply->charge,5))
       SET paiidx += 1
       SET stat = alterlist(postcharges->charges,paiidx)
       SET postcharges->charges[paiidx].chargeitemid = afcaddcreditreply->charge[chargeidx].
       charge_item_id
       SET postcharges->charges[paiidx].interfacefileid = afcaddcreditreply->charge[chargeidx].
       interface_file_id
       SET postcharges->charges[paiidx].processflag = afcaddcreditreply->charge[chargeidx].
       process_flg
     ENDFOR
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"addCreditCharges",addcreditchargesstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(adddebitcharges,char(128))=char(128))
  SUBROUTINE (adddebitcharges(debitcharges=vc(ref),postcharges=vc(ref)) =i2)
    DECLARE chargeidx = i4 WITH protect, noconstant(0)
    DECLARE paiidx = i4 WITH protect, noconstant(size(postcharges->charges,5))
    DECLARE adddebitchargesstartdttm = dm12 WITH protect, noconstant(systimestamp)
    FREE RECORD g_srvproperties
    RECORD g_srvproperties(
      1 logreqrep = i2
    )
    FREE RECORD g_cs13028
    RECORD g_cs13028(
      1 cr = f8
    )
    IF (size(debitcharges->charges,5) > 0)
     SET g_cs13028->cr = getcodevalue(13028,"CR",0)
     EXECUTE cs_srv_add_charge  WITH replace("REPLY",debitcharges)
     SET debitcharges->processedind = true
     FOR (chargeidx = 1 TO size(debitcharges->charges,5))
       SET paiidx += 1
       SET stat = alterlist(postcharges->charges,paiidx)
       SET postcharges->charges[paiidx].chargeitemid = debitcharges->charges[chargeidx].
       charge_item_id
       SET postcharges->charges[paiidx].interfacefileid = debitcharges->charges[chargeidx].
       interface_id
       SET postcharges->charges[paiidx].processflag = debitcharges->charges[chargeidx].process_flg
     ENDFOR
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"addDebitCharges",adddebitchargesstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(updateencountercharges,char(128))=char(128))
  SUBROUTINE (updateencountercharges(updatecharges=vc(ref)) =i2)
    DECLARE updateencounterchargesstartdttm = dm12 WITH protect, noconstant(systimestamp)
    IF (size(updatecharges->charge,5) > 0)
     EXECUTE afc_upt_charge  WITH replace("REQUEST",updatecharges), replace("REPLY",updatechargereply
      )
     IF ((updatechargereply->status_data.status != "S"))
      CALL addtracemessage("updateEncounterCharges","afc_upt_charge did not return success")
      RETURN(false)
     ENDIF
     SET updatecharges->processedind = true
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"updateEncounterCharges",
     updateencounterchargesstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(addchargemods,char(128))=char(128))
  SUBROUTINE (addchargemods(chargemods=vc(ref)) =i2)
    IF (size(chargemods->charge_mod,5) > 0)
     EXECUTE afc_add_charge_mod  WITH replace("REQUEST",chargemods), replace("REPLY",
      addchargemodreply)
     IF ((addchargemodreply->status_data.status != "S"))
      CALL addtracemessage("addChargeMods","afc_add_charge_mod did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    SET chargemods->processedind = true
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(removechargemods,char(128))=char(128))
  SUBROUTINE (removechargemods(chargemods=vc(ref)) =i2)
    DECLARE action_begin = i4 WITH protect, noconstant(1)
    DECLARE action_end = i4 WITH protect, noconstant(size(chargemods->charge_mod,5))
    IF (size(chargemods->charge_mod,5) > 0)
     EXECUTE afc_del_charge_mod  WITH replace("REQUEST",chargemods), replace("REPLY",
      deletechargemodreply)
     IF ((deletechargemodreply->status_data.status != "S"))
      CALL addtracemessage("removeChargeMods","afc_del_charge_mod did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    SET chargemods->processedind = true
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(postcharges,char(128))=char(128))
  SUBROUTINE (postcharges(postcharges=vc(ref),suspenses=vc(ref),chrgtype=i4) =i2)
    DECLARE postchargesstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE postingcnt = i4 WITH protect, noconstant(0)
    DECLARE interfacecnt = i4 WITH protect, noconstant(0)
    DECLARE suspendedcnt = i4 WITH protect, noconstant(0)
    DECLARE chargescnt = i4 WITH protect, noconstant(0)
    DECLARE issuspchrgprocessflagoff = i4 WITH protect, noconstant(0)
    DECLARE process_dt_tm = f8 WITH constant(cnvtdatetime(sysdate))
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    DECLARE postingidx = i4 WITH protect, noconstant(0)
    RECORD wtptaskrtrequest(
      1 interface_charge[*]
        2 charge_item_id = f8
      1 interfacefileid = f8
      1 encntrid = f8
    ) WITH protect
    RECORD pncb(
      1 remove_commit_ind = i2
      1 follow_combined_parent_ind = i2
      1 charges[*]
        2 charge_item_id = f8
        2 reprocess_ind = i2
        2 dupe_ind = i2
    ) WITH protect
    RECORD wtptaskrequest(
      1 charges[*]
        2 charge_item_id = f8
    ) WITH protect
    SELECT INTO "nl:"
     FROM (dummyt d  WITH seq = size(postcharges->charges,5)),
      charge c,
      interface_file i
     PLAN (d)
      JOIN (c
      WHERE (c.charge_item_id=postcharges->charges[d.seq].chargeitemid)
       AND c.active_ind=true)
      JOIN (i
      WHERE i.interface_file_id=c.interface_file_id
       AND i.active_ind=true)
     DETAIL
      IF ( NOT (c.process_flg IN (flag_suspended, flag_offset, flag_review)))
       chargescnt += 1
       IF (d.seq=1)
        encntrid = c.encntr_id
       ENDIF
       IF (i.realtime_ind=true)
        interfacecnt += 1, wtptaskrtrequest->interfacefileid = c.interface_file_id, wtptaskrtrequest
        ->encntrid = c.encntr_id,
        stat = alterlist(wtptaskrtrequest->interface_charge,interfacecnt), wtptaskrtrequest->
        interface_charge[interfacecnt].charge_item_id = c.charge_item_id
       ELSEIF (i.profit_type_cd > 0)
        postingcnt += 1, stat = alterlist(pncb->charges,postingcnt), pncb->charges[postingcnt].
        charge_item_id = postcharges->charges[d.seq].chargeitemid,
        stat = alterlist(wtptaskrequest->charges,postingcnt), wtptaskrequest->charges[postingcnt].
        charge_item_id = postcharges->charges[d.seq].chargeitemid
       ENDIF
       IF (i.susp_chrg_process_flag=0)
        issuspchrgprocessflagoff = true
       ENDIF
      ENDIF
     WITH nocounter
    ;end select
    IF (chargescnt > 0)
     IF (size(wtptaskrtrequest->interface_charge,5) > 0)
      IF ( NOT (postinterfacecharges(wtptaskrtrequest,encntrid,process_dt_tm)))
       CALL addtracemessage("postCharges",
        "Error encountered while attempting to queue charge interface posting to WTP server")
       RETURN(false)
      ENDIF
     ENDIF
     IF (chrgtype=chrg_type_debit
      AND issuspchrgprocessflagoff != true)
      IF ( NOT (writerowtowtp(cnvtrectojson(wtptaskrequest),"PFT_CHARGE_POSTING_WTP",encntrid,
       "ENCOUNTER",process_dt_tm,
       "")))
       CALL addtracemessage("postCharges",
        "Error encountered while attempting to queue charge posting to WTP server")
       RETURN(false)
      ENDIF
      CALL addtracemessage("postCharges","Successfully queued charge posting request to WTP server")
     ELSE
      IF (size(pncb->charges,5) > 0)
       SET pncb->remove_commit_ind = 1
       EXECUTE pft_nt_chrg_billing  WITH replace("REQUEST",pncb), replace("REPLY",postingreply)
       IF ((postingreply->status_data.status="F"))
        CALL addtracemessage("postCharges","pft_nt_chrg_billing did not return success")
        RETURN(false)
       ENDIF
      ENDIF
      SET stat = initrec(suspenses)
      SELECT INTO "nl:"
       FROM (dummyt d1  WITH seq = size(postcharges->charges,5)),
        charge c,
        charge_mod cm
       PLAN (d1)
        JOIN (c
        WHERE (c.charge_item_id=postcharges->charges[d1.seq].chargeitemid)
         AND c.process_flg=1)
        JOIN (cm
        WHERE cm.charge_item_id=c.charge_item_id
         AND cm.active_ind=true
         AND cm.charge_mod_type_cd=cs13019_suspense_cd)
       ORDER BY c.charge_item_id, cm.active_status_dt_tm DESC
       HEAD c.charge_item_id
        suspendedcnt += 1, stat = alterlist(suspenses->charges,suspendedcnt), suspenses->charges[
        suspendedcnt].parent_charge_item_id = c.parent_charge_item_id,
        suspenses->charges[suspendedcnt].charge_type_cd = c.charge_type_cd, suspenses->charges[
        suspendedcnt].field1_id = cm.field1_id, suspenses->charges[suspendedcnt].field3 = cm.field3,
        suspenses->charges[suspendedcnt].field6 = cm.field6
       WITH nocounter
      ;end select
      IF (curqual > 0)
       CALL addtracemessage("postCharges","suspended charges found")
       RETURN(false)
      ENDIF
     ENDIF
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"postCharges",postchargesstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(postinterfacecharges,char(128))=char(128))
  SUBROUTINE (postinterfacecharges(pwtptaskrtrequest=vc(ref),pencntrid=f8,pprocess_dt_tm=f8) =i2)
    RECORD wtptaskrequest(
      1 interface_charge[*]
        2 charge_item_id = f8
      1 interfacefileid = f8
      1 encntrid = f8
    ) WITH protect
    SET stat = moverec(pwtptaskrtrequest,wtptaskrequest)
    IF ( NOT (writerowtowtp(cnvtrectojson(wtptaskrequest),"PFT_WF_INTERFACE_CHARGES",pencntrid,
     "ENCOUNTER",pprocess_dt_tm,
     "")))
     CALL addtracemessage("postInterfaceCharges",
      "Error encountered while attempting to queue charge interface posting to WTP server")
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(reevaluatecharges,char(128))=char(128))
  SUBROUTINE (reevaluatecharges(encountercharges=vc(ref),reprocessedcharges=vc(ref),creditcharges=vc(
    ref),debitcharges=vc(ref),updatecharges=vc(ref),addchargemods=vc(ref),removechargemods=vc(ref)) =
   i2)
    DECLARE reevaluatechargesstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE ecidx = i4 WITH protect, noconstant(0)
    DECLARE eccnt = i4 WITH protect, noconstant(size(encountercharges->charge_items,5))
    DECLARE rcidx = i4 WITH protect, noconstant(0)
    DECLARE rccnt = i4 WITH protect, noconstant(size(reprocessedcharges->charges,5))
    DECLARE grpidx = i4 WITH protect, noconstant(0)
    DECLARE grpcnt = i4 WITH protect, noconstant(0)
    DECLARE ecmatchidx = i4 WITH protect, noconstant(0)
    DECLARE rcmatchidx = i4 WITH protect, noconstant(0)
    DECLARE qualifiesind = i2 WITH protect, noconstant(false)
    DECLARE activitytypecd = f8 WITH protect, noconstant(0.0)
    DECLARE tempcount = i4 WITH protect, noconstant(0)
    DECLARE nonrechpexpireflag = i2 WITH protect, noconstant(false)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    FREE RECORD matchrec
    RECORD matchrec(
      1 matchgroup[*]
        2 chargetypecd = f8
        2 ceaid = f8
        2 tiergroupcd = f8
        2 billitemid = f8
        2 servicedttm = dq8
        2 eclist[*]
          3 ecidx = i4
          3 rcmatchidx = i4
        2 rclist[*]
          3 rcidx = i4
          3 ecmatchidx = i4
    )
    SET stat = initrec(tempcreditcharges)
    IF (getfacilitytransflg(encountercharges->charge_items[1].encntr_id))
     IF ( NOT (reevaluatechargesforfacilitytrans(encountercharges,reprocessedcharges,creditcharges,
      debitcharges,updatecharges,
      addchargemods,removechargemods)))
      CALL addtracemessage("doUpdateCharges",
       "reevaluateChargesforFacilityTrans did not return success")
      RETURN(false)
     ENDIF
     RETURN(true)
    ENDIF
    IF ( NOT (matchcharges(encountercharges,reprocessedcharges,matchrec)))
     CALL addtracemessage("reevaluateCharges","matchCharges did not return success")
     RETURN(false)
    ENDIF
    DECLARE previnterfacefileid = f8 WITH protect, noconstant(0.0)
    DECLARE retierind = i4 WITH protect, noconstant(0)
    FREE RECORD prefs
    RECORD prefs(
      1 profitind = i2
      1 retierwhen
        2 alwaysind = i2
        2 fbscpt4changedind = i2
    )
    IF (validate(request->encntrid))
     SET encntrid = request->encntrid
    ELSEIF (validate(request->encounterid))
     SET encntrid = request->encounterid
    ENDIF
    IF (encntrid=0.0)
     SELECT INTO "nl:"
      FROM pft_charge pc,
       pft_charge_bo_reltn pcbr,
       benefit_order bo,
       pft_encntr pe
      PLAN (pc
       WHERE (pc.charge_item_id=encountercharges->charge_items[1].charge_item_id))
       JOIN (pcbr
       WHERE pcbr.pft_charge_id=pc.pft_charge_id)
       JOIN (bo
       WHERE bo.benefit_order_id=pcbr.benefit_order_id
        AND bo.active_ind=true)
       JOIN (pe
       WHERE pe.pft_encntr_id=bo.pft_encntr_id)
      HEAD REPORT
       encntrid = pe.encntr_id
      WITH nocounter
     ;end select
    ENDIF
    IF (eccnt > 0
     AND encntrid > 0.0)
     SET nonrechpexpireflag = checkiforgmarkedfornonrecurringhpexpire(encntrid)
    ENDIF
    SET grpcnt = size(matchrec->matchgroup,5)
    FOR (grpidx = 1 TO grpcnt)
      SET qualifiesind = true
      FOR (ecmatchidx = 1 TO size(matchrec->matchgroup[grpidx].eclist,5))
        IF ((matchrec->matchgroup[grpidx].eclist[ecmatchidx].rcmatchidx=0))
         SET qualifiesind = false
        ENDIF
      ENDFOR
      IF (qualifiesind)
       FOR (ecmatchidx = 1 TO size(matchrec->matchgroup[grpidx].eclist,5))
         SET ecidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].ecidx
         IF (healthplandtchangeind->changeind
          AND (encountercharges->charge_items[ecidx].activity_type_cd=cs106_person_mgmt_cd))
          SET activitytypecd = 0.0
         ELSE
          SET activitytypecd = encountercharges->charge_items[ecidx].activity_type_cd
         ENDIF
         IF ( NOT (chargequalifiesforreevaluation(encountercharges->charge_items[ecidx].
          charge_type_cd,encountercharges->charge_items[ecidx].offset_charge_item_id,encountercharges
          ->charge_items[ecidx].process_flg,activitytypecd)))
          SET qualifiesind = false
          IF (activitytypecd=cs106_person_mgmt_cd)
           SET repostpmchargesind = true
          ENDIF
         ENDIF
       ENDFOR
       IF (qualifiesind)
        SET ecmatchidx = 1
        SET ecidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].ecidx
        IF ((encountercharges->charge_items[ecidx].interface_file_id != previnterfacefileid))
         IF ( NOT (getinterfacepreferences(encountercharges->charge_items[ecidx].interface_file_id,
          prefs)))
          CALL addtracemessage("reevaluateCharges","getInterfacePreferences did not return success")
          RETURN(false)
         ENDIF
         SET previnterfacefileid = encountercharges->charge_items[ecidx].interface_file_id
        ENDIF
        SET retierind = false
        FOR (ecmatchidx = 1 TO size(matchrec->matchgroup[grpidx].eclist,5))
          SET ecidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].ecidx
          SET rcidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].rcmatchidx
          IF ( NOT (retierind))
           IF ( NOT (evaluatechargeforretier(encountercharges,ecidx,reprocessedcharges,rcidx,prefs,
            retierind)))
            CALL addtracemessage("reevaluateCharges","evaluateChargeForRetier did not return success"
             )
            RETURN(false)
           ENDIF
          ENDIF
        ENDFOR
        IF ((reprocessedcharges->retierind=false)
         AND retierind=true)
         SET reprocessedcharges->retierind = retierind
        ENDIF
        FOR (ecmatchidx = 1 TO size(matchrec->matchgroup[grpidx].eclist,5))
         SET ecidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].ecidx
         IF (retierind)
          CALL addcreditcharge(encountercharges,ecidx,creditcharges)
          IF (ecmatchidx=1)
           FOR (rcmatchidx = 1 TO size(matchrec->matchgroup[grpidx].rclist,5))
            SET rcidx = matchrec->matchgroup[grpidx].rclist[rcmatchidx].rcidx
            CALL adddebitcharge(reprocessedcharges,ecidx,rcidx,debitcharges)
           ENDFOR
          ENDIF
         ELSE
          SET rcidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].rcmatchidx
          IF ( NOT (evaluatechargeforupdates(encountercharges,ecidx,reprocessedcharges,rcidx,prefs,
           updatecharges,addchargemods,removechargemods)))
           CALL addtracemessage("reevaluateCharges","evaluateChargeForUpdates did not return success"
            )
           RETURN(false)
          ENDIF
         ENDIF
        ENDFOR
       ENDIF
      ELSEIF (qualifiesind=false
       AND nonrechpexpireflag)
       FOR (ecmatchidx = 1 TO size(matchrec->matchgroup[grpidx].eclist,5))
         SET ecidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].ecidx
         SET rcidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].rcmatchidx
         IF (rcidx=0)
          IF ((encountercharges->charge_items[ecidx].activity_type_cd != cs106_person_mgmt_cd))
           SET activitytypecd = 0.0
           IF (chargequalifiesforreevaluation(encountercharges->charge_items[ecidx].charge_type_cd,
            encountercharges->charge_items[ecidx].offset_charge_item_id,encountercharges->
            charge_items[ecidx].process_flg,activitytypecd))
            CALL addcreditcharge(encountercharges,ecidx,creditcharges)
            SET tempcount += 1
            SET stat = alterlist(tempcreditcharges->objarray,tempcount)
            SET tempcreditcharges->objarray[tempcount].chargeitemid = encountercharges->charge_items[
            ecidx].charge_item_id
           ENDIF
          ENDIF
         ENDIF
       ENDFOR
      ENDIF
    ENDFOR
    SET reprocessedcharges->reevaluatedind = true
    CALL adddiscretetimerevent(mods_disrete_timer,"reevaluateCharges",reevaluatechargesstartdttm,"",
     "",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(matchcharges,char(128))=char(128))
  SUBROUTINE (matchcharges(encountercharges=vc(ref),reprocessedcharges=vc(ref),matchrec=vc(ref)) =i2)
    DECLARE matchchargesstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE ecidx = i4 WITH protect, noconstant(0)
    DECLARE eccnt = i4 WITH protect, noconstant(size(encountercharges->charge_items,5))
    DECLARE rcidx = i4 WITH protect, noconstant(0)
    DECLARE rccnt = i4 WITH protect, noconstant(size(reprocessedcharges->charges,5))
    DECLARE grpidx = i4 WITH protect, noconstant(0)
    DECLARE grpcnt = i4 WITH protect, noconstant(0)
    DECLARE ecmatchidx = i4 WITH protect, noconstant(0)
    DECLARE rcmatchidx = i4 WITH protect, noconstant(0)
    SET stat = initrec(matchrec)
    IF (validate(debug))
     CALL echorecord(encountercharges)
    ENDIF
    FOR (ecidx = 1 TO eccnt)
      SET grpidx = locateval(grpidx,1,grpcnt,encountercharges->charge_items[ecidx].charge_type_cd,
       matchrec->matchgroup[grpidx].chargetypecd,
       encountercharges->charge_items[ecidx].charge_event_act_id,matchrec->matchgroup[grpidx].ceaid,
       encountercharges->charge_items[ecidx].tier_group_cd,matchrec->matchgroup[grpidx].tiergroupcd,
       encountercharges->charge_items[ecidx].bill_item_id,
       matchrec->matchgroup[grpidx].billitemid,encountercharges->charge_items[ecidx].service_dt_tm,
       matchrec->matchgroup[grpidx].servicedttm)
      IF (grpidx=0)
       SET grpcnt += 1
       SET grpidx = grpcnt
       SET stat = alterlist(matchrec->matchgroup,grpcnt)
       SET matchrec->matchgroup[grpidx].chargetypecd = encountercharges->charge_items[ecidx].
       charge_type_cd
       SET matchrec->matchgroup[grpidx].ceaid = encountercharges->charge_items[ecidx].
       charge_event_act_id
       SET matchrec->matchgroup[grpidx].tiergroupcd = encountercharges->charge_items[ecidx].
       tier_group_cd
       SET matchrec->matchgroup[grpidx].billitemid = encountercharges->charge_items[ecidx].
       bill_item_id
       SET matchrec->matchgroup[grpidx].servicedttm = encountercharges->charge_items[ecidx].
       service_dt_tm
      ENDIF
      SET ecmatchidx = (size(matchrec->matchgroup[grpidx].eclist,5)+ 1)
      SET stat = alterlist(matchrec->matchgroup[grpidx].eclist,ecmatchidx)
      SET matchrec->matchgroup[grpidx].eclist[ecmatchidx].ecidx = ecidx
    ENDFOR
    FOR (rcidx = 1 TO rccnt)
      SET grpidx = locateval(grpidx,1,grpcnt,reprocessedcharges->charges[rcidx].charge_type_cd,
       matchrec->matchgroup[grpidx].chargetypecd,
       reprocessedcharges->charges[rcidx].charge_act_id,matchrec->matchgroup[grpidx].ceaid,
       reprocessedcharges->charges[rcidx].tier_group_cd,matchrec->matchgroup[grpidx].tiergroupcd,
       reprocessedcharges->charges[rcidx].bill_item_id,
       matchrec->matchgroup[grpidx].billitemid,reprocessedcharges->charges[rcidx].service_dt_tm,
       matchrec->matchgroup[grpidx].servicedttm)
      IF (grpidx=0)
       SET grpcnt += 1
       SET grpidx = grpcnt
       SET stat = alterlist(matchrec->matchgroup,grpcnt)
       SET matchrec->matchgroup[grpidx].chargetypecd = reprocessedcharges->charges[rcidx].
       charge_type_cd
       SET matchrec->matchgroup[grpidx].ceaid = reprocessedcharges->charges[rcidx].charge_act_id
       SET matchrec->matchgroup[grpidx].tiergroupcd = reprocessedcharges->charges[rcidx].
       tier_group_cd
       SET matchrec->matchgroup[grpidx].billitemid = reprocessedcharges->charges[rcidx].bill_item_id
       SET matchrec->matchgroup[grpidx].servicedttm = reprocessedcharges->charges[rcidx].
       service_dt_tm
      ENDIF
      SET rcmatchidx = (size(matchrec->matchgroup[grpidx].rclist,5)+ 1)
      SET stat = alterlist(matchrec->matchgroup[grpidx].rclist,rcmatchidx)
      SET matchrec->matchgroup[grpidx].rclist[rcmatchidx].rcidx = rcidx
    ENDFOR
    FOR (grpidx = 1 TO grpcnt)
      IF (size(matchrec->matchgroup[grpidx].rclist,5) >= 1)
       SELECT INTO "nl:"
        FROM (dummyt d  WITH seq = value(size(matchrec->matchgroup[grpidx].rclist,5)))
        PLAN (d
         WHERE (reprocessedcharges->charges[matchrec->matchgroup[grpidx].rclist[d.seq].rcidx].
         item_interval_id > 0.0))
        WITH nocounter
       ;end select
       IF (curqual=0
        AND size(matchrec->matchgroup[grpidx].rclist,5) > 1)
        CALL addtracemessage("matchCharges",
         "Group of multiple charges cannot contain a non-interval charge ")
        IF (validate(debug))
         CALL echorecord(matchrec)
        ENDIF
        RETURN(false)
       ELSEIF (curqual > 0)
        SELECT INTO "nl:"
         FROM (dummyt d  WITH seq = value(size(matchrec->matchgroup[grpidx].rclist,5))),
          item_interval_table ii
         PLAN (d)
          JOIN (ii
          WHERE (ii.item_interval_id=reprocessedcharges->charges[matchrec->matchgroup[grpidx].rclist[
          d.seq].rcidx].item_interval_id))
         WITH nocounter
        ;end select
        IF (curqual != size(matchrec->matchgroup[grpidx].rclist,5))
         CALL addtracemessage("matchCharges","Failed to find item_interval row for interval charge")
         IF (validate(debug))
          CALL echorecord(matchrec)
         ENDIF
         RETURN(false)
        ENDIF
        SELECT INTO "nl:"
         FROM (dummyt d1  WITH seq = 1),
          item_interval_table ii1,
          (dummyt d2  WITH seq = value(size(matchrec->matchgroup[grpidx].rclist,5))),
          item_interval_table ii2
         PLAN (d1)
          JOIN (ii1
          WHERE (ii1.item_interval_id=reprocessedcharges->charges[matchrec->matchgroup[grpidx].
          rclist[d1.seq].rcidx].item_interval_id))
          JOIN (d2
          WHERE d2.seq != d1.seq)
          JOIN (ii2
          WHERE (ii2.item_interval_id=reprocessedcharges->charges[matchrec->matchgroup[grpidx].
          rclist[d2.seq].rcidx].item_interval_id)
           AND ii2.interval_template_cd != ii1.interval_template_cd)
         WITH nocounter
        ;end select
        IF (curqual > 0)
         CALL addtracemessage("matchCharges",
          "Group with multiple interval charges must all share the same interval template")
         IF (validate(debug))
          CALL echorecord(matchrec)
         ENDIF
         RETURN(false)
        ENDIF
        SELECT INTO "nl:"
         FROM (dummyt d1  WITH seq = value(size(matchrec->matchgroup[grpidx].rclist,5))),
          item_interval_table ii1,
          (dummyt d2  WITH seq = value(size(matchrec->matchgroup[grpidx].rclist,5))),
          item_interval_table ii2
         PLAN (d1)
          JOIN (ii1
          WHERE (ii1.item_interval_id=reprocessedcharges->charges[matchrec->matchgroup[grpidx].
          rclist[d1.seq].rcidx].item_interval_id))
          JOIN (d2
          WHERE d2.seq != d1.seq)
          JOIN (ii2
          WHERE (ii2.item_interval_id=reprocessedcharges->charges[matchrec->matchgroup[grpidx].
          rclist[d2.seq].rcidx].item_interval_id)
           AND ii2.interval_template_cd=ii1.interval_template_cd
           AND ii2.interval_id=ii1.interval_id)
         WITH nocounter
        ;end select
        IF (curqual > 0)
         CALL addtracemessage("matchCharges",
          "Group with multiple interval charges cannot share the same interval id")
         IF (validate(debug))
          CALL echorecord(matchrec)
         ENDIF
         RETURN(false)
        ENDIF
       ENDIF
       SET ecidx = matchrec->matchgroup[grpidx].eclist[1].ecidx
       SET rcidx = matchrec->matchgroup[grpidx].rclist[1].rcidx
       IF (size(matchrec->matchgroup[grpidx].rclist,5)=1)
        IF ((encountercharges->charge_items[ecidx].item_interval_id=reprocessedcharges->charges[rcidx
        ].item_interval_id))
         SET matchrec->matchgroup[grpidx].eclist[1].rcmatchidx = rcidx
         SET matchrec->matchgroup[grpidx].rclist[1].ecmatchidx = ecidx
        ELSE
         FOR (ecmatchidx = 1 TO size(matchrec->matchgroup[grpidx].eclist,5))
           SET ecidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].ecidx
           SET rcidx = matchrec->matchgroup[grpidx].rclist[1].rcidx
           SET matchrec->matchgroup[grpidx].eclist[ecmatchidx].rcmatchidx = rcidx
           SET matchrec->matchgroup[grpidx].rclist[1].ecmatchidx = ecidx
         ENDFOR
        ENDIF
       ELSE
        SELECT DISTINCT INTO "nl:"
         ii.interval_template_cd
         FROM item_interval_table ii
         PLAN (ii
          WHERE ii.item_interval_id IN (reprocessedcharges->charges[rcidx].item_interval_id,
          encountercharges->charge_items[ecidx].item_interval_id)
           AND ii.item_interval_id != 0.0)
         WITH nocounter
        ;end select
        IF (curqual=1)
         FOR (ecmatchidx = 1 TO size(matchrec->matchgroup[grpidx].eclist,5))
          FOR (rcmatchidx = 1 TO size(matchrec->matchgroup[grpidx].rclist,5))
            SET ecidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].ecidx
            SET rcidx = matchrec->matchgroup[grpidx].rclist[rcmatchidx].rcidx
            SELECT DISTINCT INTO "nl:"
             ii.interval_id
             FROM item_interval_table ii
             PLAN (ii
              WHERE ii.item_interval_id IN (reprocessedcharges->charges[rcidx].item_interval_id,
              encountercharges->charge_items[ecidx].item_interval_id)
               AND ii.item_interval_id != 0.0)
             WITH nocounter
            ;end select
            IF (curqual=1)
             SET matchrec->matchgroup[grpidx].eclist[ecmatchidx].rcmatchidx = rcidx
             SET matchrec->matchgroup[grpidx].rclist[rcmatchidx].ecmatchidx = ecidx
            ENDIF
          ENDFOR
          IF ((matchrec->matchgroup[grpidx].eclist[ecmatchidx].rcmatchidx=0))
           CALL addtracemessage("matchCharges",
            "Failed to match an interval charge retiered to the same interval template")
           IF (validate(debug))
            CALL echorecord(matchrec)
           ENDIF
           RETURN(false)
          ENDIF
         ENDFOR
        ENDIF
       ENDIF
      ENDIF
    ENDFOR
    IF (validate(debug))
     CALL echorecord(matchrec)
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"matchCharges",matchchargesstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(evaluatechargeforretier,char(128))=char(128))
  SUBROUTINE (evaluatechargeforretier(encountercharges=vc(ref),ecidx=i4,reprocessedcharges=vc(ref),
   rcidx=i4,interfacepreferences=vc(ref),retierind=i2(ref)) =i2)
    DECLARE evaluatechargeforretierstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE rcmidx = i4 WITH protect, noconstant(0)
    DECLARE rcmcnt = i4 WITH protect, noconstant(0)
    DECLARE ecmidx = i4 WITH protect, noconstant(0)
    DECLARE ecmcnt = i4 WITH protect, noconstant(0)
    DECLARE writeoffactionkey = vc WITH protect, noconstant("")
    DECLARE chargeidx = i4 WITH protect, noconstant(0)
    DECLARE doesrevcdexist = i4 WITH protect, noconstant(0)
    DECLARE rcmposidx = i4 WITH protect, noconstant(0)
    DECLARE oldencountertypecd = f8 WITH protect, noconstant(0.0)
    DECLARE newencountertypecd = f8 WITH protect, noconstant(0.0)
    SET retierind = false
    IF (interfacepreferences->retierwhen.alwaysind)
     CALL logmessage("evaluateChargesForRetiering",build("Retiering Charge [",encountercharges->
       charge_items[ecidx].charge_item_id,"] due to reprocessInd of interface file"),log_debug)
     SET retierind = true
     RETURN(true)
    ENDIF
    IF ( NOT (isequal(encountercharges->charge_items[ecidx].item_extended_price,reprocessedcharges->
     charges[rcidx].item_extended_price)))
     CALL logmessage("evaluateChargesForRetiering",build("Retiering Charge [",encountercharges->
       charge_items[ecidx].charge_item_id,"] due to price changing from                         [",
       encountercharges->charge_items[ecidx].item_extended_price,"] to [",
       reprocessedcharges->charges[rcidx].item_extended_price,"]"),log_debug)
     SET retierind = true
     RETURN(true)
    ENDIF
    IF (qualifiesforreevaloninterfacefilechange(encountercharges,ecidx,reprocessedcharges,rcidx))
     CALL logmessage("evaluateChargesForRetiering",build("Retiering Charge [",encountercharges->
       charge_items[ecidx].charge_item_id,
       "] due to interface changing from                         [",encountercharges->charge_items[
       ecidx].interface_file_id,"] to [",
       reprocessedcharges->charges[rcidx].interface_id,"]"),log_debug)
     SET retierind = true
     RETURN(true)
    ENDIF
    IF ((encountercharges->charge_items[ecidx].process_flg=flag_posted))
     DECLARE pftencntrid = f8 WITH protect, noconstant(0.0)
     DECLARE pencntrid = f8 WITH protect, noconstant(0.0)
     SELECT INTO "nl:"
      FROM pft_charge pc,
       pft_charge_bo_reltn pcbr,
       benefit_order bo,
       pft_encntr pe,
       account a
      PLAN (pc
       WHERE (pc.charge_item_id=encountercharges->charge_items[ecidx].charge_item_id))
       JOIN (pcbr
       WHERE pcbr.pft_charge_id=pc.pft_charge_id)
       JOIN (bo
       WHERE bo.benefit_order_id=pcbr.benefit_order_id
        AND bo.active_ind=true
        AND bo.fin_class_cd=cs354_selfpay_cd)
       JOIN (pe
       WHERE pe.pft_encntr_id=bo.pft_encntr_id)
       JOIN (a
       WHERE a.acct_id=pe.acct_id
        AND a.acct_type_cd=cs18736_ar_cd
        AND a.acct_sub_type_cd=cs20849_patient_cd)
      HEAD REPORT
       pftencntrid = pe.pft_encntr_id, pencntrid = pe.encntr_id, oldencountertypecd = pe
       .encntr_type_cd
      WITH nocounter
     ;end select
     IF (oldencountertypecd=0.0)
      SET oldencountertypecd = findata->dmg.encountertype.encntrtypecd
     ENDIF
     IF (newencountertypecd=0.0)
      SELECT INTO "nl;"
       FROM encounter e
       WHERE e.encntr_id=pencntrid
        AND e.active_ind=true
        AND e.encntr_id != 0.0
       HEAD e.encntr_id
        newencountertypecd = e.encntr_type_cd
       WITH nocounter
      ;end select
     ENDIF
     IF (pftencntrid > 0.0)
      IF ((pencntrid != encountercharges->charge_items[ecidx].encntr_id))
       IF (isrecurringencountertypechange(oldencountertypecd,newencountertypecd,pftencntrid))
        CALL logmessage("evaluateChargesForRetiering",build("Retiering Charge [",encountercharges->
          charge_items[ecidx].charge_item_id,
          "] due to encounter type changing from                           [",oldencountertypecd,
          "] to [",
          newencountertypecd,"] for posted Profit  Charge involved in Fincmb"),log_debug)
        SET retierind = true
        RETURN(true)
       ENDIF
      ENDIF
      IF (isrecurringencountertypechange(encountercharges->charge_items[ecidx].admit_type_cd,
       reprocessedcharges->charges[rcidx].admit_type_cd,pftencntrid))
       CALL logmessage("evaluateChargesForRetiering",build("Retiering Charge [",encountercharges->
         charge_items[ecidx].charge_item_id,
         "] due to encounter type changing from                           [",encountercharges->
         charge_items[ecidx].admit_type_cd,"] to [",
         reprocessedcharges->charges[rcidx].admit_type_cd,"] for posted Profit charge"),log_debug)
       SET retierind = true
       RETURN(true)
      ENDIF
     ELSE
      CALL logmessage("evaluateChargeForRetier","Charge is associated to client account.",log_debug)
      RETURN(true)
     ENDIF
     IF (locateval(chargeidx,1,size(postedchargecoverageevalresults->chargestoreprocess,5),
      encountercharges->charge_items[ecidx].charge_item_id,postedchargecoverageevalresults->
      chargestoreprocess[chargeidx].chargeitemid) > 0)
      SET retierind = true
      RETURN(true)
     ENDIF
    ENDIF
    IF (interfacepreferences->retierwhen.fbscpt4changedind)
     IF ( NOT (interfacepreferences->profitind))
      DECLARE ecprimarycpt4value = vc WITH protect, noconstant("")
      DECLARE rcprimarycpt4value = vc WITH protect, noconstant("")
      SET ecmcnt = size(encountercharges->charge_items[ecidx].charge_mods,5)
      FOR (ecmidx = 1 TO ecmcnt)
        IF (uar_get_code_meaning(encountercharges->charge_items[ecidx].charge_mods[ecmidx].field1_id)
        ="CPT4"
         AND (encountercharges->charge_items[ecidx].charge_mods[ecmidx].field2_id=1)
         AND (encountercharges->charge_items[ecidx].charge_mods[ecmidx].active_ind=true))
         SET ecprimarycpt4value = trim(encountercharges->charge_items[ecidx].charge_mods[ecmidx].
          field6)
        ENDIF
      ENDFOR
      SET rcmcnt = size(reprocessedcharges->charges[rcidx].mods.charge_mods,5)
      FOR (rcmidx = 1 TO rcmcnt)
        IF (uar_get_code_meaning(reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].
         field1_id)="CPT4"
         AND (reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field2_id=1))
         SET rcprimarycpt4value = trim(reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].
          field6)
        ENDIF
      ENDFOR
      IF (ecprimarycpt4value != rcprimarycpt4value)
       CALL logmessage("evaluateChargesForRetiering",build("Retiering Charge [",encountercharges->
         charge_items[ecidx].charge_item_id,
         "]                            destined for foreign billing system due to primary CPT4 ",
         " changing from [",ecprimarycpt4value,
         "] to [",rcprimarycpt4value,"]"),log_debug)
       SET retierind = true
       RETURN(true)
      ENDIF
     ENDIF
    ENDIF
    SET ecmcnt = size(encountercharges->charge_items[ecidx].charge_mods,5)
    SET rcmcnt = size(reprocessedcharges->charges[rcidx].mods.charge_mods,5)
    FOR (ecmidx = 1 TO ecmcnt)
     IF ((encountercharges->charge_items[ecidx].charge_mods[ecmidx].charge_mod_type_cd=
     cs13019_bill_code_cd)
      AND (encountercharges->charge_items[ecidx].charge_mods[ecmidx].active_ind=true)
      AND uar_get_code_meaning(encountercharges->charge_items[ecidx].charge_mods[ecmidx].field1_id)=
     "REVENUE")
      SET rcmidx = locateval(rcmidx,1,rcmcnt,encountercharges->charge_items[ecidx].charge_mods[ecmidx
       ].field1_id,reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field1_id,
       encountercharges->charge_items[ecidx].charge_mods[ecmidx].field2_id,reprocessedcharges->
       charges[rcidx].mods.charge_mods[rcmidx].field2_id,encountercharges->charge_items[ecidx].
       charge_mods[ecmidx].charge_mod_type_cd,reprocessedcharges->charges[rcidx].mods.charge_mods[
       rcmidx].charge_event_mod_type_cd)
      IF (rcmidx=0)
       FOR (rcmposidx = 1 TO rcmcnt)
         IF (uar_get_code_meaning(reprocessedcharges->charges[rcidx].mods.charge_mods[rcmposidx].
          field1_id)="REVENUE")
          SET doesrevcdexist = true
         ENDIF
       ENDFOR
       IF (doesrevcdexist=false)
        SET retierind = true
        RETURN(true)
       ENDIF
      ENDIF
     ENDIF
     SET doesrevcdexist = false
    ENDFOR
    CALL adddiscretetimerevent(mods_disrete_timer,"evaluateChargeForRetier",
     evaluatechargeforretierstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(evaluatechargeforupdates,char(128))=char(128))
  SUBROUTINE (evaluatechargeforupdates(encountercharges=vc(ref),ecidx=i4,reprocessedcharges=vc(ref),
   rcidx=i4,interfacepreferences=vc(ref),updatecharges=vc(ref),addchargemods=vc(ref),removechargemods
   =vc(ref)) =i2)
    DECLARE evaluatechargeforupdatesstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE rcmidx = i4 WITH protect, noconstant(0)
    DECLARE rcmcnt = i4 WITH protect, noconstant(0)
    DECLARE ecmidx = i4 WITH protect, noconstant(0)
    DECLARE ecmcnt = i4 WITH protect, noconstant(0)
    IF ((((encountercharges->charge_items[ecidx].health_plan_id != reprocessedcharges->charges[rcidx]
    .health_plan_id)) OR ((((encountercharges->charge_items[ecidx].fin_class_cd != reprocessedcharges
    ->charges[rcidx].fin_class_cd)) OR ((((encountercharges->charge_items[ecidx].admit_type_cd !=
    reprocessedcharges->charges[rcidx].admit_type_cd)) OR ((encountercharges->charge_items[ecidx].
    med_service_cd != reprocessedcharges->charges[rcidx].med_service_cd))) )) )) )
     CALL logmessage("evaluateChargeForUpdates",build("Updating Charge [",encountercharges->
       charge_items[ecidx].charge_item_id,"] due to updated charge attributes"),log_debug)
     CALL addupdatecharge(encountercharges,ecidx,reprocessedcharges,rcidx,updatecharges)
    ENDIF
    SET ecmcnt = size(encountercharges->charge_items[ecidx].charge_mods,5)
    SET rcmcnt = size(reprocessedcharges->charges[rcidx].mods.charge_mods,5)
    FOR (ecmidx = 1 TO ecmcnt)
      IF ((encountercharges->charge_items[ecidx].charge_mods[ecmidx].charge_mod_type_cd=
      cs13019_bill_code_cd)
       AND (encountercharges->charge_items[ecidx].charge_mods[ecmidx].active_ind=true))
       SET rcmidx = locateval(rcmidx,1,rcmcnt,encountercharges->charge_items[ecidx].charge_mods[
        ecmidx].field1_id,reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field1_id,
        encountercharges->charge_items[ecidx].charge_mods[ecmidx].field2_id,reprocessedcharges->
        charges[rcidx].mods.charge_mods[rcmidx].field2_id,encountercharges->charge_items[ecidx].
        charge_mods[ecmidx].charge_mod_type_cd,reprocessedcharges->charges[rcidx].mods.charge_mods[
        rcmidx].charge_event_mod_type_cd)
       IF (rcmidx > 0)
        IF (trim(encountercharges->charge_items[ecidx].charge_mods[ecmidx].field6) != trim(
         reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field6))
         CALL logmessage("evaluateChargesForRetiering",build("Removing Charge Mod [",encountercharges
           ->charge_items[ecidx].charge_mods[ecmidx].charge_mod_id,
           "] from charge                              [",encountercharges->charge_items[ecidx].
           charge_item_id,"] and adding new charge mod ",
           " due to bill code changing from [",encountercharges->charge_items[ecidx].charge_mods[
           ecmidx].field6,"] to [",reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field6,
           "]"),log_debug)
         CALL removechargemod(encountercharges,ecidx,ecmidx,removechargemods)
         CALL addchargemod(reprocessedcharges,ecidx,rcidx,rcmidx,addchargemods)
        ENDIF
       ELSE
        CALL logmessage("evaluateChargesForRetiering",build("Removing Charge Mod [",encountercharges
          ->charge_items[ecidx].charge_mods[ecmidx].charge_mod_id,
          "] from charge                          [",encountercharges->charge_items[ecidx].
          charge_item_id,"] because it ",
          " is no longer applicable for this charge"),log_debug)
        CALL removechargemod(encountercharges,ecidx,ecmidx,removechargemods)
       ENDIF
      ENDIF
    ENDFOR
    FOR (rcmidx = 1 TO rcmcnt)
      IF ((reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].charge_event_mod_type_cd=
      cs13019_bill_code_cd))
       SET ecmidx = locateval(ecmidx,1,ecmcnt,reprocessedcharges->charges[rcidx].mods.charge_mods[
        rcmidx].field1_id,encountercharges->charge_items[ecidx].charge_mods[ecmidx].field1_id,
        reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field2_id,encountercharges->
        charge_items[ecidx].charge_mods[ecmidx].field2_id,reprocessedcharges->charges[rcidx].mods.
        charge_mods[rcmidx].charge_event_mod_type_cd,encountercharges->charge_items[ecidx].
        charge_mods[ecmidx].charge_mod_type_cd,true,
        encountercharges->charge_items[ecidx].charge_mods[ecmidx].active_ind)
       IF (ecmidx=0)
        CALL logmessage("evaluateChargesForRetiering",build("Adding Charge Mod to charge [",
          encountercharges->charge_items[ecidx].charge_item_id,
          "] because it is now applicable for this charge"),log_debug)
        CALL addchargemod(reprocessedcharges,ecidx,rcidx,rcmidx,addchargemods)
       ENDIF
      ENDIF
    ENDFOR
    CALL adddiscretetimerevent(mods_disrete_timer,"evaluateChargeForUpdates",
     evaluatechargeforupdatesstartdttm,"","",
     "",afcrmtimerevents)
  END ;Subroutine
 ENDIF
 IF (validate(qualifiesforreevaloninterfacefilechange,char(128))=char(128))
  SUBROUTINE (qualifiesforreevaloninterfacefilechange(encountercharges=vc(ref),ecidx=i4,
   reprocessedcharges=vc(ref),rcidx=i4) =i2)
    DECLARE oldsoarianhl7ind = i2 WITH protect, noconstant(false)
    DECLARE oldservicebasedind = i2 WITH protect, noconstant(false)
    DECLARE newsoarianhl7ind = i2 WITH protect, noconstant(false)
    DECLARE newservicebasedind = i2 WITH protect, noconstant(false)
    DECLARE retierind = i2 WITH protect, noconstant(true)
    SELECT INTO "nl:"
     FROM interface_file i
     PLAN (i
      WHERE i.interface_file_id IN (reprocessedcharges->charges[rcidx].interface_id, encountercharges
      ->charge_items[ecidx].interface_file_id)
       AND i.interface_file_id > 0.0)
     DETAIL
      IF ((i.interface_file_id=encountercharges->charge_items[ecidx].interface_file_id))
       oldsoarianhl7ind = i.sf_hl7_ind, oldservicebasedind = i.service_based_ind
      ENDIF
      IF ((i.interface_file_id=reprocessedcharges->charges[rcidx].interface_id))
       newsoarianhl7ind = i.sf_hl7_ind, newservicebasedind = i.service_based_ind
      ENDIF
     WITH nocounter
    ;end select
    IF (oldservicebasedind
     AND dochargesqualifyforretierforservicebased(encountercharges,ecidx,reprocessedcharges,rcidx))
     RETURN(true)
    ENDIF
    IF (((oldsoarianhl7ind
     AND newservicebasedind) OR (oldservicebasedind
     AND newsoarianhl7ind)) )
     SET retierind = false
    ENDIF
    IF ((encountercharges->charge_items[ecidx].interface_file_id != reprocessedcharges->charges[rcidx
    ].interface_id)
     AND retierind)
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(dochargesqualifyforretierforservicebased,char(128))=char(128))
  SUBROUTINE (dochargesqualifyforretierforservicebased(encountercharges=vc(ref),ecidx=i4,
   reprocessedcharges=vc(ref),rcidx=i4) =i2)
    DECLARE ecmidx = i4 WITH protect, noconstant(0)
    DECLARE ecmcnt = i4 WITH protect, noconstant(0)
    DECLARE ecmpos = i4 WITH protect, noconstant(0)
    DECLARE rcmidx = i4 WITH protect, noconstant(0)
    DECLARE rcmcnt = i4 WITH protect, noconstant(0)
    DECLARE rcmpos = i4 WITH protect, noconstant(0)
    DECLARE revcodecdfmeaning = vc WITH protect, constant("REVENUE")
    DECLARE cdmcdfmeaning = vc WITH protect, constant("CDM_SCHED")
    DECLARE cpt4cdfmeaning = vc WITH protect, constant("CPT4")
    DECLARE hcpcscdfmeaning = vc WITH protect, constant("HCPCS")
    DECLARE modifiercdfmeaning = vc WITH protect, constant("MODIFIER")
    DECLARE field1idmeaning = vc WITH protect, noconstant("")
    IF ((encountercharges->charge_items[ecidx].process_flg IN (flag_interfaced)))
     IF ((encountercharges->charge_items[ecidx].cost_center_cd != reprocessedcharges->charges[rcidx].
     cost_center_cd))
      CALL logmessage("dochargesQualifyForRetierForServiceBased",build("Retiering Charge [",
        encountercharges->charge_items[ecidx].charge_item_id,
        "] due to Cost Center changing from                         [",encountercharges->
        charge_items[ecidx].cost_center_cd,"] to [",
        reprocessedcharges->charges[rcidx].cost_center_cd,"]"),log_debug)
      RETURN(true)
     ENDIF
     SET ecmcnt = size(encountercharges->charge_items[ecidx].charge_mods,5)
     SET rcmcnt = size(reprocessedcharges->charges[rcidx].mods.charge_mods,5)
     IF (ecmcnt > rcmcnt)
      FOR (ecmidx = 1 TO ecmcnt)
       SET rcmidx = 0
       IF ((encountercharges->charge_items[ecidx].charge_mods[ecmidx].charge_mod_type_cd=
       cs13019_bill_code_cd))
        SET field1idmeaning = uar_get_code_meaning(encountercharges->charge_items[ecidx].charge_mods[
         ecmidx].field1_id)
        SET rcmpos = locateval(rcmidx,1,rcmcnt,field1idmeaning,uar_get_code_meaning(
          reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field1_id),
         encountercharges->charge_items[ecidx].charge_mods[ecmidx].field2_id,reprocessedcharges->
         charges[rcidx].mods.charge_mods[rcmidx].field2_id,encountercharges->charge_items[ecidx].
         charge_mods[ecmidx].charge_mod_type_cd,reprocessedcharges->charges[rcidx].mods.charge_mods[
         rcmidx].charge_event_mod_type_cd,encountercharges->charge_items[ecidx].charge_mods[ecmidx].
         active_ind,
         true)
        IF (field1idmeaning=modifiercdfmeaning)
         IF (rcmpos=0)
          CALL logmessage("dochargesQualifyForRetierForServiceBased",build("Retiering Charge [",
            encountercharges->charge_items[ecidx].charge_item_id,
            "] due to Modifier Deleted for Priority                                  [",
            encountercharges->charge_items[ecidx].charge_mods[ecmidx].field2_id,
            "] value                                  [",
            encountercharges->charge_items[ecidx].charge_mods[ecmidx].field6,"]"),log_debug)
          RETURN(true)
         ENDIF
         IF (rcmpos > 0
          AND (encountercharges->charge_items[ecidx].charge_mods[ecmidx].field6 != reprocessedcharges
         ->charges[rcidx].mods.charge_mods[rcmpos].field6))
          CALL logmessage("dochargesQualifyForRetierForServiceBased",build("Retiering Charge [",
            encountercharges->charge_items[ecidx].charge_item_id,
            "] due to Modifier priority                                   [",encountercharges->
            charge_items[ecidx].charge_mods[ecmidx].field2_id,
            "] Value from                                  [",
            encountercharges->charge_items[ecidx].charge_mods[ecmidx].field6,"] to [",
            reprocessedcharges->charges[rcidx].mods.charge_mods[rcmpos].field6,"]"),log_debug)
          RETURN(true)
         ENDIF
        ELSEIF (field1idmeaning IN (cdmcdfmeaning, cpt4cdfmeaning, hcpcscdfmeaning, revcodecdfmeaning
        )
         AND (encountercharges->charge_items[ecidx].charge_mods[ecmidx].field2_id=1))
         IF (rcmpos=0)
          CALL logmessage("dochargesQualifyForRetierForServiceBased",build("Retiering Charge [",
            encountercharges->charge_items[ecidx].charge_item_id,
            "] due to priority1 BillCode Deleted for                                  [",
            field1idmeaning,"] Value [",
            encountercharges->charge_items[ecidx].charge_mods[ecmidx].field6,"]"),log_debug)
          RETURN(true)
         ENDIF
         IF (rcmpos > 0
          AND (encountercharges->charge_items[ecidx].charge_mods[ecmidx].field6 != reprocessedcharges
         ->charges[rcidx].mods.charge_mods[rcmpos].field6))
          CALL logmessage("dochargesQualifyForRetierForServiceBased",build("Retiering Charge [",
            encountercharges->charge_items[ecidx].charge_item_id,
            "] due to priority1                                   [",field1idmeaning,
            "] value from                                  [",
            encountercharges->charge_items[ecidx].charge_mods[ecmidx].field6,"] to [",
            reprocessedcharges->charges[rcidx].mods.charge_mods[rcmpos].field6,"]"),log_debug)
          RETURN(true)
         ENDIF
        ENDIF
       ENDIF
      ENDFOR
     ELSE
      FOR (rcmidx = 1 TO rcmcnt)
       SET ecmidx = 0
       IF ((reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].charge_event_mod_type_cd=
       cs13019_bill_code_cd))
        SET field1idmeaning = uar_get_code_meaning(reprocessedcharges->charges[rcidx].mods.
         charge_mods[rcmidx].field1_id)
        SET ecmpos = locateval(ecmidx,1,ecmcnt,field1idmeaning,uar_get_code_meaning(encountercharges
          ->charge_items[ecidx].charge_mods[ecmidx].field1_id),
         reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field2_id,encountercharges->
         charge_items[ecidx].charge_mods[ecmidx].field2_id,reprocessedcharges->charges[rcidx].mods.
         charge_mods[rcmidx].charge_event_mod_type_cd,encountercharges->charge_items[ecidx].
         charge_mods[ecmidx].charge_mod_type_cd,encountercharges->charge_items[ecidx].charge_mods[
         ecmidx].active_ind,
         true)
        IF (field1idmeaning=modifiercdfmeaning)
         IF (ecmpos=0)
          CALL logmessage("dochargesQualifyForRetierForServiceBased",build("Retiering Charge [",
            encountercharges->charge_items[ecidx].charge_item_id,
            "] due to Modifier Added Priority for                                  [",
            reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field2_id,
            "] Value                                  [",
            reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field6,"]"),log_debug)
          RETURN(true)
         ENDIF
         IF (ecmpos > 0
          AND (encountercharges->charge_items[ecidx].charge_mods[ecmpos].field6 != reprocessedcharges
         ->charges[rcidx].mods.charge_mods[rcmidx].field6))
          CALL logmessage("dochargesQualifyForRetierForServiceBased",build("Retiering Charge [",
            encountercharges->charge_items[ecidx].charge_item_id,
            "] due to Modifier modified for priority                                  [",
            reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field2_id,
            "] Value from                                  [",
            encountercharges->charge_items[ecidx].charge_mods[ecmpos].field6,"] to [",
            reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field6,"]"),log_debug)
          RETURN(true)
         ENDIF
        ELSEIF (field1idmeaning IN (cdmcdfmeaning, cpt4cdfmeaning, hcpcscdfmeaning, revcodecdfmeaning
        )
         AND (reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field2_id=1))
         IF (ecmpos=0)
          CALL logmessage("dochargesQualifyForRetierForServiceBased",build("Retiering Charge [",
            encountercharges->charge_items[ecidx].charge_item_id,
            "] due to priority1 BillCode Added to                                  [",field1idmeaning,
            "] AND [",
            reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field6,"]"),log_debug)
          RETURN(true)
         ENDIF
         IF (ecmpos > 0
          AND (encountercharges->charge_items[ecidx].charge_mods[ecmpos].field6 != reprocessedcharges
         ->charges[rcidx].mods.charge_mods[rcmidx].field6))
          CALL logmessage("dochargesQualifyForRetierForServiceBased",build("Retiering Charge [",
            encountercharges->charge_items[ecidx].charge_item_id,
            "] due to priority1                                  [",field1idmeaning,
            "] value from                                  [",
            encountercharges->charge_items[ecidx].charge_mods[ecmpos].field6,"] to [",
            reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field6,"]"),log_debug)
          RETURN(true)
         ENDIF
        ENDIF
       ENDIF
      ENDFOR
     ENDIF
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(getinterfacepreferences,char(128))=char(128))
  SUBROUTINE (getinterfacepreferences(interfacefileid=f8,interfacepreferences=vc(ref)) =i2)
    SELECT INTO "nl:"
     FROM interface_file i
     PLAN (i
      WHERE i.interface_file_id=interfacefileid
       AND i.interface_file_id > 0.0)
     DETAIL
      interfacepreferences->profitind = evaluate(i.profit_type_cd,0.0,false,true),
      interfacepreferences->retierwhen.alwaysind = evaluate(i.reprocess_ind,true,true,false),
      interfacepreferences->retierwhen.fbscpt4changedind = evaluate(i.reprocess_cpt_ind,true,true,
       false)
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL addtracemessage("getInterfacePreferences",
      "Failed to find interface on interface_file table")
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(chargequalifiesforreevaluation,char(128))=char(128))
  SUBROUTINE (chargequalifiesforreevaluation(chargetypecd=f8,offsetchargeitemid=f8,processflag=i4,
   activitytypecd=f8) =i2)
   IF (chargetypecd=cs13028_debit_cd
    AND offsetchargeitemid=0.0
    AND processflag IN (flag_pending, flag_review, flag_on_hold, flag_manual, flag_abn_required,
   flag_posted, flag_interfaced)
    AND activitytypecd != cs106_person_mgmt_cd)
    RETURN(true)
   ENDIF
   RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(addcreditcharge,char(128))=char(128))
  SUBROUTINE (addcreditcharge(encountercharges=vc(ref),ecidx=i4,creditcharges=vc(ref)) =i2)
    DECLARE addcnt = i4 WITH protect, noconstant((size(creditcharges->charge,5)+ 1))
    SET stat = alterlist(creditcharges->charge,addcnt)
    SET creditcharges->charge_qual = addcnt
    SET creditcharges->charge[addcnt].charge_item_id = encountercharges->charge_items[ecidx].
    charge_item_id
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(adddebitcharge,char(128))=char(128))
  SUBROUTINE (adddebitcharge(reprocessedcharges=vc(ref),ecidx=i4,rcidx=i4,debitcharges=vc(ref)) =i2)
    DECLARE addcnt = i4 WITH protect, noconstant(size(debitcharges->charges,5))
    DECLARE addmodcnt = i4 WITH protect, noconstant(0)
    DECLARE echrgmodcnt = i4 WITH protect, noconstant(size(encountercharges->charge_items[ecidx].
      charge_mods,5))
    DECLARE echrgmodidx = i4 WITH protect, noconstant(0)
    SET stat = movereclist(reprocessedcharges->charges,debitcharges->charges,rcidx,addcnt,1,
     true)
    SET debitcharges->charges[(addcnt+ 1)].charge_item_id = 0.0
    SET debitcharges->charges[(addcnt+ 1)].parent_charge_item_id = encountercharges->charge_items[
    ecidx].charge_item_id
    SET debitcharges->charges[(addcnt+ 1)].reason_comment = build(
     "Debit charge created due to registration modification "," reevaluation of charge [",
     encountercharges->charge_items[ecidx].charge_item_id,"]")
    SET echrgmodidx = locateval(echrgmodidx,1,echrgmodcnt,cs13019_billencntr_cd,encountercharges->
     charge_items[ecidx].charge_mods[echrgmodidx].charge_mod_type_cd)
    IF (echrgmodidx > 0)
     SET addmodcnt = size(debitcharges->charges[(addcnt+ 1)].mods.charge_mods,5)
     SET stat = alterlist(debitcharges->charges[(addcnt+ 1)].mods.charge_mods,(addmodcnt+ 1))
     SET debitcharges->charges[(addcnt+ 1)].mods.charge_mods[(addmodcnt+ 1)].charge_event_mod_type_cd
      = cs13019_billencntr_cd
     SET debitcharges->charges[(addcnt+ 1)].mods.charge_mods[(addmodcnt+ 1)].field1_id =
     encountercharges->charge_items[ecidx].charge_mods[echrgmodidx].field1_id
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(removechargemod,char(128))=char(128))
  SUBROUTINE (removechargemod(encountercharges=vc(ref),ecidx=i4,ecmidx=i4,removechargemods=vc(ref)) =
   i2)
    DECLARE addcnt = i4 WITH protect, noconstant((size(removechargemods->charge_mod,5)+ 1))
    SET stat = alterlist(removechargemods->charge_mod,addcnt)
    SET removechargemods->charge_mod_qual = addcnt
    SET removechargemods->charge_mod[addcnt].charge_mod_id = encountercharges->charge_items[ecidx].
    charge_mods[ecmidx].charge_mod_id
    SET removechargemods->charge_mod[addcnt].charge_item_id = encountercharges->charge_items[ecidx].
    charge_item_id
    SET removechargemods->charge_mod[addcnt].action_type = "DEL"
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(addchargemod,char(128))=char(128))
  SUBROUTINE (addchargemod(reprocessedcharges=vc(ref),ecidx=i4,rcidx=i4,rcmidx=i4,addchargemods=vc(
    ref)) =i2)
    DECLARE addcnt = i4 WITH protect, noconstant((size(addchargemods->charge_mod,5)+ 1))
    SET stat = alterlist(addchargemods->charge_mod,addcnt)
    SET addchargemods->charge_mod_qual = addcnt
    SET addchargemods->charge_mod[addcnt].action_type = "ADD"
    SET addchargemods->charge_mod[addcnt].charge_item_id = encountercharges->charge_items[ecidx].
    charge_item_id
    SET addchargemods->charge_mod[addcnt].charge_mod_type_cd = reprocessedcharges->charges[rcidx].
    mods.charge_mods[rcmidx].charge_mod_type_cd
    SET addchargemods->charge_mod[addcnt].charge_event_mod_type_cd = reprocessedcharges->charges[
    rcidx].mods.charge_mods[rcmidx].charge_event_mod_type_cd
    SET addchargemods->charge_mod[addcnt].field1 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field1
    SET addchargemods->charge_mod[addcnt].field2 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field2
    SET addchargemods->charge_mod[addcnt].field3 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field3
    SET addchargemods->charge_mod[addcnt].field4 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field4
    SET addchargemods->charge_mod[addcnt].field5 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field5
    SET addchargemods->charge_mod[addcnt].field6 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field6
    SET addchargemods->charge_mod[addcnt].field7 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field7
    SET addchargemods->charge_mod[addcnt].field8 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field8
    SET addchargemods->charge_mod[addcnt].field9 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field9
    SET addchargemods->charge_mod[addcnt].field10 = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field10
    SET addchargemods->charge_mod[addcnt].active_ind = true
    SET addchargemods->charge_mod[addcnt].field1_id = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field1_id
    SET addchargemods->charge_mod[addcnt].field2_id = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field2_id
    SET addchargemods->charge_mod[addcnt].field3_id = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field3_id
    SET addchargemods->charge_mod[addcnt].field4_id = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field4_id
    SET addchargemods->charge_mod[addcnt].field5_id = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].field5_id
    SET addchargemods->charge_mod[addcnt].nomen_id = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].nomen_id
    SET addchargemods->charge_mod[addcnt].cm1_nbr = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].cm1_nbr
    SET addchargemods->charge_mod[addcnt].beg_effective_dt_tm = cnvtdatetime(sysdate)
    SET addchargemods->charge_mod[addcnt].end_effective_dt_tm = cnvtdatetime("31-DEC-2100 23:59:59")
    SET addchargemods->charge_mod[addcnt].activity_dt_tm = reprocessedcharges->charges[rcidx].mods.
    charge_mods[rcmidx].activity_dt_tm
    SET addchargemods->skip_charge_event_mod_ind = true
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(addupdatecharge,char(128))=char(128))
  SUBROUTINE (addupdatecharge(encountercharges=vc(ref),ecidx=i4,reprocessedcharges=vc(ref),rcidx=i4,
   updatecharges=vc(ref)) =i2)
    DECLARE addcnt = i4 WITH protect, noconstant((size(updatecharges->charge,5)+ 1))
    SET stat = alterlist(updatecharges->charge,addcnt)
    SET updatecharges->charge_qual = addcnt
    SET updatecharges->charge[addcnt].charge_item_id = encountercharges->charge_items[ecidx].
    charge_item_id
    SET updatecharges->charge[addcnt].health_plan_id = reprocessedcharges->charges[rcidx].
    health_plan_id
    SET updatecharges->charge[addcnt].admit_type_cd = reprocessedcharges->charges[rcidx].
    admit_type_cd
    SET updatecharges->charge[addcnt].fin_class_cd = reprocessedcharges->charges[rcidx].fin_class_cd
    SET updatecharges->charge[addcnt].process_flg = encountercharges->charge_items[ecidx].process_flg
    SET updatecharges->charge[addcnt].med_service_cd = reprocessedcharges->charges[rcidx].
    med_service_cd
    RETURN(true)
  END ;Subroutine
 ENDIF
 SUBROUTINE (evaluatepbmrulesfordiscountcharge(reprocessedcharges=vc(ref),rcidx=i4,practionkey=vc(ref
   )) =i2)
   SET evalpbmimerstartdttm = dm12 WITH protect, noconstant(systimestamp)
   CALL logmessage("evaluatePBMRulesforDiscountCharge","Entering...",log_debug)
   DECLARE rcmidx = i4 WITH protect, noconstant(0)
   DECLARE happ = i4 WITH protect, noconstant(0)
   DECLARE htask = i4 WITH protect, noconstant(0)
   DECLARE hreq4050214 = i4 WITH protect, noconstant(0)
   DECLARE hreq4050215 = i4 WITH protect, noconstant(0)
   DECLARE hreq1 = i4 WITH protect, noconstant(0)
   DECLARE rsidx = i4 WITH protect, noconstant(0)
   DECLARE rscnt = i4 WITH protect, noconstant(0)
   DECLARE logicaldomainid = f8 WITH protect, noconstant(0.0)
   DECLARE hreq = i4 WITH protect, noconstant(0)
   DECLARE hrep = i4 WITH protect, noconstant(0)
   DECLARE hstatusdata = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE oaidx = i4 WITH protect, noconstant(0)
   DECLARE oacnt = i4 WITH protect, noconstant(0)
   DECLARE hreqnum = i4 WITH protect, constant(4050214)
   DECLARE hrep2 = i4 WITH protect, noconstant(0)
   DECLARE hobjarray = i4 WITH protect, noconstant(0)
   DECLARE haction = i4 WITH protect, noconstant(0)
   DECLARE acnt = i4 WITH protect, noconstant(0)
   DECLARE aidx = i4 WITH protect, noconstant(0)
   DECLARE hqual = i4 WITH protect, noconstant(0)
   DECLARE hcontextqual = i4 WITH protect, noconstant(0)
   DECLARE categorykey = vc WITH protect, constant("CHRGPOST")
   DECLARE eventkey = vc WITH protect, constant("CHRG_WRITEOFF")
   FREE RECORD rsrec
   RECORD rsrec(
     1 rulesets[*]
       2 rulesetkey = vc
       2 eventkey = vc
       2 categorykey = vc
       2 flextypemeaning = vc
   )
   IF ( NOT (getlogicaldomain(ld_concept_pft_ruleset,logicaldomainid)))
    CALL logmessage("logical domain","Failed to retrieve logical domain...",log_error)
    RETURN(false)
   ENDIF
   IF (uar_crmbeginapp(4080000,happ)=0)
    IF (uar_crmbegintask(happ,4080000,htask) != 0)
     CALL logmessage("initRequest","CRMBegingTask failed [4080000]",log_error)
     RETURN(false)
    ENDIF
   ELSE
    CALL logmessage("initRequest","CRMBegingApp failed [4080000]",log_error)
    RETURN(false)
   ENDIF
   SET stat = uar_crmbeginreq(htask,nullterm("pft_srvCheckRules"),hreqnum,hreq4050214)
   IF (stat != 0)
    CALL logmessage("getRuleSets","CRMBegingReq failed [4050214]",log_error)
    RETURN(false)
   ENDIF
   SET hreq = uar_crmgetrequest(hreq4050214)
   SET stat = uar_srvsetdouble(hreq,nullterm("logical_domain_id"),logicaldomainid)
   SET hitem = uar_srvadditem(hreq,nullterm("objArray"))
   SET stat = uar_srvsetstring(hitem,nullterm("category_key"),nullterm(trim(categorykey,3)))
   SET stat = uar_srvsetstring(hitem,nullterm("event_key"),nullterm(trim(eventkey,3)))
   IF (uar_crmperform(hreq4050214) != 0)
    CALL logmessage("getRuleSets","CRM Request [4050214] returned a 'F' status",log_error)
    RETURN(false)
   ENDIF
   SET hrep = uar_crmgetreply(hreq4050214)
   SET hstatusdata = uar_srvgetstruct(hrep,nullterm("status_data"))
   IF (uar_srvgetstringptr(hstatusdata,"status")="F")
    CALL logmessage("getRuleSets","CRM Request [4050214] returned a Failure status",log_error)
    RETURN(false)
   ENDIF
   SET oacnt = uar_srvgetitemcount(hrep,nullterm("objArray"))
   IF (oacnt=0)
    CALL logmessage("getRuleSets","No rulesets defined",log_info)
    RETURN(true)
   ENDIF
   FOR (oaidx = 1 TO oacnt)
    SET hitem = uar_srvgetitem(hrep,"objArray",(oaidx - 1))
    IF (((rscnt=0) OR (locateval(lidx,1,rscnt,uar_srvgetstringptr(hitem,"ruleset_key"),rsrec->
     rulesets[lidx].rulesetkey)=0)) )
     SET rscnt += 1
     SET stat = alterlist(rsrec->rulesets,rscnt)
     SET rsrec->rulesets[rscnt].rulesetkey = uar_srvgetstringptr(hitem,"ruleset_key")
     SET rsrec->rulesets[rscnt].eventkey = uar_srvgetstringptr(hitem,"event_key")
     SET rsrec->rulesets[rscnt].categorykey = uar_srvgetstringptr(hitem,"category_key")
     SET rsrec->rulesets[rscnt].flextypemeaning = uar_srvgetstringptr(hitem,"flex_type_meaning")
    ENDIF
   ENDFOR
   SET rscnt = size(rsrec->rulesets,5)
   IF (rscnt=0)
    CALL logmessage("main","No rulesets to evaluate.",log_debug)
    RETURN(false)
   ENDIF
   IF (uar_crmbeginreq(htask,"pft_srvProcessRulesEx",4050215,hreq4050215)=0)
    SET hreq1 = uar_crmgetrequest(hreq4050215)
   ELSE
    CALL logmessage("main","CRMBegingReq failed [4050215]",log_error)
    RETURN(false)
   ENDIF
   SET stat = uar_srvsetdouble(hreq1,nullterm("logical_domain_id"),logicaldomainid)
   SET hobjarray = uar_srvadditem(hreq1,"objArray")
   CALL uar_srvsetstring(hobjarray,"ruleset_key",nullterm("CHRGWRITEOFF"))
   FOR (rsidx = 1 TO rscnt)
     IF (rsidx=1)
      SET hqual = uar_srvadditem(hobjarray,"qual")
      SET hcontextqual = uar_srvadditem(hqual,"context_qual")
     ELSE
      SET hqual = uar_srvgetitem(hobjarray,"qual",0)
      SET hcontextqual = uar_srvgetitem(hqual,"context_qual",0)
     ENDIF
     IF ((reprocessedcharges->charges[rcidx].bill_item_id > 0.0))
      CALL addtoken_f8(hcontextqual,"T_BILLITEM",reprocessedcharges->charges[rcidx].bill_item_id)
     ENDIF
     IF ((reprocessedcharges->charges[rcidx].admit_type_cd > 0.0))
      SELECT INTO "nl:"
       FROM encounter e
       WHERE (e.encntr_id=reprocessedcharges->charges[rcidx].encntr_id)
       DETAIL
        CALL addtoken_f8(hcontextqual,"T_ENCTYPECLS",e.encntr_type_class_cd)
       WITH nocounter
      ;end select
     ENDIF
     IF ((reprocessedcharges->charges[rcidx].fin_class_cd > 0.0))
      CALL addtoken_f8(hcontextqual,"T_FINCLASS",reprocessedcharges->charges[rcidx].fin_class_cd)
     ENDIF
     IF ((reprocessedcharges->charges[rcidx].health_plan_id > 0.0))
      CALL addtoken_f8(hcontextqual,"T_HEALTHPLAN",reprocessedcharges->charges[rcidx].health_plan_id)
     ENDIF
     FOR (rcmidx = 1 TO size(reprocessedcharges->charges[rcidx].mods.charge_mods,5))
       IF (uar_get_code_meaning(reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].field1_id
        )="REVENUE")
        CALL addtoken_f8(hcontextqual,"T_REVCODE",reprocessedcharges->charges[rcidx].mods.
         charge_mods[rcmidx].field3_id)
       ELSEIF (uar_get_code_meaning(reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].
        field1_id)="HCPCS"
        AND (reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].nomen_id > 0.0))
        SELECT INTO "nl:"
         FROM nomenclature n
         PLAN (n
          WHERE (n.nomenclature_id=reprocessedcharges->charges[rcidx].mods.charge_mods[rcmidx].
          nomen_id)
           AND n.active_ind=true)
         DETAIL
          CALL addtoken_vc(hcontextqual,"T_CHRGHCPCS",n.source_identifier)
         WITH nocounter
        ;end select
       ENDIF
     ENDFOR
     CALL addtoken_f8(hcontextqual,"T_CUSTOM",reprocessedcharges->charges[rcidx].charge_item_id)
   ENDFOR
   IF (uar_crmperform(hreq4050215) != 0)
    CALL logmessage("evaluateRuleSet","CrmPerform Error for request [4050215]",log_error)
    RETURN(false)
   ENDIF
   SET hrep2 = uar_crmgetreply(hreq4050215)
   SET hstatusdata = uar_srvgetstruct(hrep2,"status_data")
   IF (uar_srvgetstringptr(hstatusdata,"status") != "S")
    CALL logmessage("evaluateRuleSet","CRM Request [4050215] returned a Failure status",log_error)
    RETURN(false)
   ENDIF
   SET oacnt = uar_srvgetitemcount(hrep2,"objArray")
   FOR (oaidx = 1 TO oacnt)
     SET hobjarray = uar_srvgetitem(hrep2,"objArray",(oaidx - 1))
     SET acnt = uar_srvgetitemcount(hobjarray,"actions")
     FOR (aidx = 1 TO acnt)
      SET haction = uar_srvgetitem(hobjarray,"actions",(aidx - 1))
      IF (cnvtupper(trim(practionkey,3)) != "WRITEOFF")
       SET practionkey = uar_srvgetstringptr(haction,"action_key")
      ENDIF
     ENDFOR
   ENDFOR
   IF (hreq4050214 > 0)
    CALL uar_crmendreq(hreq4050214)
   ENDIF
   IF (hreq4050215 > 0)
    CALL uar_crmendreq(hreq4050215)
   ENDIF
   IF (htask > 0)
    CALL uar_crmendtask(htask)
   ENDIF
   IF (happ > 0)
    CALL uar_crmendapp(happ)
   ENDIF
   CALL adddiscretetimerevent(mods_disrete_timer,"evaluatePBMRulesforDiscountCharge",
    evalpbmimerstartdttm,"","",
    "",afcrmtimerevents)
   FREE RECORD rsrec
   CALL logmessage("evaluatePBMRulesforDiscountCharge","Exiting...",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (addtoken_f8(pcontextqual=i4,ptoken=vc,pf8value=f8) =null)
   SET htokenqual = uar_srvadditem(pcontextqual,"token_qual")
   CALL uar_srvsetstring(htokenqual,"flex_token_meaning",nullterm(trim(ptoken,3)))
   CALL uar_srvsetstring(htokenqual,"data_type_meaning",nullterm("DOUBLE"))
   CALL uar_srvsetdouble(htokenqual,"double_value",pf8value)
 END ;Subroutine
 SUBROUTINE (addtoken_vc(pcontextqual=i4,ptoken=vc,pvcvalue=vc) =null)
   SET htokenqual = uar_srvadditem(pcontextqual,"token_qual")
   CALL uar_srvsetstring(htokenqual,"flex_token_meaning",nullterm(trim(ptoken,3)))
   CALL uar_srvsetstring(htokenqual,"data_type_meaning",nullterm("STRING"))
   CALL uar_srvsetstring(htokenqual,"string_value",nullterm(pvcvalue))
 END ;Subroutine
 SUBROUTINE (checkdiscountadjustmentoncharge(encounterchargeitemid=f8) =i2)
   CALL logmessage("checkDiscountAdjustmentOnCharge","Entering...",log_debug)
   SELECT INTO "nl:"
    FROM pft_charge pc,
     pft_trans_reltn ptr,
     batch_trans_file btf
    PLAN (pc
     WHERE pc.charge_item_id=encounterchargeitemid
      AND pc.active_ind=true)
     JOIN (ptr
     WHERE ptr.parent_entity_id=pc.pft_charge_id
      AND ptr.parent_entity_name="PFTCHARGE"
      AND ptr.active_ind=true
      AND ptr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
      AND ptr.end_effective_dt_tm > cnvtdatetime(sysdate)
      AND  NOT ( EXISTS (
     (SELECT
      1
      FROM trans_trans_reltn ttr
      WHERE ttr.parent_activity_id=ptr.activity_id
       AND ttr.trans_reltn_reason_cd=cs25753_reversal_cd
       AND ttr.active_ind=true
       AND ttr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND ttr.end_effective_dt_tm > cnvtdatetime(sysdate)))))
     JOIN (btf
     WHERE btf.batch_trans_file_id=ptr.batch_trans_file_id
      AND btf.chrg_writeoff_ind=1
      AND btf.active_ind=true)
    WITH nocounter
   ;end select
   IF (curqual > 0)
    CALL logmessage("checkDiscountAdjustmentOnCharge","Exiting...",log_debug)
    RETURN(true)
   ELSE
    CALL logmessage("checkDiscountAdjustmentOnCharge","Exiting...",log_debug)
    RETURN(false)
   ENDIF
 END ;Subroutine
 IF (validate(isencounterhealthplaneffectivedatechange,char(128))=char(128))
  SUBROUTINE (isencounterhealthplaneffectivedatechange(pencntrid=f8) =i2)
    DECLARE iseffectivedatechange = i2 WITH protect, noconstant(false)
    DECLARE lpftencntrid = f8 WITH protect, noconstant(0.0)
    DECLARE pftcnt = i4 WITH protect, noconstant(0)
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE hpcnt = i4 WITH protect, noconstant(0)
    DECLARE idhpeffimerstartdttm = dm12 WITH protect, noconstant(systimestamp)
    SELECT INTO "nl:"
     FROM encounter e
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.encntr_type_class_cd=cs69_recurring_class_cd)
     WITH nocounter
    ;end select
    IF (curqual > 0)
     RETURN(false)
    ENDIF
    IF ( NOT (checkiforgmarkedfornonrecurringhpexpire(pencntrid)))
     RETURN(false)
    ENDIF
    RECORD activeencounter(
      1 pftencntr[*]
        2 encntrplancobid = f8
        2 pftencntrid = f8
        2 accountid = f8
        2 charges[*]
          3 chargeitemid = f8
          3 chargehealthplanid = f8
          3 servicedttm = dq8
          3 bhrhealthplanid = f8
          3 priorityseq = i4
          3 finclasscd = f8
    ) WITH protect
    RECORD charges(
      1 charge[*]
        2 charge_item_id = f8
    ) WITH protect
    SELECT INTO "nl:"
     FROM charge c,
      pft_charge pc,
      pft_encntr pe,
      bo_hp_reltn bhr,
      benefit_order bo
     PLAN (c
      WHERE c.encntr_id=pencntrid
       AND c.offset_charge_item_id=0.0
       AND c.active_ind=true)
      JOIN (pc
      WHERE pc.charge_item_id=c.charge_item_id
       AND pc.active_ind=true
       AND pc.ext_billed_ind=false)
      JOIN (pe
      WHERE pe.pft_encntr_id=pc.pft_encntr_id
       AND pe.active_ind=true)
      JOIN (bo
      WHERE bo.pft_encntr_id=pe.pft_encntr_id
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.active_ind=true)
     ORDER BY pe.pft_encntr_id, c.charge_item_id
     HEAD REPORT
      pcnt = 0, cnt = 0
     HEAD pe.pft_encntr_id
      cnt = 0, pcnt += 1, stat = alterlist(activeencounter->pftencntr,pcnt),
      activeencounter->pftencntr[pcnt].encntrplancobid = pe.encntr_plan_cob_id, activeencounter->
      pftencntr[pcnt].pftencntrid = pe.pft_encntr_id, activeencounter->pftencntr[pcnt].accountid = pe
      .acct_id
     DETAIL
      cnt += 1, stat = alterlist(activeencounter->pftencntr[pcnt].charges,cnt), activeencounter->
      pftencntr[pcnt].charges[cnt].chargeitemid = c.charge_item_id,
      activeencounter->pftencntr[pcnt].charges[cnt].chargehealthplanid = c.health_plan_id,
      activeencounter->pftencntr[pcnt].charges[cnt].servicedttm = cnvtdatetime(c.service_dt_tm),
      activeencounter->pftencntr[pcnt].charges[cnt].bhrhealthplanid = bhr.health_plan_id,
      activeencounter->pftencntr[pcnt].charges[cnt].priorityseq = bhr.priority_seq, activeencounter->
      pftencntr[pcnt].charges[cnt].finclasscd = bo.fin_class_cd
     WITH nocounter
    ;end select
    CALL getregistrationdata(pencntrid,encountervalues)
    IF (validate(debug,0)=1)
     CALL echorecord(regdata)
    ENDIF
    FOR (pftidx = 1 TO size(activeencounter->pftencntr,5))
     FOR (cobidx = 1 TO size(regdata->dmg.cob.cobrec,5))
       IF ((regdata->dmg.cob.cobrec[cobidx].encntrplancobid=activeencounter->pftencntr[pftidx].
       encntrplancobid))
        FOR (chrgidx = 1 TO size(activeencounter->pftencntr[pftidx].charges,5))
          IF ((regdata->dmg.cob.cobrec[cobidx].begeffectivedttm <= activeencounter->pftencntr[pftidx]
          .charges[chrgidx].servicedttm)
           AND (regdata->dmg.cob.cobrec[cobidx].endeffectivedttm >= activeencounter->pftencntr[pftidx
          ].charges[chrgidx].servicedttm))
           IF ((activeencounter->pftencntr[pftidx].charges[chrgidx].finclasscd=cs354_selfpay_cd))
            IF (size(regdata->dmg.cob.cobrec[cobidx].selfpays,5) > 0)
             FOR (spidx = 1 TO size(regdata->dmg.cob.cobrec[cobidx].selfpays,5))
               IF ((regdata->dmg.cob.cobrec[cobidx].selfpays[spidx].healthplanid=activeencounter->
               pftencntr[pftidx].charges[chrgidx].bhrhealthplanid)
                AND (((regdata->dmg.cob.cobrec[cobidx].selfpays[spidx].begeffectivedttm >
               activeencounter->pftencntr[pftidx].charges[chrgidx].servicedttm)) OR ((regdata->dmg.
               cob.cobrec[cobidx].selfpays[spidx].endeffectivedttm < activeencounter->pftencntr[
               pftidx].charges[chrgidx].servicedttm))) )
                SET lpftencntrid = checkforexisting(pencntrid,activeencounter->pftencntr[pftidx].
                 accountid,cnvtdatetime(activeencounter->pftencntr[pftidx].charges[chrgidx].
                  servicedttm),true,regdata)
                IF (lpftencntrid > 0.0)
                 SET pftcnt += 1
                 CALL addfinancialencountertolist(lpftencntrid,pftcnt)
                ENDIF
                SET iseffectivedatechange = true
                SET spidx = (size(regdata->dmg.cob.cobrec[cobidx].selfpays,5)+ 1)
                IF (validate(debug,0)=1)
                 CALL echo(
                  "Reg. SP HP to BHR HP match & Charges are not within Reg. HP Begin/End Dt-Tm.")
                 CALL echo(build2("lPftEncntrId:",lpftencntrid))
                ENDIF
               ENDIF
             ENDFOR
            ENDIF
           ELSE
            SET hpsize = size(regdata->dmg.cob.cobrec[cobidx].payers,5)
            FOR (hpidx = 1 TO hpsize)
              IF ((((regdata->dmg.cob.cobrec[cobidx].payers[hpidx].prioritysequence=1)
               AND (regdata->dmg.cob.cobrec[cobidx].payers[hpidx].healthplanid=activeencounter->
              pftencntr[pftidx].charges[chrgidx].chargehealthplanid)) OR ((regdata->dmg.cob.cobrec[
              cobidx].payers[hpidx].prioritysequence > 1)
               AND (regdata->dmg.cob.cobrec[cobidx].payers[hpidx].prioritysequence=activeencounter->
              pftencntr[pftidx].charges[chrgidx].priorityseq)
               AND (regdata->dmg.cob.cobrec[cobidx].payers[hpidx].healthplanid=activeencounter->
              pftencntr[pftidx].charges[chrgidx].bhrhealthplanid))) )
               IF ((((regdata->dmg.cob.cobrec[cobidx].payers[hpidx].begeffectivedttm >
               activeencounter->pftencntr[pftidx].charges[chrgidx].servicedttm)) OR ((regdata->dmg.
               cob.cobrec[cobidx].payers[hpidx].endeffectivedttm < activeencounter->pftencntr[pftidx]
               .charges[chrgidx].servicedttm))) )
                SET lpftencntrid = checkforexisting(pencntrid,activeencounter->pftencntr[pftidx].
                 accountid,cnvtdatetime(activeencounter->pftencntr[pftidx].charges[chrgidx].
                  servicedttm),false,regdata)
                IF (lpftencntrid > 0.0)
                 SET pftcnt += 1
                 CALL addfinancialencountertolist(lpftencntrid,pftcnt)
                ENDIF
                SET iseffectivedatechange = true
                SET hpidx = (hpsize+ 1)
                IF (validate(debug,0)=1)
                 CALL echo("Matching Payer COB & Charges are not within Reg. HP Begin/End Dt-Tm.")
                 CALL echo(build2("lPftEncntrId:",lpftencntrid))
                ENDIF
               ENDIF
              ENDIF
            ENDFOR
           ENDIF
          ELSE
           SET lpftencntrid = checkforexisting(pencntrid,activeencounter->pftencntr[pftidx].accountid,
            cnvtdatetime(activeencounter->pftencntr[pftidx].charges[chrgidx].servicedttm),false,
            regdata)
           IF (lpftencntrid > 0.0)
            SET pftcnt += 1
            CALL addfinancialencountertolist(lpftencntrid,pftcnt)
           ENDIF
           SET iseffectivedatechange = true
           IF (validate(debug,0)=1)
            CALL echo("COB Effective Dt-Tm not within Charge Service Begin/End Dt-Tm.")
            CALL echo(build2("lPftEncntrId:",lpftencntrid))
           ENDIF
          ENDIF
        ENDFOR
        SET cobidx = (size(regdata->dmg.cob.cobrec,5)+ 1)
       ELSE
        IF ((activeencounter->pftencntr[pftidx].encntrplancobid=0)
         AND (regdata->dmg.cob.cobrec[cobidx].encntrplancobid != 0))
         CALL getfinancialdata(activeencounter->pftencntr[pftidx].pftencntrid,encountervalues)
         IF (validate(debug,0)=1)
          CALL echorecord(findata)
         ENDIF
         IF (matchregenccobtofincob(regdata,findata))
          FOR (chrgidx = 1 TO size(activeencounter->pftencntr[pftidx].charges,5))
            IF ((regdata->dmg.cob.cobrec[cobidx].begeffectivedttm > activeencounter->pftencntr[pftidx
            ].charges[chrgidx].servicedttm)
             AND (regdata->dmg.cob.cobrec[cobidx].endeffectivedttm < activeencounter->pftencntr[
            pftidx].charges[chrgidx].servicedttm))
             SET lpftencntrid = checkforexisting(pencntrid,activeencounter->pftencntr[pftidx].
              accountid,cnvtdatetime(activeencounter->pftencntr[pftidx].charges[chrgidx].servicedttm),
              false,regdata)
             IF (lpftencntrid > 0.0)
              SET pftcnt += 1
              CALL addfinancialencountertolist(lpftencntrid,pftcnt)
             ENDIF
             SET iseffectivedatechange = true
             IF (validate(debug,0)=1)
              CALL echo("Reg. & Fin. COB match & Charges are not within Reg. HP Begin/End Dt-Tm.")
              CALL echo(build2("lPftEncntrId:",lpftencntrid))
             ENDIF
            ENDIF
          ENDFOR
         ENDIF
        ENDIF
        IF ((activeencounter->pftencntr[pftidx].encntrplancobid > 0)
         AND cobidx=size(regdata->dmg.cob.cobrec,5))
         FOR (chrgidx = 1 TO size(activeencounter->pftencntr[pftidx].charges,5))
          SET lpftencntrid = checkforexisting(pencntrid,activeencounter->pftencntr[pftidx].accountid,
           cnvtdatetime(activeencounter->pftencntr[pftidx].charges[chrgidx].servicedttm),false,
           regdata)
          IF (lpftencntrid > 0.0)
           SET pftcnt += 1
           CALL addfinancialencountertolist(lpftencntrid,pftcnt)
          ENDIF
         ENDFOR
         SET iseffectivedatechange = true
         SET cobidx = (size(regdata->dmg.cob.cobrec,5)+ 1)
         IF (validate(debug,0)=1)
          CALL echo("No matching encntrPlanCobId.")
          CALL echo(build2("lPftEncntrId:",lpftencntrid))
         ENDIF
        ENDIF
       ENDIF
     ENDFOR
     IF (iseffectivedatechange)
      SET pftcnt += 1
      CALL addfinancialencountertolist(activeencounter->pftencntr[pftidx].pftencntrid,pftcnt)
     ENDIF
    ENDFOR
    IF (validate(debug,0)=1)
     CALL echorecord(affectedpftencntrs)
     CALL echo(build2("isEffectiveDateChange:",iseffectivedatechange))
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"isEncounterHealthPlanEffectiveDateChange",
     idhpeffimerstartdttm,"","",
     "",afcrmtimerevents)
    IF (iseffectivedatechange)
     SET healthplandtchangeind->changeind = true
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(isprofileconversionunmatched,char(128))=char(128))
  SUBROUTINE (isprofileconversionunmatched(pencntrid=f8) =i2)
    DECLARE isprofconvtimerstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE ismatchnotfound = i2 WITH protect, noconstant(false)
    DECLARE lpftencntrid = f8 WITH protect, noconstant(0.0)
    DECLARE pftcnt = i4 WITH protect, noconstant(0)
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE hpcnt = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM encounter e
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.encntr_type_class_cd=cs69_recurring_class_cd)
     WITH nocounter
    ;end select
    IF (curqual > 0)
     RETURN(false)
    ENDIF
    RECORD activeencounter(
      1 pftencntr[*]
        2 encntrplancobid = f8
        2 pftencntrid = f8
        2 accountid = f8
        2 charges[*]
          3 chargeitemid = f8
          3 chargehealthplanid = f8
          3 servicedttm = dq8
          3 bhrhealthplanid = f8
          3 priorityseq = i4
          3 finclasscd = f8
    ) WITH protect
    RECORD charges(
      1 charge[*]
        2 charge_item_id = f8
    ) WITH protect
    SELECT INTO "nl:"
     FROM charge c,
      pft_charge pc,
      pft_encntr pe,
      bo_hp_reltn bhr,
      benefit_order bo
     PLAN (c
      WHERE c.encntr_id=pencntrid
       AND c.offset_charge_item_id=0.0
       AND c.active_ind=true)
      JOIN (pc
      WHERE pc.charge_item_id=c.charge_item_id
       AND pc.active_ind=true
       AND pc.ext_billed_ind=false)
      JOIN (pe
      WHERE pe.pft_encntr_id=pc.pft_encntr_id
       AND pe.active_ind=true)
      JOIN (bo
      WHERE bo.pft_encntr_id=pe.pft_encntr_id
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.active_ind=true)
     ORDER BY pe.pft_encntr_id, c.charge_item_id
     HEAD REPORT
      pcnt = 0, cnt = 0
     HEAD pe.pft_encntr_id
      cnt = 0, pcnt += 1, stat = alterlist(activeencounter->pftencntr,pcnt),
      activeencounter->pftencntr[pcnt].encntrplancobid = pe.encntr_plan_cob_id, activeencounter->
      pftencntr[pcnt].pftencntrid = pe.pft_encntr_id, activeencounter->pftencntr[pcnt].accountid = pe
      .acct_id
     DETAIL
      cnt += 1, stat = alterlist(activeencounter->pftencntr[pcnt].charges,cnt), activeencounter->
      pftencntr[pcnt].charges[cnt].chargeitemid = c.charge_item_id,
      activeencounter->pftencntr[pcnt].charges[cnt].chargehealthplanid = c.health_plan_id,
      activeencounter->pftencntr[pcnt].charges[cnt].servicedttm = cnvtdatetime(c.service_dt_tm),
      activeencounter->pftencntr[pcnt].charges[cnt].bhrhealthplanid = bhr.health_plan_id,
      activeencounter->pftencntr[pcnt].charges[cnt].priorityseq = bhr.priority_seq, activeencounter->
      pftencntr[pcnt].charges[cnt].finclasscd = bo.fin_class_cd
     WITH nocounter
    ;end select
    CALL getregistrationdata(pencntrid,encountervalues)
    IF (validate(debug,0)=1)
     CALL echorecord(regdata)
    ENDIF
    FOR (pftidx = 1 TO size(activeencounter->pftencntr,5))
      FOR (cobidx = 1 TO size(regdata->dmg.cob.cobrec,5))
        IF ((activeencounter->pftencntr[pftidx].encntrplancobid=0)
         AND (regdata->dmg.cob.cobrec[cobidx].encntrplancobid != 0))
         CALL getfinancialdata(activeencounter->pftencntr[pftidx].pftencntrid,encountervalues)
         IF (validate(debug,0)=1)
          CALL echorecord(findata)
         ENDIF
         IF ( NOT (matchregenccobtofincob(regdata,findata)))
          SET pftcnt += 1
          CALL addfinancialencountertolist(activeencounter->pftencntr[pftidx].pftencntrid,pftcnt)
          SET ismatchnotfound = true
         ENDIF
        ENDIF
      ENDFOR
    ENDFOR
    IF (validate(debug,0)=1)
     CALL echorecord(affectedpftencntrs)
     CALL echo(build2("isMatchNotFound:",ismatchnotfound))
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"isProfileConversionUnmatched",
     isprofconvtimerstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(ismatchnotfound)
  END ;Subroutine
 ENDIF
 IF (validate(addfinancialencountertolist,char(128))=char(128))
  SUBROUTINE (addfinancialencountertolist(ppftencntrid=f8,ppftcnt=i4(ref)) =null)
    DECLARE matchind = i2 WITH protect, noconstant(false)
    IF (ppftcnt > 1)
     FOR (pidx = 1 TO size(affectedpftencntrs->pft_encntrs,5))
       IF ((affectedpftencntrs->pft_encntrs[pidx].pft_encntr_id=ppftencntrid))
        SET matchind = true
       ENDIF
     ENDFOR
    ENDIF
    IF ( NOT (matchind))
     SET stat = alterlist(affectedpftencntrs->pft_encntrs,ppftcnt)
     SET affectedpftencntrs->pft_encntrs[ppftcnt].pft_encntr_id = ppftencntrid
    ELSE
     SET ppftcnt -= 1
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(checkforexisting,char(128))=char(128))
  SUBROUTINE (checkforexisting(pencntrid=f8,pacctid=f8,pservicedatetime=f8,selfpayind=i2,prregdata=vc
   (ref)) =f8)
    DECLARE cfepftencntrid = f8 WITH protect, noconstant(0.0)
    DECLARE selfpftencntrid = f8 WITH protect, noconstant(0.0)
    DECLARE pftlistcnt = i4 WITH protect, noconstant(0)
    DECLARE pftincnt = i4 WITH protect, noconstant(0)
    DECLARE bocnt = i4 WITH protect, noconstant(0)
    DECLARE hpsize = i4 WITH protect, noconstant(0)
    DECLARE spsize = i4 WITH protect, noconstant(0)
    DECLARE bohplist = i4 WITH protect, noconstant(0)
    DECLARE cobrecidx = i4 WITH protect, noconstant(0)
    DECLARE hppftcnt = i4 WITH protect, noconstant(0)
    DECLARE benefitorderid = f8 WITH protect, noconstant(0.0)
    DECLARE plancount = i4 WITH protect, noconstant(0)
    DECLARE count = i4 WITH protect, noconstant(0)
    DECLARE epcid = f8 WITH protect, noconstant(0.0)
    DECLARE checkforexistingstartdttm = dm12 WITH protect, noconstant(systimestamp)
    IF (selfpayind)
     RECORD splan(
       1 selfpays[*]
         2 healthplanid = f8
         2 eprid = f8
     ) WITH protect
     FOR (cobrecidx = 1 TO size(prregdata->dmg.cob.cobrec,5))
       SET spsize = 0
       SELECT INTO "nl:"
        FROM (dummyt d  WITH seq = value(size(prregdata->dmg.cob.cobrec[cobrecidx].selfpays,5)))
        PLAN (d
         WHERE (prregdata->dmg.cob.cobrec[cobrecidx].begeffectivedttm <= pservicedatetime)
          AND (prregdata->dmg.cob.cobrec[cobrecidx].endeffectivedttm >= pservicedatetime)
          AND (prregdata->dmg.cob.cobrec[cobrecidx].selfpays[d.seq].begeffectivedttm <=
         pservicedatetime)
          AND (prregdata->dmg.cob.cobrec[cobrecidx].selfpays[d.seq].endeffectivedttm >=
         pservicedatetime))
        DETAIL
         spsize += 1, stat = alterlist(splan->selfpays,spsize), splan->selfpays[spsize].healthplanid
          = prregdata->dmg.cob.cobrec[cobrecidx].selfpays[d.seq].healthplanid,
         splan->selfpays[spsize].eprid = prregdata->dmg.cob.cobrec[cobrecidx].selfpays[d.seq].
         encntrplanreltnid
        WITH nocounter
       ;end select
       IF (spsize > 0)
        SET epcid = prregdata->dmg.cob.cobrec[cobrecidx].encntrplancobid
       ENDIF
     ENDFOR
     IF (epcid > 0.0)
      SELECT INTO "nl:"
       FROM pft_encntr pe
       PLAN (pe
        WHERE pe.encntr_plan_cob_id=epcid
         AND pe.acct_id=pacctid
         AND pe.active_ind=true)
       DETAIL
        cfepftencntrid = pe.pft_encntr_id
       WITH nocounter
      ;end select
     ELSE
      RECORD pftlist(
        1 pftencntr[*]
          2 pftencntrid = f8
      ) WITH protect
      SELECT INTO "nl:"
       FROM pft_encntr pe
       PLAN (pe
        WHERE pe.encntr_id=pencntrid
         AND pe.acct_id=pacctid
         AND pe.active_ind=true)
       DETAIL
        pftlistcnt += 1, stat = alterlist(pftlist->pftencntr,pftlistcnt), pftlist->pftencntr[
        pftlistcnt].pftencntrid = pe.pft_encntr_id
       WITH nocounter
      ;end select
      IF (pftlistcnt > 0)
       FOR (pftincnt = 1 TO pftlistcnt)
         SELECT INTO "nl:"
          FROM benefit_order bo
          PLAN (bo
           WHERE (bo.pft_encntr_id=pftlist->pftencntr[pftincnt].pftencntrid)
            AND bo.active_ind=true
            AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
            AND bo.fin_class_cd=cs354_selfpay_cd)
          ORDER BY bo.benefit_order_id
          DETAIL
           benefitorderid = bo.benefit_order_id
          WITH nocounter, maxrec = 1
         ;end select
         SELECT INTO "nl:"
          FROM (dummyt d1  WITH seq = spsize),
           bo_hp_reltn bhr,
           health_plan hp
          PLAN (d1)
           JOIN (bhr
           WHERE bhr.benefit_order_id=benefitorderid
            AND (bhr.health_plan_id=splan->selfpays[d1.seq].healthplanid)
            AND (bhr.encntr_plan_reltn_id=splan->selfpays[d1.seq].eprid)
            AND bhr.active_ind=true
            AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
           JOIN (hp
           WHERE hp.health_plan_id=bhr.health_plan_id
            AND hp.active_ind=true
            AND  NOT (hp.active_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
          DETAIL
           hppftcnt += 1
          WITH nocounter
         ;end select
         IF (hppftcnt=spsize)
          SET cfepftencntrid = pftlist->pftencntr[pftincnt].pftencntrid
          SET pftincnt = (pftlistcnt+ 1)
         ELSE
          SET hppftcnt = 0
         ENDIF
         IF (cfepftencntrid=0.0
          AND selfpftencntrid=0.0)
          SELECT INTO "nl:"
           FROM pft_encntr pe,
            benefit_order bo,
            bo_hp_reltn bhr
           PLAN (pe
            WHERE (pe.pft_encntr_id=pftlist->pftencntr[pftincnt].pftencntrid)
             AND pe.active_ind=true)
            JOIN (bo
            WHERE bo.pft_encntr_id=pe.pft_encntr_id
             AND bo.active_ind=true
             AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
             AND  NOT ( EXISTS (
            (SELECT
             pcbr.benefit_order_id
             FROM pft_charge_bo_reltn pcbr,
              pft_charge pc
             WHERE pcbr.benefit_order_id=bo.benefit_order_id
              AND pcbr.active_ind=true
              AND bo.fin_class_cd != cs354_selfpay_cd
              AND pc.pft_charge_id=pcbr.pft_charge_id
              AND pc.active_ind=true
              AND pc.ext_billed_ind=true))))
            JOIN (bhr
            WHERE bhr.benefit_order_id=bo.benefit_order_id
             AND bhr.active_ind=true
             AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
           DETAIL
            bocnt += 1
           WITH nocounter
          ;end select
          IF (bocnt=1)
           SET selfpftencntrid = pftlist->pftencntr[pftincnt].pftencntrid
          ELSE
           SET bocnt = 0
          ENDIF
         ENDIF
       ENDFOR
      ENDIF
     ENDIF
     IF (cfepftencntrid=0.0
      AND selfpftencntrid > 0.0)
      SET cfepftencntrid = selfpftencntrid
     ENDIF
    ELSE
     FOR (cobrecidx = 1 TO size(prregdata->dmg.cob.cobrec,5))
       SET hpsize = 0
       RECORD hplan(
         1 payers[*]
           2 hpprioritysequence = i4
           2 hphealthplanid = f8
           2 hpeprid = f8
       ) WITH protect
       SELECT INTO "nl:"
        FROM (dummyt d  WITH seq = value(size(prregdata->dmg.cob.cobrec[cobrecidx].payers,5)))
        PLAN (d
         WHERE (prregdata->dmg.cob.cobrec[cobrecidx].begeffectivedttm <= pservicedatetime)
          AND (prregdata->dmg.cob.cobrec[cobrecidx].endeffectivedttm >= pservicedatetime)
          AND (prregdata->dmg.cob.cobrec[cobrecidx].payers[d.seq].begeffectivedttm <=
         pservicedatetime)
          AND (prregdata->dmg.cob.cobrec[cobrecidx].payers[d.seq].endeffectivedttm >=
         pservicedatetime))
        DETAIL
         hpsize += 1, stat = alterlist(hplan->payers,hpsize), hplan->payers[hpsize].
         hpprioritysequence = prregdata->dmg.cob.cobrec[cobrecidx].payers[d.seq].prioritysequence,
         hplan->payers[hpsize].hphealthplanid = prregdata->dmg.cob.cobrec[cobrecidx].payers[d.seq].
         healthplanid, hplan->payers[hpsize].hpeprid = prregdata->dmg.cob.cobrec[cobrecidx].payers[d
         .seq].encntrplanreltnid
        WITH nocounter
       ;end select
       IF (hpsize > 0)
        SET plancount = hpsize
        IF (plancount=size(prregdata->dmg.cob.cobrec[cobrecidx].payers,5)
         AND plancount > count)
         SET count = plancount
         SET plancount = 0
         SET epcid = prregdata->dmg.cob.cobrec[cobrecidx].encntrplancobid
        ENDIF
       ENDIF
     ENDFOR
     IF (epcid > 0.0)
      SELECT INTO "nl:"
       FROM pft_encntr pe
       PLAN (pe
        WHERE pe.encntr_plan_cob_id=epcid
         AND pe.acct_id=pacctid
         AND pe.active_ind=true)
       DETAIL
        cfepftencntrid = pe.pft_encntr_id
       WITH nocounter
      ;end select
     ELSE
      RECORD pftlist(
        1 pftencntr[*]
          2 pftencntrid = f8
      ) WITH protect
      SELECT INTO "nl:"
       FROM pft_encntr pe
       PLAN (pe
        WHERE pe.encntr_id=pencntrid
         AND pe.acct_id=pacctid
         AND pe.active_ind=true)
       DETAIL
        pftlistcnt += 1, stat = alterlist(pftlist->pftencntr,pftlistcnt), pftlist->pftencntr[
        pftlistcnt].pftencntrid = pe.pft_encntr_id
       WITH nocounter
      ;end select
      IF (pftlistcnt > 0)
       FOR (pftincnt = 1 TO pftlistcnt)
         SELECT INTO "nl:"
          FROM benefit_order bo
          PLAN (bo
           WHERE (bo.pft_encntr_id=pftlist->pftencntr[pftincnt].pftencntrid)
            AND bo.active_ind=true
            AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
            AND bo.fin_class_cd != cs354_selfpay_cd
            AND  NOT ( EXISTS (
           (SELECT
            pcbr.benefit_order_id
            FROM pft_charge_bo_reltn pcbr,
             pft_charge pc
            WHERE pcbr.benefit_order_id=bo.benefit_order_id
             AND pcbr.active_ind=true
             AND pc.pft_charge_id=pcbr.pft_charge_id
             AND pc.active_ind=true
             AND pc.ext_billed_ind=true))))
          ORDER BY bo.benefit_order_id
          DETAIL
           benefitorderid = bo.benefit_order_id
          WITH nocounter, maxrec = 1
         ;end select
         IF (benefitorderid > 0.0)
          SELECT INTO "nl:"
           FROM bo_hp_reltn bhr
           PLAN (bhr
            WHERE bhr.benefit_order_id=benefitorderid
             AND bhr.active_ind=true
             AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
             AND bhr.priority_seq > 0)
           DETAIL
            bohplist += 1
           WITH nocounter
          ;end select
          IF (bohplist=hpsize)
           SELECT INTO "nl:"
            FROM (dummyt d1  WITH seq = hpsize),
             bo_hp_reltn bhr,
             health_plan hp
            PLAN (d1)
             JOIN (bhr
             WHERE bhr.benefit_order_id=benefitorderid
              AND (bhr.health_plan_id=hplan->payers[d1.seq].hphealthplanid)
              AND (bhr.priority_seq=hplan->payers[d1.seq].hpprioritysequence)
              AND (bhr.encntr_plan_reltn_id=hplan->payers[d1.seq].hpeprid)
              AND bhr.active_ind=true
              AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
             JOIN (hp
             WHERE hp.health_plan_id=bhr.health_plan_id
              AND hp.active_ind=true
              AND  NOT (hp.active_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
            DETAIL
             hppftcnt += 1
            WITH nocounter
           ;end select
           IF (hppftcnt=hpsize)
            SET cfepftencntrid = pftlist->pftencntr[pftincnt].pftencntrid
            SET pftincnt = (pftlistcnt+ 1)
           ELSE
            SET hppftcnt = 0
           ENDIF
          ENDIF
          SET bohplist = 0
         ENDIF
         IF (cfepftencntrid=0.0
          AND selfpftencntrid=0.0)
          SELECT INTO "nl:"
           FROM pft_encntr pe,
            benefit_order bo,
            bo_hp_reltn bhr
           PLAN (pe
            WHERE (pe.pft_encntr_id=pftlist->pftencntr[pftincnt].pftencntrid)
             AND pe.active_ind=true)
            JOIN (bo
            WHERE bo.pft_encntr_id=pe.pft_encntr_id
             AND bo.active_ind=true
             AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
             AND  NOT ( EXISTS (
            (SELECT
             pcbr.benefit_order_id
             FROM pft_charge_bo_reltn pcbr,
              pft_charge pc
             WHERE pcbr.benefit_order_id=bo.benefit_order_id
              AND pcbr.active_ind=true
              AND bo.fin_class_cd != cs354_selfpay_cd
              AND pc.pft_charge_id=pcbr.pft_charge_id
              AND pc.active_ind=true
              AND pc.ext_billed_ind=true))))
            JOIN (bhr
            WHERE bhr.benefit_order_id=bo.benefit_order_id
             AND bhr.active_ind=true
             AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
           DETAIL
            bocnt += 1
           WITH nocounter
          ;end select
          IF (bocnt=1)
           SET selfpftencntrid = pftlist->pftencntr[pftincnt].pftencntrid
          ELSE
           SET bocnt = 0
          ENDIF
         ENDIF
       ENDFOR
      ENDIF
     ENDIF
     IF (cfepftencntrid=0.0
      AND selfpftencntrid > 0.0)
      SET cfepftencntrid = selfpftencntrid
     ENDIF
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"checkForExisting",checkforexistingstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(cfepftencntrid)
  END ;Subroutine
 ENDIF
 IF (validate(adddebitchargeforfacilitytrans,char(128))=char(128))
  SUBROUTINE (adddebitchargeforfacilitytrans(rfaccharges=vc(ref),rcidx=i4,dfaccharges=vc(ref)) =i2)
    DECLARE addcnt = i4 WITH protect, noconstant(size(dfaccharges->charges,5))
    SET stat = movereclist(rfaccharges->charges,dfaccharges->charges,rcidx,addcnt,1,
     true)
    SET dfaccharges->charges[(addcnt+ 1)].charge_item_id = 0.0
    SET dfaccharges->charges[(addcnt+ 1)].parent_charge_item_id = rfaccharges->charges[rcidx].
    parent_charge_item_id
    SET dfaccharges->charges[(addcnt+ 1)].reason_comment = build(
     "Debit charge created due to registration modification "," reevaluation of charge [",
     encountercharges->charge_items[ecidx].charge_item_id,"]")
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(reevaluatechargesforfacilitytrans,char(128))=char(128))
  SUBROUTINE (reevaluatechargesforfacilitytrans(prencchrgs=vc(ref),prrepchrgs=vc(ref),prcrchrgs=vc(
    ref),prdrchrgs=vc(ref),pruptchrgs=vc(ref),praddchrgmods=vc(ref),prrmvchrgmods=vc(ref)) =i2)
    IF ( NOT (validate(cs13028_cr_cd)))
     DECLARE cs13028_cr_cd = f8 WITH protect, constant(getcodevalue(13028,"CR",0))
    ENDIF
    DECLARE recfftimerstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE ecidx = i4 WITH protect, noconstant(0)
    DECLARE ecloc = i4 WITH protect, noconstant(0)
    DECLARE chrgidx = i4 WITH protect, noconstant(0)
    DECLARE activitytypecd = f8 WITH protect, noconstant(0.0)
    DECLARE offsetcount = i4 WITH protect, noconstant(0)
    DECLARE pmccloc = i4 WITH protect, noconstant(0)
    DECLARE pmccidx = i4 WITH protect, noconstant(0)
    FOR (ecidx = 1 TO size(prencchrgs->charge_items,5))
      SET activitytypecd = prencchrgs->charge_items[ecidx].activity_type_cd
      IF (activitytypecd=cs106_person_mgmt_cd)
       SET activitytypecd = 0.0
      ENDIF
      IF ( NOT (chargequalifiesforreevaluation(prencchrgs->charge_items[ecidx].charge_type_cd,
       prencchrgs->charge_items[ecidx].offset_charge_item_id,prencchrgs->charge_items[ecidx].
       process_flg,activitytypecd)))
       RETURN(false)
      ENDIF
    ENDFOR
    RECORD creditedchrg(
      1 charge[*]
        2 charge_item_id = f8
    ) WITH protect
    SELECT INTO "nl:"
     FROM charge c
     PLAN (c
      WHERE expand(chrgidx,1,size(prencchrgs->charge_items,5),c.charge_item_id,prencchrgs->
       charge_items[chrgidx].charge_item_id)
       AND c.active_ind=true
       AND c.charge_type_cd=cs13028_debit_cd
       AND c.activity_type_cd=cs106_person_mgmt_cd
       AND c.offset_charge_item_id > 0.0)
     ORDER BY c.charge_item_id
     HEAD c.charge_item_id
      offsetcount += 1, stat = alterlist(creditedchrg->charge,offsetcount), creditedchrg->charge[
      offsetcount].charge_item_id = c.charge_item_id
     WITH nocounter, expand = 2
    ;end select
    FOR (chrgidx = 1 TO size(prencchrgs->charge_items,5))
     IF (size(creditedchrg->charge,5) > 0)
      SET pmccloc = locateval(pmccidx,1,size(creditedchrg->charge,5),prencchrgs->charge_items[chrgidx
       ].charge_item_id,creditedchrg->charge[pmccidx].charge_item_id)
     ENDIF
     IF (pmccloc=0)
      CALL addcreditcharge(prencchrgs,chrgidx,prcrchrgs)
     ENDIF
    ENDFOR
    FOR (chrgidx = 1 TO size(prrepchrgs->charges,5))
      IF ((prrepchrgs->charges[chrgidx].charge_type_cd != cs13028_cr_cd))
       SET ecloc = locateval(ecidx,1,size(prencchrgs->charge_items,5),prrepchrgs->charges[chrgidx].
        charge_type_cd,prencchrgs->charge_items[ecidx].charge_type_cd,
        prrepchrgs->charges[chrgidx].charge_act_id,prencchrgs->charge_items[ecidx].
        charge_event_act_id,prrepchrgs->charges[chrgidx].tier_group_cd,prencchrgs->charge_items[ecidx
        ].tier_group_cd,prrepchrgs->charges[chrgidx].bill_item_id,
        prencchrgs->charge_items[ecidx].bill_item_id,prrepchrgs->charges[chrgidx].service_dt_tm,
        prencchrgs->charge_items[ecidx].service_dt_tm,false,prencchrgs->charge_items[ecidx].
        factransrepind)
       IF (ecloc=0)
        SET ecloc = locateval(ecidx,1,size(prencchrgs->charge_items,5),prrepchrgs->charges[chrgidx].
         charge_type_cd,prencchrgs->charge_items[ecidx].charge_type_cd,
         prrepchrgs->charges[chrgidx].charge_act_id,prencchrgs->charge_items[ecidx].
         charge_event_act_id,prrepchrgs->charges[chrgidx].bill_item_id,prencchrgs->charge_items[ecidx
         ].bill_item_id,prrepchrgs->charges[chrgidx].service_dt_tm,
         prencchrgs->charge_items[ecidx].service_dt_tm,false,prencchrgs->charge_items[ecidx].
         factransrepind)
       ENDIF
       IF (ecloc > 0)
        SET prencchrgs->charge_items[ecloc].factransrepind = true
        SET prrepchrgs->charges[chrgidx].parent_charge_item_id = prencchrgs->charge_items[ecloc].
        charge_item_id
       ENDIF
       IF ((prrepchrgs->charges[chrgidx].activity_type_cd=cs106_person_mgmt_cd))
        IF (ecloc > 0)
         CALL addpmdebitcharge(prencchrgs,ecloc,prrepchrgs,chrgidx,prdrchrgs)
        ELSE
         RETURN(false)
        ENDIF
       ELSE
        CALL adddebitchargeforfacilitytrans(prrepchrgs,chrgidx,prdrchrgs)
       ENDIF
      ENDIF
    ENDFOR
    SET prrepchrgs->retierind = true
    SET prrepchrgs->reevaluatedind = true
    CALL adddiscretetimerevent(mods_disrete_timer,"reevaluateChargesForFacilityTrans",
     recfftimerstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getfacilitytransflg,char(128))=char(128))
  SUBROUTINE (getfacilitytransflg(pencntrid=f8) =i2)
    DECLARE ofactransflg = i2 WITH protect, noconstant(0)
    DECLARE nfactransflg = i2 WITH protect, noconstant(0)
    DECLARE oldfacility = f8 WITH protect, noconstant(0.0)
    DECLARE newfacility = f8 WITH protect, noconstant(0.0)
    IF ( NOT (validate(cs222_facility_cd)))
     DECLARE cs222_facility_cd = f8 WITH protect, constant(getcodevalue(222,"FACILITY",1))
    ENDIF
    SELECT INTO "nl:"
     FROM pft_reg_mod prm,
      location l,
      be_org_reltn bor,
      billing_entity be
     PLAN (prm
      WHERE prm.encntr_id=pencntrid
       AND prm.active_ind=true)
      JOIN (l
      WHERE l.location_cd=prm.loc_facility_cd
       AND l.location_type_cd=cs222_facility_cd
       AND l.active_ind=true)
      JOIN (bor
      WHERE bor.organization_id=l.organization_id
       AND bor.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=bor.billing_entity_id
       AND be.active_ind=true
       AND be.encntr_mod_on_fac_transfer_ind=true)
     ORDER BY prm.updt_dt_tm DESC
     HEAD REPORT
      ofactransflg = true, oldfacility = prm.loc_facility_cd
     WITH nocounter, maxrec = 1
    ;end select
    IF (oldfacility=0)
     SELECT INTO "nl:"
      FROM pm_transaction pt,
       location l,
       be_org_reltn bor,
       billing_entity be
      PLAN (pt
       WHERE pt.n_encntr_id=pencntrid)
       JOIN (l
       WHERE l.location_cd=pt.o_loc_facility_cd
        AND l.location_type_cd=cs222_facility_cd
        AND l.active_ind=true)
       JOIN (bor
       WHERE bor.organization_id=l.organization_id
        AND bor.active_ind=true)
       JOIN (be
       WHERE be.billing_entity_id=bor.billing_entity_id
        AND be.active_ind=true
        AND be.encntr_mod_on_fac_transfer_ind=true)
      ORDER BY pt.activity_dt_tm DESC
      HEAD REPORT
       ofactransflg = true, oldfacility = pt.o_loc_facility_cd
      WITH nocounter, maxrec = 1
     ;end select
    ENDIF
    SELECT INTO "nl:"
     FROM encounter e,
      be_org_reltn bor,
      billing_entity be
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
      JOIN (bor
      WHERE bor.organization_id=e.organization_id
       AND bor.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=bor.billing_entity_id
       AND be.active_ind=true
       AND be.encntr_mod_on_fac_transfer_ind=true)
     HEAD REPORT
      nfactransflg = true, newfacility = e.loc_facility_cd
     WITH nocounter
    ;end select
    IF (ofactransflg
     AND nfactransflg
     AND oldfacility != newfacility)
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(isencountermodonfactransind,char(128))=char(128))
  SUBROUTINE (isencountermodonfactransind(facilitycd=f8) =i2)
    DECLARE encntrmodonfactransferind = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM location l,
      be_org_reltn bor,
      billing_entity be
     PLAN (l
      WHERE l.location_cd=facilitycd)
      JOIN (bor
      WHERE bor.organization_id=l.organization_id
       AND bor.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=bor.billing_entity_id
       AND be.active_ind=true)
     DETAIL
      encntrmodonfactransferind = be.encntr_mod_on_fac_transfer_ind
     WITH nocounter
    ;end select
    IF (encntrmodonfactransferind)
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(encounterhaspmcharges,char(128))=char(128))
  SUBROUTINE (encounterhaspmcharges(ppftencntrid=f8) =i2)
    DECLARE pmchrgind = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM pft_charge pc,
      charge c
     PLAN (pc
      WHERE pc.pft_encntr_id=ppftencntrid
       AND pc.pft_encntr_id != 0.0
       AND pc.active_ind=true
       AND pc.ext_billed_ind=false)
      JOIN (c
      WHERE c.charge_item_id=pc.charge_item_id
       AND c.charge_type_cd=cs13028_debit_cd
       AND c.activity_type_cd=cs106_person_mgmt_cd
       AND c.offset_charge_item_id=0.0
       AND c.active_ind=true)
     ORDER BY c.charge_item_id
     HEAD c.charge_item_id
      pmchrgind = true
     WITH nocounter, maxrec = 1
    ;end select
    RETURN(pmchrgind)
  END ;Subroutine
 ENDIF
 IF (validate(getfinancialencounterbycharge,char(128))=char(128))
  SUBROUTINE (getfinancialencounterbycharge(pchargeitemid=f8,prpftencntrid=f8(ref)) =i2)
    SET prpftencntrid = 0.0
    SELECT INTO "nl:"
     FROM pft_charge pc
     PLAN (pc
      WHERE pc.charge_item_id=pchargeitemid
       AND pc.pft_charge_id != 0.0)
     ORDER BY pc.pft_charge_id
     HEAD pc.pft_charge_id
      prpftencntrid = pc.pft_encntr_id
     WITH nocounter
    ;end select
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(repostpmcharges,char(128))=char(128))
  SUBROUTINE (repostpmcharges(ppftencntrid=f8,prec=vc(ref),prrc=vc(ref),prcc=vc(ref),prdc=vc(ref)) =
   i2)
    DECLARE ecidx = i4 WITH protect, noconstant(0)
    DECLARE rcidx = i4 WITH protect, noconstant(0)
    DECLARE rcloc = i4 WITH protect, noconstant(0)
    DECLARE ccidx = i4 WITH protect, noconstant(0)
    DECLARE ccloc = i4 WITH protect, noconstant(0)
    DECLARE dcidx = i4 WITH protect, noconstant(0)
    DECLARE dcloc = i4 WITH protect, noconstant(0)
    DECLARE peid = f8 WITH protect, noconstant(0.0)
    DECLARE ecchrgidx = i4 WITH protect, noconstant(0)
    DECLARE offsetcount = i4 WITH protect, noconstant(0)
    DECLARE pmccloc = i4 WITH protect, noconstant(0)
    DECLARE pmccidx = i4 WITH protect, noconstant(0)
    DECLARE repostpmchargestimerstartdttm = dm12 WITH protect, noconstant(systimestamp)
    RECORD creditedchrg(
      1 charge[*]
        2 charge_item_id = f8
    ) WITH protect
    SELECT INTO "nl:"
     FROM charge c
     PLAN (c
      WHERE expand(ecchrgidx,1,size(prec->charge_items,5),c.charge_item_id,prec->charge_items[
       ecchrgidx].charge_item_id)
       AND c.active_ind=true
       AND c.charge_type_cd=cs13028_debit_cd
       AND c.activity_type_cd=cs106_person_mgmt_cd
       AND c.offset_charge_item_id > 0.0)
     ORDER BY c.charge_item_id
     HEAD c.charge_item_id
      offsetcount += 1, stat = alterlist(creditedchrg->charge,offsetcount), creditedchrg->charge[
      offsetcount].charge_item_id = c.charge_item_id
     WITH nocounter, expand = 2
    ;end select
    FOR (ecidx = 1 TO size(prec->charge_items,5))
     SET stat = getfinancialencounterbycharge(prec->charge_items[ecidx].charge_item_id,peid)
     IF ((prec->charge_items[ecidx].activity_type_cd=cs106_person_mgmt_cd)
      AND peid=ppftencntrid)
      SET modcnt = 0
      SET rcloc = locateval(rcidx,1,size(prrc->charges,5),prec->charge_items[ecidx].charge_item_id,
       prrc->charges[rcidx].charge_item_id)
      SET ccloc = locateval(ccidx,1,size(prcc->charge,5),prec->charge_items[ecidx].charge_item_id,
       prcc->charge[ccidx].charge_item_id)
      SET dcloc = locateval(dcidx,1,size(prdc->charges,5),prec->charge_items[ecidx].charge_item_id,
       prdc->charges[dcidx].parent_charge_item_id)
      IF (size(creditedchrg->charge,5) > 0)
       SET pmccloc = locateval(pmccidx,1,size(creditedchrg->charge,5),prec->charge_items[ecidx].
        charge_item_id,creditedchrg->charge[pmccidx].charge_item_id)
      ENDIF
      IF (rcloc=0)
       RETURN(false)
      ENDIF
      IF (ccloc=0
       AND pmccloc=0)
       CALL addcreditcharge(prec,ecidx,prcc)
      ENDIF
      IF (dcloc=0)
       CALL addpmdebitcharge(prec,ecidx,prrc,rcloc,prdc)
      ENDIF
     ENDIF
    ENDFOR
    CALL adddiscretetimerevent(mods_disrete_timer,"repostPMCharges",repostpmchargestimerstartdttm,"",
     "",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(addpmdebitcharge,char(128))=char(128))
  SUBROUTINE (addpmdebitcharge(prec=vc(ref),pecidx=i4,prrc=vc(ref),prcidx=i4,prdc=vc(ref)) =i2)
    DECLARE dccnt = i4 WITH protect, noconstant(size(prdc->charges,5))
    DECLARE modidx = i4 WITH protect, noconstant(0)
    DECLARE modcnt = i4 WITH protect, noconstant(0)
    SET dccnt += 1
    SET stat = alterlist(prdc->charges,dccnt)
    SET prdc->charges[dccnt].admit_type_cd = prrc->charges[prcidx].admit_type_cd
    SET prdc->charges[dccnt].health_plan_id = prrc->charges[prcidx].health_plan_id
    SET prdc->charges[dccnt].hp_beg_effective_dt_tm = prrc->charges[prcidx].hp_beg_effective_dt_tm
    SET prdc->charges[dccnt].hp_end_effective_dt_tm = prrc->charges[prcidx].hp_end_effective_dt_tm
    SET prdc->charges[dccnt].fin_class_cd = prrc->charges[prcidx].fin_class_cd
    SET prdc->charges[dccnt].realtime_ind = prrc->charges[prcidx].realtime_ind
    SET prdc->charges[dccnt].beg_effective_dt_tm = prrc->charges[prcidx].beg_effective_dt_tm
    SET prdc->charges[dccnt].updt_ind = prrc->charges[prcidx].updt_ind
    SET prdc->charges[dccnt].process_flg = prrc->charges[prcidx].process_flg
    SET prdc->charges[dccnt].offset_charge_item_id = prrc->charges[prcidx].offset_charge_item_id
    SET prdc->charges[dccnt].posted_dt_tm = prrc->charges[prcidx].posted_dt_tm
    SET prdc->charges[dccnt].reason_comment = build2(
     "Debit charge created due to registration modification ","reevaluation of charge [",prec->
     charge_items[pecidx].charge_item_id,"]")
    SET prdc->charges[dccnt].charge_act_id = prec->charge_items[pecidx].charge_event_act_id
    SET prdc->charges[dccnt].charge_event_id = prec->charge_items[pecidx].charge_event_id
    SET prdc->charges[dccnt].bill_item_id = prec->charge_items[pecidx].bill_item_id
    SET prdc->charges[dccnt].charge_description = prec->charge_items[pecidx].charge_description
    SET prdc->charges[dccnt].price_sched_id = prec->charge_items[pecidx].price_sched_id
    SET prdc->charges[dccnt].payor_id = prec->charge_items[pecidx].payor_id
    SET prdc->charges[dccnt].item_quantity = prec->charge_items[pecidx].item_quantity
    SET prdc->charges[dccnt].item_price = prec->charge_items[pecidx].item_price
    SET prdc->charges[dccnt].item_extended_price = prec->charge_items[pecidx].item_extended_price
    SET prdc->charges[dccnt].charge_type_cd = prec->charge_items[pecidx].charge_type_cd
    SET prdc->charges[dccnt].suspense_rsn_cd = prec->charge_items[pecidx].suspense_rsn_cd
    SET prdc->charges[dccnt].posted_cd = prec->charge_items[pecidx].posted_cd
    SET prdc->charges[dccnt].ord_phys_id = prec->charge_items[pecidx].ord_phys_id
    SET prdc->charges[dccnt].perf_phys_id = prec->charge_items[pecidx].perf_phys_id
    SET prdc->charges[dccnt].order_id = prec->charge_items[pecidx].order_id
    SET prdc->charges[dccnt].person_id = prec->charge_items[pecidx].person_id
    SET prdc->charges[dccnt].encntr_id = prec->charge_items[pecidx].encntr_id
    SET prdc->charges[dccnt].med_service_cd = prec->charge_items[pecidx].med_service_cd
    SET prdc->charges[dccnt].institution_cd = prec->charge_items[pecidx].institution_cd
    SET prdc->charges[dccnt].department_cd = prec->charge_items[pecidx].department_cd
    SET prdc->charges[dccnt].section_cd = prec->charge_items[pecidx].section_cd
    SET prdc->charges[dccnt].subsection_cd = prec->charge_items[pecidx].subsection_cd
    SET prdc->charges[dccnt].level5_cd = prec->charge_items[pecidx].level5_cd
    SET prdc->charges[dccnt].service_dt_tm = prec->charge_items[pecidx].service_dt_tm
    SET prdc->charges[dccnt].parent_charge_item_id = prec->charge_items[pecidx].charge_item_id
    SET prdc->charges[dccnt].interface_id = prec->charge_items[pecidx].interface_file_id
    SET prdc->charges[dccnt].tier_group_cd = prec->charge_items[pecidx].tier_group_cd
    SET prdc->charges[dccnt].def_bill_item_id = prec->charge_items[pecidx].def_bill_item_id
    SET prdc->charges[dccnt].verify_phys_id = prec->charge_items[pecidx].verify_phys_id
    SET prdc->charges[dccnt].gross_price = prec->charge_items[pecidx].gross_price
    SET prdc->charges[dccnt].discount_amount = prec->charge_items[pecidx].discount_amount
    SET prdc->charges[dccnt].item_price_adj_amt = prec->charge_items[pecidx].item_price_adj_amt
    SET prdc->charges[dccnt].activity_type_cd = prec->charge_items[pecidx].activity_type_cd
    SET prdc->charges[dccnt].research_acct_id = prec->charge_items[pecidx].research_acct_id
    SET prdc->charges[dccnt].cost_center_cd = prec->charge_items[pecidx].cost_center_cd
    SET prdc->charges[dccnt].abn_status_cd = prec->charge_items[pecidx].abn_status_cd
    SET prdc->charges[dccnt].perf_loc_cd = prec->charge_items[pecidx].perf_loc_cd
    SET prdc->charges[dccnt].inst_fin_nbr = prec->charge_items[pecidx].inst_fin_nbr
    SET prdc->charges[dccnt].ord_loc_cd = prec->charge_items[pecidx].ord_loc_cd
    SET prdc->charges[dccnt].manual_ind = prec->charge_items[pecidx].manual_ind
    SET prdc->charges[dccnt].payor_type_cd = prec->charge_items[pecidx].payor_type_cd
    SET prdc->charges[dccnt].item_copay = prec->charge_items[pecidx].item_copay
    SET prdc->charges[dccnt].item_reimbursement = prec->charge_items[pecidx].item_reimbursement
    SET prdc->charges[dccnt].item_interval_id = prec->charge_items[pecidx].item_interval_id
    SET prdc->charges[dccnt].list_price = prec->charge_items[pecidx].item_list_price
    SET prdc->charges[dccnt].list_price_sched_id = prec->charge_items[pecidx].list_price_sched_id
    SET prdc->charges[dccnt].epsdt_ind = prec->charge_items[pecidx].epsdt_ind
    SET prdc->charges[dccnt].ref_phys_id = prec->charge_items[pecidx].ref_phys_id
    SET prdc->charges[dccnt].alpha_nomen_id = prec->charge_items[pecidx].alpha_nomen_id
    SET prdc->charges[dccnt].server_process_flag = prec->charge_items[pecidx].server_process_flag
    SET prdc->charges[dccnt].patient_responsibility_flag = prec->charge_items[pecidx].
    patient_responsibility_flag
    SET prdc->charges[dccnt].item_deductible_amt = prec->charge_items[pecidx].item_deductible_amt
    SET prdc->charges[dccnt].activity_sub_type_cd = prec->charge_items[pecidx].activity_sub_type_cd
    SET prdc->charges[dccnt].provider_specialty_cd = prec->charge_items[pecidx].provider_specialty_cd
    SET prdc->charges[dccnt].original_org_id = prec->charge_items[pecidx].original_org_id
    FOR (modidx = 1 TO size(prec->charge_items[pecidx].charge_mods,5))
      IF ((prec->charge_items[pecidx].charge_mods[modidx].active_ind=true))
       SET modcnt += 1
       SET stat = alterlist(prdc->charges[dccnt].mods.charge_mods,modcnt)
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].charge_event_mod_type_cd = prec->
       charge_items[pecidx].charge_mods[modidx].charge_mod_type_cd
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field1 = prec->charge_items[pecidx].
       charge_mods[modidx].field1
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field2 = prec->charge_items[pecidx].
       charge_mods[modidx].field2
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field3 = prec->charge_items[pecidx].
       charge_mods[modidx].field3
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field4 = prec->charge_items[pecidx].
       charge_mods[modidx].field4
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field5 = prec->charge_items[pecidx].
       charge_mods[modidx].field5
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field6 = prec->charge_items[pecidx].
       charge_mods[modidx].field6
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field7 = prec->charge_items[pecidx].
       charge_mods[modidx].field7
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field8 = prec->charge_items[pecidx].
       charge_mods[modidx].field8
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field9 = prec->charge_items[pecidx].
       charge_mods[modidx].field9
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field10 = prec->charge_items[pecidx].
       charge_mods[modidx].field10
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field1_id = prec->charge_items[pecidx].
       charge_mods[modidx].field1_id
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field2_id = prec->charge_items[pecidx].
       charge_mods[modidx].field2_id
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field3_id = prec->charge_items[pecidx].
       charge_mods[modidx].field3_id
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field4_id = prec->charge_items[pecidx].
       charge_mods[modidx].field4_id
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field5_id = prec->charge_items[pecidx].
       charge_mods[modidx].field5_id
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].nomen_id = prec->charge_items[pecidx].
       charge_mods[modidx].nomen_id
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].cm1_nbr = prec->charge_items[pecidx].
       charge_mods[modidx].cm1_nbr
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].activity_dt_tm = prec->charge_items[pecidx].
       charge_mods[modidx].activity_dt_tm
       SET prdc->charges[dccnt].mods.charge_mods[modcnt].field3_ext = prec->charge_items[pecidx].
       charge_mods[modidx].field3_ext
      ENDIF
    ENDFOR
  END ;Subroutine
 ENDIF
 IF (validate(repostrpcharges,char(128))=char(128))
  SUBROUTINE (repostrpcharges(ppftencntrid=f8,prrpc=vc(ref)) =i2)
    DECLARE rpcidx = i4 WITH protect, noconstant(0)
    DECLARE rpccnt = i4 WITH protect, noconstant(size(prrpc->charge_items,5))
    DECLARE rpcloc = i4 WITH protect, noconstant(0)
    DECLARE ccidx = i4 WITH protect, noconstant(0)
    DECLARE cccnt = i4 WITH protect, noconstant(size(aac->charge,5))
    DECLARE ccloc = i4 WITH protect, noconstant(0)
    DECLARE dcidx = i4 WITH protect, noconstant(0)
    DECLARE dccnt = i4 WITH protect, noconstant(size(csac->charges,5))
    DECLARE dcloc = i4 WITH protect, noconstant(0)
    DECLARE modidx = i4 WITH protect, noconstant(0)
    DECLARE modcnt = i4 WITH protect, noconstant(0)
    DECLARE peid = f8 WITH protect, noconstant(0.0)
    FOR (rpcidx = 1 TO rpccnt)
     SET stat = getfinancialencounterbycharge(prrpc->charge_items[rpcidx].charge_item_id,peid)
     IF (peid=ppftencntrid)
      SET modcnt = 0
      SET ccloc = locateval(ccidx,1,cccnt,prrpc->charge_items[rpcidx].charge_item_id,aac->charge[
       ccidx].charge_item_id)
      SET dcloc = locateval(dcidx,1,dccnt,prrpc->charge_items[rpcidx].charge_item_id,csac->charges[
       dcidx].parent_charge_item_id)
      IF (dcloc != 0)
       RETURN(true)
      ENDIF
      IF (ccloc=0)
       SET cccnt += 1
       SET stat = alterlist(aac->charge,cccnt)
       SET aac->charge_qual = cccnt
       SET aac->charge[cccnt].charge_item_id = prrpc->charge_items[rpcidx].charge_item_id
      ENDIF
      SET dccnt += 1
      SET stat = alterlist(csac->charges,dccnt)
      SET csac->charges[dccnt].admit_type_cd = prrpc->charge_items[rpcidx].admit_type_cd
      SET csac->charges[dccnt].health_plan_id = prrpc->charge_items[rpcidx].health_plan_id
      SET csac->charges[dccnt].fin_class_cd = prrpc->charge_items[rpcidx].fin_class_cd
      SET csac->charges[dccnt].beg_effective_dt_tm = prrpc->charge_items[rpcidx].beg_effective_dt_tm
      SET csac->charges[dccnt].offset_charge_item_id = prrpc->charge_items[rpcidx].
      offset_charge_item_id
      SET csac->charges[dccnt].posted_dt_tm = prrpc->charge_items[rpcidx].posted_dt_tm
      SET csac->charges[dccnt].reason_comment = build2(
       "Debit charge created due to registration modification ","reevaluation of charge [",prrpc->
       charge_items[rpcidx].charge_item_id,"]")
      SET csac->charges[dccnt].charge_act_id = prrpc->charge_items[rpcidx].charge_event_act_id
      SET csac->charges[dccnt].charge_event_id = prrpc->charge_items[rpcidx].charge_event_id
      SET csac->charges[dccnt].bill_item_id = prrpc->charge_items[rpcidx].bill_item_id
      SET csac->charges[dccnt].charge_description = prrpc->charge_items[rpcidx].charge_description
      SET csac->charges[dccnt].price_sched_id = prrpc->charge_items[rpcidx].price_sched_id
      SET csac->charges[dccnt].payor_id = prrpc->charge_items[rpcidx].payor_id
      SET csac->charges[dccnt].item_quantity = prrpc->charge_items[rpcidx].item_quantity
      SET csac->charges[dccnt].item_price = prrpc->charge_items[rpcidx].item_price
      SET csac->charges[dccnt].item_extended_price = prrpc->charge_items[rpcidx].item_extended_price
      SET csac->charges[dccnt].charge_type_cd = prrpc->charge_items[rpcidx].charge_type_cd
      SET csac->charges[dccnt].suspense_rsn_cd = prrpc->charge_items[rpcidx].suspense_rsn_cd
      SET csac->charges[dccnt].posted_cd = prrpc->charge_items[rpcidx].posted_cd
      SET csac->charges[dccnt].ord_phys_id = prrpc->charge_items[rpcidx].ord_phys_id
      SET csac->charges[dccnt].perf_phys_id = prrpc->charge_items[rpcidx].perf_phys_id
      SET csac->charges[dccnt].order_id = prrpc->charge_items[rpcidx].order_id
      SET csac->charges[dccnt].person_id = prrpc->charge_items[rpcidx].person_id
      SET csac->charges[dccnt].encntr_id = prrpc->charge_items[rpcidx].encntr_id
      SET csac->charges[dccnt].med_service_cd = prrpc->charge_items[rpcidx].med_service_cd
      SET csac->charges[dccnt].institution_cd = prrpc->charge_items[rpcidx].institution_cd
      SET csac->charges[dccnt].department_cd = prrpc->charge_items[rpcidx].department_cd
      SET csac->charges[dccnt].section_cd = prrpc->charge_items[rpcidx].section_cd
      SET csac->charges[dccnt].subsection_cd = prrpc->charge_items[rpcidx].subsection_cd
      SET csac->charges[dccnt].level5_cd = prrpc->charge_items[rpcidx].level5_cd
      SET csac->charges[dccnt].service_dt_tm = prrpc->charge_items[rpcidx].service_dt_tm
      SET csac->charges[dccnt].parent_charge_item_id = prrpc->charge_items[rpcidx].charge_item_id
      SET csac->charges[dccnt].interface_id = prrpc->charge_items[rpcidx].interface_file_id
      SET csac->charges[dccnt].tier_group_cd = prrpc->charge_items[rpcidx].tier_group_cd
      SET csac->charges[dccnt].def_bill_item_id = prrpc->charge_items[rpcidx].def_bill_item_id
      SET csac->charges[dccnt].verify_phys_id = prrpc->charge_items[rpcidx].verify_phys_id
      SET csac->charges[dccnt].gross_price = prrpc->charge_items[rpcidx].gross_price
      SET csac->charges[dccnt].discount_amount = prrpc->charge_items[rpcidx].discount_amount
      SET csac->charges[dccnt].item_price_adj_amt = prrpc->charge_items[rpcidx].item_price_adj_amt
      SET csac->charges[dccnt].activity_type_cd = prrpc->charge_items[rpcidx].activity_type_cd
      SET csac->charges[dccnt].research_acct_id = prrpc->charge_items[rpcidx].research_acct_id
      SET csac->charges[dccnt].cost_center_cd = prrpc->charge_items[rpcidx].cost_center_cd
      SET csac->charges[dccnt].abn_status_cd = prrpc->charge_items[rpcidx].abn_status_cd
      SET csac->charges[dccnt].perf_loc_cd = prrpc->charge_items[rpcidx].perf_loc_cd
      SET csac->charges[dccnt].inst_fin_nbr = prrpc->charge_items[rpcidx].inst_fin_nbr
      SET csac->charges[dccnt].ord_loc_cd = prrpc->charge_items[rpcidx].ord_loc_cd
      SET csac->charges[dccnt].manual_ind = prrpc->charge_items[rpcidx].manual_ind
      SET csac->charges[dccnt].payor_type_cd = prrpc->charge_items[rpcidx].payor_type_cd
      SET csac->charges[dccnt].item_copay = prrpc->charge_items[rpcidx].item_copay
      SET csac->charges[dccnt].item_reimbursement = prrpc->charge_items[rpcidx].item_reimbursement
      SET csac->charges[dccnt].item_interval_id = prrpc->charge_items[rpcidx].item_interval_id
      SET csac->charges[dccnt].list_price = prrpc->charge_items[rpcidx].item_list_price
      SET csac->charges[dccnt].list_price_sched_id = prrpc->charge_items[rpcidx].list_price_sched_id
      SET csac->charges[dccnt].epsdt_ind = prrpc->charge_items[rpcidx].epsdt_ind
      SET csac->charges[dccnt].ref_phys_id = prrpc->charge_items[rpcidx].ref_phys_id
      SET csac->charges[dccnt].alpha_nomen_id = prrpc->charge_items[rpcidx].alpha_nomen_id
      SET csac->charges[dccnt].server_process_flag = prrpc->charge_items[rpcidx].server_process_flag
      SET csac->charges[dccnt].patient_responsibility_flag = prrpc->charge_items[rpcidx].
      patient_responsibility_flag
      SET csac->charges[dccnt].item_deductible_amt = prrpc->charge_items[rpcidx].item_deductible_amt
      SET csac->charges[dccnt].activity_sub_type_cd = prrpc->charge_items[rpcidx].
      activity_sub_type_cd
      SET csac->charges[dccnt].provider_specialty_cd = prrpc->charge_items[rpcidx].
      provider_specialty_cd
      FOR (modidx = 1 TO size(prrpc->charge_items[rpcidx].charge_mods,5))
        IF ((prrpc->charge_items[rpcidx].charge_mods[modidx].active_ind=true))
         SET modcnt += 1
         SET stat = alterlist(csac->charges[dccnt].mods.charge_mods,modcnt)
         SET csac->charges[dccnt].mods.charge_mods[modcnt].charge_event_mod_type_cd = prrpc->
         charge_items[rpcidx].charge_mods[modidx].charge_mod_type_cd
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field1 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field1
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field2 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field2
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field3 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field3
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field4 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field4
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field5 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field5
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field6 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field6
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field7 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field7
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field8 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field8
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field9 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field9
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field10 = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field10
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field1_id = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field1_id
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field2_id = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field2_id
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field3_id = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field3_id
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field4_id = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field4_id
         SET csac->charges[dccnt].mods.charge_mods[modcnt].field5_id = prrpc->charge_items[rpcidx].
         charge_mods[modidx].field5_id
         SET csac->charges[dccnt].mods.charge_mods[modcnt].nomen_id = prrpc->charge_items[rpcidx].
         charge_mods[modidx].nomen_id
         SET csac->charges[dccnt].mods.charge_mods[modcnt].cm1_nbr = prrpc->charge_items[rpcidx].
         charge_mods[modidx].cm1_nbr
         SET csac->charges[dccnt].mods.charge_mods[modcnt].activity_dt_tm = prrpc->charge_items[
         rpcidx].charge_mods[modidx].activity_dt_tm
        ENDIF
      ENDFOR
     ENDIF
    ENDFOR
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(doredebitpmcharges,char(128))=char(128))
  SUBROUTINE (doredebitpmcharges(pmchargestoredebit=vc(ref)) =i2)
    DECLARE doredebitpmchargestimerstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE chargeiterator = i4 WITH protect, noconstant(0)
    DECLARE chargecredited = i2 WITH protect, noconstant(true)
    DECLARE chargeredebited = i2 WITH protect, noconstant(false)
    DECLARE ecidx = i4 WITH protect, noconstant(0)
    DECLARE ecloc = i4 WITH protect, noconstant(0)
    DECLARE rcidx = i4 WITH protect, noconstant(0)
    DECLARE rcloc = i4 WITH protect, noconstant(0)
    DECLARE dcidx = i4 WITH protect, noconstant(0)
    DECLARE dcloc = i4 WITH protect, noconstant(0)
    IF ( NOT (repcharges->syncedbackind))
     IF ( NOT (getreprocessedchargesend(repcharges)))
      CALL addtracemessage("doRedebitPMCharges","getReprocessedChargesEnd did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF ((pmchargestoredebit->redebitchargesind=true))
     FOR (chargeiterator = 1 TO size(pmchargestoredebit->charges,5))
       SELECT INTO "nl:"
        FROM charge c
        WHERE (c.offset_charge_item_id=pmchargestoredebit->charges[chargeiterator].chargeitemid)
         AND c.charge_type_cd=cs13028_credit_cd
         AND c.activity_type_cd=cs106_person_mgmt_cd
         AND c.active_ind=true
        WITH nocounter
       ;end select
       IF (curqual=0)
        SET chargecredited = false
       ENDIF
       SELECT INTO "nl:"
        FROM charge c
        WHERE (c.parent_charge_item_id=pmchargestoredebit->charges[chargeiterator].chargeitemid)
         AND c.charge_type_cd=cs13028_debit_cd
         AND c.activity_type_cd=cs106_person_mgmt_cd
         AND c.active_ind=true
        WITH nocounter
       ;end select
       IF (curqual > 0)
        SET chargeredebited = true
       ENDIF
       IF (chargecredited
        AND  NOT (chargeredebited))
        SET ecloc = locateval(ecidx,1,size(enccharges->charge_items,5),pmchargestoredebit->charges[
         chargeiterator].chargeitemid,enccharges->charge_items[ecidx].charge_item_id)
        SET rcloc = locateval(rcidx,1,size(repcharges->charges,5),pmchargestoredebit->charges[
         chargeiterator].chargeitemid,repcharges->charges[rcidx].charge_item_id)
        SET dcloc = locateval(dcidx,1,size(csac->charges,5),pmchargestoredebit->charges[
         chargeiterator].chargeitemid,csac->charges[dcidx].parent_charge_item_id)
        IF (ecloc != 0
         AND rcloc != 0
         AND dcloc=0)
         CALL addpmdebitcharge(enccharges,ecidx,repcharges,rcloc,csac)
        ENDIF
       ENDIF
     ENDFOR
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"doRedebitPMCharges",
     doredebitpmchargestimerstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(dochargesqualifyforrealias,char(128))=char(128))
  SUBROUTINE (dochargesqualifyforrealias(prchargesforrealias=vc(ref)) =i2)
    DECLARE dochrgqualforrealiastimerstartdttm = dm12 WITH protect, noconstant(systimestamp)
    DECLARE ecidx = i4 WITH protect, noconstant(0)
    DECLARE eccnt = i4 WITH protect, noconstant(size(enccharges->charge_items,5))
    DECLARE ecmidx = i4 WITH protect, noconstant(0)
    DECLARE ecmcnt = i4 WITH protect, noconstant(0)
    DECLARE rcidx = i4 WITH protect, noconstant(0)
    DECLARE rccnt = i4 WITH protect, noconstant(size(repcharges->charges,5))
    DECLARE rcmidx = i4 WITH protect, noconstant(0)
    DECLARE rcmcnt = i4 WITH protect, noconstant(0)
    DECLARE grpidx = i4 WITH protect, noconstant(0)
    DECLARE grpcnt = i4 WITH protect, noconstant(0)
    DECLARE ecmatchidx = i4 WITH protect, noconstant(0)
    DECLARE rcmatchidx = i4 WITH protect, noconstant(0)
    DECLARE qualifiesind = i2 WITH protect, noconstant(false)
    DECLARE doesrevcdexist = i4 WITH protect, noconstant(0)
    DECLARE revcodecdfmeaning = vc WITH protect, constant("REVENUE")
    DECLARE cdmfieldcdfmeaning = vc WITH protect, constant("CDM_SCHED")
    DECLARE realiaschargecnt = i4 WITH protect, noconstant(0)
    DECLARE realiaschargeidx = i4 WITH protect, noconstant(0)
    FREE RECORD matchrec
    RECORD matchrec(
      1 matchgroup[*]
        2 chargetypecd = f8
        2 ceaid = f8
        2 tiergroupcd = f8
        2 billitemid = f8
        2 servicedttm = dq8
        2 eclist[*]
          3 ecidx = i4
          3 rcmatchidx = i4
        2 rclist[*]
          3 rcidx = i4
          3 ecmatchidx = i4
    )
    IF ( NOT (repcharges->syncedbackind))
     IF ( NOT (getreprocessedchargesend(repcharges)))
      CALL addtracemessage("doChargesQualifyForReAlias",
       "getReprocessedChargesEnd did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF ( NOT (matchcharges(enccharges,repcharges,matchrec)))
     CALL addtracemessage("doChargesQualifyForReAlias","matchCharges did not return success")
     RETURN(false)
    ENDIF
    SET grpcnt = size(matchrec->matchgroup,5)
    FOR (grpidx = 1 TO grpcnt)
      SET qualifiesind = true
      FOR (ecmatchidx = 1 TO size(matchrec->matchgroup[grpidx].eclist,5))
        IF ((matchrec->matchgroup[grpidx].eclist[ecmatchidx].rcmatchidx=0))
         SET qualifiesind = false
        ENDIF
      ENDFOR
      IF (qualifiesind)
       FOR (ecmatchidx = 1 TO size(matchrec->matchgroup[grpidx].eclist,5))
         SET ecidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].ecidx
         SET rcidx = matchrec->matchgroup[grpidx].eclist[ecmatchidx].rcmatchidx
         SET ecmcnt = size(enccharges->charge_items[ecidx].charge_mods,5)
         SET rcmcnt = size(repcharges->charges[rcidx].mods.charge_mods,5)
         SET rcmidx = 0
         SET realiaschargeidx = 0
         FOR (ecmidx = 1 TO ecmcnt)
           IF ((enccharges->charge_items[ecidx].charge_mods[ecmidx].charge_mod_type_cd=
           cs13019_bill_code_cd)
            AND (enccharges->charge_items[ecidx].charge_mods[ecmidx].active_ind=true)
            AND uar_get_code_meaning(enccharges->charge_items[ecidx].charge_mods[ecmidx].field1_id)=
           revcodecdfmeaning)
            SET rcmidx = locateval(rcmidx,1,rcmcnt,revcodecdfmeaning,uar_get_code_meaning(repcharges
              ->charges[rcidx].mods.charge_mods[rcmidx].field1_id),
             enccharges->charge_items[ecidx].charge_mods[ecmidx].field2_id,repcharges->charges[rcidx]
             .mods.charge_mods[rcmidx].field2_id,enccharges->charge_items[ecidx].charge_mods[ecmidx].
             charge_mod_type_cd,repcharges->charges[rcidx].mods.charge_mods[rcmidx].
             charge_event_mod_type_cd)
            IF (rcmidx > 0)
             IF ((((enccharges->charge_items[ecidx].charge_mods[ecmidx].field6 != repcharges->
             charges[rcidx].mods.charge_mods[rcmidx].field6)) OR ((enccharges->charge_items[ecidx].
             charge_mods[ecmidx].field3_id != repcharges->charges[rcidx].mods.charge_mods[rcmidx].
             field3_id))) )
              SET realiaschargeidx = locateval(realiaschargeidx,1,realiaschargecnt,repcharges->
               charges[rcidx].charge_item_id,prchargesforrealias->charges[realiaschargecnt].
               charge_item_id)
              IF (realiaschargeidx <= 0)
               SET realiaschargecnt += 1
               SET stat = alterlist(prchargesforrealias->charges,realiaschargecnt)
               SET prchargesforrealias->charges[realiaschargecnt].charge_item_id = repcharges->
               charges[rcidx].charge_item_id
              ENDIF
             ENDIF
            ENDIF
           ELSEIF ((enccharges->charge_items[ecidx].charge_mods[ecmidx].charge_mod_type_cd=
           cs13019_bill_code_cd)
            AND (enccharges->charge_items[ecidx].charge_mods[ecmidx].active_ind=true)
            AND uar_get_code_meaning(enccharges->charge_items[ecidx].charge_mods[ecmidx].field1_id)=
           cdmfieldcdfmeaning)
            SET rcmidx = locateval(rcmidx,1,rcmcnt,cdmfieldcdfmeaning,uar_get_code_meaning(repcharges
              ->charges[rcidx].mods.charge_mods[rcmidx].field1_id),
             enccharges->charge_items[ecidx].charge_mods[ecmidx].field2_id,repcharges->charges[rcidx]
             .mods.charge_mods[rcmidx].field2_id,enccharges->charge_items[ecidx].charge_mods[ecmidx].
             charge_mod_type_cd,repcharges->charges[rcidx].mods.charge_mods[rcmidx].
             charge_event_mod_type_cd)
            IF (rcmidx > 0)
             IF ((enccharges->charge_items[ecidx].charge_mods[ecmidx].field6 != repcharges->charges[
             rcidx].mods.charge_mods[rcmidx].field6))
              SET realiaschargeidx = locateval(realiaschargeidx,1,realiaschargecnt,repcharges->
               charges[rcidx].charge_item_id,prchargesforrealias->charges[realiaschargecnt].
               charge_item_id)
              IF (realiaschargeidx <= 0)
               SET realiaschargecnt += 1
               SET stat = alterlist(prchargesforrealias->charges,realiaschargecnt)
               SET prchargesforrealias->charges[realiaschargecnt].charge_item_id = repcharges->
               charges[rcidx].charge_item_id
              ENDIF
             ENDIF
            ENDIF
           ENDIF
         ENDFOR
       ENDFOR
      ENDIF
    ENDFOR
    CALL adddiscretetimerevent(mods_disrete_timer,"doChargesQualifyForReAlias",
     dochrgqualforrealiastimerstartdttm,"","",
     "",afcrmtimerevents)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(addcreditchargemod,char(128))=char(128))
  SUBROUTINE (addcreditchargemod(tempcreditcharges=vc(ref),addchargemods=vc(ref)) =i2)
    DECLARE addcnt = i4 WITH protect, noconstant(size(addchargemods->charge_mod,5))
    DECLARE newidx = i4 WITH protect, noconstant(0)
    DECLARE credcount = i4 WITH protect, noconstant(0)
    DECLARE newcnt = i4 WITH protect, noconstant(0)
    RECORD postchargemod(
      1 objarray[*]
        2 chargeitemid = f8
    ) WITH protect
    SELECT INTO "nl:"
     FROM charge c
     WHERE expand(credcount,1,size(tempcreditcharges->objarray,5),c.offset_charge_item_id,
      tempcreditcharges->objarray[credcount].chargeitemid)
     ORDER BY c.charge_item_id
     HEAD c.charge_item_id
      newcnt += 1, stat = alterlist(postchargemod->objarray,newcnt), postchargemod->objarray[newcnt].
      chargeitemid = c.charge_item_id
     WITH nocounter
    ;end select
    IF (size(postchargemod->objarray,5) > 0)
     FOR (newidx = 1 TO size(postchargemod->objarray,5))
       SET addcnt += 1
       SET stat = alterlist(addchargemods->charge_mod,addcnt)
       SET addchargemods->charge_mod_qual = addcnt
       SET addchargemods->charge_mod[addcnt].action_type = "ADD"
       SET addchargemods->charge_mod[addcnt].charge_item_id = postchargemod->objarray[newidx].
       chargeitemid
       SET addchargemods->charge_mod[addcnt].charge_mod_type_cd = cs13019_other_cd
       SET addchargemods->charge_mod[addcnt].field3 = "Credit Reason"
       SET addchargemods->charge_mod[addcnt].field4 = "Charge Processing build change"
       SET addchargemods->charge_mod[addcnt].active_ind = true
       SET addchargemods->charge_mod[addcnt].beg_effective_dt_tm = cnvtdatetime(sysdate)
       SET addchargemods->charge_mod[addcnt].end_effective_dt_tm = cnvtdatetime(
        "31-DEC-2100 23:59:59")
       SET addchargemods->skip_charge_event_mod_ind = true
     ENDFOR
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo("Begin AFC_ENCOUNTER_CHANGE_SUBS.INC, version [718191.007]")
 SUBROUTINE (getfinencounterinfo(pencntrid=f8,prencntrvalues=vc(ref)) =i2)
   SELECT INTO "nl:"
    FROM encounter e,
     pft_encntr pe
    PLAN (e
     WHERE e.encntr_id=pencntrid
      AND e.active_ind=true)
     JOIN (pe
     WHERE pe.encntr_id=e.encntr_id
      AND pe.active_ind=true
      AND pe.pft_encntr_data_model_vrsn_nbr > 1)
    ORDER BY e.encntr_id
    HEAD e.encntr_id
     prencntrvalues->olddischargedttm = pe.disch_dt_tm, prencntrvalues->newdischargedttm = e
     .disch_dt_tm, prencntrvalues->oldadmitdttm = pe.inpatient_admit_dt_tm,
     prencntrvalues->newregdttm = e.reg_dt_tm, prencntrvalues->oldregdttm = pe.reg_dt_tm,
     prencntrvalues->newadmitdttm = e.inpatient_admit_dt_tm,
     prencntrvalues->oldencountertype = pe.encntr_type_cd, prencntrvalues->newencountertype = e
     .encntr_type_cd, prencntrvalues->oldencounterclass = pe.encntr_type_class_cd,
     prencntrvalues->newencounterclass = e.encntr_type_class_cd, prencntrvalues->oldlocation = pe
     .loc_nurse_unit_cd, prencntrvalues->newlocation = e.loc_nurse_unit_cd,
     prencntrvalues->oldfacilitycd = pe.loc_facility_cd, prencntrvalues->newfacilitycd = e
     .loc_facility_cd, prencntrvalues->isdenormalized = true,
     prencntrvalues->newmedservicecd = e.med_service_cd
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL logmessage("getFinEncounterInfo",build2("Financial encounter does not contain reg info: ",
      pencntrid),log_debug)
    SELECT INTO "nl:"
     FROM encounter e
     PLAN (e
      WHERE e.encntr_id=pencntrid
       AND e.active_ind=true)
     ORDER BY e.encntr_id
     HEAD e.encntr_id
      prencntrvalues->newregdttm = e.reg_dt_tm, prencntrvalues->newadmitdttm = e
      .inpatient_admit_dt_tm, prencntrvalues->newencounterclass = e.encntr_type_class_cd,
      prencntrvalues->newmedservicecd = e.med_service_cd
     WITH nocounter
    ;end select
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 IF (validate(getoldencountertype,char(128))=char(128))
  SUBROUTINE (getoldencountertype(pencntrid=f8,prencntrtype=f8(ref)) =i2)
    CALL logmessage("getOldEncounterType","This sub is deprecated and should no longer be used",
     log_warning)
    SET prencntrtype = 0.0
    IF (validate(request->o_encntr_type_cd))
     SET prencntrtype = request->o_encntr_type_cd
    ELSE
     SELECT INTO "nl:"
      FROM pm_transaction pt
      WHERE pt.n_encntr_id=pencntrid
       AND pt.transaction != "CMB"
      ORDER BY pt.activity_dt_tm DESC
      HEAD REPORT
       prencntrtype = pt.o_encntr_type_cd
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getnewencountertype,char(128))=char(128))
  SUBROUTINE (getnewencountertype(pencntrid=f8,prencntrtype=f8(ref)) =i2)
    CALL logmessage("getNewEncounterType","This sub is deprecated and should no longer be used",
     log_warning)
    SET prencntrtype = 0.0
    IF (validate(request->n_encntr_type_cd))
     SET prencntrtype = request->n_encntr_type_cd
    ELSE
     SELECT INTO "nl:"
      FROM encounter e
      PLAN (e
       WHERE e.encntr_id=pencntrid)
      DETAIL
       prencntrtype = e.encntr_type_cd
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getoldlocation,char(128))=char(128))
  SUBROUTINE (getoldlocation(pencntrid=f8,prlocation=f8(ref)) =i2)
    CALL logmessage("getOldLocation","This sub is deprecated and should no longer be used",
     log_warning)
    SET prlocation = 0.0
    IF (validate(request->o_loc_nurse_unit_cd))
     SET prlocation = request->o_loc_nurse_unit_cd
    ELSE
     SELECT INTO "nl:"
      FROM pm_transaction pt
      WHERE pt.n_encntr_id=pencntrid
       AND pt.transaction != "CMB"
      ORDER BY pt.activity_dt_tm DESC
      HEAD REPORT
       prlocation = pt.o_loc_nurse_unit_cd
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getnewlocation,char(128))=char(128))
  SUBROUTINE (getnewlocation(pencntrid=f8,prlocation=f8(ref)) =i2)
    CALL logmessage("getNewLocation","This sub is deprecated and should no longer be used",
     log_warning)
    SET prlocation = 0.0
    IF (validate(request->n_loc_nurse_unit_cd))
     SET prlocation = request->n_loc_nurse_unit_cd
    ELSE
     SELECT INTO "nl:"
      FROM encounter e
      PLAN (e
       WHERE e.encntr_id=pencntrid)
      DETAIL
       prlocation = e.loc_nurse_unit_cd
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getolddischargedttm,char(128))=char(128))
  SUBROUTINE (getolddischargedttm(pencntrid=f8,prdischargedttm=f8(ref)) =i2)
    CALL logmessage("getOldDischargeDtTm","This sub is deprecated and should no longer be used",
     log_warning)
    SET prdischargedttm = 0.0
    IF (validate(request->o_disch_dt_tm))
     SET prdischargedttm = request->o_disch_dt_tm
    ELSE
     SELECT INTO "nl:"
      FROM pm_transaction pt
      WHERE pt.n_encntr_id=pencntrid
       AND pt.transaction != "CMB"
      ORDER BY pt.activity_dt_tm DESC
      HEAD REPORT
       prdischargedttm = pt.o_disch_dt_tm
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getnewdischargedttm,char(128))=char(128))
  SUBROUTINE (getnewdischargedttm(pencntrid=f8,prdischargedttm=f8(ref)) =i2)
    CALL logmessage("getNewDischargeDtTm","This sub is deprecated and should no longer be used",
     log_warning)
    SET prdischargedttm = 0.0
    IF (validate(request->n_disch_dt_tm))
     SET prdischargedttm = request->n_disch_dt_tm
    ELSE
     SELECT INTO "nl:"
      FROM encounter e
      PLAN (e
       WHERE e.encntr_id=pencntrid)
      DETAIL
       prdischargedttm = e.disch_dt_tm
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getoldfacilitycd,char(128))=char(128))
  SUBROUTINE (getoldfacilitycd(pencntrid=f8,prfacilitycd=f8(ref)) =i2)
    CALL logmessage("getOldFacilityCd","This sub is deprecated and should no longer be used",
     log_warning)
    SET prfacilitycd = 0.0
    IF (validate(request->o_loc_facility_cd))
     IF ((request->o_loc_facility_cd != 0.0))
      SET prfacilitycd = request->o_loc_facility_cd
     ENDIF
    ENDIF
    IF (prfacilitycd=0.0)
     SELECT INTO "nl:"
      FROM pm_transaction pt
      WHERE pt.n_encntr_id=pencntrid
       AND pt.transaction != "CMB"
      ORDER BY pt.activity_dt_tm DESC
      HEAD REPORT
       prfacilitycd = pt.o_loc_facility_cd
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getnewfacilitycd,char(128))=char(128))
  SUBROUTINE (getnewfacilitycd(pencntrid=f8,prfacilitycd=f8(ref)) =i2)
    CALL logmessage("getNewFacilityCd","This sub is deprecated and should no longer be used",
     log_warning)
    SET prfacilitycd = 0.0
    IF (validate(request->n_loc_facility_cd))
     IF ((request->n_loc_facility_cd != 0.0))
      SET prfacilitycd = request->n_loc_facility_cd
     ENDIF
    ENDIF
    IF (prfacilitycd=0.0)
     SELECT INTO "nl:"
      FROM encounter e
      PLAN (e
       WHERE e.encntr_id=pencntrid)
      DETAIL
       prfacilitycd = e.loc_facility_cd
      WITH nocounter
     ;end select
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo("Begin PFT_EVAL_CHRG_POSTING_RULES_SUBS.INC, version [724294.008]")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 CALL echo(build("Begin PFT_DIAGNOSIS_MAPPING_SUBS.INC, version [",nullterm("418045.004"),"]"))
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(nomenlist)))
  RECORD nomenlist(
    1 targetdiagnosistype = f8
    1 objarray[*]
      2 encntrid = f8
      2 chargeitemid = f8
      2 nomenlist[*]
        3 chargeeventmodid = f8
        3 chargemodid = f8
        3 nomenclatureid = f8
        3 diagtypecd = f8
  ) WITH protect
 ENDIF
 IF ( NOT (validate(codes)))
  RECORD codes(
    1 codes[*]
      2 conceptcki = vc
      2 sourcenomenid = f8
      2 ckis[*]
        3 cki = vc
        3 groupsequence = i4
  ) WITH protect
 ENDIF
 IF ( NOT (validate(diagnosismap)))
  RECORD diagnosismap(
    1 objarray[*]
      2 encntrid = f8
      2 chargeitemid = f8
      2 diagnosis[*]
        3 chargeeventmodid = f8
        3 chargemodid = f8
        3 sourcenomenid = f8
        3 maptypeflg = f8
        3 synonyms[*]
          4 nomenid = f8
          4 sourceident = vc
          4 description = vc
        3 diagtypecd = f8
  ) WITH protect
 ENDIF
 IF ( NOT (validate(synonymlist)))
  RECORD synonymlist(
    1 synonymlist[*]
      2 nomenid = f8
      2 sourceidentifier = vc
  ) WITH protect
 ENDIF
 IF ( NOT (validate(sortlist)))
  RECORD sortlist(
    1 sortlist[*]
      2 targetcki = vc
      2 groupsequence = i4
  ) WITH protect
 ENDIF
 IF ( NOT (validate(srv_invalid_handle)))
  DECLARE srv_invalid_handle = i4 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(srv_msg_ok)))
  DECLARE srv_msg_ok = i4 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(one_to_one_mapping)))
  DECLARE one_to_one_mapping = f8 WITH protect, constant(1.0)
 ENDIF
 IF ( NOT (validate(one_to_many_mapping)))
  DECLARE one_to_many_mapping = f8 WITH protect, constant(2.0)
 ENDIF
 IF ( NOT (validate(no_mapping)))
  DECLARE no_mapping = f8 WITH protect, constant(3.0)
 ENDIF
 IF ( NOT (validate(icd9_effective_dt_tm)))
  RECORD icddatereply(
    1 icd9endeffectivedate = dq8
    1 icd10compliancedate = dq8
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  ) WITH protect
  EXECUTE afc_get_icd_compliance_date  WITH replace("REPLY",icddatereply)
  IF ((icddatereply->status_data.status="F"))
   RETURN(false)
  ENDIF
  DECLARE icd9_effective_dt_tm = f8 WITH protect, constant(cnvtdatetime(icddatereply->
    icd9endeffectivedate))
 ENDIF
 DECLARE hhandlernamesrvmsg = i4 WITH protect, noconstant(0)
 DECLARE hhandlernamesrvreq = i4 WITH protect, noconstant(0)
 DECLARE hhandlernamesrvrep = i4 WITH protect, noconstant(0)
 DECLARE msgstatus = i4 WITH protect, noconstant(1)
 DECLARE iconceptcount = i4 WITH protect, noconstant(0)
 DECLARE nomenloop = i4 WITH protect, noconstant(0)
 DECLARE objarrayloop = i4 WITH protect, noconstant(0)
 DECLARE isyncnt = i4 WITH protect, noconstant(0)
 DECLARE currentencounterid = f8 WITH protect, noconstant(0)
 DECLARE currentdiagtypecd = f8 WITH protect, noconstant(0)
 DECLARE previousencounterid = f8 WITH protect, noconstant(0)
 DECLARE previousdiagtypecd = f8 WITH protect, noconstant(0)
 DECLARE getsynonyms(null) = i2
 SUBROUTINE (prepareejstransaction(prsvrreq=i4(ref),prsvrrep=i4(ref),prsvrmsg=i4(ref),preqnumber=i4
  ) =i2)
   SET prsvrmsg = uar_srvselectmessage(preqnumber)
   IF (validate(debug,0)=1)
    CALL echo(build("prepareEJSTransaction() prSvrMsg=",prsvrmsg))
   ENDIF
   IF (prsvrmsg=srv_invalid_handle)
    CALL logmessage("prepareEJSTransaction","uar_SrvSelectMessage did not return successfully.",
     log_debug)
    RETURN(false)
   ENDIF
   SET prsvrreq = uar_srvcreaterequest(prsvrmsg)
   IF (validate(debug,0)=1)
    CALL echo(build("prepareEJSTransaction() prSvrReq=",prsvrreq))
   ENDIF
   IF (prsvrreq=srv_invalid_handle)
    CALL logmessage("prepareEJSTransaction","uar_SrvCreateRequest did not return successfully.",
     log_debug)
    RETURN(false)
   ENDIF
   SET prsvrrep = uar_srvcreatereply(prsvrmsg)
   IF (validate(debug,0)=1)
    CALL echo(build("prepareEJSTransaction() prSvrRep=",prsvrrep))
   ENDIF
   IF (prsvrrep=srv_invalid_handle)
    CALL logmessage("prepareEJSTransaction","uar_SrvCreateReply did not return successfully.",
     log_debug)
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (cleanupsrvhandles(psrvreq=i4,psrvrep=i4,psrvmsg=i4,psrvstatus=i4) =i2)
   IF (validate(psrvreq))
    CALL uar_srvdestroyinstance(psrvreq)
   ENDIF
   IF (validate(psrvrep))
    CALL uar_srvdestroyinstance(psrvrep)
   ENDIF
   IF (validate(psrvmsg))
    CALL uar_srvdestroyinstance(psrvmsg)
   ENDIF
   IF (validate(psrvstatus))
    CALL uar_srvdestroyinstance(psrvstatus)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getdiagnosismap(nomenlist=vc,diagnosismap=vc(ref)) =i2)
   DECLARE l_handler_name_req = i4 WITH protect, constant(4174016)
   DECLARE hhandlernomens = i4 WITH protect, noconstant(0)
   DECLARE hnomenclatures = i4 WITH protect, noconstant(0)
   DECLARE scki = vc WITH protect, noconstant("")
   FOR (objarrayloop = 1 TO size(nomenlist->objarray,5))
     SET stat = initrec(synonymlist)
     SET isyncnt = 0
     SET stat = alterlist(diagnosismap->objarray,objarrayloop)
     SET currentencounterid = nomenlist->objarray[objarrayloop].encntrid
     SET diagnosismap->objarray[objarrayloop].encntrid = currentencounterid
     SET diagnosismap->objarray[objarrayloop].chargeitemid = nomenlist->objarray[objarrayloop].
     chargeitemid
     FOR (nomenloop = 1 TO size(nomenlist->objarray[objarrayloop].nomenlist,5))
       SET stat = prepareejstransaction(hhandlernamesrvreq,hhandlernamesrvrep,hhandlernamesrvmsg,
        l_handler_name_req)
       IF (stat=srv_invalid_handle)
        RETURN(false)
       ENDIF
       SET hhandlernomens = uar_srvadditem(hhandlernamesrvreq,"nomenclature_ids")
       SET stat = uar_srvsetdouble(hhandlernomens,"id",nomenlist->objarray[objarrayloop].nomenlist[
        nomenloop].nomenclatureid)
       SET msgstatus = uar_srvexecute(hhandlernamesrvmsg,hhandlernamesrvreq,hhandlernamesrvrep)
       IF (validate(debug,0)=1)
        CALL echo("Nomen_GetNomenclaturesByIds(4174016)")
        CALL uar_oen_dump_object(hhandlernamesrvreq)
        CALL uar_oen_dump_object(hhandlernamesrvrep)
       ENDIF
       IF (msgstatus != srv_msg_ok)
        CALL logmessage("getDiagnosisMap",
         "Unable to retrieve cki for source nomenclature id.  Service call failed.",log_debug)
        RETURN(false)
       ENDIF
       SET hnomenclatures = uar_srvgetitem(hhandlernamesrvrep,"nomenclatures",0)
       IF (hnomenclatures != srv_invalid_handle)
        SET stat = alterlist(diagnosismap->objarray[objarrayloop].diagnosis,nomenloop)
        SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].chargeeventmodid = nomenlist->
        objarray[objarrayloop].nomenlist[nomenloop].chargeeventmodid
        SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].chargemodid = nomenlist->
        objarray[objarrayloop].nomenlist[nomenloop].chargemodid
        SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].sourcenomenid = nomenlist->
        objarray[objarrayloop].nomenlist[nomenloop].nomenclatureid
        SET currentdiagtypecd = nomenlist->objarray[objarrayloop].nomenlist[nomenloop].diagtypecd
        SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].diagtypecd = currentdiagtypecd
        SET scki = fillstring(255,char(0))
        CALL uar_srvgetstring(hnomenclatures,"cki",scki,uar_srvgetstringlen(hnomenclatures,"cki"))
        CALL cleanupsrvhandles(hhandlernamesrvreq,hhandlernamesrvrep,hhandlernamesrvmsg,msgstatus)
        IF ( NOT (getconcept(scki,nomenlist->objarray[objarrayloop].nomenlist[nomenloop].
         nomenclatureid)))
         RETURN(false)
        ENDIF
       ENDIF
     ENDFOR
   ENDFOR
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getconcept(pcki=vc,psourcenomenid=f8) =i2)
   DECLARE l_handler_name_req = i4 WITH protect, constant(4174018)
   DECLARE hhandlerconcepts = i4 WITH protect, noconstant(0)
   DECLARE hconcept = i4 WITH protect, noconstant(0)
   DECLARE hassociations = i4 WITH protect, noconstant(0)
   DECLARE htarget = i4 WITH protect, noconstant(0)
   DECLARE hnomenclatures = i4 WITH protect, noconstant(0)
   DECLARE fconceptsource = f8 WITH protect, noconstant(0)
   DECLARE fnomenclatureid = f8 WITH protect, noconstant(0)
   DECLARE ivtermind = i4 WITH protect, noconstant(0)
   DECLARE stargetcki = c255 WITH noconstant(fillstring(255," "))
   DECLARE ssourceconceptcki = c255 WITH noconstant(fillstring(255," "))
   DECLARE icountas = i4 WITH protect, noconstant(0)
   DECLARE icountasidx = i4 WITH protect, noconstant(0)
   DECLARE icountcki = i4 WITH protect, noconstant(0)
   DECLARE inomencnt = i4 WITH protect, noconstant(0)
   DECLARE inomenidx = i4 WITH protect, noconstant(0)
   DECLARE isortcnt = i4 WITH protect, noconstant(0)
   DECLARE igroupsequence = i4 WITH protect, noconstant(0)
   SET stat = prepareejstransaction(hhandlernamesrvreq,hhandlernamesrvrep,hhandlernamesrvmsg,
    l_handler_name_req)
   IF (stat=srv_invalid_handle)
    RETURN(false)
   ENDIF
   SET hhandlerconcepts = uar_srvadditem(hhandlernamesrvreq,"concept_cki")
   SET stat = uar_srvsetstring(hhandlerconcepts,"cki",trim(pcki))
   SET stat = uar_srvsetshort(hhandlerconcepts,"preferred_nomenclature_flag",1)
   SET msgstatus = uar_srvexecute(hhandlernamesrvmsg,hhandlernamesrvreq,hhandlernamesrvrep)
   IF (validate(debug,0)=1)
    CALL echo("Nomen_GetConceptAssociationByCki(4174018)")
    CALL uar_oen_dump_object(hhandlernamesrvreq)
    CALL uar_oen_dump_object(hhandlernamesrvrep)
   ENDIF
   IF (msgstatus != srv_msg_ok)
    CALL logmessage("getConcept",
     "Unable to retrieve related concept ckis for source nomenclature id.  Service call failed.",
     log_debug)
    RETURN(false)
   ENDIF
   SET hconcept = uar_srvgetitem(hhandlernamesrvrep,"concepts",0)
   IF (hconcept != srv_invalid_handle)
    SET iconceptcount += 1
    SET stat = alterlist(codes->codes,iconceptcount)
    CALL uar_srvgetstring(hconcept,"concept_cki",ssourceconceptcki,uar_srvgetstringlen(hconcept,
      "concept_cki"))
    SET codes->codes[iconceptcount].conceptcki = trim(ssourceconceptcki)
    SET codes->codes[iconceptcount].sourcenomenid = psourcenomenid
    SET icountas = uar_srvgetitemcount(hconcept,"associations")
    IF (icountas > 0)
     SET stat = initrec(sortlist)
     SET isortcnt = 0
     FOR (icountasidx = 1 TO icountas)
       SET stargetcki = fillstring(255,char(0))
       SET hassociations = uar_srvgetitem(hconcept,"associations",(icountasidx - 1))
       IF (hassociations != srv_invalid_handle)
        SET htarget = uar_srvgetstruct(hassociations,"target_concept")
        IF (htarget != srv_invalid_handle)
         CALL uar_srvgetstring(htarget,"cki",stargetcki,uar_srvgetstringlen(htarget,"cki"))
         SET igroupsequence = uar_srvgetlong(hassociations,"group_sequence")
         IF (icountas > 1)
          SET isortcnt += 1
          SET stat = alterlist(sortlist->sortlist,isortcnt)
          SET sortlist->sortlist[isortcnt].targetcki = trim(stargetcki)
          SET sortlist->sortlist[isortcnt].groupsequence = igroupsequence
         ELSE
          SET icountcki += 1
          SET stat = alterlist(codes->codes[iconceptcount].ckis,icountcki)
          SET codes->codes[iconceptcount].ckis[icountcki].cki = trim(stargetcki)
          SET codes->codes[iconceptcount].ckis[icountcki].groupsequence = igroupsequence
         ENDIF
        ENDIF
       ENDIF
     ENDFOR
     IF (icountas > 1)
      SELECT INTO "nl:"
       target_cki = notrim(substring(1,255,sortlist->sortlist[d.seq].targetcki)), group_seq =
       sortlist->sortlist[d.seq].groupsequence
       FROM (dummyt d  WITH seq = value(icountas))
       ORDER BY group_seq, target_cki
       DETAIL
        icountcki += 1, stat = alterlist(codes->codes[iconceptcount].ckis,icountcki), codes->codes[
        iconceptcount].ckis[icountcki].cki = target_cki,
        codes->codes[iconceptcount].ckis[icountcki].groupsequence = group_seq
       WITH nocounter
      ;end select
     ENDIF
     IF ( NOT (getsynonyms(null)))
      RETURN(false)
     ENDIF
    ELSE
     SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].maptypeflg = no_mapping
    ENDIF
   ELSE
    SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].maptypeflg = no_mapping
   ENDIF
   CALL cleanupsrvhandles(hhandlernamesrvreq,hhandlernamesrvrep,hhandlernamesrvmsg,msgstatus)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE getsynonyms(null)
   DECLARE l_handler_name_req = i4 WITH protect, constant(4174013)
   DECLARE hhandlernomens = i4 WITH protect, noconstant(0)
   DECLARE hnomenclatures = i4 WITH protect, noconstant(0)
   DECLARE hnomenclaturesynonyms = i4 WITH protect, noconstant(0)
   DECLARE fnomenclatureid = f8 WITH protect, noconstant(0)
   DECLARE fterminologycd = f8 WITH protect, noconstant(0)
   DECLARE ivtermind = i4 WITH protect, noconstant(0)
   DECLARE ickicount = i4 WITH protect, noconstant(0)
   DECLARE ickicountidx = i4 WITH protect, noconstant(0)
   DECLARE inomencnt = i4 WITH protect, noconstant(0)
   DECLARE inomencntidx = i4 WITH protect, noconstant(0)
   DECLARE inomensyncnt = i4 WITH protect, noconstant(0)
   DECLARE inomensynprimarycnt = i4 WITH protect, noconstant(0)
   DECLARE inomensynidx = i4 WITH protect, noconstant(0)
   DECLARE ssourceidentifier = c50 WITH noconstant(fillstring(50," "))
   DECLARE sdescription = c500 WITH noconstant(fillstring(500," "))
   DECLARE xindex = i4 WITH protect, noconstant(0)
   DECLARE idxmapsynidx = i4 WITH protect, noconstant(0)
   SET stat = prepareejstransaction(hhandlernamesrvreq,hhandlernamesrvrep,hhandlernamesrvmsg,
    l_handler_name_req)
   IF (stat=srv_invalid_handle)
    RETURN(false)
   ENDIF
   SET ickicount = size(codes->codes[iconceptcount].ckis,5)
   FOR (ickicountidx = 1 TO ickicount)
     SET hhandlernomens = uar_srvadditem(hhandlernamesrvreq,"nomenclatures")
     SET stat = uar_srvsetstring(hhandlernomens,"cki",nullterm(trim(codes->codes[iconceptcount].ckis[
        ickicountidx].cki)))
     SET stat = uar_srvsetdate(hhandlernomens,"effective_dt_tm",icd9_effective_dt_tm)
   ENDFOR
   SET msgstatus = uar_srvexecute(hhandlernamesrvmsg,hhandlernamesrvreq,hhandlernamesrvrep)
   IF (validate(debug,0)=1)
    CALL echo("Nomen_GetNomenclatureSynonymsByCki(4174013)")
    CALL uar_oen_dump_object(hhandlernamesrvreq)
    CALL uar_oen_dump_object(hhandlernamesrvrep)
   ENDIF
   IF (msgstatus != srv_msg_ok)
    CALL logmessage("getSynonyms",
     "Unable to retrieve synonyms for related concept ckis.  Service call failed.",log_debug)
    RETURN(false)
   ENDIF
   SET inomencnt = uar_srvgetitemcount(hhandlernamesrvrep,"nomenclatures")
   FOR (inomencntidx = 1 TO inomencnt)
    SET hnomenclatures = uar_srvgetitem(hhandlernamesrvrep,"nomenclatures",(inomencntidx - 1))
    IF (hnomenclatures != srv_invalid_handle)
     SET inomensyncnt = uar_srvgetitemcount(hnomenclatures,"nomenclature_synonyms")
     FOR (inomensynidx = 1 TO inomensyncnt)
      SET hnomenclaturesynonyms = uar_srvgetitem(hnomenclatures,"nomenclature_synonyms",(inomensynidx
        - 1))
      IF (hnomenclaturesynonyms != srv_invalid_handle)
       SET fterminologycd = uar_srvgetdouble(hnomenclaturesynonyms,"terminology_cd")
       IF ((fterminologycd=nomenlist->targetdiagnosistype))
        SET ivtermind = uar_srvgetshort(hnomenclaturesynonyms,"primary_vterm_ind")
        IF (ivtermind)
         SET ssourceidentifier = fillstring(50,char(0))
         SET sdescription = fillstring(500,char(0))
         SET inomensynprimarycnt += 1
         SET fnomenclatureid = uar_srvgetdouble(hnomenclaturesynonyms,"nomenclature_id")
         CALL uar_srvgetstring(hnomenclaturesynonyms,"source_identifier",ssourceidentifier,
          uar_srvgetstringlen(hnomenclaturesynonyms,"source_identifier"))
         IF (previousencounterid=currentencounterid
          AND previousdiagtypecd != currentdiagtypecd)
          SET stat = initrec(synonymlist)
          SET isyncnt = 0
         ENDIF
         IF (locateval(xindex,1,size(synonymlist->synonymlist,5),trim(ssourceidentifier),synonymlist
          ->synonymlist[xindex].sourceidentifier)=0)
          SET isyncnt += 1
          SET stat = alterlist(synonymlist->synonymlist,isyncnt)
          SET synonymlist->synonymlist[isyncnt].nomenid = fnomenclatureid
          SET synonymlist->synonymlist[isyncnt].sourceidentifier = trim(ssourceidentifier)
          SET idxmapsynidx += 1
          SET stat = alterlist(diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].synonyms,
           idxmapsynidx)
          SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].synonyms[idxmapsynidx].
          nomenid = fnomenclatureid
          SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].synonyms[idxmapsynidx].
          sourceident = trim(ssourceidentifier)
          CALL uar_srvgetstring(hnomenclaturesynonyms,"description",sdescription,uar_srvgetstringlen(
            hnomenclaturesynonyms,"description"))
          SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].synonyms[idxmapsynidx].
          description = trim(sdescription)
         ENDIF
        ENDIF
       ENDIF
      ENDIF
     ENDFOR
    ENDIF
   ENDFOR
   SET previousencounterid = currentencounterid
   SET previousdiagtypecd = currentdiagtypecd
   IF (inomensynprimarycnt=1)
    SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].maptypeflg = one_to_one_mapping
   ELSEIF (inomensynprimarycnt > 1)
    SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].maptypeflg = one_to_many_mapping
   ELSE
    SET diagnosismap->objarray[objarrayloop].diagnosis[nomenloop].maptypeflg = no_mapping
   ENDIF
   CALL cleanupsrvhandles(hhandlernamesrvreq,hhandlernamesrvrep,hhandlernamesrvmsg,msgstatus)
   RETURN(true)
 END ;Subroutine
 SET escpok = 0
 SET escpinvalid = 1
 SET escpexists = 2
 SET escpfailure = 3
 SET escpnoaccess = 4
 SET emsgok = 0
 SET emsgcomerror = 1
 SET emsgdataerror = 2
 SET emsgrequesterror = 3
 SET emsgsecurityerror = 4
 SET emsgticketexpired = 5
 SET emsgresourceerror = 6
 SET emsginvalid = 7
 IF (validate(scp_addentry,99)=99)
  DECLARE oensit_scp_functions = i2 WITH persist
  SET oensit_scp_functions = 1
  DECLARE scp_addentry = i2 WITH persist
  DECLARE scp_removeentry = i2 WITH persist
  DECLARE scp_queryentry = i2 WITH persist
  DECLARE scp_modifyentry = i2 WITH persist
  DECLARE scp_modifyentrylogon = i2 WITH persist
  DECLARE scp_modifyentryprop = i2 WITH persist
  DECLARE scp_enumentries = i2 WITH persist
  DECLARE scp_enumprop = i2 WITH persist
  DECLARE scp_startserver = i2 WITH persist
  DECLARE scp_stopserver = i2 WITH persist
  DECLARE scp_killserver = i2 WITH persist
  DECLARE scp_queryserver = i2 WITH persist
  DECLARE scp_enumservers = i2 WITH persist
  DECLARE scp_queryservice = i2 WITH persist
  DECLARE scp_enumservices = i2 WITH persist
  DECLARE scp_getplatform = i2 WITH persist
  DECLARE scp_startdomain = i2 WITH persist
  DECLARE scp_stopdomain = i2 WITH persist
  DECLARE scp_killdomain = i2 WITH persist
  DECLARE scp_setprop = i2 WITH persist
  DECLARE scp_enumnodes = i2 WITH persist
  DECLARE scp_querydomain = i2 WITH persist
  DECLARE scp_fetchentry = i2 WITH persist
  DECLARE scp_fetchserver = i2 WITH persist
  DECLARE scp_fetchservice = i2 WITH persist
  DECLARE scp_setlogon = i2 WITH persist
  SET scp_addentry = 0
  SET scp_removeentry = 1
  SET scp_queryentry = 2
  SET scp_modifyentry = 3
  SET scp_modifyentrylogon = 4
  SET scp_modifyentryprop = 5
  SET scp_enumentries = 6
  SET scp_enumprop = 7
  SET scp_startserver = 8
  SET scp_stopserver = 9
  SET scp_killserver = 10
  SET scp_queryserver = 11
  SET scp_enumservers = 12
  SET scp_queryservice = 13
  SET scp_enumservices = 14
  SET scp_getplatform = 15
  SET scp_startdomain = 16
  SET scp_stopdomain = 17
  SET scp_killdomain = 18
  SET scp_setprop = 19
  SET scp_enumnodes = 20
  SET scp_querydomain = 21
  SET scp_fetchentry = 22
  SET scp_fetchserver = 23
  SET scp_fetchservice = 24
  SET scp_setlogon = 25
  DECLARE uar_oen_get_nodename() = c32 WITH persist
  DECLARE uar_float_to_double(p1=i4(value),p2=vc(ref)) = f8 WITH persist
  DECLARE uar_scpcreate(p1=vc(ref)) = i4 WITH image_axp = "dpsrtl", uar = "ScpCreate", image_aix =
  "libdps.a(libdps.o)",
  persist
  DECLARE uar_scpdestroy(p1=i4(value)) = null WITH image_axp = "dpsrtl", uar = "ScpDestroy",
  image_aix = "libdps.a(libdps.o)",
  persist
  DECLARE uar_scpselect(p1=i4(value),p2=i4(value)) = i4 WITH image_axp = "dpsrtl", uar = "ScpSelect",
  image_aix = "libdps.a(libdps.o)",
  persist
  DECLARE uar_srvgetucharasint(p1=i4(value),p2=vc(ref)) = i1 WITH image_axp = "srvrtl", image_aix =
  "libsrv.a(libsrv.o)", uar = "SrvGetUChar",
  persist
 ENDIF
 DECLARE iswtpserveravailable(dummy) = i2
 SUBROUTINE (writerowtowtp(pwtptaskrequest=vc,ptaskident=vc,pentityid=f8,pentityname=vc,pprocessdttm=
  dq8,ptaskdatatxt=vc) =i2)
   CALL logmessage("writeRowToWTP","Entering",log_debug)
   RECORD wtpsaverequest(
     1 requestjson = vc
     1 processdttm = dq8
     1 taskident = vc
     1 entityid = f8
     1 entityname = vc
     1 taskdatatxt = vc
   ) WITH protect
   RECORD wtpsavereply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   IF (((size(trim(pwtptaskrequest,3)) <= 0) OR (size(trim(ptaskident,3)) <= 0)) )
    CALL addtracemessage("writeRowToWTP",
     "Missing task name and/or request JSON to add task to WTP queue.")
    RETURN(false)
   ENDIF
   SET wtpsaverequest->requestjson = pwtptaskrequest
   SET wtpsaverequest->processdttm = evaluate(pprocessdttm,0.0,cnvtdatetime(sysdate),pprocessdttm)
   SET wtpsaverequest->taskident = ptaskident
   IF (pentityid > 0.0
    AND size(trim(pentityname,3)) > 0)
    SET wtpsaverequest->entityname = pentityname
    SET wtpsaverequest->entityid = pentityid
   ENDIF
   IF (size(trim(ptaskdatatxt,3)) > 0)
    SET wtpsaverequest->taskdatatxt = trim(ptaskdatatxt,3)
   ENDIF
   IF (validate(debug,0) > 0)
    CALL echorecord(wtpsaverequest)
   ENDIF
   IF (checkprg("WTP_WORKFLOW_TASK_SAVE") <= 0)
    CALL addtracemessage("writeRowToWTP",
     "WTP_WORKFLOW_TASK_SAVE script doesn't exist in CCL dictionary.")
    RETURN(false)
   ENDIF
   EXECUTE wtp_workflow_task_save  WITH replace("REQUEST",wtpsaverequest), replace("REPLY",
    wtpsavereply)
   IF ((wtpsavereply->status_data.status != "S"))
    CALL addtracemessage("writeRowToWTP","WTP_WORKFLOW_TASK_SAVE returned failure.")
    RETURN(false)
   ENDIF
   CALL logmessage("writeRowToWTP","Exiting",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE iswtpserveravailable(dummy)
   CALL logmessage("isWTPServerAvailable","Entering",log_debug)
   DECLARE instancecount = i4
   DECLARE hscp = i4
   DECLARE hmsg = i4
   DECLARE hreq = i4
   DECLARE hrep = i4
   DECLARE wtpserver_entry = i4 WITH protect, constant(477)
   SET hscp = uar_scpcreate(nullterm(curnode))
   SET hmsg = uar_scpselect(hscp,scp_fetchserver)
   SET hreq = uar_srvcreaterequest(hmsg)
   SET hrep = uar_srvcreatereply(hmsg)
   SET stat = uar_srvexecute(hmsg,hreq,hrep)
   IF (stat != emsgok)
    SET stat = alterlist(errlog->entity,1)
    CASE (stat)
     OF emsgcomerror:
      CALL logmessage("isWTPServerAvailable","Communication error; no server available",log_info)
     OF emsgdataerror:
      CALL logmessage("isWTPServerAvailable","Data inconsistency or mismatch in message",log_info)
     OF emsgrequesterror:
      CALL logmessage("isWTPServerAvailable","No handler to service request",log_info)
     OF emsgsecurityerror:
      CALL logmessage("isWTPServerAvailable",
       "Program is not logged in or unable to acquire service ticket",log_info)
     OF emsgticketexpired:
      CALL logmessage("isWTPServerAvailable","Security ticket has expired",log_info)
     OF emsgresourceerror:
      CALL logmessage("isWTPServerAvailable","No available memory or associated resource",log_info)
     OF emsginvalid:
      CALL logmessage("isWTPServerAvailable","Handle is not valid",log_info)
    ENDCASE
    CALL uar_scpdestroy(hscp)
    RETURN(false)
   ENDIF
   SET nbr_entries = uar_srvgetitemcount(hrep,"serverlist")
   FOR (idx = 0 TO (nbr_entries - 1))
    SET hitem = uar_srvgetitem(hrep,"serverlist",idx)
    IF (uar_srvgetushort(hitem,"entryid")=wtpserver_entry)
     SET instancecount += 1
    ENDIF
   ENDFOR
   CALL uar_scpdestroy(hscp)
   IF (instancecount <= 0)
    RETURN(false)
   ENDIF
   CALL logmessage("isWTPServerAvailable","Exiting",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE writecombinesrowtowtp(pwtptaskrequest,ptaskident,pentityid,pentityname,pprocessdttm,
  ptaskdatatxt)
   CALL logmessage("writeCombinesRowToWTP","Entering",log_debug)
   RECORD wtpsaverequest(
     1 requestjson = vc
     1 processdttm = dq8
     1 taskident = vc
     1 entityid = f8
     1 entityname = vc
     1 taskdatatxt = vc
   ) WITH protect
   RECORD wtpsavereply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   IF (((size(trim(pwtptaskrequest,3)) <= 0) OR (size(trim(ptaskident,3)) <= 0)) )
    CALL addtracemessage("writeCombinesRowToWTP",
     "Missing task name and/or request JSON to add task to WTP queue.")
    RETURN(false)
   ENDIF
   SET wtpsaverequest->requestjson = pwtptaskrequest
   SET wtpsaverequest->processdttm = evaluate(pprocessdttm,0.0,cnvtdatetime(sysdate),pprocessdttm)
   SET wtpsaverequest->taskident = ptaskident
   IF (pentityid > 0.0
    AND size(trim(pentityname,3)) > 0)
    SET wtpsaverequest->entityname = pentityname
    SET wtpsaverequest->entityid = pentityid
   ENDIF
   IF (size(trim(ptaskdatatxt,3)) > 0)
    SET wtpsaverequest->taskdatatxt = trim(ptaskdatatxt,3)
   ENDIF
   IF (validate(debug,0) > 0)
    CALL echorecord(wtpsaverequest)
   ENDIF
   IF (checkprg("WTP_WORKFLOW_TASK_SAVE") <= 0)
    CALL addtracemessage("writeCombinesRowToWTP",
     "WTP_WORKFLOW_TASK_SAVE script doesn't exist in CCL dictionary.")
    RETURN(false)
   ENDIF
   EXECUTE wtp_workflow_task_save  WITH replace("REQUEST",wtpsaverequest), replace("REPLY",
    wtpsavereply)
   IF ((wtpsavereply->status_data.status != "S"))
    CALL addtracemessage("writeCombinesRowToWTP","WTP_WORKFLOW_TASK_SAVE returned failure.")
    RETURN(false)
   ENDIF
   CALL logmessage("writeCombinesRowToWTP","Exiting",log_debug)
   RETURN(true)
 END ;Subroutine
 IF ( NOT (validate(ein_trans_alias_elements)))
  DECLARE ein_trans_alias_elements = i4 WITH protect, constant(21)
 ENDIF
 IF ( NOT (validate(ein_trans_alias)))
  DECLARE ein_trans_alias = i4 WITH protect, constant(20)
 ENDIF
 IF ( NOT (validate(map_error)))
  DECLARE map_error = i4 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(new_map)))
  DECLARE new_map = i4 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(no_map)))
  DECLARE no_map = i4 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(pa_team_name)))
  DECLARE pa_team_name = vc WITH protect, constant("PATIENT_ACCOUNTING")
 ENDIF
 IF ( NOT (validate(icd_prof_capability_ident)))
  DECLARE icd_prof_capability_ident = vc WITH protect, constant("2014.1.00184.1")
 ENDIF
 IF ( NOT (validate(pft_encntr_entity_name)))
  DECLARE pft_encntr_entity_name = vc WITH protect, constant("FINANCIAL_ENCOUNTER")
 ENDIF
 IF ( NOT (validate(multi_guarantor_capability_ident)))
  DECLARE multi_guarantor_capability_ident = vc WITH protect, constant("2016.2.00220.1")
 ENDIF
 IF ( NOT (validate(cs20549_discount_adj_cd)))
  DECLARE cs20549_discount_adj_cd = f8 WITH protect, constant(getcodevalue(20549,"DISCOUNT ADJ",0))
 ENDIF
 IF ( NOT (validate(cs18937_disc_adj_cd)))
  DECLARE cs18937_disc_adj_cd = f8 WITH protect, constant(getcodevalue(18937,"DISC ADJ",0))
 ENDIF
 IF ( NOT (validate(cs18649_adjust_cd)))
  DECLARE cs18649_adjust_cd = f8 WITH protect, constant(getcodevalue(18649,"ADJUST",0))
 ENDIF
 IF ( NOT (validate(cs14002_icd_cd)))
  DECLARE cs14002_icd_cd = f8 WITH protect, constant(getcodevalue(14002,"ICD9",0))
 ENDIF
 IF ( NOT (validate(cs13019_mod_type_cd)))
  DECLARE cs13019_mod_type_cd = f8 WITH protect, constant(getcodevalue(13019,"BILL CODE",0))
 ENDIF
 IF ( NOT (validate(cs21749_hcfa_1500_cd)))
  DECLARE cs21749_hcfa_1500_cd = f8 WITH protect, constant(getcodevalue(21749,"HCFA_1500",0))
 ENDIF
 IF ( NOT (validate(cs25753_reversal_cd)))
  DECLARE cs25753_reversal_cd = f8 WITH protect, constant(getcodevalue(25753,"REVERSAL",0))
 ENDIF
 IF ( NOT (validate(cs24269_history_cd)))
  DECLARE cs24269_history_cd = f8 WITH protect, constant(getcodevalue(24269,"HISTORY",1))
 ENDIF
 RECORD chargepbmrequest(
   1 eventkey = vc
   1 categorykey = vc
   1 htask = i4
   1 objarray[*]
     2 corspactivityid = f8
     2 activityid = f8
     2 pftchargeid = f8
     2 pftencntrid = f8
     2 encounterid = f8
     2 insurancebalanceid = f8
     2 scheventid = f8
     2 referralid = f8
     2 eventid = f8
     2 eventparams[*]
       3 paramkey = vc
       3 doublevalue = f8
       3 stringvalue = vc
       3 datevalue = dq8
       3 parententityname = vc
       3 parententityid = f8
       3 paramgroup = i4
     2 eventparamgroupcount = i4
     2 personid = f8
     2 billingentityid = f8
     2 accountid = f8
     2 schentryid = f8
 ) WITH protect
 RECORD chargepbmreply(
   1 rulesets[*]
     2 rulesetkey = vc
     2 eventkey = vc
     2 categorykey = vc
     2 objarray[*]
       3 corspactivityid = f8
       3 activityid = f8
       3 pftchargeid = f8
       3 pftencntrid = f8
       3 encounterid = f8
       3 insurancebalanceid = f8
       3 scheventid = f8
       3 referralid = f8
       3 actions[*]
         4 actionkey = vc
         4 params[*]
           5 paramkey = vc
           5 paramtype = vc
           5 paramvalue = vc
   1 status_data
     2 status = c1
     2 subeventstatus[1]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 ) WITH protect
 IF (validate(checkchargeforwriteoff,char(128))=char(128))
  SUBROUTINE (checkchargeforwriteoff(ppftchargeid=f8,practionkey=vc(ref)) =i2)
    SET stat = alterlist(chargepbmrequest->objarray,1)
    SET chargepbmrequest->objarray[1].pftchargeid = ppftchargeid
    SET chargepbmrequest->categorykey = "CHRGPOST"
    SET chargepbmrequest->eventkey = "CHRG_WRITEOFF"
    EXECUTE pft_eval_pbm_rules  WITH replace("REQUEST",chargepbmrequest), replace("REPLY",
     chargepbmreply)
    IF ((chargepbmreply->status_data.status="F"))
     CALL logmessage("checkChargeForWriteoff","PFT_EVAL_PBM_RULES failed",log_error)
     RETURN(false)
    ELSEIF ((chargepbmreply->status_data.status="Z"))
     CALL logmessage("checkChargeForWriteoff","No Charge Rules to Evaluate",log_debug)
    ENDIF
    SET practionkey = trim(chargepbmreply->rulesets[1].objarray[1].actions[1].actionkey,3)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(checkchargesforwriteoffandgetaliases,char(128))=char(128))
  SUBROUTINE (checkchargesforwriteoffandgetaliases(prcharges=vc(ref)) =i2)
    DECLARE chargeindex = i4 WITH protect, noconstant(0)
    DECLARE actionsindex = i4 WITH protect, noconstant(0)
    DECLARE paramindex = i4 WITH protect, noconstant(0)
    DECLARE transaliasindex = i4 WITH protect, noconstant(0)
    DECLARE locatevalindex = i4 WITH protect, noconstant(0)
    DECLARE defaulttransid = f8 WITH protect, noconstant(0.0)
    IF (size(prcharges->charges,5) < 1)
     CALL logmessage("checkChargesForWriteoffAndGetAliases","No charges to check",log_debug)
     RETURN(true)
    ENDIF
    RECORD transaliases(
      1 objarray[*]
        2 transaliasid = f8
        2 transaliastypecd = f8
        2 transaliassubtypecd = f8
        2 transreasoncd = f8
        2 drcrflag = i2
    ) WITH protect
    RECORD transaliasfindrequest(
      1 objarray[*]
        2 trans_alias_id = f8
        2 trans_type_cd = f8
        2 trans_sub_type_cd = f8
        2 trans_reason_cd = f8
    ) WITH protect
    RECORD transaliasfindreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD objtransalias(
      1 proxy_ind = i2
      1 obj_vrsn_1 = f8
      1 ein_type = i4
      1 objarray[*]
        2 trans_alias_id = f8
        2 trans_type_cd = f8
        2 trans_type_disp = vc
        2 trans_type_desc = vc
        2 trans_type_mean = vc
        2 trans_type_code_set = i4
        2 trans_sub_type_cd = f8
        2 trans_sub_type_disp = vc
        2 trans_sub_type_desc = vc
        2 trans_sub_type_mean = vc
        2 trans_sub_type_code_set = i4
        2 trans_reason_cd = f8
        2 trans_reason_disp = vc
        2 trans_reason_desc = vc
        2 trans_reason_mean = vc
        2 trans_reason_code_set = i4
        2 dr_cr_flag = i2
        2 pft_trans_alias = vc
        2 edi_ind = i2
        2 pft_trans_alias_cd = f8
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD objdefaulttransalias(
      1 proxy_ind = i2
      1 obj_vrsn_1 = f8
      1 ein_type = i4
      1 objarray[*]
        2 trans_alias_id = f8
        2 trans_type_cd = f8
        2 trans_type_disp = vc
        2 trans_type_desc = vc
        2 trans_type_mean = vc
        2 trans_type_code_set = i4
        2 trans_sub_type_cd = f8
        2 trans_sub_type_disp = vc
        2 trans_sub_type_desc = vc
        2 trans_sub_type_mean = vc
        2 trans_sub_type_code_set = i4
        2 trans_reason_cd = f8
        2 trans_reason_disp = vc
        2 trans_reason_desc = vc
        2 trans_reason_mean = vc
        2 trans_reason_code_set = i4
        2 dr_cr_flag = i2
        2 pft_trans_alias = vc
        2 edi_ind = i2
        2 pft_trans_alias_cd = f8
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET stat = alterlist(chargepbmrequest->objarray,size(prcharges->charges,5))
    SET chargepbmrequest->categorykey = "CHRGPOST"
    SET chargepbmrequest->eventkey = "CHRG_WRITEOFF"
    FOR (chargeindex = 1 TO size(prcharges->charges,5))
      SET chargepbmrequest->objarray[chargeindex].pftchargeid = prcharges->charges[chargeindex].
      pftchargeid
    ENDFOR
    EXECUTE pft_eval_pbm_rules  WITH replace("REQUEST",chargepbmrequest), replace("REPLY",
     chargepbmreply)
    IF ((chargepbmreply->status_data.status="F"))
     CALL logmessage("checkChargeForWriteoff","PFT_EVAL_PBM_RULES failed",log_error)
     RETURN(false)
    ELSEIF ((chargepbmreply->status_data.status="Z"))
     CALL logmessage("checkChargeForWriteoff","No Charge Rules to Evaluate",log_debug)
    ENDIF
    SET stat = alterlist(transaliasfindrequest->objarray,1)
    SET transaliasfindrequest->objarray[1].trans_type_cd = cs18649_adjust_cd
    SET transaliasfindrequest->objarray[1].trans_sub_type_cd = cs20549_discount_adj_cd
    SET transaliasfindrequest->objarray[1].trans_reason_cd = cs18937_disc_adj_cd
    SET objtransalias->ein_type = ein_trans_alias_elements
    EXECUTE pft_trans_alias_find  WITH replace("REQUEST",transaliasfindrequest), replace("OBJREPLY",
     objdefaulttransalias), replace("REPLY",transaliasfindreply)
    IF (size(objdefaulttransalias->objarray,5) > 0)
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = value(size(objdefaulttransalias->objarray,5)))
      PLAN (d
       WHERE (objtransalias->objarray[d.seq].dr_cr_flag=2))
      DETAIL
       defaulttransid = objtransalias->objarray[d.seq].trans_alias_id
      WITH nocounter
     ;end select
    ENDIF
    SET stat = initrec(transaliasfindrequest)
    FOR (chargeindex = 1 TO size(prcharges->charges,5))
      FOR (actionsindex = 1 TO size(chargepbmreply->rulesets[1].objarray[chargeindex].actions,5))
        IF (cnvtupper(trim(chargepbmreply->rulesets[1].objarray[chargeindex].actions[actionsindex].
          actionkey,3))="WRITEOFF")
         SET prcharges->charges[chargeindex].actionkey = "WRITEOFF"
         SET prcharges->charges[chargeindex].transaliasid = defaulttransid
         SET prcharges->charges[chargeindex].transaliastypecd = cs18649_adjust_cd
         SET prcharges->charges[chargeindex].transaliassubtypecd = cs20549_discount_adj_cd
         SET prcharges->charges[chargeindex].transreasoncd = cs18937_disc_adj_cd
         SET prcharges->charges[chargeindex].eintype = ein_trans_alias_elements
         SET prcharges->charges[chargeindex].drcrflag = 2
         FOR (paramindex = 1 TO size(chargepbmreply->rulesets[1].objarray[chargeindex].actions[
          actionsindex].params,5))
           IF (cnvtupper(trim(chargepbmreply->rulesets[1].objarray[chargeindex].actions[actionsindex]
             .params[paramindex].paramkey))="TRANS_ALIAS_ID")
            SET prcharges->charges[chargeindex].transaliasid = cnvtreal(substring(1,(findstring("^",
               chargepbmreply->rulesets[1].objarray[chargeindex].actions[actionsindex].params[
               paramindex].paramvalue) - 1),chargepbmreply->rulesets[1].objarray[chargeindex].
              actions[actionsindex].params[paramindex].paramvalue))
            SET prcharges->charges[chargeindex].eintype = ein_trans_alias
            SET transaliasindex = 0
            SET transaliasindex = locateval(locatevalindex,1,size(transaliases->objarray,5),prcharges
             ->charges[chargeindex].transaliasid,transaliases->objarray[locatevalindex].transaliasid)
            IF (transaliasindex=0)
             SET stat = alterlist(transaliasfindrequest->objarray,1)
             SET transaliasfindrequest->objarray[1].trans_alias_id = prcharges->charges[chargeindex].
             transaliasid
             SET objtransalias->ein_type = ein_trans_alias
             EXECUTE pft_trans_alias_find  WITH replace("REQUEST",transaliasfindrequest), replace(
              "OBJREPLY",objtransalias), replace("REPLY",transaliasfindreply)
             IF ((((transaliasfindreply->status_data.status != "S")) OR (size(objtransalias->objarray,
              5)=0)) )
              CALL logmessage("checkChargesForWriteoff",build2("Unable to find transaction alias: ",
                prcharges->charges[chargeindex].transaliasid),log_error)
              RETURN(false)
             ENDIF
             SET prcharges->charges[chargeindex].transaliastypecd = objtransalias->objarray[1].
             trans_type_cd
             SET prcharges->charges[chargeindex].transaliassubtypecd = objtransalias->objarray[1].
             trans_sub_type_cd
             SET prcharges->charges[chargeindex].transreasoncd = objtransalias->objarray[1].
             trans_reason_cd
             SET prcharges->charges[chargeindex].drcrflag = objtransalias->objarray[1].dr_cr_flag
             SET transaliasindex += 1
             SET stat = alterlist(transaliases->objarray,transaliasindex)
             SET transaliases->objarray[transaliasindex].transaliastypecd = objtransalias->objarray[1
             ].trans_type_cd
             SET transaliases->objarray[transaliasindex].transaliassubtypecd = objtransalias->
             objarray[1].trans_sub_type_cd
             SET transaliases->objarray[transaliasindex].transreasoncd = objtransalias->objarray[1].
             trans_reason_cd
             SET transaliases->objarray[transaliasindex].drcrflag = objtransalias->objarray[1].
             dr_cr_flag
            ELSE
             SET prcharges->charges[chargeindex].transaliastypecd = transaliases->objarray[
             transaliasindex].transaliastypecd
             SET prcharges->charges[chargeindex].transaliassubtypecd = transaliases->objarray[
             transaliasindex].transaliassubtypecd
             SET prcharges->charges[chargeindex].transreasoncd = transaliases->objarray[
             transaliasindex].transreasoncd
             SET prcharges->charges[chargeindex].drcrflag = transaliases->objarray[transaliasindex].
             drcrflag
            ENDIF
           ENDIF
         ENDFOR
        ENDIF
      ENDFOR
    ENDFOR
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(applychargeleveladjustment,char(128))=char(128))
  SUBROUTINE (applychargeleveladjustment(pchargeactivityid=f8,ppftchargeid=f8,pprimarybohpreltnid=f8,
   pitemextendedprice=f8) =i2)
    DECLARE transaliasid = f8 WITH protect, noconstant(0.0)
    DECLARE transtypecd = f8 WITH protect, noconstant(cs18649_adjust_cd)
    DECLARE transsubtypecd = f8 WITH protect, noconstant(cs20549_discount_adj_cd)
    DECLARE transreasoncd = f8 WITH protect, noconstant(cs18937_disc_adj_cd)
    DECLARE paramcnt = i4 WITH protect, noconstant(0)
    DECLARE adjamount = f8 WITH protect, noconstant(0.0)
    DECLARE totaladjustments = f8 WITH protect, noconstant(0.0)
    DECLARE chargeremamountwithadjust = f8 WITH protect, noconstant(0.0)
    RECORD transaliasfindrequest(
      1 objarray[*]
        2 trans_alias_id = f8
        2 trans_type_cd = f8
        2 trans_sub_type_cd = f8
        2 trans_reason_cd = f8
    ) WITH protect
    RECORD transaliasfindreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD objtransalias(
      1 proxy_ind = i2
      1 obj_vrsn_1 = f8
      1 ein_type = i4
      1 objarray[*]
        2 trans_alias_id = f8
        2 trans_type_cd = f8
        2 trans_type_disp = vc
        2 trans_type_desc = vc
        2 trans_type_mean = vc
        2 trans_type_code_set = i4
        2 trans_sub_type_cd = f8
        2 trans_sub_type_disp = vc
        2 trans_sub_type_desc = vc
        2 trans_sub_type_mean = vc
        2 trans_sub_type_code_set = i4
        2 trans_reason_cd = f8
        2 trans_reason_disp = vc
        2 trans_reason_desc = vc
        2 trans_reason_mean = vc
        2 trans_reason_code_set = i4
        2 dr_cr_flag = i2
        2 pft_trans_alias = vc
        2 edi_ind = i2
        2 pft_trans_alias_cd = f8
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD applydiscadjreq(
      1 objarray[*]
        2 activity_id = f8
        2 trans_type_cd = f8
        2 trans_sub_type_cd = f8
        2 trans_reason_cd = f8
        2 trans_alias_id = f8
        2 amount = f8
        2 bo_hp_reltn_id = f8
        2 chrg_writeoff_ind = i2
    ) WITH protect
    RECORD applydiscadjrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM pft_trans_reltn ptr
     WHERE ptr.parent_entity_id=ppftchargeid
      AND ptr.parent_entity_name="PFTCHARGE"
      AND ptr.trans_type_cd=cs18649_adjust_cd
      AND ptr.active_ind=true
     DETAIL
      totaladjustments += evaluate(ptr.dr_cr_flag,2,(ptr.amount * - (1)),ptr.amount)
     WITH nocounter
    ;end select
    IF (cnvtupper(trim(chargepbmreply->rulesets[1].objarray[1].actions[1].actionkey))="WRITEOFF"
     AND (chargepbmreply->rulesets[1].objarray[1].pftchargeid=ppftchargeid))
     FOR (paramcnt = 1 TO size(chargepbmreply->rulesets[1].objarray[1].actions[1].params,5))
       IF (cnvtupper(trim(chargepbmreply->rulesets[1].objarray[1].actions[1].params[paramcnt].
         paramkey))="TRANS_ALIAS_ID")
        SET transaliasid = cnvtreal(substring(1,(findstring("^",chargepbmreply->rulesets[1].objarray[
           1].actions[1].params[paramcnt].paramvalue) - 1),chargepbmreply->rulesets[1].objarray[1].
          actions[1].params[paramcnt].paramvalue))
       ENDIF
     ENDFOR
     SET stat = alterlist(transaliasfindrequest->objarray,1)
     IF (transaliasid > 0.0)
      SET transaliasfindrequest->objarray[1].trans_alias_id = transaliasid
      SET objtransalias->ein_type = ein_trans_alias
     ELSE
      SET transaliasfindrequest->objarray[1].trans_type_cd = cs18649_adjust_cd
      SET transaliasfindrequest->objarray[1].trans_sub_type_cd = cs20549_discount_adj_cd
      SET transaliasfindrequest->objarray[1].trans_reason_cd = cs18937_disc_adj_cd
      SET objtransalias->ein_type = ein_trans_alias_elements
     ENDIF
     IF (size(transaliasfindrequest->objarray,5) > 0)
      EXECUTE pft_trans_alias_find  WITH replace("REPLY",transaliasfindreply), replace("OBJREPLY",
       objtransalias), replace("REQUEST",transaliasfindrequest)
      IF (transaliasid > 0.0)
       IF ((((transaliasfindreply->status_data.status != "S")) OR (size(objtransalias->objarray,5)=0
       )) )
        CALL logmessage("applyChargeLevelAdjustment","Did not find the transaction alias",log_debug)
        RETURN(false)
       ENDIF
       SET transtypecd = objtransalias->objarray[1].trans_type_cd
       SET transsubtypecd = objtransalias->objarray[1].trans_sub_type_cd
       SET transreasoncd = objtransalias->objarray[1].trans_reason_cd
       SET adjamount = (round(abs((pitemextendedprice+ totaladjustments)),2) * evaluate(objtransalias
        ->objarray[1].dr_cr_flag,1,1,2,- (1),
        0))
      ELSE
       IF (size(objtransalias->objarray,5) > 0)
        SELECT INTO "nl:"
         FROM (dummyt d  WITH seq = value(size(objtransalias->objarray,5)))
         PLAN (d
          WHERE (objtransalias->objarray[d.seq].dr_cr_flag=2))
         DETAIL
          transaliasid = objtransalias->objarray[d.seq].trans_alias_id, transtypecd = objtransalias->
          objarray[d.seq].trans_type_cd, transsubtypecd = objtransalias->objarray[d.seq].
          trans_sub_type_cd,
          transreasoncd = objtransalias->objarray[d.seq].trans_reason_cd
         WITH nocounter
        ;end select
       ENDIF
       SET adjamount = (round((pitemextendedprice+ totaladjustments),2) * - (1.0))
      ENDIF
     ENDIF
     IF (curqual < 1)
      CALL logmessage("applyChargeLevelAdjustment",
       "Error finding primary charge group / health plan relationship",log_debug)
     ENDIF
     SET chargeremamountwithadjust = (pitemextendedprice+ totaladjustments)
     IF ( NOT (isequal(chargeremamountwithadjust,0.0))
      AND  NOT (chargeremamountwithadjust < 0.009))
      SET stat = alterlist(applydiscadjreq->objarray,1)
      SET applydiscadjreq->objarray[1].activity_id = pchargeactivityid
      SET applydiscadjreq->objarray[1].trans_type_cd = transtypecd
      SET applydiscadjreq->objarray[1].trans_sub_type_cd = transsubtypecd
      SET applydiscadjreq->objarray[1].trans_reason_cd = transreasoncd
      SET applydiscadjreq->objarray[1].trans_alias_id = transaliasid
      SET applydiscadjreq->objarray[1].amount = adjamount
      SET applydiscadjreq->objarray[1].bo_hp_reltn_id = pprimarybohpreltnid
      SET applydiscadjreq->objarray[1].chrg_writeoff_ind = 1
     ENDIF
     IF (size(applydiscadjreq->objarray,5) > 0)
      EXECUTE pft_apply_doll_adj_for_charge  WITH replace("REQUEST",applydiscadjreq), replace("REPLY",
       applydiscadjrep)
      IF ((applydiscadjrep->status_data.status != "S"))
       CALL logmessage("applyChargeLevelAdjustment",
        "Failed to apply write-off adjustment for charge.",log_debug)
       RETURN(false)
      ENDIF
     ENDIF
    ENDIF
    CALL logmessage("applyChargeLevelAdjustment","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(reversechargeleveladjustment,char(128))=char(128))
  SUBROUTINE (reversechargeleveladjustment(pchargeitemid=f8) =i2)
    CALL logmessage("reverseChargeLevelAdjustment","Entering",log_debug)
    DECLARE activitycnt = i4 WITH protect, noconstant(0)
    RECORD revtransrequest(
      1 inproc_batch_trans_id = f8
      1 batch_type_flag = i2
      1 script_name = vc
      1 suppress_transfer_reversal = i2
      1 objarray[*]
        2 activity_id = f8
        2 amount = f8
        2 payment_location_id = f8
        2 interchange_trans_ident = vc
        2 cc_trans_org_id = f8
        2 external_ident = vc
    ) WITH protect
    RECORD revtransreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM pft_charge pc,
      pft_trans_reltn ptr,
      batch_trans_file btf
     PLAN (pc
      WHERE pc.charge_item_id=pchargeitemid
       AND pc.active_ind=true)
      JOIN (ptr
      WHERE ptr.parent_entity_id=pc.pft_charge_id
       AND ptr.parent_entity_name="PFTCHARGE"
       AND ptr.active_ind=true
       AND ptr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND ptr.end_effective_dt_tm > cnvtdatetime(sysdate)
       AND  NOT ( EXISTS (
      (SELECT
       1
       FROM trans_trans_reltn ttr
       WHERE ttr.parent_activity_id=ptr.activity_id
        AND ttr.trans_reltn_reason_cd=cs25753_reversal_cd
        AND ttr.active_ind=true
        AND ttr.beg_effective_dt_tm <= cnvtdatetime(sysdate)
        AND ttr.end_effective_dt_tm > cnvtdatetime(sysdate)))))
      JOIN (btf
      WHERE btf.batch_trans_file_id=ptr.batch_trans_file_id
       AND btf.chrg_writeoff_ind=1
       AND btf.active_ind=true)
     ORDER BY ptr.activity_id
     DETAIL
      activitycnt += 1, stat = alterlist(revtransrequest->objarray,activitycnt), revtransrequest->
      objarray[activitycnt].activity_id = ptr.activity_id
     WITH nocounter
    ;end select
    IF (size(revtransrequest->objarray,5) > 0)
     EXECUTE pft_reverse_transaction  WITH replace("REQUEST",revtransrequest), replace("REPLY",
      revtransreply)
     IF ((revtransreply->status_data.status != "S"))
      CALL logmessage("reverseChargeLevelAdjustment",
       "Failed to reverse discount adjustment for charge.",log_debug)
      RETURN(false)
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(evaluatechargediagnosismapping,char(128))=char(128))
  SUBROUTINE (evaluatechargediagnosismapping(pchargeid=f8,pchargeitemid=f8) =i4)
    DECLARE dprimarydiagnosistypecd = f8 WITH protect, noconstant(0.0)
    DECLARE dsecondarydiagnosistypecd = f8 WITH protect, noconstant(0.0)
    DECLARE inomencnt = i4 WITH protect, noconstant(0)
    DECLARE ichargecnt = i4 WITH protect, noconstant(0)
    SET stat = initrec(chargepbmrequest)
    SET stat = initrec(chargepbmreply)
    IF ( NOT (geticdpreference(0)))
     CALL logmessage("evaluateChargeDiagnosisMapping","getIcdPreference did not return success",
      log_error)
     RETURN(map_error)
    ENDIF
    FOR (dminfoidx = 1 TO dminforeply->dm_info_qual)
      IF ((dminforeply->dm_info[dminfoidx].info_name="ICD PRINCIPAL DIAGNOSIS TYPE"))
       SET dprimarydiagnosistypecd = dminforeply->dm_info[dminfoidx].info_long_id
      ELSEIF ((dminforeply->dm_info[dminfoidx].info_name="SECONDARY ICD PRINCIPAL DIAGNOSIS TYPE"))
       SET dsecondarydiagnosistypecd = dminforeply->dm_info[dminfoidx].info_long_id
      ENDIF
    ENDFOR
    IF (((dprimarydiagnosistypecd=0.0) OR (((dsecondarydiagnosistypecd=0.0) OR (
    dprimarydiagnosistypecd=dsecondarydiagnosistypecd)) )) )
     RETURN(no_map)
    ENDIF
    SET stat = alterlist(chargepbmrequest->objarray,1)
    SET chargepbmrequest->objarray[1].pftchargeid = pchargeid
    SET chargepbmrequest->categorykey = "CHRGPOST"
    SET chargepbmrequest->eventkey = "CHRG_DXMAP"
    EXECUTE pft_eval_pbm_rules  WITH replace("REQUEST",chargepbmrequest), replace("REPLY",
     chargepbmreply)
    IF (validate(debug))
     CALL echorecord(chargepbmreply)
    ENDIF
    IF ((chargepbmreply->status_data.status="F"))
     CALL logmessage("evaluateChargeDiagnosisMapping","PFT_EVAL_PBM_RULES failed",log_error)
     RETURN(map_error)
    ELSEIF ((chargepbmreply->status_data.status="Z"))
     CALL logmessage("evaluateChargeDiagnosisMapping","No Charge Rules to Evaluate",log_debug)
     RETURN(no_map)
    ENDIF
    IF (size(chargepbmreply->rulesets[1].objarray[1].actions,5) > 0)
     SET stat = initrec(nomenlist)
     SET stat = initrec(diagnosismap)
     SELECT INTO "nl:"
      FROM charge c,
       charge_event_mod cem,
       nomenclature n,
       charge_mod cm
      PLAN (c
       WHERE c.charge_item_id=pchargeitemid
        AND c.active_ind=true)
       JOIN (cem
       WHERE cem.charge_event_id=c.charge_event_id
        AND cem.charge_event_mod_type_cd=cs13019_mod_type_cd
        AND cem.active_ind=true
        AND cem.field1_id=cs14002_icd_cd
        AND cem.field5_id=0.0)
       JOIN (n
       WHERE n.nomenclature_id=cem.nomen_id
        AND n.source_vocabulary_cd=dprimarydiagnosistypecd
        AND n.active_ind=true)
       JOIN (cm
       WHERE cm.charge_item_id=c.charge_item_id
        AND cm.nomen_id=n.nomenclature_id
        AND cm.active_ind=true
        AND cm.field6=cem.field6
        AND cm.field2_id=cem.field2_id
        AND cm.field5_id=0.0)
      ORDER BY cem.field2_id, cm.charge_mod_id, cem.charge_event_mod_id
      HEAD REPORT
       ichargecnt += 1, stat = alterlist(nomenlist->objarray,ichargecnt), nomenlist->objarray[
       ichargecnt].encntrid = c.encntr_id,
       nomenlist->objarray[ichargecnt].chargeitemid = c.charge_item_id
      HEAD cm.charge_mod_id
       inomencnt += 1, stat = alterlist(nomenlist->objarray[ichargecnt].nomenlist,inomencnt),
       nomenlist->objarray[ichargecnt].nomenlist[inomencnt].nomenclatureid = n.nomenclature_id,
       nomenlist->objarray[ichargecnt].nomenlist[inomencnt].chargeeventmodid = cem
       .charge_event_mod_id, nomenlist->objarray[ichargecnt].nomenlist[inomencnt].chargemodid = cm
       .charge_mod_id
      WITH nocounter
     ;end select
     IF (inomencnt=0)
      RETURN(no_map)
     ENDIF
     SET nomenlist->targetdiagnosistype = dsecondarydiagnosistypecd
     IF (validate(debug))
      CALL echorecord(nomenlist)
     ENDIF
     IF ( NOT (getdiagnosismap(nomenlist,diagnosismap)))
      RETURN(map_error)
     ENDIF
     IF (validate(debug))
      CALL echorecord(diagnosismap)
     ENDIF
     IF ( NOT (addchargemoddx(0)))
      RETURN(map_error)
     ENDIF
     RETURN(new_map)
    ENDIF
    RETURN(no_map)
  END ;Subroutine
 ENDIF
 IF (validate(evaluateencounterdiagnosismapping,char(128))=char(128))
  SUBROUTINE (evaluateencounterdiagnosismapping(ppftencntrid=f8) =i4)
    DECLARE dprimarydiagnosistypecd = f8 WITH protect, noconstant(0.0)
    DECLARE dsecondarydiagnosistypecd = f8 WITH protect, noconstant(0.0)
    DECLARE inomencnt = i4 WITH protect, noconstant(0)
    DECLARE ichargecnt = i4 WITH protect, noconstant(0)
    SET stat = initrec(chargepbmrequest)
    SET stat = initrec(chargepbmreply)
    SELECT INTO "nl:"
     FROM pft_charge pc
     WHERE pc.pft_encntr_id=ppftencntrid
     DETAIL
      stat = alterlist(chargepbmrequest->objarray,1), chargepbmrequest->objarray[1].pftchargeid = pc
      .pft_charge_id, chargepbmrequest->categorykey = "CHRGPOST",
      chargepbmrequest->eventkey = "CHRG_DXMAP"
     WITH nocounter, maxrec = 1
    ;end select
    IF ((chargepbmrequest->objarray[1].pftchargeid > 0.0))
     EXECUTE pft_eval_pbm_rules  WITH replace("REQUEST",chargepbmrequest), replace("REPLY",
      chargepbmreply)
     IF (validate(debug))
      CALL echorecord(chargepbmreply)
     ENDIF
     IF ((chargepbmreply->status_data.status="F"))
      CALL logmessage("evaluateChargeDiagnosisMapping","PFT_EVAL_PBM_RULES failed",log_error)
      RETURN(map_error)
     ELSEIF ((chargepbmreply->status_data.status="Z"))
      CALL logmessage("evaluateChargeDiagnosisMapping","No Charge Rules to Evaluate",log_debug)
      RETURN(no_map)
     ENDIF
     IF (size(chargepbmreply->rulesets[1].objarray[1].actions,5) > 0)
      IF ( NOT (geticdpreference(0)))
       CALL logmessage("evaluateChargeDiagnosisMapping","getIcdPreference did not return success",
        log_error)
       RETURN(map_error)
      ENDIF
      FOR (dminfoidx = 1 TO dminforeply->dm_info_qual)
        IF ((dminforeply->dm_info[dminfoidx].info_name="ICD PRINCIPAL DIAGNOSIS TYPE"))
         SET dprimarydiagnosistypecd = dminforeply->dm_info[dminfoidx].info_long_id
        ELSEIF ((dminforeply->dm_info[dminfoidx].info_name="SECONDARY ICD PRINCIPAL DIAGNOSIS TYPE"))
         SET dsecondarydiagnosistypecd = dminforeply->dm_info[dminfoidx].info_long_id
        ENDIF
      ENDFOR
      IF (((dprimarydiagnosistypecd=0.0) OR (((dsecondarydiagnosistypecd=0.0) OR (
      dprimarydiagnosistypecd=dsecondarydiagnosistypecd)) )) )
       RETURN(no_map)
      ENDIF
      SET stat = initrec(nomenlist)
      SET stat = initrec(diagnosismap)
      SELECT INTO "nl:"
       FROM pft_charge pc,
        charge c,
        charge_event_mod cem,
        nomenclature n,
        charge_mod cm,
        pft_charge_bo_reltn pcbr,
        benefit_order bo,
        bt_condition btc
       PLAN (pc
        WHERE pc.pft_encntr_id=ppftencntrid
         AND pc.active_ind=true)
        JOIN (c
        WHERE c.charge_item_id=pc.charge_item_id
         AND c.active_ind=true
         AND c.charge_type_cd=cs13028_debit_cd
         AND c.offset_charge_item_id=0.0
         AND c.active_ind=true)
        JOIN (cem
        WHERE cem.charge_event_id=c.charge_event_id
         AND cem.charge_event_mod_type_cd=cs13019_mod_type_cd
         AND cem.active_ind=true
         AND cem.field1_id=cs14002_icd_cd
         AND cem.field5_id=0.0)
        JOIN (n
        WHERE n.nomenclature_id=cem.nomen_id
         AND n.source_vocabulary_cd=dprimarydiagnosistypecd
         AND n.active_ind=true)
        JOIN (cm
        WHERE cm.charge_item_id=c.charge_item_id
         AND cm.nomen_id=n.nomenclature_id
         AND cm.active_ind=true
         AND cm.field6=cem.field6
         AND cm.field5_id=0.0)
        JOIN (pcbr
        WHERE pcbr.pft_charge_id=pc.pft_charge_id
         AND pcbr.active_ind=true)
        JOIN (bo
        WHERE bo.benefit_order_id=pcbr.benefit_order_id
         AND bo.bo_status_cd != cs24451_invalid_cd
         AND bo.active_ind=true)
        JOIN (btc
        WHERE btc.bt_condition_id=bo.bt_condition_id
         AND btc.bill_type_cd=cs21749_hcfa_1500_cd)
       ORDER BY c.charge_item_id, cm.nomen_id
       HEAD c.charge_item_id
        ichargecnt += 1, stat = alterlist(nomenlist->objarray,ichargecnt), nomenlist->objarray[
        ichargecnt].encntrid = c.encntr_id,
        nomenlist->objarray[ichargecnt].chargeitemid = c.charge_item_id
       HEAD cm.nomen_id
        inomencnt += 1, stat = alterlist(nomenlist->objarray[ichargecnt].nomenlist,inomencnt),
        nomenlist->objarray[ichargecnt].nomenlist[inomencnt].nomenclatureid = n.nomenclature_id,
        nomenlist->objarray[ichargecnt].nomenlist[inomencnt].chargeeventmodid = cem
        .charge_event_mod_id, nomenlist->objarray[ichargecnt].nomenlist[inomencnt].chargemodid = cm
        .charge_mod_id
       WITH nocounter
      ;end select
      IF (inomencnt=0)
       RETURN(no_map)
      ENDIF
      SET nomenlist->targetdiagnosistype = dsecondarydiagnosistypecd
      IF (validate(debug))
       CALL echorecord(nomenlist)
      ENDIF
      IF ( NOT (getdiagnosismap(nomenlist,diagnosismap)))
       RETURN(map_error)
      ENDIF
      IF (validate(debug))
       CALL echorecord(diagnosismap)
      ENDIF
      IF ( NOT (addchargemoddx(0)))
       RETURN(map_error)
      ENDIF
      RETURN(new_map)
     ENDIF
    ENDIF
    RETURN(no_map)
  END ;Subroutine
 ENDIF
 IF (validate(addchargemod,char(128))=char(128))
  DECLARE addchargemoddx(null) = i2
  SUBROUTINE addchargemoddx(null)
    RECORD addchargemods(
      1 charge_mod_qual = i2
      1 charge_mod[*]
        2 action_type = c3
        2 charge_mod_id = f8
        2 charge_item_id = f8
        2 charge_mod_type_cd = f8
        2 charge_event_mod_id = f8
        2 field1 = vc
        2 field2 = vc
        2 field3 = vc
        2 field4 = vc
        2 field5 = vc
        2 field6 = vc
        2 field7 = vc
        2 field8 = vc
        2 field9 = vc
        2 field10 = vc
        2 field1_id = f8
        2 field2_id = f8
        2 field3_id = f8
        2 field4_id = f8
        2 field5_id = f8
        2 nomen_id = f8
        2 activity_dt_tm = dq8
        2 active_ind_ind = i2
        2 active_ind = i2
        2 active_status_cd = f8
        2 active_status_dt_tm = f8
        2 active_status_prsnl_id = f8
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 nomen_entity_reltn_id = f8
        2 cm1_nbr = f8
    ) WITH protect
    RECORD uptchargemods(
      1 objarray[*]
        2 action_type = c3
        2 charge_item_id = f8
        2 charge_event_id = f8
        2 charge_mod_id = f8
        2 charge_mod_type_cd = f8
        2 charge_event_mod_type_cd = f8
        2 charge_event_mod_id = f8
        2 field2_id = f8
        2 field5_id = f8
        2 updt_cnt = i4
        2 active_ind = i2
        2 field1 = vc
        2 field2 = vc
        2 field3 = vc
        2 field4 = vc
        2 field5 = vc
        2 field6 = vc
        2 field7 = vc
        2 field8 = vc
        2 field9 = vc
        2 field10 = vc
        2 active_status_cd = f8
        2 active_status_dt_tm = dq8
        2 active_status_prsnl_id = f8
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 code1_cd = f8
        2 nomen_id = f8
        2 field1_id = f8
        2 field3_id = f8
        2 field4_id = f8
        2 cm1_nbr = f8
        2 activity_dt_tm = dq8
    ) WITH protect
    RECORD dauptchargemodrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD addchargemodreply(
      1 charge_mod_qual = i2
      1 charge_mod[*]
        2 charge_mod_id = f8
        2 charge_item_id = f8
        2 charge_mod_type_cd = f8
        2 field1_id = f8
        2 field2_id = f8
        2 field3_id = f8
        2 field6 = vc
        2 field7 = vc
        2 nomen_id = f8
        2 action_type = c3
        2 nomen_entity_reltn_id = f8
        2 cm1_nbr = f8
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD temper(
      1 objarray[*]
        2 field6 = vc
    ) WITH protect
    DECLARE ichargeidx = i4 WITH protect, noconstant(0)
    DECLARE iaddidx = i4 WITH protect, noconstant(0)
    DECLARE iudtdxidx = i4 WITH protect, noconstant(0)
    DECLARE isynonymidx = i4 WITH protect, noconstant(0)
    DECLARE imodcnt = i4 WITH protect, noconstant(0)
    DECLARE icurridx = i4 WITH protect, noconstant(0)
    DECLARE icntidx = i4 WITH protect, noconstant(0)
    DECLARE idupidx = i4 WITH protect, noconstant(0)
    DECLARE ipriority = i4 WITH protect, noconstant(0)
    FOR (ichargeidx = 1 TO size(diagnosismap->objarray,5))
      SET ipriority = 0
      SET stat = initrec(temper)
      SELECT INTO "nl:"
       FROM charge c,
        charge_event_mod cem,
        nomenclature n,
        charge_mod cm
       PLAN (c
        WHERE (c.charge_item_id=diagnosismap->objarray[ichargeidx].chargeitemid)
         AND c.active_ind=true)
        JOIN (cem
        WHERE cem.charge_event_id=c.charge_event_id
         AND cem.active_ind=true
         AND cem.field1_id=cs14002_icd_cd
         AND cem.charge_event_mod_type_cd=cs13019_mod_type_cd)
        JOIN (n
        WHERE n.nomenclature_id=cem.nomen_id
         AND n.active_ind=true)
        JOIN (cm
        WHERE (cm.charge_item_id=diagnosismap->objarray[ichargeidx].chargeitemid)
         AND cm.active_ind=true
         AND cm.charge_mod_type_cd=cs13019_mod_type_cd
         AND cm.nomen_id=cem.nomen_id
         AND cm.field6=cem.field6
         AND cm.field1_id=cs14002_icd_cd
         AND cm.field2_id=cem.field2_id)
       ORDER BY cem.field2_id, cm.charge_mod_id, cem.charge_event_mod_id
       HEAD cm.charge_mod_id
        ipriority += 1, iudtdxidx += 1, stat = alterlist(uptchargemods->objarray,iudtdxidx),
        iaddidx = locateval(icntidx,1,size(diagnosismap->objarray[ichargeidx].diagnosis,5),cem
         .charge_event_mod_id,diagnosismap->objarray[ichargeidx].diagnosis[icntidx].chargeeventmodid)
        IF (iaddidx > 0)
         stat = alterlist(temper->objarray,ipriority), temper->objarray[ipriority].field6 = trim(cem
          .field6), uptchargemods->objarray[iudtdxidx].charge_mod_id = diagnosismap->objarray[
         ichargeidx].diagnosis[iaddidx].chargemodid,
         uptchargemods->objarray[iudtdxidx].charge_event_mod_id = diagnosismap->objarray[ichargeidx].
         diagnosis[iaddidx].chargeeventmodid, uptchargemods->objarray[iudtdxidx].field2_id =
         ipriority, uptchargemods->objarray[iudtdxidx].field5_id = diagnosismap->objarray[ichargeidx]
         .diagnosis[iaddidx].maptypeflg,
         uptchargemods->objarray[iudtdxidx].updt_cnt = upt_force, uptchargemods->objarray[iudtdxidx].
         active_ind = true, uptchargemods->objarray[iudtdxidx].action_type = "UPT",
         uptchargemods->objarray[iudtdxidx].charge_item_id = cm.charge_item_id, uptchargemods->
         objarray[iudtdxidx].charge_event_id = c.charge_event_id, uptchargemods->objarray[iudtdxidx].
         field1_id = cm.field1_id,
         uptchargemods->objarray[iudtdxidx].charge_mod_type_cd = cs13019_mod_type_cd, uptchargemods->
         objarray[iudtdxidx].charge_event_mod_type_cd = cs13019_mod_type_cd, uptchargemods->objarray[
         iudtdxidx].field1 = cm.field1,
         uptchargemods->objarray[iudtdxidx].field2 = cm.field2, uptchargemods->objarray[iudtdxidx].
         field3 = cm.field3, uptchargemods->objarray[iudtdxidx].field4 = cm.field4,
         uptchargemods->objarray[iudtdxidx].field5 = cm.field5, uptchargemods->objarray[iudtdxidx].
         field6 = cm.field6, uptchargemods->objarray[iudtdxidx].field7 = cm.field7,
         uptchargemods->objarray[iudtdxidx].field8 = cm.field8, uptchargemods->objarray[iudtdxidx].
         field9 = cm.field9, uptchargemods->objarray[iudtdxidx].field10 = cm.field10,
         uptchargemods->objarray[iudtdxidx].active_status_cd = cm.active_status_cd, uptchargemods->
         objarray[iudtdxidx].field3_id = cm.field3_id, uptchargemods->objarray[iudtdxidx].field4_id
          = cm.field4_id,
         uptchargemods->objarray[iudtdxidx].code1_cd = cm.code1_cd, uptchargemods->objarray[iudtdxidx
         ].nomen_id = cm.nomen_id, uptchargemods->objarray[iudtdxidx].cm1_nbr = cm.cm1_nbr,
         imodcnt += size(diagnosismap->objarray[ichargeidx].diagnosis[iaddidx].synonyms,5), stat =
         alterlist(addchargemods->charge_mod,imodcnt)
         FOR (isynonymidx = 1 TO size(diagnosismap->objarray[ichargeidx].diagnosis[iaddidx].synonyms,
          5))
           IF (locateval(idupidx,1,size(temper->objarray,5),diagnosismap->objarray[ichargeidx].
            diagnosis[iaddidx].synonyms[isynonymidx].sourceident,temper->objarray[idupidx].field6)=0)
            ipriority += 1, icurridx += 1, stat = alterlist(temper->objarray,ipriority),
            temper->objarray[ipriority].field6 = substring(1,200,trim(diagnosismap->objarray[
              ichargeidx].diagnosis[iaddidx].synonyms[isynonymidx].sourceident)), addchargemods->
            charge_mod[icurridx].action_type = "ADD", addchargemods->charge_mod[icurridx].
            charge_item_id = diagnosismap->objarray[ichargeidx].chargeitemid,
            addchargemods->charge_mod[icurridx].charge_mod_type_cd = cs13019_mod_type_cd,
            addchargemods->charge_mod[icurridx].field6 = substring(1,200,trim(diagnosismap->objarray[
              ichargeidx].diagnosis[iaddidx].synonyms[isynonymidx].sourceident)), addchargemods->
            charge_mod[icurridx].field7 = substring(1,200,trim(diagnosismap->objarray[ichargeidx].
              diagnosis[iaddidx].synonyms[isynonymidx].description)),
            addchargemods->charge_mod[icurridx].field1_id = cs14002_icd_cd, addchargemods->
            charge_mod[icurridx].field2_id = ipriority, addchargemods->charge_mod[icurridx].field5_id
             = diagnosismap->objarray[ichargeidx].diagnosis[iaddidx].sourcenomenid,
            addchargemods->charge_mod[icurridx].nomen_id = diagnosismap->objarray[ichargeidx].
            diagnosis[iaddidx].synonyms[isynonymidx].nomenid
           ENDIF
         ENDFOR
        ELSE
         IF (((locateval(idupidx,1,size(temper->objarray,5),trim(cem.field6),temper->objarray[idupidx
          ].field6)=0) OR (n.source_vocabulary_cd=dprimarydiagnosistypecd)) )
          stat = alterlist(temper->objarray,ipriority), temper->objarray[ipriority].field6 = trim(cem
           .field6), uptchargemods->objarray[iudtdxidx].charge_mod_id = cm.charge_mod_id,
          uptchargemods->objarray[iudtdxidx].charge_event_mod_id = cem.charge_event_mod_id,
          uptchargemods->objarray[iudtdxidx].field2_id = ipriority, uptchargemods->objarray[iudtdxidx
          ].field5_id = cem.field5_id,
          uptchargemods->objarray[iudtdxidx].updt_cnt = upt_force, uptchargemods->objarray[iudtdxidx]
          .active_ind = true, uptchargemods->objarray[iudtdxidx].action_type = "UPT",
          uptchargemods->objarray[iudtdxidx].charge_item_id = cm.charge_item_id, uptchargemods->
          objarray[iudtdxidx].charge_event_id = c.charge_event_id, uptchargemods->objarray[iudtdxidx]
          .field1_id = cm.field1_id,
          uptchargemods->objarray[iudtdxidx].charge_mod_type_cd = cs13019_mod_type_cd, uptchargemods
          ->objarray[iudtdxidx].charge_event_mod_type_cd = cs13019_mod_type_cd, uptchargemods->
          objarray[iudtdxidx].field1 = cm.field1,
          uptchargemods->objarray[iudtdxidx].field2 = cm.field2, uptchargemods->objarray[iudtdxidx].
          field3 = cm.field3, uptchargemods->objarray[iudtdxidx].field4 = cm.field4,
          uptchargemods->objarray[iudtdxidx].field5 = cm.field5, uptchargemods->objarray[iudtdxidx].
          field6 = cm.field6, uptchargemods->objarray[iudtdxidx].field7 = cm.field7,
          uptchargemods->objarray[iudtdxidx].field8 = cm.field8, uptchargemods->objarray[iudtdxidx].
          field9 = cm.field9, uptchargemods->objarray[iudtdxidx].field10 = cm.field10,
          uptchargemods->objarray[iudtdxidx].active_status_cd = cm.active_status_cd, uptchargemods->
          objarray[iudtdxidx].field3_id = cm.field3_id, uptchargemods->objarray[iudtdxidx].field4_id
           = cm.field4_id,
          uptchargemods->objarray[iudtdxidx].code1_cd = cm.code1_cd, uptchargemods->objarray[
          iudtdxidx].nomen_id = cm.nomen_id, uptchargemods->objarray[iudtdxidx].cm1_nbr = cm.cm1_nbr
         ELSE
          ipriority -= 1, uptchargemods->objarray[iudtdxidx].charge_mod_id = cm.charge_mod_id,
          uptchargemods->objarray[iudtdxidx].charge_event_mod_id = cem.charge_event_mod_id,
          uptchargemods->objarray[iudtdxidx].active_ind = false, uptchargemods->objarray[iudtdxidx].
          updt_cnt = upt_force, uptchargemods->objarray[iudtdxidx].field2_id = cem.field2_id,
          uptchargemods->objarray[iudtdxidx].field5_id = cem.field5_id, uptchargemods->objarray[
          iudtdxidx].action_type = "DEL", uptchargemods->objarray[iudtdxidx].charge_item_id = cm
          .charge_item_id,
          uptchargemods->objarray[iudtdxidx].charge_event_id = c.charge_event_id, uptchargemods->
          objarray[iudtdxidx].field1_id = cm.field1_id, uptchargemods->objarray[iudtdxidx].
          charge_mod_type_cd = cs13019_mod_type_cd,
          uptchargemods->objarray[iudtdxidx].charge_event_mod_type_cd = cs13019_mod_type_cd,
          uptchargemods->objarray[iudtdxidx].field1 = cm.field1, uptchargemods->objarray[iudtdxidx].
          field2 = cm.field2,
          uptchargemods->objarray[iudtdxidx].field3 = cm.field3, uptchargemods->objarray[iudtdxidx].
          field4 = cm.field4, uptchargemods->objarray[iudtdxidx].field5 = cm.field5,
          uptchargemods->objarray[iudtdxidx].field6 = cm.field6, uptchargemods->objarray[iudtdxidx].
          field7 = cm.field7, uptchargemods->objarray[iudtdxidx].field8 = cm.field8,
          uptchargemods->objarray[iudtdxidx].field9 = cm.field9, uptchargemods->objarray[iudtdxidx].
          field10 = cm.field10, uptchargemods->objarray[iudtdxidx].active_status_cd = cm
          .active_status_cd,
          uptchargemods->objarray[iudtdxidx].field3_id = cm.field3_id, uptchargemods->objarray[
          iudtdxidx].field4_id = cm.field4_id, uptchargemods->objarray[iudtdxidx].code1_cd = cm
          .code1_cd,
          uptchargemods->objarray[iudtdxidx].nomen_id = cm.nomen_id, uptchargemods->objarray[
          iudtdxidx].cm1_nbr = cm.cm1_nbr
         ENDIF
        ENDIF
       WITH nocounter
      ;end select
      SET addchargemods->charge_mod_qual = imodcnt
    ENDFOR
    IF (iudtdxidx=0)
     RETURN(true)
    ENDIF
    DECLARE action_begin = i4 WITH protect, noconstant(1)
    DECLARE action_end = i4 WITH protect, noconstant(size(addchargemods->charge_mod,5))
    EXECUTE afc_add_charge_mod  WITH replace("REQUEST",addchargemods), replace("REPLY",
     addchargemodreply)
    IF (validate(debug))
     CALL echorecord(addchargemods)
     CALL echorecord(addchargemodreply)
     CALL echorecord(uptchargemods)
    ENDIF
    IF ((addchargemodreply->status_data.status != "S"))
     CALL logmessage("addChargeMod","afc_add_charge_mod did not return success",log_error)
     RETURN(false)
    ENDIF
    IF (size(uptchargemods->objarray,5) <= 0)
     CALL echo("No charge_mods to add")
    ELSE
     EXECUTE afc_val_charge_mod  WITH replace("REQUEST",uptchargemods), replace("REPLY",
      dauptchargemodrep)
     IF ((dauptchargemodrep->status_data.status != "S"))
      CALL logmessage(curprog,"afc_val_charge_mod did not return success",log_debug)
      IF (validate(debug,- (1)) > 0)
       CALL echorecord(uptchargemods)
       CALL echorecord(dauptchargemodrep)
      ENDIF
      RETURN(false)
     ENDIF
    ENDIF
    SET stat = initrec(dauptchargemodrep)
    IF (size(uptchargemods->objarray,5) <= 0)
     CALL echo("No charge_event_mods to add")
    ELSE
     EXECUTE afc_val_charge_event_mod  WITH replace("REQUEST",uptchargemods), replace("REPLY",
      dauptchargemodrep)
     IF ((dauptchargemodrep->status_data.status != "S"))
      CALL logmessage(curprog,"afc_val_charge_event_mod did not return success",log_debug)
      IF (validate(debug,- (1)) > 0)
       CALL echorecord(uptchargemods)
       CALL echorecord(dauptchargemodrep)
      ENDIF
      RETURN(false)
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(logcapabilityinfo,char(128))=char(128))
  SUBROUTINE (logcapabilityinfo(pteamname=vc,pcapabilityident=vc,pentityid=f8,pentityname=vc) =null)
    RECORD capabilitylogrequest(
      1 teamname = vc
      1 capability_ident = vc
      1 entities[*]
        2 entity_id = f8
        2 entity_name = vc
    ) WITH protect
    RECORD capabilitylogreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET capabilitylogrequest->teamname = pteamname
    SET capabilitylogrequest->capability_ident = pcapabilityident
    SET stat = alterlist(capabilitylogrequest->entities,1)
    SET capabilitylogrequest->entities[1].entity_id = pentityid
    SET capabilitylogrequest->entities[1].entity_name = pentityname
    EXECUTE pft_log_solution_capability  WITH replace("REQUEST",capabilitylogrequest), replace(
     "REPLY",capabilitylogreply)
    IF ((capabilitylogreply->status_data.status != "S"))
     CALL logmessage(curprog,"logCapabilityInfo: pft_log_solution_capability failed.",log_error)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(writechargewoevaluationtowtp,char(128))=char(128))
  SUBROUTINE (writechargewoevaluationtowtp(pentityid=f8,pentitytype=vc,pjsonpftchrgstoevalwofor=vc(
    value,""),pskipwtqcheck=i2(value,false)) =i2)
    DECLARE cs24450_evalwriteoff_cd = f8 WITH protect, constant(getcodevalue(24450,"EVALWRITEOFF",0))
    DECLARE cs4002853_queued = f8 WITH protect, constant(getcodevalue(4002853,"QUEUED",0))
    IF (validate(debug,0)=1)
     CALL echo(build("pEntityId is: ",pentityid))
     CALL echo(build("pEntityType is: ",pentitytype))
     CALL echo(build("pJsonPftChrgsToEvalWoFor is: ",pjsonpftchrgstoevalwofor))
     CALL echo(build("pSkipWTQCheck is: ",pskipwtqcheck))
    ENDIF
    RECORD wtptaskrequest(
      1 encounterid = f8
      1 pft_charges[*]
        2 pft_charge_id = f8
    ) WITH protect
    RECORD applyholdrequest(
      1 objarray[*]
        2 pft_encntr_id = f8
        2 pe_status_reason_cd = f8
        2 reason_comment = vc
        2 reapply_ind = i4
        2 pft_balance_id = f8
        2 pft_hold_id = f8
        2 pe_sub_status_reason_cd = f8
        2 guar_acct_id = f8
    ) WITH protect
    DECLARE wtqrowexists = i2 WITH protect, noconstant(false)
    DECLARE encounterid = f8 WITH protect, noconstant(pentityid)
    DECLARE returnval = i2 WITH protect, noconstant(true)
    DECLARE pftencntrcnt = i4 WITH protect, noconstant(0)
    IF (pentitytype="PFTENCNTR")
     SELECT INTO "nl:"
      FROM pft_encntr pe
      PLAN (pe
       WHERE pe.pft_encntr_id=pentityid)
      DETAIL
       stat = alterlist(applyholdrequest->objarray,1), applyholdrequest->objarray[1].pft_encntr_id =
       pe.pft_encntr_id, applyholdrequest->objarray[1].pe_status_reason_cd = cs24450_evalwriteoff_cd,
       applyholdrequest->objarray[1].reapply_ind = true, encounterid = pe.encntr_id
      WITH nocounter
     ;end select
    ELSE
     SELECT INTO "nl:"
      FROM encounter e,
       pft_encntr pe
      PLAN (e
       WHERE e.encntr_id=pentityid
        AND e.active_ind=true)
       JOIN (pe
       WHERE pe.encntr_id=e.encntr_id
        AND pe.active_ind=true
        AND pe.pft_encntr_status_cd != cs24269_history_cd)
      ORDER BY pe.pft_encntr_id
      HEAD pe.pft_encntr_id
       pftencntrcnt += 1, stat = alterlist(applyholdrequest->objarray,pftencntrcnt), applyholdrequest
       ->objarray[pftencntrcnt].pft_encntr_id = pe.pft_encntr_id,
       applyholdrequest->objarray[pftencntrcnt].pe_status_reason_cd = cs24450_evalwriteoff_cd,
       applyholdrequest->objarray[pftencntrcnt].reapply_ind = true
      WITH nocounter
     ;end select
    ENDIF
    IF ( NOT (pskipwtqcheck))
     SELECT INTO "nl:"
      FROM workflow_task_queue wtq
      PLAN (wtq
       WHERE wtq.entity_id=encounterid
        AND wtq.entity_name="ENCOUNTER"
        AND wtq.task_ident="PFT_EVALUATE_CHARGE_WRITE_OFF"
        AND wtq.queue_status_cd=cs4002853_queued
        AND wtq.process_dt_tm <= cnvtlookahead("1,D",cnvtdatetime(sysdate)))
      HEAD REPORT
       wtqrowexists = true
      WITH nocounter, orahintcbo("index(XIE2WORKFLOW_TASK_QUEUE)")
     ;end select
    ENDIF
    IF ( NOT (wtqrowexists)
     AND encounterid > 0.0)
     SET wtptaskrequest->encounterid = encounterid
     IF (size(trim(pjsonpftchrgstoevalwofor)) != 0)
      SET stat = cnvtjsontorec(pjsonpftchrgstoevalwofor)
      IF (validate(debug,0)=1)
       CALL echorecord(pftchargestoevalwriteofffor)
      ENDIF
      SET stat = moverec(pftchargestoevalwriteofffor->pft_charges,wtptaskrequest->pft_charges)
     ENDIF
     SET returnval = writerowtowtp(cnvtrectojson(wtptaskrequest),"PFT_EVALUATE_CHARGE_WRITE_OFF",
      encounterid,"ENCOUNTER",cnvtdatetime(sysdate),
      "")
     IF ( NOT (applywriteoffhold(applyholdrequest)))
      CALL logmessage("writeChargeWOEvaluationToWTP","Failed to apply Evaluate Write-OFF hold",
       log_error)
      SET returnval = false
     ENDIF
    ENDIF
    RETURN(returnval)
  END ;Subroutine
 ENDIF
 IF (validate(applywriteoffhold,char(128))=char(128))
  SUBROUTINE (applywriteoffhold(prapplyholdrequest=vc(ref)) =i2)
    RECORD applyholdreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 objarray[*]
        2 service_cd = f8
        2 updt_id = f8
        2 event_key = vc
        2 category_key = vc
        2 published_ind = i2
        2 pe_status_reason_cd = f8
        2 acct_id = f8
        2 activity_id = f8
        2 batch_denial_file_r_id = f8
        2 batch_trans_ext_id = f8
        2 batch_trans_file_id = f8
        2 batch_trans_id = f8
        2 benefit_order_id = f8
        2 bill_item_id = f8
        2 bill_templ_id = f8
        2 bill_vrsn_nbr = i4
        2 billing_entity_id = f8
        2 bo_hp_reltn_id = f8
        2 charge_item_id = f8
        2 chrg_activity_id = f8
        2 claim_status_id = f8
        2 client_org_id = f8
        2 corsp_activity_id = f8
        2 corsp_log_reltn_id = f8
        2 denial_id = f8
        2 dirty_flag = i4
        2 encntr_id = f8
        2 guar_acct_id = f8
        2 guarantor_id = f8
        2 health_plan_id = f8
        2 long_text_id = f8
        2 organization_id = f8
        2 payor_org_id = f8
        2 pe_status_reason_id = f8
        2 person_id = f8
        2 pft_balance_id = f8
        2 pft_bill_activity_id = f8
        2 pft_charge_id = f8
        2 pft_encntr_fact_id = f8
        2 pft_encntr_id = f8
        2 pft_line_item_id = f8
        2 trans_alias_id = f8
        2 pft_payment_plan_id = f8
        2 daily_encntr_bal_id = f8
        2 daily_acct_bal_id = f8
        2 active_ind = i2
        2 active_status_cd = f8
        2 active_status_disp = vc
        2 active_status_desc = vc
        2 active_status_mean = vc
        2 active_status_code_set = f8
        2 active_status_dt_tm = dq8
        2 active_status_prsnl_id = f8
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 updt_applctx = f8
        2 updt_cnt = i4
        2 updt_dt_tm = dq8
        2 updt_id = f8
        2 updt_task = f8
        2 benefit_status_cd = f8
        2 financial_class_cd = f8
        2 payment_plan_flag = i2
        2 payment_location_id = f8
        2 encntr_plan_cob_id = f8
        2 guarantor_account_id = f8
        2 guarantor_id1 = f8
        2 guarantor_id2 = f8
        2 cbos_pe_reltn_id = f8
        2 post_dt_tm = dq8
        2 posting_category_type_flag = i2
    ) WITH protect
    IF (size(prapplyholdrequest->objarray,5) > 0)
     EXECUTE pft_apply_bill_hold_suspension  WITH replace("REQUEST",prapplyholdrequest), replace(
      "REPLY",applyholdreply)
     IF ((applyholdreply->status_data.status="F"))
      CALL logmessage("writeChargeWOEvaluationToWTP","Failed to apply Evaluate Write-OFF hold",
       log_error)
      RETURN(false)
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo("Begin PFT_RM_TRANSFER_TRANSACTIONS_SUBS.INC, version [612489.009]")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(cs354_selfpay_cd)))
  DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
 ENDIF
 IF ( NOT (validate(cs18649_adjustment_cd)))
  DECLARE cs18649_adjustment_cd = f8 WITH protect, constant(getcodevalue(18649,"ADJUST",0))
 ENDIF
 IF ( NOT (validate(cs18649_payment_cd)))
  DECLARE cs18649_payment_cd = f8 WITH protect, constant(getcodevalue(18649,"PAYMENT",0))
 ENDIF
 IF ( NOT (validate(cs20549_bd_writeoff_cd)))
  DECLARE cs20549_bd_writeoff_cd = f8 WITH protect, constant(getcodevalue(20549,"BD WRITEOFF",0))
 ENDIF
 IF ( NOT (validate(cs20549_bd_recovery_cd)))
  DECLARE cs20549_bd_recovery_cd = f8 WITH protect, constant(getcodevalue(20549,"BD REVERSAL",0))
 ENDIF
 IF ( NOT (validate(cs20549_bd_reversal_cd)))
  DECLARE cs20549_bd_reversal_cd = f8 WITH protect, constant(getcodevalue(20549,"BD RECOVERY",0))
 ENDIF
 IF ( NOT (validate(cs24451_invalid_cd)))
  DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
 ENDIF
 IF ( NOT (validate(cs24451_cancelled_cd)))
  DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
 ENDIF
 IF (validate(ein_activity,0)=0)
  DECLARE ein_activity = i4 WITH protect, constant(13)
 ENDIF
 IF (validate(reposttransactions,char(128))=char(128))
  SUBROUTINE (reposttransactions(transactionstopost=vc(ref),pftencntrid=f8,transactionsinformation=vc
   (ref)) =i2)
    CALL logmessage("rePostTransactions","Entering",log_debug)
    IF (size(transactionstopost->objarray,5) <= 0)
     RETURN(true)
    ENDIF
    IF (size(transactionsinformation->objarray,5) > 0)
     FREE RECORD processtransbatchrequest
     RECORD processtransbatchrequest(
       1 inproc_batch_trans_id = f8
       1 script_name = vc
       1 batch_type_flag = i2
       1 ext_batch_id_txt = vc
       1 billing_entity_id = f8
       1 objarray_cnt = i4
       1 objarray[*]
         2 acct_id = f8
         2 pft_encntr_id = f8
         2 bo_hp_reltn_id = f8
         2 corsp_activity_id = f8
         2 charge_activity_id = f8
         2 parent_activity_id = f8
         2 trans_type_cd = f8
         2 trans_sub_type_cd = f8
         2 trans_reason_cd = f8
         2 trans_alias_id = f8
         2 amount = f8
         2 sequence_nbr = i4
         2 post_dt_tm = dq8
         2 payment_method_cd = f8
         2 payment_num_desc = vc
         2 payor_name = vc
         2 cc_auth_nbr = vc
         2 cc_beg_eff_dt_tm = dq8
         2 cc_end_eff_dt_tm = dq8
         2 check_date = dq8
         2 current_cur_cd = f8
         2 orig_cur_cd = f8
         2 change_due_amount = f8
         2 tendered_amount = f8
         2 payor_cntrl_nbr_txt = vc
         2 trans_comment_text = vc
         2 external_ident = vc
         2 error_status_cd = f8
         2 refundable_amount = f8
         2 cc_type_cd = f8
         2 merchant_ident = vc
         2 cc_trans_org_id = f8
         2 created_prsnl_id = f8
         2 chrg_auto_fifo_flag = i2
         2 payment_location_id = f8
         2 from_batch_trans_file_id = f8
         2 guarantor_account_id = f8
         2 pft_line_item_id = f8
     )
     IF ( NOT (preparetransactionsforposting(transactionsinformation,pftencntrid,
      processtransbatchrequest)))
      CALL addtracemessage("rePostTransactions",
       "prepareTransactionsForPosting did not return sucess.")
      RETURN(false)
     ENDIF
     IF (size(processtransbatchrequest->objarray,5) > 0)
      IF ( NOT (posttransactions(processtransbatchrequest)))
       CALL addtracemessage("rePostTransactions","postTransactions did not return sucess.")
       RETURN(false)
      ENDIF
     ENDIF
    ENDIF
    RETURN(true)
    CALL logmessage("rePostTransactions","Exiting",log_debug)
  END ;Subroutine
 ENDIF
 IF (validate(preparetransactionsforposting,char(128))=char(128))
  SUBROUTINE (preparetransactionsforposting(transactionsinformation=vc(ref),newpftencntrid=f8,
   processtransbatchrequest=vc(ref)) =i2)
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE selfpaybohpid = f8 WITH protect, noconstant(0)
    DECLARE origbohpreltnid = f8 WITH protect, noconstant(0)
    SET stat = initrec(processtransbatchrequest)
    IF ( NOT (getselfpaybalanceid(newpftencntrid,selfpaybohpid)))
     CALL addtracemessage("prepareTransactionsForPosting","The self pay balance id not found.")
     RETURN(false)
    ENDIF
    FOR (i = 1 TO size(transactionsinformation->objarray,5))
      SET cnt += 1
      IF (mod(cnt,10)=1)
       SET stat = alterlist(processtransbatchrequest->objarray,(size(processtransbatchrequest->
         objarray,5)+ 10))
      ENDIF
      SET processtransbatchrequest->objarray[cnt].parent_activity_id = transactionsinformation->
      objarray[i].activity_id
      SET processtransbatchrequest->objarray[cnt].amount = transactionsinformation->objarray[i].
      total_trans_amount
      SET processtransbatchrequest->objarray[cnt].sequence_nbr = transactionsinformation->objarray[i]
      .sequence_nbr
      SET processtransbatchrequest->objarray[cnt].payment_method_cd = transactionsinformation->
      objarray[i].payment_method_cd
      SET processtransbatchrequest->objarray[cnt].payment_num_desc = transactionsinformation->
      objarray[i].payment_num_desc
      SET processtransbatchrequest->objarray[cnt].payor_name = transactionsinformation->objarray[i].
      payor_name
      SET processtransbatchrequest->objarray[cnt].trans_type_cd = transactionsinformation->objarray[i
      ].trans_type_cd
      SET processtransbatchrequest->objarray[cnt].trans_sub_type_cd = transactionsinformation->
      objarray[i].trans_sub_type_cd
      SET processtransbatchrequest->objarray[cnt].trans_reason_cd = transactionsinformation->
      objarray[i].trans_reason_cd
      SET processtransbatchrequest->objarray[cnt].trans_alias_id = transactionsinformation->objarray[
      i].trans_alias_id
      SET processtransbatchrequest->objarray[cnt].cc_auth_nbr = transactionsinformation->objarray[i].
      cc_auth_nbr
      SET processtransbatchrequest->objarray[cnt].cc_beg_eff_dt_tm = transactionsinformation->
      objarray[i].cc_beg_eff_dt_tm
      SET processtransbatchrequest->objarray[cnt].cc_end_eff_dt_tm = transactionsinformation->
      objarray[i].cc_end_eff_dt_tm
      SET processtransbatchrequest->objarray[cnt].check_date = transactionsinformation->objarray[i].
      check_date
      SET processtransbatchrequest->objarray[cnt].current_cur_cd = transactionsinformation->objarray[
      i].current_cur_cd
      SET processtransbatchrequest->objarray[cnt].orig_cur_cd = transactionsinformation->objarray[i].
      orig_cur_cd
      SET processtransbatchrequest->objarray[cnt].tendered_amount = transactionsinformation->
      objarray[i].tendered_amount
      SET processtransbatchrequest->objarray[cnt].change_due_amount = transactionsinformation->
      objarray[i].change_due_amount
      SET processtransbatchrequest->objarray[cnt].post_dt_tm = transactionsinformation->objarray[i].
      post_dt_tm
      SET processtransbatchrequest->objarray[cnt].external_ident = transactionsinformation->objarray[
      i].external_ident
      SET processtransbatchrequest->objarray[cnt].merchant_ident = validate(transactionsinformation->
       objarray[i].merchant_ident,"")
      SET processtransbatchrequest->objarray[cnt].cc_type_cd = validate(transactionsinformation->
       objarray[i].cc_type_cd,0.0)
      SET processtransbatchrequest->objarray[cnt].refundable_amount = validate(
       transactionsinformation->objarray[i].refundable_amount,0.0)
      SET processtransbatchrequest->objarray[cnt].cc_trans_org_id = validate(transactionsinformation
       ->objarray[i].cc_trans_org_id,0.0)
      SET processtransbatchrequest->objarray[cnt].created_prsnl_id = validate(transactionsinformation
       ->objarray[i].created_prsnl_id,0.0)
      SET processtransbatchrequest->objarray[cnt].guarantor_account_id = validate(
       transactionsinformation->objarray[i].guarantor_account_id,0.0)
      IF ((transactionsinformation->objarray[i].transaction_level="ENCOUNTER_LEVEL"))
       SET processtransbatchrequest->objarray[cnt].pft_encntr_id = newpftencntrid
       SELECT INTO "nl:"
        FROM pft_trans_reltn ptr
        PLAN (ptr
         WHERE (ptr.activity_id=transactionsinformation->objarray[i].activity_id)
          AND ptr.active_ind=true
          AND ptr.parent_entity_name="BILL")
        WITH nocounter
       ;end select
       IF (curqual > 0)
        SET processtransbatchrequest->objarray[cnt].bo_hp_reltn_id = selfpaybohpid
       ELSE
        SELECT INTO "nl:"
         FROM pft_trans_reltn ptr,
          bo_hp_reltn bhr,
          benefit_order bo
         PLAN (ptr
          WHERE (ptr.activity_id=transactionsinformation->objarray[i].activity_id)
           AND ptr.active_ind=true
           AND ptr.parent_entity_name="PFTENCNTR")
          JOIN (bhr
          WHERE bhr.bo_hp_reltn_id=ptr.benefit_order_id
           AND bhr.active_ind=true
           AND bhr.fin_class_cd != cs354_selfpay_cd
           AND  NOT (bhr.bo_hp_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd)))
          JOIN (bo
          WHERE bo.benefit_order_id=bhr.benefit_order_id
           AND bo.active_ind=true
           AND bo.fin_class_cd != cs354_selfpay_cd
           AND bo.bo_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd))
         DETAIL
          origbohpreltnid = bhr.bo_hp_reltn_id
         WITH nocounter
        ;end select
        IF (curqual > 0)
         SET processtransbatchrequest->objarray[cnt].bo_hp_reltn_id = origbohpreltnid
        ELSE
         SET processtransbatchrequest->objarray[cnt].bo_hp_reltn_id = selfpaybohpid
        ENDIF
       ENDIF
      ELSEIF ((transactionsinformation->objarray[i].transaction_level="CHARGE_LEVEL"))
       SET processtransbatchrequest->objarray[cnt].pft_encntr_id = newpftencntrid
       SET processtransbatchrequest->objarray[cnt].bo_hp_reltn_id = selfpaybohpid
      ELSEIF ((transactionsinformation->objarray[i].transaction_level="BILL_LEVEL"))
       SET processtransbatchrequest->objarray[cnt].corsp_activity_id = transactionsinformation->
       objarray[i].corsp_activity_id
      ELSEIF ((transactionsinformation->objarray[i].transaction_level="LINE_ITEM_LEVEL"))
       SET processtransbatchrequest->objarray[cnt].corsp_activity_id = transactionsinformation->
       objarray[i].corsp_activity_id
       SET processtransbatchrequest->objarray[cnt].pft_line_item_id = transactionsinformation->
       objarray[i].pft_line_item_id
      ELSE
       CALL addtracemessage("prepareTransactionsForPosting","Invalid transaction level found.")
       RETURN(false)
      ENDIF
    ENDFOR
    SET stat = alterlist(processtransbatchrequest->objarray,cnt)
    SET processtransbatchrequest->objarray_cnt = cnt
    SET processtransbatchrequest->batch_type_flag = 519
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(posttransactions,char(128))=char(128))
  SUBROUTINE (posttransactions(processtransbatchrequest=vc(ref)) =i2)
    FREE RECORD processtransbatchreply
    RECORD processtransbatchreply(
      1 objarray[*]
        2 batch_trans_file_id = f8
        2 batch_trans_id = f8
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    )
    EXECUTE pft_process_transaction  WITH replace("REQUEST",processtransbatchrequest), replace(
     "REPLY",processtransbatchreply)
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(processtransbatchrequest)
     CALL echorecord(processtransbatchreply)
    ENDIF
    IF ((processtransbatchreply->status_data.status != "S"))
     CALL addtracemessage("postTransactions","pft_process_transaction did not return success")
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getnewchargeitemid,char(128))=char(128))
  SUBROUTINE (getnewchargeitemid(oldchargeitemid=f8,newchargeitemid=f8(ref)) =i2)
    SET newchargeitemid = 0.0
    SELECT INTO "nl:"
     FROM charge c
     PLAN (c
      WHERE c.parent_charge_item_id=oldchargeitemid)
     DETAIL
      newchargeitemid = c.charge_item_id
     WITH nocounter
    ;end select
    IF (newchargeitemid=0.0)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getselfpaybalanceid,char(128))=char(128))
  SUBROUTINE (getselfpaybalanceid(pftencntrid=f8,selfpaybohpid=f8(ref)) =i2)
    SET selfpaybohpid = 0.0
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bhr
     PLAN (bo
      WHERE bo.pft_encntr_id=pftencntrid
       AND bo.active_ind=true
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo.fin_class_cd=cs354_selfpay_cd)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.fin_class_cd=cs354_selfpay_cd)
     HEAD bhr.bo_hp_reltn_id
      selfpaybohpid = bhr.bo_hp_reltn_id
     WITH nocounter
    ;end select
    IF (selfpaybohpid > 0)
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 CALL echo("End PFT_RM_TRANSFER_TRANSACTIONS_SUBS.INC")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(cs13028_debit_cd)))
  DECLARE cs13028_debit_cd = f8 WITH protect, constant(getcodevalue(13028,"DR",0))
 ENDIF
 IF ( NOT (validate(flag_suspended)))
  DECLARE flag_suspended = i4 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(releaseappid)))
  DECLARE releaseappid = i4 WITH protect, constant(951020)
 ENDIF
 IF ( NOT (validate(releasetaskid)))
  DECLARE releasetaskid = i4 WITH protect, constant(951020)
 ENDIF
 IF ( NOT (validate(releasereqid)))
  DECLARE releasereqid = i4 WITH protect, constant(951021)
 ENDIF
 IF ( NOT (validate(slicesize)))
  DECLARE slicesize = i4 WITH protect, constant(100)
 ENDIF
 SUBROUTINE (releasesuspendedpendingregmodcharges(encntrid=f8) =i2)
   DECLARE cecnt = i4 WITH protect, noconstant(0)
   DECLARE ceslicecnt = i4 WITH protect, noconstant(0)
   DECLARE chargecnt = i4 WITH protect, noconstant(0)
   DECLARE srvstat = i4 WITH protect, noconstant(0)
   DECLARE happrelease = i4 WITH protect, noconstant(0)
   DECLARE htaskrelease = i4 WITH protect, noconstant(0)
   DECLARE hsteprelease = i4 WITH protect, noconstant(0)
   DECLARE hreq = i4 WITH protect, noconstant(0)
   DECLARE batchitemcnt = i4 WITH protect, noconstant(0)
   RECORD itemcharge(
     1 charge_events[*]
       2 charge_event_id = f8
       2 charge_items[*]
         3 charge_item_id = f8
   ) WITH protect
   IF (encntrid <= 0.0)
    CALL logmessage("releaseSuspendedPendingRegModCharges","Zero Encounter ID passed in.",log_debug)
    RETURN(false)
   ENDIF
   SELECT INTO "nl:"
    FROM charge c
    PLAN (c
     WHERE c.encntr_id=encntrid
      AND c.offset_charge_item_id=0.0
      AND c.charge_type_cd=cs13028_debit_cd
      AND c.process_flg=flag_suspended
      AND c.active_ind=true)
    ORDER BY c.charge_event_id, c.charge_item_id
    HEAD c.charge_event_id
     cecnt += 1, stat = alterlist(itemcharge->charge_events,cecnt), itemcharge->charge_events[cecnt].
     charge_event_id = c.charge_event_id,
     chargecnt = 0
    HEAD c.charge_item_id
     chargecnt += 1, stat = alterlist(itemcharge->charge_events[cecnt].charge_items,chargecnt),
     itemcharge->charge_events[cecnt].charge_items[chargecnt].charge_item_id = c.charge_item_id
    WITH nocounter
   ;end select
   IF (size(itemcharge->charge_events,5)=0)
    CALL logmessage("releaseSuspendedPendingRegModCharges","No charges qualify for reevaluation",
     log_debug)
    RETURN(true)
   ENDIF
   SET srvstat = uar_crmbeginapp(releaseappid,happrelease)
   IF (srvstat != 0)
    CALL logmessage("releaseSuspendedPendingRegModCharges",concat("Begin app failed with code: ",
      build(srvstat)),log_debug)
    RETURN(false)
   ENDIF
   SET srvstat = uar_crmbegintask(happrelease,releasetaskid,htaskrelease)
   IF (srvstat != 0)
    CALL logmessage("releaseSuspendedPendingRegModCharges",concat("Begin task failed with code: ",
      build(srvstat)),log_debug)
    RETURN(false)
   ENDIF
   SET srvstat = uar_crmbeginreq(htaskrelease,"",releasereqid,hsteprelease)
   IF (srvstat != 0)
    CALL logmessage("releaseSuspendedPendingRegModCharges",concat("Begin request failed with code: ",
      build(srvstat)),log_debug)
    RETURN(false)
   ENDIF
   FOR (cecnt = 1 TO size(itemcharge->charge_events,5))
     SET ceslicecnt += 1
     SET hreq = uar_crmgetrequest(hsteprelease)
     SET hprocess = uar_srvadditem(hreq,"process_event")
     SET srvstat = uar_srvsetshort(hprocess,"charge_item_qual",value(size(itemcharge->charge_events[
        cecnt].charge_items,5)))
     SET srvstat = uar_srvsetdouble(hprocess,"charge_event_id",itemcharge->charge_events[cecnt].
      charge_event_id)
     FOR (chargecnt = 1 TO size(itemcharge->charge_events[cecnt].charge_items,5))
       SET hcharge = uar_srvadditem(hprocess,"charge_item")
       SET srvstat = uar_srvsetdouble(hcharge,"charge_item_id",itemcharge->charge_events[cecnt].
        charge_items[chargecnt].charge_item_id)
       SET batchitemcnt += 1
     ENDFOR
     IF (((batchitemcnt >= slicesize) OR (cecnt=size(itemcharge->charge_events,5))) )
      SET srvstat = uar_srvsetshort(hreq,"charge_event_qual",ceslicecnt)
      SET srvstat = uar_crmperform(hsteprelease)
      IF (srvstat != 0)
       CALL logmessage("releaseSuspendedPendingRegModCharges",concat("CRM perform failed:",build(
          srvstat)),log_debug)
       RETURN(false)
      ENDIF
      SET ceslicecnt = 0
      SET batchitemcnt = 0
      CALL uar_crmendreq(hsteprelease)
      IF (cecnt < size(itemcharge->charge_events,5))
       SET hsteprelease = 0
       SET srvstat = uar_crmbeginreq(htaskrelease,"",releasereqid,hsteprelease)
       IF (srvstat != 0)
        CALL logmessage("releaseSuspendedPendingRegModCharges",concat(
          "Begin request failed with code: ",build(srvstat),"on index:",build(cecnt)),log_debug)
        RETURN(false)
       ENDIF
      ENDIF
     ENDIF
   ENDFOR
   CALL uar_crmendtask(htaskrelease)
   CALL uar_crmendapp(happrelease)
   RETURN(true)
 END ;Subroutine
 CALL echo("Begin PFT_RM_SERVICE_SUBS.INC, version [RCBACM-29658 .069]")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(pft_neither)))
  DECLARE pft_neither = i2 WITH constant(0)
 ENDIF
 IF ( NOT (validate(pft_debit)))
  DECLARE pft_debit = i2 WITH constant(1)
 ENDIF
 IF ( NOT (validate(pft_credit)))
  DECLARE pft_credit = i2 WITH constant(2)
 ENDIF
 IF ( NOT (validate(null_f8)))
  DECLARE null_f8 = f8 WITH constant(- (0.00001))
 ENDIF
 IF ( NOT (validate(null_i2)))
  DECLARE null_i2 = i2 WITH constant(- (1))
 ENDIF
 IF ( NOT (validate(null_i4)))
  DECLARE null_i4 = i4 WITH constant(- (1))
 ENDIF
 IF ( NOT (validate(null_dt)))
  DECLARE null_dt = dq8 WITH constant(0.0)
 ENDIF
 IF ( NOT (validate(null_vc)))
  DECLARE null_vc = vc WITH constant(char(128))
 ENDIF
 IF ( NOT (validate(upt_force)))
  DECLARE upt_force = i4 WITH constant(- (99999))
 ENDIF
 CALL echo(build("Begin including PFT_CLM_XOVER_THRESHOLD_SUBS.INC, version [",nullterm("360359.005"),
   "]"))
 CALL echo(build("Including PFT_XML_ACCESS_SUBS.INC, version [",nullterm("356730.006"),"]"))
 IF (validate(uar_xml_readfile,char(128))=char(128))
  DECLARE uar_xml_readfile(source=vc,filehandle=i4(ref)) = i4
 ENDIF
 IF (validate(uar_xml_closefile,char(128))=char(128))
  DECLARE uar_xml_closefile(filehandle=i4(ref)) = null
 ENDIF
 IF (validate(uar_xml_geterrormsg,char(128))=char(128))
  DECLARE uar_xml_geterrormsg(errorcode=i4(ref)) = vc
 ENDIF
 IF (validate(uar_xml_listtree,char(128))=char(128))
  DECLARE uar_xml_listtree(filehandle=i4(ref)) = vc
 ENDIF
 IF (validate(uar_xml_getroot,char(128))=char(128))
  DECLARE uar_xml_getroot(filehandle=i4(ref),nodehandle=i4(ref)) = i4
 ENDIF
 IF (validate(uar_xml_findchildnode,char(128))=char(128))
  DECLARE uar_xml_findchildnode(nodehandle=i4(ref),nodename=vc,childhandle=i4(ref)) = i4
 ENDIF
 IF (validate(uar_xml_getchildcount,char(128))=char(128))
  DECLARE uar_xml_getchildcount(nodehandle=i4(ref)) = i4
 ENDIF
 IF (validate(uar_xml_getchildnode,char(128))=char(128))
  DECLARE uar_xml_getchildnode(nodehandle=i4(ref),nodeno=i4(ref),childnode=i4(ref)) = i4
 ENDIF
 IF (validate(uar_xml_getparentnode,char(128))=char(128))
  DECLARE uar_xml_getparentnode(nodehandle=i4(ref),parentnode=i4(ref)) = i4
 ENDIF
 IF (validate(uar_xml_getnodename,char(128))=char(128))
  DECLARE uar_xml_getnodename(nodehandle=i4(ref)) = vc
 ENDIF
 IF (validate(uar_xml_getnodecontent,char(128))=char(128))
  DECLARE uar_xml_getnodecontent(nodehandle=i4(ref)) = vc
 ENDIF
 IF (validate(uar_xml_getattrbyname,char(128))=char(128))
  DECLARE uar_xml_getattrbyname(nodehandle=i4(ref),attrname=vc,attributehandle=i4(ref)) = i4
 ENDIF
 IF (validate(uar_xml_getattrbypos,char(128))=char(128))
  DECLARE uar_xml_getattrbypos(nodehandle=i4(ref),ndx=i4(ref),attributehandle=i4(ref)) = i4
 ENDIF
 IF (validate(uar_xml_getattrname,char(128))=char(128))
  DECLARE uar_xml_getattrname(attributehandle=i4(ref)) = vc
 ENDIF
 IF (validate(uar_xml_getattrvalue,char(128))=char(128))
  DECLARE uar_xml_getattrvalue(attributehandle=i4(ref)) = vc
 ENDIF
 IF (validate(uar_xml_getattributevalue,char(128))=char(128))
  DECLARE uar_xml_getattributevalue(nodehandle=i4(ref),attrname=vc) = vc
 ENDIF
 IF (validate(uar_xml_getattrcount,char(128))=char(128))
  DECLARE uar_xml_getattrcount(nodehandle=i4(ref)) = i4
 ENDIF
 IF (validate(uar_xml_parsestring,char(128))=char(128))
  DECLARE uar_xml_parsestring(xmlstring=vc,filehandle=i4(ref)) = i4
 ENDIF
 IF ( NOT (validate(sc_unkstat)))
  DECLARE sc_unkstat = i4 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(sc_ok)))
  DECLARE sc_ok = i4 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(sc_parserror)))
  DECLARE sc_parserror = i4 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(sc_nofile)))
  DECLARE sc_nofile = i4 WITH protect, constant(3)
 ENDIF
 IF ( NOT (validate(sc_nonode)))
  DECLARE sc_nonode = i4 WITH protect, constant(4)
 ENDIF
 IF ( NOT (validate(sc_noattr)))
  DECLARE sc_noattr = i4 WITH protect, constant(5)
 ENDIF
 IF ( NOT (validate(sc_badobjref)))
  DECLARE sc_badobjref = i4 WITH protect, constant(6)
 ENDIF
 IF ( NOT (validate(sc_invindex)))
  DECLARE sc_invindex = i4 WITH protect, constant(7)
 ENDIF
 IF ( NOT (validate(sc_notfound)))
  DECLARE sc_notfound = i4 WITH protect, constant(8)
 ENDIF
 DECLARE __hpxmlroot = i4 WITH protect, noconstant(0)
 DECLARE __hpclaimdata = i4 WITH protect, noconstant(0)
 DECLARE __hpcharges = i4 WITH protect, noconstant(0)
 DECLARE __hpcharge = i4 WITH protect, noconstant(0)
 DECLARE __hppayers = i4 WITH protect, noconstant(0)
 DECLARE __hppayer = i4 WITH protect, noconstant(0)
 DECLARE __hpcontext = i4 WITH protect, noconstant(0)
 DECLARE __hppatient = i4 WITH protect, noconstant(0)
 DECLARE __hpencounter = i4 WITH protect, noconstant(0)
 DECLARE __hpitem = i4 WITH protect, noconstant(0)
 DECLARE __pchidx = i4 WITH protect, noconstant(0)
 DECLARE __posnumber = i4 WITH protect, noconstant(0)
 DECLARE __pchcnt = i4 WITH protect, noconstant(0)
 DECLARE __ptmpnode = i4 WITH protect, noconstant(0)
 IF (validate(parsexmlbuffer,char(128))=char(128))
  SUBROUTINE (parsexmlbuffer(pxmlbuffer=vc,prxmlfilehandle=i4(ref)) =i4)
    SET prxmlfilehandle = 0
    IF (uar_xml_parsestring(nullterm(pxmlbuffer),prxmlfilehandle) != sc_ok)
     RETURN(0)
    ENDIF
    SET __hpxmlroot = 0
    IF (uar_xml_getroot(prxmlfilehandle,__hpxmlroot) != sc_ok)
     RETURN(0)
    ENDIF
    RETURN(__hpxmlroot)
  END ;Subroutine
 ENDIF
 IF (validate(releasexmlresources,char(128))=char(128))
  SUBROUTINE (releasexmlresources(prxmlfilehandle=i4(ref)) =i2)
   CALL uar_xml_closefile(prxmlfilehandle)
   RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getclaimdatachargehandle,char(128))=char(128))
  SUBROUTINE (getclaimdatachargehandle(proothandle=i4,pchargeidx=i4) =i4)
    SET __hpclaimdata = 0
    IF (uar_xml_findchildnode(proothandle,"claimData",__hpclaimdata) != sc_ok)
     RETURN(0)
    ENDIF
    SET __hpcharges = 0
    IF (uar_xml_findchildnode(__hpclaimdata,"charges",__hpcharges) != sc_ok)
     RETURN(0)
    ENDIF
    SET __hpcharge = 0
    IF (uar_xml_getchildnode(__hpcharges,(pchargeidx - 1),__hpcharge) != sc_ok)
     RETURN(0)
    ENDIF
    RETURN(__hpcharge)
  END ;Subroutine
 ENDIF
 IF (validate(getclaimdatapayerhandle,char(128))=char(128))
  SUBROUTINE (getclaimdatapayerhandle(proothandle=i4,ppayeridx=i4) =i4)
    SET __hpclaimdata = 0
    IF (uar_xml_findchildnode(proothandle,"claimData",__hpclaimdata) != sc_ok)
     RETURN(0)
    ENDIF
    SET __hppayers = 0
    IF (uar_xml_findchildnode(__hpclaimdata,"payers",__hppayers) != sc_ok)
     RETURN(0)
    ENDIF
    SET __hppayer = 0
    IF (ppayeridx=0)
     IF (uar_xml_getchildnode(__hppayers,0,__hppayer) != sc_ok)
      RETURN(0)
     ENDIF
    ELSE
     IF (uar_xml_getchildnode(__hppayers,(ppayeridx - 1),__hppayer) != sc_ok)
      RETURN(0)
     ENDIF
    ENDIF
    RETURN(__hppayer)
  END ;Subroutine
 ENDIF
 IF (validate(getclaimdatacontexthandle,char(128))=char(128))
  SUBROUTINE (getclaimdatacontexthandle(proothandle=i4) =i4)
    SET __hpclaimdata = 0
    IF (uar_xml_findchildnode(proothandle,"claimData",__hpclaimdata) != sc_ok)
     RETURN(0)
    ENDIF
    SET __hpcontext = 0
    IF (uar_xml_findchildnode(__hpclaimdata,"context",__hpcontext) != sc_ok)
     RETURN(0)
    ENDIF
    RETURN(__hpcontext)
  END ;Subroutine
 ENDIF
 IF (validate(getclaimdataencounterhandle,char(128))=char(128))
  SUBROUTINE (getclaimdataencounterhandle(proothandle=i4) =i4)
    SET __hpclaimdata = 0
    IF (uar_xml_findchildnode(proothandle,"claimData",__hpclaimdata) != sc_ok)
     RETURN(0)
    ENDIF
    SET __hppatient = 0
    IF (uar_xml_findchildnode(__hpclaimdata,"patient",__hppatient) != sc_ok)
     RETURN(0)
    ENDIF
    SET __hpencounter = 0
    IF (uar_xml_findchildnode(__hppatient,"encounter",__hpencounter) != sc_ok)
     RETURN(0)
    ENDIF
    RETURN(__hpencounter)
  END ;Subroutine
 ENDIF
 IF (validate(getchildnodevalue,char(128))=char(128))
  SUBROUTINE (getchildnodevalue(pparenthandle=i4,pchildname=vc) =vc)
    IF (pparenthandle=0.0)
     RETURN(nullterm(""))
    ENDIF
    SET __hpitem = 0
    IF (uar_xml_findchildnode(pparenthandle,nullterm(pchildname),__hpitem) != sc_ok)
     RETURN(nullterm(""))
    ENDIF
    DECLARE __tmpstring = vc WITH protect, noconstant("")
    SET __tmpstring = nullterm(uar_xml_getnodecontent(__hpitem))
    SET __tmpstring = replace(__tmpstring,"&apos;",char(39),0)
    SET __tmpstring = replace(__tmpstring,"&quot;",char(34),0)
    SET __tmpstring = replace(__tmpstring,"&gt;",">",0)
    SET __tmpstring = replace(__tmpstring,"&lt;","<",0)
    SET __tmpstring = replace(__tmpstring,"&amp;","&",0)
    RETURN(nullterm(__tmpstring))
  END ;Subroutine
 ENDIF
 IF (validate(getattributevalue,char(128))=char(128))
  SUBROUTINE (getattributevalue(pelementhandle=i4,pattrname=vc) =vc)
    DECLARE __tmpstring = vc WITH protect, noconstant("")
    IF (pelementhandle != 0.0)
     SET __tmpstring = nullterm(uar_xml_getattributevalue(pelementhandle,nullterm(pattrname)))
     SET __tmpstring = replace(__tmpstring,"&apos;",char(39),0)
     SET __tmpstring = replace(__tmpstring,"&quot;",char(34),0)
     SET __tmpstring = replace(__tmpstring,"&gt;",">",0)
     SET __tmpstring = replace(__tmpstring,"&lt;","<",0)
     SET __tmpstring = replace(__tmpstring,"&amp;","&",0)
    ENDIF
    RETURN(nullterm(__tmpstring))
  END ;Subroutine
 ENDIF
 IF (validate(getchildnodeattributevalue,char(128))=char(128))
  SUBROUTINE (getchildnodeattributevalue(pparenthandle=i4,pchildname=vc,pattrname=vc) =vc)
    IF (pparenthandle=0.0)
     RETURN(nullterm(""))
    ENDIF
    SET __hpitem = 0
    IF (uar_xml_findchildnode(pparenthandle,nullterm(pchildname),__hpitem) != sc_ok)
     RETURN(nullterm(""))
    ENDIF
    DECLARE __tmpstring = vc WITH protect, noconstant("")
    SET __tmpstring = nullterm(uar_xml_getattributevalue(__hpitem,nullterm(pattrname)))
    SET __tmpstring = replace(__tmpstring,"&apos;",char(39),0)
    SET __tmpstring = replace(__tmpstring,"&quot;",char(34),0)
    SET __tmpstring = replace(__tmpstring,"&gt;",">",0)
    SET __tmpstring = replace(__tmpstring,"&lt;","<",0)
    SET __tmpstring = replace(__tmpstring,"&amp;","&",0)
    RETURN(nullterm(__tmpstring))
  END ;Subroutine
 ENDIF
 IF (validate(writexmlelement,char(128))=char(128))
  SUBROUTINE (writexmlelement(helement=i4) =vc)
    DECLARE childidx = i4 WITH private, noconstant(0)
    DECLARE childcnt = i4 WITH private, noconstant(uar_xml_getchildcount(helement))
    DECLARE attridx = i4 WITH private, noconstant(0)
    DECLARE attrcnt = i4 WITH private, noconstant(uar_xml_getattrcount(helement))
    DECLARE mycontent = vc WITH private, noconstant(nullterm(uar_xml_getnodecontent(helement)))
    DECLARE theelementstring = vc WITH private, noconstant(nullterm(concat(nullterm("<"),nullterm(
        uar_xml_getnodename(helement)))))
    DECLARE thechildelementstring = vc WITH private, noconstant(nullterm(""))
    IF (attrcnt=0
     AND childcnt=0
     AND mycontent="")
     RETURN(nullterm(concat(theelementstring,"/>")))
    ENDIF
    FOR (attridx = 1 TO attrcnt)
      DECLARE hattr = i4 WITH private, noconstant(0)
      CALL uar_xml_getattrbypos(helement,(attridx - 1),hattr)
      DECLARE attrname = vc WITH private, noconstant(nullterm(uar_xml_getattrname(hattr)))
      DECLARE attrvalue = vc WITH private, noconstant(nullterm(uar_xml_getattrvalue(hattr)))
      SET theelementstring = concat(theelementstring," ",attrname,'="',attrvalue,
       '"')
    ENDFOR
    IF (childcnt=0
     AND mycontent="")
     RETURN(concat(theelementstring,"/>"))
    ELSEIF (childcnt=0)
     RETURN(nullterm(concat(theelementstring,">",mycontent,"</",nullterm(uar_xml_getnodename(helement
         )),
       ">")))
    ENDIF
    SET theelementstring = concat(theelementstring,">",mycontent)
    FOR (childidx = 1 TO childcnt)
      DECLARE hchildnode = i4 WITH private, noconstant(0)
      CALL uar_xml_getchildnode(helement,(childidx - 1),hchildnode)
      SET thechildelementstring = writexmlelement(hchildnode)
      SET theelementstring = concat(theelementstring,thechildelementstring)
    ENDFOR
    RETURN(nullterm(concat(theelementstring,"</",nullterm(uar_xml_getnodename(helement)),">")))
  END ;Subroutine
 ENDIF
 IF (validate(getchildelementoccurrencehandle,char(128))=char(128))
  SUBROUTINE (getchildelementoccurrencehandle(pelementhandle=i4,pchildname=vc,poccurrenceindex=i4) =
   i4)
   IF (pelementhandle != 0.0)
    SET __pchidx = 0
    SET __posnumber = 0
    SET __pchcnt = uar_xml_getchildcount(pelementhandle)
    FOR (__pchidx = 1 TO __pchcnt)
      SET __ptmpnode = 0
      IF (uar_xml_getchildnode(pelementhandle,(__pchidx - 1),__ptmpnode) != sc_ok)
       RETURN(0)
      ENDIF
      IF (uar_xml_getnodename(__ptmpnode)=pchildname)
       SET __posnumber += 1
       IF (__posnumber=poccurrenceindex)
        RETURN(__ptmpnode)
       ENDIF
      ENDIF
    ENDFOR
   ENDIF
   RETURN(0)
  END ;Subroutine
 ENDIF
 IF (validate(getelementvalue,char(128))=char(128))
  SUBROUTINE (getelementvalue(pelementhandle=i4) =vc)
    DECLARE __tmpstring = vc WITH protect, noconstant("")
    IF (pelementhandle != 0.0)
     SET __tmpstring = nullterm(uar_xml_getnodecontent(pelementhandle))
     SET __tmpstring = replace(__tmpstring,"&apos;",char(39),0)
     SET __tmpstring = replace(__tmpstring,"&quot;",char(34),0)
     SET __tmpstring = replace(__tmpstring,"&gt;",">",0)
     SET __tmpstring = replace(__tmpstring,"&lt;","<",0)
     SET __tmpstring = replace(__tmpstring,"&amp;","&",0)
    ENDIF
    RETURN(nullterm(__tmpstring))
  END ;Subroutine
 ENDIF
 IF (validate(getxpathvalue,char(128))=char(128))
  SUBROUTINE (getxpathvalue(hxmlcontext=i4,xpathexpr=vc) =vc)
    DECLARE expr = vc WITH protect, noconstant(trim(xpathexpr))
    DECLARE exprlen = i4 WITH protect, noconstant(size(expr))
    DECLARE hxmlparent = i4 WITH protect, noconstant(hxmlcontext)
    IF (substring(1,1,expr) != "/")
     SET expr = concat("/",expr)
     SET exprlen += 1
    ENDIF
    DECLARE firstslashpos = i4 WITH protect, noconstant(1)
    DECLARE secondslashpos = i4 WITH protect, noconstant(findstring("/",expr,2))
    DECLARE betweenslashes = vc WITH protect, noconstant("")
    DECLARE openbracketpos = i4 WITH protect, noconstant(0)
    DECLARE closebracketpos = i4 WITH protect, noconstant(0)
    DECLARE betweenbrackets = vc WITH protect, noconstant("")
    WHILE (secondslashpos != 0)
      SET betweenslashes = substring((firstslashpos+ 1),((secondslashpos - firstslashpos) - 1),expr)
      SET openbracketpos = findstring("[",betweenslashes)
      IF (openbracketpos > 0)
       SET closebracketpos = findstring("]",betweenslashes)
       SET betweenbrackets = substring((openbracketpos+ 1),((closebracketpos - openbracketpos) - 1),
        betweenslashes)
       SET betweenslashes = substring(1,(openbracketpos - 1),betweenslashes)
       IF (closebracketpos=0)
        CALL logmsg("getXPathValue",concat("Expected ']' for element '",betweenslashes,"'"),log_error
         )
        RETURN("")
       ELSEIF (((betweenbrackets="") OR ( NOT (isnumeric(betweenbrackets)))) )
        CALL logmsg("getXPathValue",concat("Expected ( [0-9]+ ) between bracket for element '",
          betweenslashes,"'"),log_error)
        RETURN("")
       ENDIF
       SET hxmlparent = getchildelementoccurrencehandle(hxmlparent,trim(betweenslashes),cnvtint(
         betweenbrackets))
      ELSE
       SET hxmlparent = getchildelementoccurrencehandle(hxmlparent,trim(betweenslashes),1)
      ENDIF
      SET expr = substring(secondslashpos,exprlen,expr)
      SET exprlen = size(expr)
      SET firstslashpos = 1
      SET secondslashpos = findstring("/",expr,(firstslashpos+ 1))
    ENDWHILE
    SET expr = substring(2,exprlen,expr)
    SET exprlen -= 1
    IF (substring(1,1,expr)="@")
     SET expr = substring(2,exprlen,expr)
     SET exprlen -= 1
     RETURN(getattributevalue(hxmlparent,trim(expr)))
    ENDIF
    RETURN(getchildnodevalue(hxmlparent,trim(expr)))
  END ;Subroutine
 ENDIF
 IF (validate(getmedianodename,char(128))=char(128))
  SUBROUTINE (getmedianodename(dcorspactivityid=f8,smedianodename=vc(ref)) =i2)
    CASE (uar_get_code_meaning(dmediasubtypecd))
     OF "UB04":
      SET smedianodename = "UB04"
      RETURN(true)
     OF "837I_4010":
      SET smedianodename = "WPC837Q3"
      RETURN(true)
     OF "837I_5010":
      SET smedianodename = "WPC837I5010"
      RETURN(true)
     OF "837R_5010":
      SET smedianodename = "WPC837R5010"
      RETURN(true)
     OF "CMS1500_0805":
      SET smedianodename = "CMS1500_0805"
      RETURN(true)
     OF "CMS1500_0212":
      SET smedianodename = "CMS1500_0212"
      RETURN(true)
     OF "837P_4010":
      SET smedianodename = "WPC837Q1"
      RETURN(true)
     OF "837P_5010":
      SET smedianodename = "WPC837P5010"
      RETURN(true)
     OF "WEB SERVICES":
      SET smedianodename = "claim"
      RETURN(true)
     ELSE
      RETURN(false)
    ENDCASE
  END ;Subroutine
 ENDIF
 IF (validate(getmediaxmlhandle,char(128))=char(128))
  SUBROUTINE (getmediaxmlhandle(dcorspactivityid=f8,dmediasubtypecd=f8,hxmlfile=i4(ref),hxmlroot=i4(
    ref),hxmlmedia=i4(ref)) =i2)
    DECLARE _tmpstr = vc WITH protect, noconstant("")
    SET _tmpstr = nullterm(build("Processing claim [",cnvtint(dcorspactivityid),"]"))
    CALL logmsg("getMediaXMLHandle",_tmpstr,log_debug)
    DECLARE _medianodename = vc WITH protect, noconstant("")
    IF ( NOT (getmedianodename(dmediasubtypecd,_medianodename)))
     CALL logmsg("getMediaXMLHandle","The specified media subtype is not currently supported",
      log_error)
     RETURN(false)
    ENDIF
    SET _medianodename = nullterm(_medianodename)
    DECLARE _mediaxml = gvc WITH protect, noconstant("")
    IF ( NOT (getclaimastargetmedia(dcorspactivityid,dmediasubtypecd,_mediaxml)))
     CALL logmsg("getMediaXMLHandle","Error retrieving claim as target media XML string",log_error)
     RETURN(false)
    ENDIF
    IF (uar_xml_parsestring(nullterm(_mediaxml),hxmlfile) != sc_ok)
     CALL logmsg("getMediaXMLHandle","Error parsing XML string",log_error)
     RETURN(false)
    ENDIF
    IF (uar_xml_getroot(hxmlfile,hxmlroot) != sc_ok)
     CALL logmsg("getMediaXMLHandle","Error retrieving handle to root node",log_error)
     RETURN(false)
    ENDIF
    IF (uar_xml_findchildnode(hxmlroot,nullterm(_medianodename),hxmlmedia) != sc_ok)
     CALL logmsg("getMediaXMLHandle",build2("Error retrieving handle to ",_medianodename," node"),
      log_error)
     RETURN(false)
    ENDIF
    IF (nullterm(uar_xml_getnodename(hxmlmedia)) != _medianodename)
     CALL logmsg("getMediaXMLHandle",build2("The media node name should be ",_medianodename,
       " but is instead ",nullterm(uar_xml_getnodename(hxmlmedia))),log_error)
     RETURN(false)
    ENDIF
    CALL echo("Executed getMediaXMLHandle")
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getclaimastargetmedia,char(128))=char(128))
  SUBROUTINE (getclaimastargetmedia(dcorspactivityid=f8,dmediasubtypecd=f8,smediaxml=gvc(ref)) =i2)
    DECLARE _tmpstr = vc WITH protect, noconstant("")
    SET _tmpstr = nullterm(build("Processing claim [",cnvtint(dcorspactivityid),"]"))
    CALL logmsg("getClaimAsTargetMedia",_tmpstr,log_debug)
    DECLARE _targetsubtypestr = vc WITH protect, noconstant("")
    DECLARE _medianodename = vc WITH protect, noconstant("")
    IF ( NOT (getmedianodename(dmediasubtypecd,_medianodename)))
     CALL logmsg("getClaimAsTargetMedia","The specified media subtype is not currently supported",
      log_error)
     RETURN(false)
    ENDIF
    SET _targetsubtypestr = nullterm(concat("<",_medianodename,">"))
    FREE RECORD longblobrequest
    RECORD longblobrequest(
      1 objarray[*]
        2 longblobid = f8
    )
    FREE RECORD longblobreply
    RECORD longblobreply(
      1 objarray[*]
        2 longblobid = f8
        2 xml = gvc
      1 pft_status_data
        2 subeventstatus[1]
          3 programname = vc
          3 subroutinename = vc
          3 message = vc
        2 pft_stats[*]
          3 programname = vc
          3 executioncnt = i4
          3 executiontime = f8
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    )
    SET stat = alterlist(longblobrequest->objarray,1)
    SELECT INTO "nl:"
     FROM br_long_blob_reltn brlb
     PLAN (brlb
      WHERE brlb.corsp_activity_id=dcorspactivityid
       AND brlb.data_type_flag=media_xml_flag
       AND brlb.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND brlb.end_effective_dt_tm > cnvtdatetime(sysdate)
       AND brlb.active_ind=true)
     DETAIL
      longblobrequest->objarray[1].longblobid = brlb.long_blob_id
     WITH nocounter
    ;end select
    EXECUTE pft_clm_get_longblob_xml  WITH replace("REQUEST",longblobrequest), replace("REPLY",
     longblobreply)
    CALL echo("Retrieved media xml long blob")
    IF ((longblobreply->status_data.status != "S"))
     CALL logmsg("getClaimAsTargetMedia","Error retrieving media XML string",log_error)
     RETURN(false)
    ENDIF
    DECLARE subtypepos = i4 WITH protect, noconstant(0)
    DECLARE subtypelen = i4 WITH protect, noconstant(0)
    DECLARE subtypestr = vc WITH protect, noconstant("")
    SET subtypepos = (findstring(">",longblobreply->objarray[1].xml,1,0)+ 1)
    SET subtypepos = findstring("<",longblobreply->objarray[1].xml,subtypepos,0)
    SET subtypelen = ((findstring(">",longblobreply->objarray[1].xml,subtypepos,0) - subtypepos)+ 1)
    SET subtypestr = cnvtupper(nullterm(substring(subtypepos,subtypelen,longblobreply->objarray[1].
       xml)))
    SET _tmpstr = nullterm(build("XML Peek [",subtypestr,"]"))
    CALL logmsg("getClaimAsTargetMedia",_tmpstr,log_debug)
    IF (subtypestr=_targetsubtypestr)
     SET smediaxml = longblobreply->objarray[1].xml
     RETURN(true)
    ENDIF
    CALL echo(build2("Claim is ",subtypestr," - Transforming claimData to ",_targetsubtypestr))
    SET stat = alterlist(longblobrequest->objarray,1)
    SELECT INTO "nl:"
     FROM br_long_blob_reltn brlb
     PLAN (brlb
      WHERE brlb.corsp_activity_id=dcorspactivityid
       AND brlb.data_type_flag=claim_data_xml_flag
       AND brlb.beg_effective_dt_tm <= cnvtdatetime(sysdate)
       AND brlb.end_effective_dt_tm > cnvtdatetime(sysdate)
       AND brlb.active_ind=true)
     DETAIL
      longblobrequest->objarray[1].longblobid = brlb.long_blob_id
     WITH nocounter
    ;end select
    EXECUTE pft_clm_get_longblob_xml  WITH replace("REQUEST",longblobrequest), replace("REPLY",
     longblobreply)
    CALL echo("Retrieved claimdata long blob")
    IF ((longblobreply->status_data.status != "S"))
     FREE RECORD longblobreply
     CALL logmsg("getClaimAsTargetMedia","Error retrieving ClaimData XML string",log_error)
     RETURN(false)
    ENDIF
    RECORD runxsltrequest(
      1 xml
        2 xml = gvc
        2 resources[*]
          3 resourcename = vc
          3 xml = gvc
      1 xsl
        2 stylesheetname = vc
        2 xsl = gvc
        2 resources[*]
          3 resourcename = vc
          3 xml = gvc
    ) WITH protect
    RECORD runxsltreply(
      1 xml = gvc
      1 pft_status_data
        2 subeventstatus[1]
          3 programname = vc
          3 subroutinename = vc
          3 message = vc
        2 pft_stats[*]
          3 programname = vc
          3 executioncnt = i4
          3 executiontime = f8
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET runxsltrequest->xml.xml = longblobreply->objarray[1].xml
    CASE (_targetsubtypestr)
     OF "<WPC837Q3>":
      SET runxsltrequest->xsl.stylesheetname = "ClaimDataTo837i4010.xslt"
      SET stat = alterlist(runxsltrequest->xsl.resources,5)
      SET runxsltrequest->xsl.resources[1].resourcename = "GlobalTemplates.xslt"
      SET runxsltrequest->xsl.resources[2].resourcename =
      "ClaimDataTo837i4010_StandardPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[3].resourcename =
      "ClaimDataTo837i4010_DefaultPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[4].resourcename =
      "ClaimDataTo837i4010_CustomPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[5].resourcename =
      "ClaimDataTo837i4010_StandardFormattingTemplates.xslt"
     OF "<UB04>":
      SET runxsltrequest->xsl.stylesheetname = "ClaimDataToUB04.xslt"
      SET stat = alterlist(runxsltrequest->xsl.resources,5)
      SET runxsltrequest->xsl.resources[1].resourcename = "GlobalTemplates.xslt"
      SET runxsltrequest->xsl.resources[2].resourcename =
      "ClaimDataToUB04_StandardPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[3].resourcename =
      "ClaimDataToUB04_DefaultPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[4].resourcename =
      "ClaimDataToUB04_CustomPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[5].resourcename =
      "ClaimDataToUB04_StandardFormattingTemplates.xslt"
     OF "<WPC837I5010>":
      SET runxsltrequest->xsl.stylesheetname = "ClaimDataTo837i5010.xslt"
      SET stat = alterlist(runxsltrequest->xsl.resources,5)
      SET runxsltrequest->xsl.resources[1].resourcename = "GlobalTemplates.xslt"
      SET runxsltrequest->xsl.resources[2].resourcename = "GlobalTemplates5010.xslt"
      SET runxsltrequest->xsl.resources[3].resourcename =
      "ClaimDataTo837i5010_StandardPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[4].resourcename =
      "ClaimDataTo837i5010_DefaultPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[5].resourcename =
      "ClaimDataTo837i5010_CustomPopulationTemplates.xslt"
     OF "<WPC837R5010>":
      SET runxsltrequest->xsl.stylesheetname = "ClaimDataTo837r5010_Reporting.xslt"
      SET stat = alterlist(runxsltrequest->xsl.resources,5)
      SET runxsltrequest->xsl.resources[1].resourcename = "GlobalTemplates.xslt"
      SET runxsltrequest->xsl.resources[2].resourcename =
      "ClaimDataTo837r5010_Reporting_StandardPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[3].resourcename =
      "ClaimDataTo837r5010_Reporting_DefaultPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[4].resourcename =
      "ClaimDataTo837r5010_Reporting_CustomPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[5].resourcename =
      "ClaimDataTo837r5010_Reporting_StandardFormattingTemplates.xslt"
     OF "<CMS1500_0805>":
      SET runxsltrequest->xsl.stylesheetname = "ClaimDataToCMS1500_0805.xslt"
      SET stat = alterlist(runxsltrequest->xsl.resources,5)
      SET runxsltrequest->xsl.resources[1].resourcename = "GlobalTemplates.xslt"
      SET runxsltrequest->xsl.resources[2].resourcename =
      "ClaimDataToCMS1500_0805_StandardPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[3].resourcename =
      "ClaimDataToCMS1500_0805_DefaultPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[4].resourcename =
      "ClaimDataToCMS1500_0805_CustomPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[5].resourcename =
      "ClaimDataToCMS1500_0805_StandardFormattingTemplates.xslt"
     OF "<CMS1500_0212>":
      SET runxsltrequest->xsl.stylesheetname = "ClaimDataToCMS1500_0212.xslt"
      SET stat = alterlist(runxsltrequest->xsl.resources,5)
      SET runxsltrequest->xsl.resources[1].resourcename = "GlobalTemplates.xslt"
      SET runxsltrequest->xsl.resources[2].resourcename =
      "ClaimDataToCMS1500_0212_StandardPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[3].resourcename =
      "ClaimDataToCMS1500_0212_DefaultPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[4].resourcename =
      "ClaimDataToCMS1500_0212_CustomPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[5].resourcename =
      "ClaimDataToCMS1500_0212_StandardFormattingTemplates.xslt"
     OF "<WPC837Q1>":
      SET runxsltrequest->xsl.stylesheetname = "ClaimDataTo837p4010.xslt"
      SET stat = alterlist(runxsltrequest->xsl.resources,5)
      SET runxsltrequest->xsl.resources[1].resourcename = "GlobalTemplates.xslt"
      SET runxsltrequest->xsl.resources[2].resourcename =
      "ClaimDataTo837p4010_StandardPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[3].resourcename =
      "ClaimDataTo837p4010_DefaultPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[4].resourcename =
      "ClaimDataTo837p4010_CustomPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[5].resourcename =
      "ClaimDataTo837p4010_StandardFormattingTemplates.xslt"
     OF "<WPC837P5010>":
      SET runxsltrequest->xsl.stylesheetname = "ClaimDataTo837p5010.xslt"
      SET stat = alterlist(runxsltrequest->xsl.resources,5)
      SET runxsltrequest->xsl.resources[1].resourcename = "GlobalTemplates.xslt"
      SET runxsltrequest->xsl.resources[2].resourcename = "GlobalTemplates5010.xslt"
      SET runxsltrequest->xsl.resources[3].resourcename =
      "ClaimDataTo837p5010_StandardPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[4].resourcename =
      "ClaimDataTo837p5010_DefaultPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[5].resourcename =
      "ClaimDataTo837p5010_CustomPopulationTemplates.xslt"
     OF "<claim>":
      SET runxsltrequest->xsl.stylesheetname = "WebServices.xslt"
      SET stat = alterlist(runxsltrequest->xsl.resources,4)
      SET runxsltrequest->xsl.resources[1].resourcename = "GlobalTemplates.xslt"
      SET runxsltrequest->xsl.resources[2].resourcename =
      "WebServices_StandardPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[3].resourcename =
      "WebServices_DefaultPopulationTemplates.xslt"
      SET runxsltrequest->xsl.resources[4].resourcename =
      "WebServices_CustomPopulationTemplates.xslt"
    ENDCASE
    EXECUTE pft_clm_run_xslt  WITH replace("REQUEST",runxsltrequest), replace("REPLY",runxsltreply)
    IF ((runxsltreply->status_data.status != "S"))
     FREE RECORD runxsltrequest
     FREE RECORD runxsltreply
     CALL logmsg("getClaimAsTargetMedia","Error performing media transformation",log_error)
     RETURN(false)
    ENDIF
    CALL echo("Transformation completed")
    SET longblobreply->objarray[1].longblobid = 0.0
    SET smediaxml = runxsltreply->xml
    CALL echo("Executed getClaimAsTargetMedia")
    RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo(build("Begin PFT_CLM_COMMON_SUBS.INC, version [",nullterm("RCBCLM-23004.017"),"]"))
 RECORD ecicodes(
   1 codes[*]
     2 ecirange = vc
     2 cdfmeaning = vc
     2 extension[*]
       3 fieldname = vc
       3 fieldvalue = vc
 ) WITH protect
 RECORD icdsourcevocab(
   1 icdgrouping[*]
     2 groupname = vc
     2 codes[*]
       3 vocabcd = f8
 ) WITH protect
 RECORD skipclaimdetails(
   1 claims[*]
     2 corspactivityid = f8
     2 skipinternalvalidation = i2
     2 skipexternalvalidation = i2
     2 skipmanualreview = i2
     2 claimdatalitexml = gvc
 ) WITH protect
 RECORD claimdetails(
   1 claims[*]
     2 corspactivityid = f8
 ) WITH protect
 IF ( NOT (validate(eci_cs)))
  DECLARE eci_cs = i4 WITH protect, constant(4060001)
 ENDIF
 IF ( NOT (validate(src_vocab_cs)))
  DECLARE src_vocab_cs = i4 WITH protect, constant(400)
 ENDIF
 IF ( NOT (validate(log_error)))
  DECLARE log_error = i4 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(log_warning)))
  DECLARE log_warning = i4 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(log_audit)))
  DECLARE log_audit = i4 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(log_info)))
  DECLARE log_info = i4 WITH protect, constant(3)
 ENDIF
 IF ( NOT (validate(log_debug)))
  DECLARE log_debug = i4 WITH protect, constant(4)
 ENDIF
 IF ( NOT (validate(null_f8)))
  DECLARE null_f8 = f8 WITH protect, constant(- (0.00001))
 ENDIF
 IF ( NOT (validate(null_i2)))
  DECLARE null_i2 = i2 WITH protect, constant(- (1))
 ENDIF
 IF ( NOT (validate(null_i4)))
  DECLARE null_i4 = i4 WITH protect, constant(- (1))
 ENDIF
 IF ( NOT (validate(null_dt)))
  DECLARE null_dt = q8 WITH protect, constant(0.0)
 ENDIF
 IF ( NOT (validate(null_vc)))
  DECLARE null_vc = vc WITH protect, constant("")
 ENDIF
 IF ( NOT (validate(upt_force)))
  DECLARE upt_force = i4 WITH protect, constant(- (99999))
 ENDIF
 IF ( NOT (validate(xml_encoding)))
  DECLARE xml_encoding = vc WITH protect, constant("UTF-8")
 ENDIF
 IF ( NOT (validate(claim_data_xml_flag)))
  DECLARE claim_data_xml_flag = i2 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(media_xml_flag)))
  DECLARE media_xml_flag = i2 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(manual_edits_xml_flag)))
  DECLARE manual_edits_xml_flag = i2 WITH protect, constant(3)
 ENDIF
 IF ( NOT (validate(claim_data_lite_xml_flag)))
  DECLARE claim_data_lite_xml_flag = i2 WITH protect, constant(4)
 ENDIF
 IF ( NOT (validate(validation_xml_flag)))
  DECLARE validation_xml_flag = i2 WITH protect, constant(6)
 ENDIF
 IF ( NOT (validate(not_interim)))
  DECLARE not_interim = i2 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(initial_interim)))
  DECLARE initial_interim = i2 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(continuing_interim)))
  DECLARE continuing_interim = i2 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(final_interim)))
  DECLARE final_interim = i2 WITH protect, constant(3)
 ENDIF
 IF ( NOT (validate(begin_of_code_range)))
  DECLARE begin_of_code_range = vc WITH protect, constant("BEGIN_OF_CODE_RANGE")
 ENDIF
 IF ( NOT (validate(end_of_code_range)))
  DECLARE end_of_code_range = vc WITH protect, constant("END_OF_CODE_RANGE")
 ENDIF
 IF ( NOT (validate(icd_grouper)))
  DECLARE icd_grouper = vc WITH protect, constant("ICD_GROUPER")
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  SUBROUTINE (getcodevalue(pcodeset=i4,pmeaning=vc,poptionflag=i2) =f8)
    DECLARE lcodevalue = f8 WITH private, noconstant(0.0)
    SET lcodevalue = uar_get_code_by("MEANING",value(pcodeset),value(pmeaning))
    IF (lcodevalue > 0.0)
     RETURN(lcodevalue)
    ELSE
     IF (poptionflag=1)
      CALL logmsg("getCodeValue",build("Error : Code Set [",pcodeset,"] : Meaning [",pmeaning,"]"),
       log_error)
      CALL setstatusdata(curprog,"getCodeValue",build("Error : Code Set [",pcodeset,"] : Meaning [",
        pmeaning,"]"))
      GO TO exit_script
     ELSE
      RETURN(0.0)
     ENDIF
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(getcodevaluebydisplaykey,char(128))=char(128))
  SUBROUTINE (getcodevaluebydisplaykey(pcodeset=i4,pdisplaykey=vc,poptionflag=i2) =f8)
    DECLARE lcodevalue = f8 WITH private, noconstant(0.0)
    SET lcodevalue = uar_get_code_by("DISPLAYKEY",value(pcodeset),value(pdisplaykey))
    IF (lcodevalue > 0.0)
     RETURN(lcodevalue)
    ELSE
     IF (poptionflag=1)
      CALL logmsg("getCodeValueByDisplayKey",build("Error : Code Set [",pcodeset,"] : DisplayKey [",
        pdisplaykey,"]"),log_error)
      CALL setstatusdata(curprog,"getCodeValueByDisplayKey",build("Error : Code Set [",pcodeset,
        "] : DisplayKey [",pdisplaykey,"]"))
      GO TO exit_script
     ELSEIF (poptionflag=2)
      CALL logmsg("getCodeValueByDisplayKey",build("Warning : Code Set [",pcodeset,"] : DisplayKey [",
        pdisplaykey,"]"),log_warning)
      RETURN(0.0)
     ENDIF
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(logmsg,char(128))=char(128))
  SUBROUTINE (logmsg(psubroutine=vc,pmessage=vc,plevel=i4) =null)
    DECLARE hmsg = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrep = i4 WITH protect, noconstant(0)
    DECLARE hobjarray = i4 WITH protect, noconstant(0)
    DECLARE srvstatus = i4 WITH protect, noconstant(0)
    DECLARE submit_log = i4 WITH protect, constant(4099455)
    DECLARE cs23372_failed_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",23372,"FAILED"))
    DECLARE llevel = vc WITH private, noconstant("")
    DECLARE __hpsys = i4 WITH private, noconstant(0)
    DECLARE __lpsysstat = i4 WITH private, noconstant(0)
    CASE (plevel)
     OF log_error:
      SET llevel = "ERROR"
     OF log_warning:
      SET llevel = "WARNING"
     OF log_audit:
      SET llevel = "AUDIT"
     OF log_info:
      SET llevel = "INFO"
     ELSE
      SET llevel = "DEBUG"
    ENDCASE
    IF (size(trim(psubroutine)) > 0)
     CALL echo(concat(llevel," : ",curprog," : ",psubroutine,
       "() : ",pmessage))
    ELSE
     CALL echo(concat(llevel," : ",curprog," : ",pmessage))
    ENDIF
    SET __hpsys = 0
    SET __lpsysstat = 0
    CALL uar_syscreatehandle(__hpsys,__lpsysstat)
    IF (__hpsys > 0)
     CALL uar_sysevent(__hpsys,plevel,curprog,nullterm(pmessage))
     CALL uar_sysdestroyhandle(__hpsys)
    ENDIF
    IF (plevel=log_error)
     SET hmsg = uar_srvselectmessage(submit_log)
     SET hreq = uar_srvcreaterequest(hmsg)
     SET hrep = uar_srvcreatereply(hmsg)
     SET hobjarray = uar_srvadditem(hreq,"objArray")
     SET stat = uar_srvsetdouble(hobjarray,"final_status_cd",cs23372_failed_cd)
     SET stat = uar_srvsetstring(hobjarray,"task_name",nullterm(curprog))
     SET stat = uar_srvsetstring(hobjarray,"completion_msg",nullterm(pmessage))
     SET stat = uar_srvsetdate(hobjarray,"end_dt_tm",cnvtdatetime(sysdate))
     SET stat = uar_srvsetstring(hobjarray,"current_node_name",nullterm(curnode))
     SET stat = uar_srvsetstring(hobjarray,"server_name",nullterm(build(curserver)))
     SET stat = uar_srvsetstring(hobjarray,"timer_ident",nullterm(psubroutine))
     SET srvstatus = uar_srvexecute(hmsg,hreq,hrep)
     IF (srvstatus != 0)
      CALL echo(build2("Execution of pft_save_system_activity_log was not successful"))
     ENDIF
     CALL uar_srvdestroyinstance(hreq)
     CALL uar_srvdestroyinstance(hrep)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setstatusdata,char(128))=char(128))
  SUBROUTINE (setstatusdata(pprogramname=vc(val),psubroutinename=vc(val),pmessage=vc(val)) =null)
    IF (validate(reply->pft_status_data.subeventstatus[1].programname))
     SET reply->pft_status_data.subeventstatus[1].programname = nullterm(pprogramname)
    ENDIF
    IF (validate(reply->pft_status_data.subeventstatus[1].subroutinename))
     SET reply->pft_status_data.subeventstatus[1].subroutinename = nullterm(psubroutinename)
    ENDIF
    IF (validate(reply->pft_status_data.subeventstatus[1].message))
     SET reply->pft_status_data.subeventstatus[1].message = nullterm(pmessage)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(addpftstats,char(128))=char(128))
  SUBROUTINE (addpftstats(pprogramname=vc(val),pstarttime=q8(val)) =null)
    DECLARE sindex = i4 WITH private, noconstant(0)
    DECLARE lindex = i4 WITH protect, noconstant(0)
    DECLARE statcnt = i4 WITH protect, noconstant(size(reply->pft_status_data.pft_stats,5))
    SET sindex = locateval(lindex,1,statcnt,pprogramname,reply->pft_status_data.pft_stats[lindex].
     programname)
    IF (sindex=0)
     SET statcnt += 1
     SET stat = alterlist(reply->pft_status_data.pft_stats,statcnt)
     SET reply->pft_status_data.pft_stats[statcnt].programname = pprogramname
     SET reply->pft_status_data.pft_stats[statcnt].executioncnt = 1
     SET reply->pft_status_data.pft_stats[statcnt].executiontime = datetimediff(cnvtdatetime(sysdate),
      pstarttime,5)
    ELSE
     SET reply->pft_status_data.pft_stats[sindex].executioncnt += 1
     SET reply->pft_status_data.pft_stats[sindex].executiontime += datetimediff(cnvtdatetime(sysdate),
      pstarttime,5)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(addpftstats2,char(128))=char(128))
  SUBROUTINE (addpftstats2(pprogramname=vc(val),pstarttime=q8(val),pmessage=vc(val)) =null)
    DECLARE sindex = i4 WITH private, noconstant(0)
    DECLARE lindex = i4 WITH protect, noconstant(0)
    DECLARE statcnt = i4 WITH protect, noconstant(size(reply->pft_status_data.pft_stats,5))
    SET statcnt += 1
    SET stat = alterlist(reply->pft_status_data.pft_stats,statcnt)
    SET reply->pft_status_data.pft_stats[statcnt].programname = nullterm(pprogramname)
    SET reply->pft_status_data.pft_stats[statcnt].executioncnt = 1
    SET reply->pft_status_data.pft_stats[statcnt].executiontime = datetimediff(cnvtdatetime(sysdate),
     pstarttime,5)
    SET reply->pft_status_data.pft_stats[statcnt].message = nullterm(pmessage)
  END ;Subroutine
 ENDIF
 IF (validate(getmediatypecd,char(128))=char(128))
  SUBROUTINE (getmediatypecd(pmediasubtypecd=f8) =f8)
    DECLARE retval = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM code_value_group cg,
      code_value cv
     PLAN (cg
      WHERE cg.child_code_value=pmediasubtypecd)
      JOIN (cv
      WHERE cv.code_value=cg.parent_code_value
       AND cv.code_set=21752)
     DETAIL
      retval = cg.parent_code_value
     WITH nocounter
    ;end select
    RETURN(retval)
  END ;Subroutine
 ENDIF
 IF (validate(getbilltypecd,char(128))=char(128))
  SUBROUTINE (getbilltypecd(pmediasubtypecd=f8) =f8)
    DECLARE retval = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM code_value_group cvg,
      code_value cv
     PLAN (cvg
      WHERE cvg.child_code_value=pmediasubtypecd)
      JOIN (cv
      WHERE cv.code_value=cvg.parent_code_value
       AND cv.code_set=21749)
     DETAIL
      retval = cvg.parent_code_value
     WITH nocounter
    ;end select
    RETURN(retval)
  END ;Subroutine
 ENDIF
 IF (validate(isequal,char(128))=char(128))
  SUBROUTINE isequal(damt1,damt2)
   DECLARE tmpdiff = f8 WITH private, noconstant(abs((abs(damt1) - abs(damt2))))
   IF (tmpdiff < 0.009)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(isnewclaimarchitecturemediasubtype,char(128))=char(128))
  SUBROUTINE (isnewclaimarchitecturemediasubtype(pmediasubtypecd=f8) =i2)
    DECLARE mediasubtypecdfmeaning = vc WITH private, noconstant(uar_get_code_meaning(pmediasubtypecd
      ))
    IF (mediasubtypecdfmeaning IN ("UB04", "CMS1500_0805", "837I_4010", "837P_4010", "837I_5010",
    "837P_5010", "WEB SERVICES", "CMS1500_0212"))
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(findecicodes,char(128))=char(128))
  SUBROUTINE (findecicodes(sourceidentifier=vc,icdversion=vc) =i2)
    CALL logmsg("findECICodes","ENTERING...",log_debug)
    DECLARE ecodeidx = i4 WITH protect, noconstant(0)
    DECLARE ecodeextidx = i4 WITH protect, noconstant(0)
    DECLARE icdversionind = i2 WITH protect, noconstant(false)
    DECLARE startrangeind = i2 WITH protect, noconstant(false)
    DECLARE endrangeind = i2 WITH protect, noconstant(false)
    FOR (ecodeidx = 1 TO size(ecicodes->codes,5))
      IF ( NOT (startrangeind
       AND endrangeind
       AND icdversionind))
       SET startrangeind = false
       SET endrangeind = false
       SET icdversionind = false
       FOR (ecodeextidx = 1 TO size(ecicodes->codes[ecodeidx].extension,5))
         IF ((ecicodes->codes[ecodeidx].extension[ecodeextidx].fieldname=begin_of_code_range)
          AND compareecicodes(ecicodes->codes[ecodeidx].extension[ecodeextidx].fieldvalue,
          sourceidentifier))
          SET startrangeind = true
         ELSEIF ((ecicodes->codes[ecodeidx].extension[ecodeextidx].fieldname=end_of_code_range)
          AND compareecicodes(sourceidentifier,ecicodes->codes[ecodeidx].extension[ecodeextidx].
          fieldvalue))
          SET endrangeind = true
         ELSEIF ((ecicodes->codes[ecodeidx].extension[ecodeextidx].fieldname=icd_grouper)
          AND (ecicodes->codes[ecodeidx].extension[ecodeextidx].fieldvalue=icdversion))
          SET icdversionind = true
         ENDIF
       ENDFOR
      ENDIF
    ENDFOR
    IF ( NOT (startrangeind
     AND endrangeind
     AND icdversionind))
     CALL logmsg("findECICodes","EXITING... eCode missing extensions",log_debug)
     RETURN(false)
    ENDIF
    CALL logmsg("findECICodes","EXITING...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(loadecicodes,char(128))=char(128))
  DECLARE loadecicodes(null) = i2
  SUBROUTINE loadecicodes(null)
    CALL logmsg("loadECICodes","ENTERING...",log_debug)
    DECLARE ecicnt = i4 WITH protect, noconstant(0)
    DECLARE ecodeextidx = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM code_value c,
      code_value_extension cve
     PLAN (c
      WHERE c.code_set=eci_cs
       AND c.active_ind=1
       AND c.begin_effective_dt_tm <= cnvtdatetime(sysdate)
       AND c.end_effective_dt_tm > cnvtdatetime(sysdate))
      JOIN (cve
      WHERE cve.code_value=c.code_value
       AND cve.code_set=c.code_set)
     ORDER BY c.cdf_meaning
     HEAD c.cdf_meaning
      ecicnt += 1, stat = alterlist(ecicodes->codes,ecicnt), ecicodes->codes[ecicnt].ecirange = c
      .display,
      ecicodes->codes[ecicnt].cdfmeaning = c.cdf_meaning, ecodeextidx = 0
     DETAIL
      ecodeextidx += 1, stat = alterlist(ecicodes->codes[ecicnt].extension,ecodeextidx), ecicodes->
      codes[ecicnt].extension[ecodeextidx].fieldname = cve.field_name,
      ecicodes->codes[ecicnt].extension[ecodeextidx].fieldvalue = cve.field_value
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmsg("loadECICodes","EXITING... no eCodes found",log_debug)
     RETURN(false)
    ENDIF
    CALL logmsg("loadECICodes","EXITING...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(compareecicodes,char(128))=char(128))
  SUBROUTINE (compareecicodes(lowervalue=vc,highervalue=vc) =i2)
    CALL logmsg("compareECICodes","ENTERING...",log_debug)
    DECLARE lowerbeforedecimalstring = vc WITH protect, noconstant("")
    DECLARE lowerafterdecimalstring = vc WITH protect, noconstant("")
    DECLARE lowervalueintpart = i4 WITH protect, noconstant(0)
    DECLARE lowervaluedecimalpart = i4 WITH protect, noconstant(0)
    DECLARE lowervaluedecimalstart = i4 WITH protect, noconstant(0)
    DECLARE islowerdecimalpresent = i2 WITH protect, noconstant(false)
    DECLARE lowercharind = i2 WITH protect, noconstant(true)
    DECLARE lowernumericind = i2 WITH protect, noconstant(true)
    DECLARE lowercharidx = i4 WITH protect, noconstant(1)
    DECLARE lowernumericidx = i4 WITH protect, noconstant(0)
    DECLARE higherbeforedecimalstring = vc WITH protect, noconstant("")
    DECLARE higherafterdecimalstring = vc WITH protect, noconstant("")
    DECLARE highervalueintpart = i4 WITH protect, noconstant(0)
    DECLARE highervaluedecimalpart = i4 WITH protect, noconstant(0)
    DECLARE highervaluedecimalstart = i4 WITH protect, noconstant(0)
    DECLARE ishigherdecimalpresent = i2 WITH protect, noconstant(false)
    DECLARE highercharind = i2 WITH protect, noconstant(true)
    DECLARE highernumericind = i2 WITH protect, noconstant(true)
    DECLARE highercharidx = i4 WITH protect, noconstant(1)
    DECLARE highernumericidx = i4 WITH protect, noconstant(0)
    DECLARE charatpos = vc WITH protect, noconstant("")
    SET lowervalue = cnvtupper(lowervalue)
    SET highervalue = cnvtupper(highervalue)
    WHILE (lowercharind)
     SET charatpos = substring(lowercharidx,1,lowervalue)
     IF (charatpos >= char(65)
      AND charatpos <= char(90))
      SET lowerbeforedecimalstring = concat(lowerbeforedecimalstring,charatpos)
      SET lowercharidx += 1
     ELSE
      SET lowercharind = false
     ENDIF
    ENDWHILE
    WHILE (highercharind)
     SET charatpos = substring(highercharidx,1,highervalue)
     IF (charatpos >= char(65)
      AND charatpos <= char(90))
      SET higherbeforedecimalstring = concat(higherbeforedecimalstring,charatpos)
      SET highercharidx += 1
     ELSE
      SET highercharind = false
     ENDIF
    ENDWHILE
    IF (lowerbeforedecimalstring < higherbeforedecimalstring)
     RETURN(true)
    ELSEIF (lowerbeforedecimalstring=higherbeforedecimalstring)
     SET lowervaluedecimalstart = findstring(".",lowervalue,(lowercharidx+ 1),0)
     SET highervaluedecimalstart = findstring(".",highervalue,(highercharidx+ 1),0)
     IF (lowervaluedecimalstart > 0)
      SET lowervalueintpart = cnvtint(trim(substring(lowercharidx,(lowervaluedecimalstart -
         lowercharidx),lowervalue),3))
     ELSE
      SET lowervalueintpart = cnvtint(trim(substring(lowercharidx,(size(lowervalue,1) - (lowercharidx
          - 1)),lowervalue),3))
     ENDIF
     IF (highervaluedecimalstart > 0)
      SET highervalueintpart = cnvtint(trim(substring(highercharidx,(highervaluedecimalstart -
         highercharidx),highervalue),3))
     ELSE
      SET highervalueintpart = cnvtint(trim(substring(highercharidx,(size(highervalue,1) - (
         highercharidx - 1)),highervalue),3))
     ENDIF
     IF (lowervalueintpart < highervalueintpart)
      RETURN(true)
     ELSEIF (lowervalueintpart=highervalueintpart)
      IF (lowervaluedecimalstart > 0
       AND highervaluedecimalstart > 0)
       SET lowernumericidx = (lowervaluedecimalstart+ 1)
       WHILE (lowernumericind)
        SET charatpos = substring(lowernumericidx,1,lowervalue)
        IF (charatpos >= char(48)
         AND charatpos <= char(57))
         SET lowernumericidx += 1
        ELSE
         SET lowernumericind = false
        ENDIF
       ENDWHILE
       SET lowervaluedecimalpart = cnvtint(trim(substring((lowervaluedecimalstart+ 1),((
          lowernumericidx - 1) - lowervaluedecimalstart),lowervalue),3))
       IF ((lowernumericidx=(lowervaluedecimalstart+ 1)))
        SET lowerafterdecimalstring = substring((lowervaluedecimalstart+ 1),(size(lowervalue,1) -
         lowervaluedecimalstart),lowervalue)
       ELSE
        SET islowerdecimalpresent = true
        SET lowerafterdecimalstring = substring(((lowervaluedecimalstart+ size(trim(cnvtstring(
            lowervaluedecimalpart),3),1))+ 1),(size(lowervalue,1) - (lowervaluedecimalstart+ size(
          trim(cnvtstring(lowervaluedecimalpart),3)))),lowervalue)
       ENDIF
       SET highernumericidx = (highervaluedecimalstart+ 1)
       WHILE (highernumericind)
        SET charatpos = substring(highernumericidx,1,highervalue)
        IF (charatpos >= char(48)
         AND charatpos <= char(57))
         SET highernumericidx += 1
        ELSE
         SET highernumericind = false
        ENDIF
       ENDWHILE
       SET highervaluedecimalpart = cnvtint(trim(substring((highervaluedecimalstart+ 1),((
          highernumericidx - 1) - highervaluedecimalstart),highervalue),3))
       IF ((highernumericidx=(highervaluedecimalstart+ 1)))
        SET higherafterdecimalstring = substring((highervaluedecimalstart+ 1),(size(highervalue,1) -
         highervaluedecimalstart),highervalue)
       ELSE
        SET ishigherdecimalpresent = true
        SET higherafterdecimalstring = substring(((highervaluedecimalstart+ size(trim(cnvtstring(
            highervaluedecimalpart),3),1))+ 1),(size(highervalue,1) - (highervaluedecimalstart+ size(
          trim(cnvtstring(highervaluedecimalpart),3)))),highervalue)
       ENDIF
       IF (islowerdecimalpresent
        AND ishigherdecimalpresent)
        IF (lowervaluedecimalpart < highervaluedecimalpart)
         RETURN(true)
        ELSEIF (lowervaluedecimalpart=highervaluedecimalpart)
         IF (lowerafterdecimalstring <= higherafterdecimalstring)
          RETURN(true)
         ELSE
          RETURN(false)
         ENDIF
        ENDIF
       ELSEIF (islowerdecimalpresent
        AND  NOT (ishigherdecimalpresent))
        IF (size(trim(higherafterdecimalstring,3),1) > 0)
         RETURN(true)
        ELSEIF (size(trim(higherafterdecimalstring,3),1)=0)
         RETURN(false)
        ENDIF
       ELSEIF ( NOT (islowerdecimalpresent)
        AND ishigherdecimalpresent)
        IF (size(trim(lowerafterdecimalstring,3),1) > 0)
         RETURN(false)
        ELSEIF (size(trim(lowerafterdecimalstring,3),1)=0)
         RETURN(true)
        ENDIF
       ELSE
        IF (lowerafterdecimalstring <= higherafterdecimalstring)
         RETURN(true)
        ELSE
         RETURN(false)
        ENDIF
       ENDIF
      ELSEIF (lowervaluedecimalstart > 0
       AND  NOT (highervaluedecimalstart > 0))
       RETURN(false)
      ELSEIF ( NOT (lowervaluedecimalstart > 0)
       AND highervaluedecimalstart > 0)
       RETURN(true)
      ELSE
       RETURN(true)
      ENDIF
     ELSE
      RETURN(false)
     ENDIF
    ELSE
     RETURN(false)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(retrieveicdsourcevocab,char(128))=char(128))
  SUBROUTINE (retrieveicdsourcevocab(icdgroupname=vc) =i4)
    CALL logmsg("retrieveICDSourceVocab","ENTERING...",log_debug)
    DECLARE icdcnt = i4 WITH protect, noconstant(0)
    DECLARE icdgroupingcnt = i4 WITH protect, noconstant(0)
    DECLARE regex = vc WITH protect, noconstant("")
    SET icdgroupingcnt = (size(icdsourcevocab->icdgrouping,5)+ 1)
    SET stat = alterlist(icdsourcevocab->icdgrouping,icdgroupingcnt)
    SET icdsourcevocab->icdgrouping[icdgroupingcnt].groupname = icdgroupname
    SET regex = concat("*",trim(icdgroupname),"*")
    SELECT INTO "nl:"
     FROM code_value c
     WHERE c.code_set=src_vocab_cs
      AND c.active_ind=1
      AND c.begin_effective_dt_tm <= cnvtdatetime(sysdate)
      AND c.end_effective_dt_tm > cnvtdatetime(sysdate)
      AND c.cdf_meaning=patstring(regex)
     ORDER BY c.cdf_meaning
     DETAIL
      icdcnt += 1, stat = alterlist(icdsourcevocab->icdgrouping[icdgroupingcnt].codes,icdcnt),
      icdsourcevocab->icdgrouping[icdgroupingcnt].codes[icdcnt].vocabcd = c.code_value
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmsg("retrieveICDSourceVocab","EXITING...",log_debug)
     RETURN(0)
    ENDIF
    CALL logmsg("retrieveICDSourceVocab","EXITING...",log_debug)
    RETURN(icdgroupingcnt)
  END ;Subroutine
 ENDIF
 IF (validate(getclaimdatalitexml,char(128))=char(128))
  SUBROUTINE (getclaimdatalitexml(claimdetails=vc(ref)) =i2)
    CALL logmsg("getClaimDataLiteXML","ENTERING...",log_debug)
    DECLARE index = i4 WITH protect, noconstant(0)
    DECLARE clmcount = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM br_long_blob_reltn blb,
      long_blob lb
     PLAN (blb
      WHERE expand(index,1,size(claimdetails->claims,5),blb.corsp_activity_id,claimdetails->claims[
       index].corspactivityid)
       AND blb.data_type_flag=claim_data_lite_xml_flag
       AND blb.active_ind=true)
      JOIN (lb
      WHERE lb.long_blob_id=blb.long_blob_id
       AND lb.active_ind=true)
     DETAIL
      clmcount += 1
      IF (mod(clmcount,10)=1)
       stat = alterlist(skipclaimdetails->claims,(clmcount+ 9))
      ENDIF
      outbuf = "", blobsize = blobgetlen(lb.long_blob), stat = memrealloc(outbuf,1,build("C",blobsize
        )),
      totlen = blobget(outbuf,0,lb.long_blob), skipclaimdetails->claims[clmcount].corspactivityid =
      blb.corsp_activity_id, skipclaimdetails->claims[clmcount].claimdatalitexml = notrim(outbuf)
     WITH nocounter, rdbarrayfetch = 1
    ;end select
    SET stat = alterlist(skipclaimdetails->claims,clmcount)
    IF (size(skipclaimdetails->claims,5)=0)
     CALL logmsg("getClaimDataLiteXML","NO qualified claims to get the claimdata lite",log_debug)
     RETURN(false)
    ENDIF
    CALL logmsg("getClaimDataLiteXML","EXITING...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getpcmpreferenceforclaimvalidations,char(128))=char(128))
  SUBROUTINE (getpcmpreferenceforclaimvalidations(skipclaimdetails=vc(ref)) =i2)
    CALL logmsg("getPCMPreferenceForClaimValidations","ENTERING...",log_debug)
    DECLARE hroot = i4 WITH protect, noconstant(0)
    DECLARE hxmlfile = i4 WITH protect, noconstant(0)
    DECLARE hcontextxml = i4 WITH protect, noconstant(0)
    DECLARE index = i4 WITH protect, noconstant(1)
    IF (size(skipclaimdetails->claims,5)=0)
     CALL logmsg("getPCMPreferenceForClaimValidations",
      "No valid claims to extract the skip claim preferences",log_debug)
     RETURN(false)
    ENDIF
    FOR (index = 1 TO size(skipclaimdetails->claims,5))
     SET hroot = parsexmlbuffer(skipclaimdetails->claims[index].claimdatalitexml,hxmlfile)
     IF (((hroot=0) OR (hxmlfile=0)) )
      CALL uar_xml_closefile(hxmlfile)
     ELSE
      SET hcontextxml = getclaimdatacontexthandle(hroot)
      IF (hcontextxml != 0)
       SET skipclaimdetails->claims[index].skipinternalvalidation = evaluate(getchildnodevalue(
         hcontextxml,"skipInternalValidation"),"TRUE",1,0)
       SET skipclaimdetails->claims[index].skipexternalvalidation = evaluate(getchildnodevalue(
         hcontextxml,"skipExternalValidation"),"TRUE",1,0)
       SET skipclaimdetails->claims[index].skipmanualreview = evaluate(getchildnodevalue(hcontextxml,
         "skipManualReview"),"TRUE",1,0)
      ENDIF
      CALL uar_xml_closefile(hxmlfile)
     ENDIF
    ENDFOR
    CALL logmsg("getPCMPreferenceForClaimValidations","EXITING...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(setpcmpreferencesforpreviewclaims,char(128))=char(128))
  SUBROUTINE (setpcmpreferencesforpreviewclaims(reply=vc(ref)) =null)
    CALL logmsg("setPCMPreferencesforPreviewClaims","ENTERING...",log_debug)
    DECLARE counter = i4 WITH protect, noconstant(0)
    DECLARE index = i4 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM (dummyt d1  WITH seq = value(size(reply->claims,5)))
     WHERE (reply->claims[d1.seq].corspactivityid != 0)
     DETAIL
      counter += 1
      IF (mod(counter,10)=1)
       stat = alterlist(claimdetails->claims,(counter+ 9))
      ENDIF
      claimdetails->claims[counter].corspactivityid = reply->claims[d1.seq].corspactivityid
     WITH nocounter
    ;end select
    SET stat = alterlist(claimdetails->claims,counter)
    IF (getclaimdatalitexml(claimdetails))
     IF (getpcmpreferenceforclaimvalidations(skipclaimdetails))
      SELECT INTO "nl:"
       FROM (dummyt d2  WITH seq = value(size(skipclaimdetails->claims,5)))
       WHERE expand(index,1,size(reply->claims,5),skipclaimdetails->claims[d2.seq].corspactivityid,
        reply->claims[index].corspactivityid)
       DETAIL
        reply->claims[index].skipinternalvalidation = skipclaimdetails->claims[d2.seq].
        skipinternalvalidation, reply->claims[index].skipexternalvalidation = skipclaimdetails->
        claims[d2.seq].skipexternalvalidation, reply->claims[index].skipmanualreview =
        skipclaimdetails->claims[d2.seq].skipmanualreview
       WITH nocounter
      ;end select
     ENDIF
    ELSE
     CALL logmsg("setPCMPreferencesforPreviewClaims",
      "There are no valid records to fill the preferences",log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 CALL echo(build("End PFT_CLM_COMMON_SUBS.INC, version [",nullterm("RCBCLM-23004.017"),"]"))
 IF ( NOT (validate(crossoverdelayparams)))
  RECORD crossoverdelayparams(
    1 loadedind = i2
    1 billingentity[*]
      2 billingentityid = f8
      2 preferglobalholddays = i2
      2 globalholddays = i4
      2 rule[*]
        3 primaryhealthplanid = f8
        3 secondaryhealthplanid = f8
        3 crossoverdelay = i4
        3 billtypecd = f8
  )
 ENDIF
 IF ( NOT (validate(cs25872_xovrpayment_cd)))
  DECLARE cs25872_xovrpayment_cd = f8 WITH protect, constant(getcodevalue(25872,"XOVRPAYMENT",1))
 ENDIF
 IF ( NOT (validate(cs26052_healthplan_cd)))
  DECLARE cs26052_healthplan_cd = f8 WITH protect, constant(getcodevalue(26052,"HEALTHPLAN",1))
 ENDIF
 IF ( NOT (validate(cs26052_sechealthpln_cd)))
  DECLARE cs26052_sechealthpln_cd = f8 WITH protect, constant(getcodevalue(26052,"SECHEALTHPLN",1))
 ENDIF
 IF ( NOT (validate(cs26052_days_thresh_cd)))
  DECLARE cs26052_days_thresh_cd = f8 WITH protect, constant(getcodevalue(26052,"DAYS_THRESH",1))
 ENDIF
 IF ( NOT (validate(cs26052_billtype_cd)))
  DECLARE cs26052_billtype_cd = f8 WITH protect, constant(getcodevalue(26052,"BILLTYPE",1))
 ENDIF
 IF ( NOT (validate(cs26052_useglobxover_cd)))
  DECLARE cs26052_useglobxover_cd = f8 WITH protect, constant(getcodevalue(26052,"USEGLOBXOVER",1))
 ENDIF
 IF (validate(getcrossoverdelaythreshold,char(128))=char(128))
  SUBROUTINE (getcrossoverdelaythreshold(pbillingentityid=f8(val),pprimaryhealthplanid=f8(val),
   psecondaryhealthplanid=f8(val),pbilltypecd=f8(val)) =null)
    CALL logmsg("getCrossoverDelayThreshold","Entering...",log_debug)
    DECLARE beidx = i4 WITH protect, noconstant(0)
    DECLARE lidx = i4 WITH protect, noconstant(0)
    DECLARE xidx = i4 WITH protect, noconstant(0)
    IF (validate(crossoverdelayparams->loadedind,0)=0)
     CALL loadcrossoverdelaythresholds(null)
    ENDIF
    SET beidx = locateval(lidx,1,size(crossoverdelayparams->billingentity,5),pbillingentityid,
     crossoverdelayparams->billingentity[lidx].billingentityid)
    IF (beidx)
     IF (crossoverdelayparams->billingentity[beidx].preferglobalholddays)
      RETURN(crossoverdelayparams->billingentity[beidx].globalholddays)
     ELSE
      FOR (xidx = 1 TO size(crossoverdelayparams->billingentity[beidx].rule,5))
        IF ((pprimaryhealthplanid=crossoverdelayparams->billingentity[beidx].rule[xidx].
        primaryhealthplanid)
         AND (psecondaryhealthplanid=crossoverdelayparams->billingentity[beidx].rule[xidx].
        secondaryhealthplanid)
         AND (((pbilltypecd=crossoverdelayparams->billingentity[beidx].rule[xidx].billtypecd)) OR (((
        (crossoverdelayparams->billingentity[beidx].rule[xidx].billtypecd=- (1))) OR ((
        crossoverdelayparams->billingentity[beidx].rule[xidx].billtypecd=0))) )) )
         RETURN(crossoverdelayparams->billingentity[beidx].rule[xidx].crossoverdelay)
        ENDIF
      ENDFOR
     ENDIF
    ENDIF
    RETURN(0)
  END ;Subroutine
 ENDIF
 IF (validate(loadcrossoverdelaythresholds,char(128))=char(128))
  DECLARE loadcrossoverdelaythresholds(null) = i2
  SUBROUTINE loadcrossoverdelaythresholds(null)
    CALL logmsg("loadCrossoverDelayThresholds","Entering...",log_debug)
    DECLARE beidx = i4 WITH protect, noconstant(0)
    DECLARE becnt = i4 WITH protect, noconstant(0)
    DECLARE phpcnt = i4 WITH protect, noconstant(0)
    DECLARE shpcnt = i4 WITH protect, noconstant(0)
    SET crossoverdelayparams->loadedind = true
    SELECT INTO "nl:"
     FROM pft_hold ph,
      pft_hold_criteria phc,
      pft_hold_criteria phc2,
      pft_hold_criteria phc3,
      pft_hold_criteria phc4,
      pft_hold_criteria phc5
     PLAN (ph
      WHERE ph.parent_entity_name="BILLING_ENTITY"
       AND ph.hold_reason_cd=cs25872_xovrpayment_cd
       AND ph.active_ind=1)
      JOIN (phc
      WHERE phc.pft_hold_id=ph.pft_hold_id
       AND phc.hold_criteria_cd=cs26052_healthplan_cd
       AND phc.active_ind=1)
      JOIN (phc2
      WHERE phc2.pft_hold_id=ph.pft_hold_id
       AND phc2.hold_criteria_cd=cs26052_sechealthpln_cd
       AND phc2.active_ind=1)
      JOIN (phc3
      WHERE phc3.pft_hold_id=ph.pft_hold_id
       AND phc3.hold_criteria_cd=cs26052_days_thresh_cd
       AND phc3.active_ind=1)
      JOIN (phc4
      WHERE (phc4.pft_hold_id= Outerjoin(ph.pft_hold_id))
       AND (phc4.hold_criteria_cd= Outerjoin(cs26052_billtype_cd))
       AND (phc4.active_ind= Outerjoin(1)) )
      JOIN (phc5
      WHERE (phc5.pft_hold_id= Outerjoin(ph.pft_hold_id))
       AND (phc5.hold_criteria_cd= Outerjoin(cs26052_useglobxover_cd))
       AND (phc5.active_ind= Outerjoin(1)) )
     ORDER BY ph.parent_entity_id
     HEAD ph.parent_entity_id
      beidx = 0
      IF (size(crossoverdelayparams->billingentity,5))
       beidx = locateval(beidx,1,size(crossoverdelayparams->billingentity,5),ph.parent_entity_id,
        crossoverdelayparams->billingentity[beidx].billingentityid)
      ENDIF
      IF (beidx=0)
       beidx = (size(crossoverdelayparams->billingentity,5)+ 1), stat = alterlist(
        crossoverdelayparams->billingentity,beidx), crossoverdelayparams->billingentity[beidx].
       billingentityid = ph.parent_entity_id,
       hpcnt = 0
      ENDIF
     DETAIL
      rulecnt = (size(crossoverdelayparams->billingentity[beidx].rule,5)+ 1), stat = alterlist(
       crossoverdelayparams->billingentity[beidx].rule,rulecnt), crossoverdelayparams->billingentity[
      beidx].rule[rulecnt].primaryhealthplanid = cnvtreal(phc.hold_criteria),
      crossoverdelayparams->billingentity[beidx].rule[rulecnt].secondaryhealthplanid = cnvtreal(phc2
       .hold_criteria), crossoverdelayparams->billingentity[beidx].rule[rulecnt].crossoverdelay =
      cnvtint(phc3.hold_criteria), crossoverdelayparams->billingentity[beidx].rule[rulecnt].
      billtypecd = cnvtreal(phc4.hold_criteria)
      IF (cnvtreal(phc.hold_criteria)=0.0
       AND cnvtreal(phc2.hold_criteria)=0.0)
       crossoverdelayparams->billingentity[beidx].globalholddays = cnvtint(phc3.hold_criteria),
       crossoverdelayparams->billingentity[beidx].preferglobalholddays = cnvtint(phc5.hold_criteria)
      ENDIF
     FOOT  ph.parent_entity_id
      null
     WITH nocounter
    ;end select
    IF (validate(debug,0)=1)
     CALL echorecord(crossoverdelayparams)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo("End including PFT_CLM_XOVER_THRESHOLD_SUBS.INC")
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(cs18935_readysubmit)))
  DECLARE cs18935_readysubmit = f8 WITH protect, constant(getcodevalue(18935,"READYSUBMIT",1))
 ENDIF
 IF ( NOT (validate(cs18935_submitted)))
  DECLARE cs18935_submitted = f8 WITH protect, constant(getcodevalue(18935,"SUBMITTED",1))
 ENDIF
 IF ( NOT (validate(cs18935_transmitted)))
  DECLARE cs18935_transmitted = f8 WITH protect, constant(getcodevalue(18935,"TRANSMITTED",1))
 ENDIF
 IF ( NOT (validate(cs18935_pending)))
  DECLARE cs18935_pending = f8 WITH protect, constant(getcodevalue(18935,"PENDING",1))
 ENDIF
 IF ( NOT (validate(cs18935_rejected)))
  DECLARE cs18935_rejected = f8 WITH protect, constant(getcodevalue(18935,"REJECTED",1))
 ENDIF
 IF ( NOT (validate(cs18935_deniedreview)))
  DECLARE cs18935_deniedreview = f8 WITH protect, constant(getcodevalue(18935,"DENIEDREVIEW",1))
 ENDIF
 IF ( NOT (validate(cs18935_submitbyasb)))
  DECLARE cs18935_submitbyasb = f8 WITH protect, constant(getcodevalue(18935,"SUBMITBYASB",1))
 ENDIF
 IF ( NOT (validate(cs18935_transbyasb)))
  DECLARE cs18935_transbyasb = f8 WITH protect, constant(getcodevalue(18935,"TRANSBYASB",1))
 ENDIF
 IF ( NOT (validate(cs18935_transxovrpay)))
  DECLARE cs18935_transxovrpay = f8 WITH protect, constant(getcodevalue(18935,"TRANSXOVRPAY",1))
 ENDIF
 IF ( NOT (validate(cs28421_pendingrebill_cd)))
  DECLARE cs28421_pendingrebill_cd = f8 WITH protect, constant(getcodevalue(28421,"PENDREBILL",2))
 ENDIF
 IF ( NOT (validate(billed_claim_status_count)))
  DECLARE billed_claim_status_count = i4 WITH protect, constant(10)
 ENDIF
 IF ( NOT (validate(billedclaimstatuslist->statuses)))
  FREE RECORD billedclaimstatuslist
  RECORD billedclaimstatuslist(
    1 statuses[*]
      2 status = f8
  )
  SET stat = alterlist(billedclaimstatuslist->statuses,billed_claim_status_count)
  SET billedclaimstatuslist->statuses[1].status = cs18935_readysubmit
  SET billedclaimstatuslist->statuses[2].status = cs18935_submitted
  SET billedclaimstatuslist->statuses[3].status = cs18935_transmitted
  SET billedclaimstatuslist->statuses[4].status = cs18935_pending
  SET billedclaimstatuslist->statuses[5].status = cs18935_deniedreview
  SET billedclaimstatuslist->statuses[6].status = cs18935_rejected
  SET billedclaimstatuslist->statuses[7].status = cs18935_submitbyasb
  SET billedclaimstatuslist->statuses[8].status = cs18935_transbyasb
  SET billedclaimstatuslist->statuses[9].status = cs18935_transxovrpay
  SET billedclaimstatuslist->statuses[10].status = cs28421_pendingrebill_cd
 ENDIF
 IF (validate(isbilledstatus,char(128))=char(128))
  SUBROUTINE (isbilledstatus(billstatuscd=f8) =i2)
   DECLARE statusidx = i4 WITH protect, noconstant(0)
   IF (locateval(statusidx,1,size(billedclaimstatuslist,5),billedstatuscd,billedclaimstatuslist->
    statuses[statusidx].status) > 0)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(iscancelablestatus,char(128))=char(128))
  SUBROUTINE (iscancelablestatus(billstatuscd=f8) =i2)
   IF (((billstatuscd=cs18935_readysubmit) OR (((billstatuscd=cs18935_submitted) OR (((billstatuscd=
   cs18935_transmitted) OR (((billstatuscd=cs18935_pending) OR (((billstatuscd=cs18935_rejected) OR (
   ((billstatuscd=cs18935_transbyasb) OR (((billstatuscd=cs18935_submitbyasb) OR (((billstatuscd=
   cs18935_transxovrpay) OR (billstatuscd=cs28421_pendingrebill_cd)) )) )) )) )) )) )) )) )
    RETURN(true)
   ENDIF
   RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ( NOT (validate(entity_account)))
  DECLARE entity_account = vc WITH constant("ACCOUNT")
 ENDIF
 IF ( NOT (validate(entity_fin_encounter)))
  DECLARE entity_fin_encounter = vc WITH constant("ENCOUNTER")
 ENDIF
 IF ( NOT (validate(entity_balance)))
  DECLARE entity_balance = vc WITH constant("BO_HP_RELTN")
 ENDIF
 IF ( NOT (validate(entity_pft_encounter)))
  DECLARE entity_pft_encounter = vc WITH constant("PFT_ENCNTR")
 ENDIF
 IF ( NOT (validate(entity_person)))
  DECLARE entity_person = vc WITH constant("PERSON")
 ENDIF
 IF ( NOT (validate(entity_bill_record)))
  DECLARE entity_bill_record = vc WITH constant("BILL_RECORD")
 ENDIF
 IF ( NOT (validate(entity_transaction)))
  DECLARE entity_transaction = vc WITH constant("TRANSACTION")
 ENDIF
 IF ( NOT (validate(reltn_account)))
  DECLARE reltn_account = vc WITH constant("ACCOUNT")
 ENDIF
 IF ( NOT (validate(reltn_source_account)))
  DECLARE reltn_source_account = vc WITH constant("SOURCE_ACCOUNT")
 ENDIF
 IF ( NOT (validate(reltn_target_account)))
  DECLARE reltn_target_account = vc WITH constant("TARGET_ACCOUNT")
 ENDIF
 IF ( NOT (validate(reltn_fin_encounter)))
  DECLARE reltn_fin_encounter = vc WITH constant("FIN_ENCOUNTER")
 ENDIF
 IF ( NOT (validate(reltn_source_fin_encounter)))
  DECLARE reltn_source_fin_encounter = vc WITH constant("SOURCE_FIN_ENCOUNTER")
 ENDIF
 IF ( NOT (validate(reltn_target_fin_encounter)))
  DECLARE reltn_target_fin_encounter = vc WITH constant("TARGET_FIN_ENCOUNTER")
 ENDIF
 IF ( NOT (validate(reltn_balance)))
  DECLARE reltn_balance = vc WITH constant("BALANCE")
 ENDIF
 IF ( NOT (validate(reltn_source_balance)))
  DECLARE reltn_source_balance = vc WITH constant("SOURCE_BALANCE")
 ENDIF
 IF ( NOT (validate(reltn_target_balance)))
  DECLARE reltn_target_balance = vc WITH constant("TARGET_BALANCE")
 ENDIF
 IF ( NOT (validate(reltn_person)))
  DECLARE reltn_person = vc WITH constant("RELTN_PERSON")
 ENDIF
 IF ( NOT (validate(reltn_bill_record)))
  DECLARE reltn_bill_record = vc WITH constant("RELTN_BILL_RECORD")
 ENDIF
 IF ( NOT (validate(reltn_transaction)))
  DECLARE reltn_transaction = vc WITH constant("RELTN_TRANSACTION")
 ENDIF
 IF ( NOT (validate(cs18669_activity_cd)))
  DECLARE cs18669_activity_cd = f8 WITH constant(getcodevalue(18669,"ACTIVITY",0))
 ENDIF
 IF ( NOT (validate(cs18689_account_combine_cd)))
  DECLARE cs18689_account_combine_cd = f8 WITH constant(getcodevalue(18689,"ACCTCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_account_uncombine_cd)))
  DECLARE cs18689_account_uncombine_cd = f8 WITH constant(getcodevalue(18689,"ACCTUNCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_encounter_combine_cd)))
  DECLARE cs18689_encounter_combine_cd = f8 WITH constant(getcodevalue(18689,"ENCNTRCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_encounter_uncombine_cd)))
  DECLARE cs18689_encounter_uncombine_cd = f8 WITH constant(getcodevalue(18689,"ENCNTRUNCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_encounter_move_cd)))
  DECLARE cs18689_encounter_move_cd = f8 WITH constant(getcodevalue(18689,"ENCNTRMOVE",0))
 ENDIF
 IF ( NOT (validate(cs18689_transferbal_cd)))
  DECLARE cs18689_transferbal_cd = f8 WITH constant(getcodevalue(18689,"TRANSFERBAL",0))
 ENDIF
 IF ( NOT (validate(cs18689_balstatchg_cd)))
  DECLARE cs18689_balstatchg_cd = f8 WITH constant(getcodevalue(18689,"BALSTATCHG",0))
 ENDIF
 IF ( NOT (validate(cs18689_fincmb_cd)))
  DECLARE cs18689_fincmb_cd = f8 WITH constant(getcodevalue(18689,"FINCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_finuncmb_cd)))
  DECLARE cs18689_finuncmb_cd = f8 WITH constant(getcodevalue(18689,"FINUNCMB",0))
 ENDIF
 IF ( NOT (validate(cs29421_statuscode)))
  DECLARE cs29421_statuscode = f8 WITH protect, constant(uar_get_code_by("MEANING",29421,"STATUSCODE"
    ))
 ENDIF
 IF ( NOT (validate(cs18689_formal_pay_plan_apply_cd)))
  DECLARE cs18689_formal_pay_plan_apply_cd = f8 WITH constant(getcodevalue(18689,"FPPAPPLY",0))
 ENDIF
 IF ( NOT (validate(cs18689_formal_pay_plan_modify_cd)))
  DECLARE cs18689_formal_pay_plan_modify_cd = f8 WITH constant(getcodevalue(18689,"FPPMODIFY",0))
 ENDIF
 IF ( NOT (validate(cs18689_formal_pay_plan_remove_cd)))
  DECLARE cs18689_formal_pay_plan_remove_cd = f8 WITH constant(getcodevalue(18689,"FPPREMOVE",0))
 ENDIF
 IF ( NOT (validate(cs18689_assign_to_agency_cd)))
  DECLARE cs18689_assign_to_agency_cd = f8 WITH constant(getcodevalue(18689,"ADDCOLAGENCY",0))
 ENDIF
 IF ( NOT (validate(cs18689_remove_from_agency_cd)))
  DECLARE cs18689_remove_from_agency_cd = f8 WITH constant(getcodevalue(18689,"RMVCOLAGENCY",0))
 ENDIF
 IF ( NOT (validate(cs18689_move_charges)))
  DECLARE cs18689_move_charges = f8 WITH constant(getcodevalue(18689,"MOVECHARGES",0))
 ENDIF
 IF ( NOT (validate(cs18689_redistribute_cd)))
  DECLARE cs18689_redistribute_cd = f8 WITH constant(getcodevalue(18689,"REDISTRIBUTE",0))
 ENDIF
 IF ( NOT (validate(cs18689_payment_cd)))
  DECLARE cs18689_payment_cd = f8 WITH constant(getcodevalue(18689,"PAYMENT",0))
 ENDIF
 IF ( NOT (validate(attr_account_number)))
  DECLARE attr_account_number = vc WITH protect, constant("accountNumber")
 ENDIF
 IF ( NOT (validate(attr_account_description)))
  DECLARE attr_account_description = vc WITH protect, constant("accountDescription")
 ENDIF
 IF ( NOT (validate(attr_fin_encounter_number)))
  DECLARE attr_fin_encounter_number = vc WITH protect, constant("encounterNumber")
 ENDIF
 IF ( NOT (validate(attr_bal_health_plan)))
  DECLARE attr_bal_health_plan = vc WITH protect, constant("healthPlan")
 ENDIF
 IF ( NOT (validate(attr_bal_priority_seq)))
  DECLARE attr_bal_priority_seq = vc WITH protect, constant("prioritySeq")
 ENDIF
 IF ( NOT (validate(attr_bal_type)))
  DECLARE attr_bal_type = vc WITH protect, constant("balanceType")
 ENDIF
 IF ( NOT (validate(attr_bal_chargegroup)))
  DECLARE attr_bal_chargegroup = vc WITH protect, constant("chargeGroup")
 ENDIF
 IF ( NOT (validate(attr_bal_transfer_amount)))
  DECLARE attr_bal_transfer_amount = vc WITH protect, constant("transferAmount")
 ENDIF
 IF ( NOT (validate(attr_bal_transfer_reason)))
  DECLARE attr_bal_transfer_reason = vc WITH protect, constant("transferReason")
 ENDIF
 IF ( NOT (validate(attr_bal_orig_status)))
  DECLARE attr_bal_orig_status = vc WITH protect, constant("originalBalanceStatus")
 ENDIF
 IF ( NOT (validate(attr_bal_new_status)))
  DECLARE attr_bal_new_status = vc WITH protect, constant("newBalanceStatus")
 ENDIF
 IF ( NOT (validate(attr_bal_is_selfpay_ind)))
  DECLARE attr_bal_is_selfpay_ind = vc WITH protect, constant("isSelfPay")
 ENDIF
 IF ( NOT (validate(attr_total_plan_amount)))
  DECLARE attr_total_plan_amount = vc WITH protect, constant("totalPlanAmount")
 ENDIF
 IF ( NOT (validate(attr_installment_amount)))
  DECLARE attr_installment_amount = vc WITH protect, constant("installmentAmount")
 ENDIF
 IF ( NOT (validate(attr_no_installments)))
  DECLARE attr_no_installments = vc WITH protect, constant("noInstallments")
 ENDIF
 IF ( NOT (validate(attr_cycle_length)))
  DECLARE attr_cycle_length = vc WITH protect, constant("cycleLength")
 ENDIF
 IF ( NOT (validate(attr_collection_agency)))
  DECLARE attr_collection_agency = vc WITH protect, constant("collectionAgency")
 ENDIF
 IF ( NOT (validate(attr_bad_debt_amount)))
  DECLARE attr_bad_debt_amount = vc WITH protect, constant("badDebtAmount")
 ENDIF
 IF ( NOT (validate(attr_number_of_charges)))
  DECLARE attr_number_of_charges = vc WITH protect, constant("numberOfCharges")
 ENDIF
 IF ( NOT (validate(attr_original_owner)))
  DECLARE attr_original_owner = vc WITH protect, constant("originalOwner")
 ENDIF
 IF ( NOT (validate(attr_redistributed_prsnl)))
  DECLARE attr_redistributed_prsnl = vc WITH protect, constant("redistributedPrsnl")
 ENDIF
 IF ( NOT (validate(attr_contributor_system_cd)))
  DECLARE attr_contributor_system_cd = vc WITH protect, constant("ContributorSystemCd")
 ENDIF
 IF ( NOT (validate(attr_workflow_status)))
  DECLARE attr_workflow_status = vc WITH protect, constant("workflowStatus")
 ENDIF
 IF ( NOT (validate(attr_cancel_pending_trans)))
  DECLARE attr_cancel_pending_trans = vc WITH protect, constant("cancelTransaction")
 ENDIF
 CALL echo("Begin PFT_RCA_I18N_CONSTANTS.INC, version [RCBACM-17290]")
 IF (validate(i18nuar_def,999)=999)
  CALL echo("Declaring i18nuar_def")
  DECLARE i18nuar_def = i2 WITH persist
  SET i18nuar_def = 1
  DECLARE uar_i18nlocalizationinit(p1=i4,p2=vc,p3=vc,p4=f8) = i4 WITH persist
  DECLARE uar_i18ngetmessage(p1=i4,p2=vc,p3=vc) = vc WITH persist
  DECLARE uar_i18nbuildmessage() = vc WITH persist
  DECLARE uar_i18ngethijridate(imonth=i2(val),iday=i2(val),iyear=i2(val),sdateformattype=vc(ref)) =
  c50 WITH image_axp = "shri18nuar", image_aix = "libi18n_locale.a(libi18n_locale.o)", uar =
  "uar_i18nGetHijriDate",
  persist
  DECLARE uar_i18nbuildfullformatname(sfirst=vc(ref),slast=vc(ref),smiddle=vc(ref),sdegree=vc(ref),
   stitle=vc(ref),
   sprefix=vc(ref),ssuffix=vc(ref),sinitials=vc(ref),soriginal=vc(ref)) = c250 WITH image_axp =
  "shri18nuar", image_aix = "libi18n_locale.a(libi18n_locale.o)", uar = "i18nBuildFullFormatName",
  persist
  DECLARE uar_i18ngetarabictime(ctime=vc(ref)) = c20 WITH image_axp = "shri18nuar", image_aix =
  "libi18n_locale.a(libi18n_locale.o)", uar = "i18n_GetArabicTime",
  persist
 ENDIF
 DECLARE hi18n = i4 WITH protect, noconstant(0)
 SET stat = uar_i18nlocalizationinit(hi18n,curprog,"",curcclrev)
 IF ( NOT (validate(i18n_professional)))
  DECLARE i18n_professional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Professional","Professional"))
 ENDIF
 IF ( NOT (validate(i18n_institutional)))
  DECLARE i18n_institutional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Institutional","Institutional"))
 ENDIF
 IF ( NOT (validate(i18n_selfpay)))
  DECLARE i18n_selfpay = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.SelfPay","Self Pay"))
 ENDIF
 IF ( NOT (validate(i18n_account)))
  DECLARE i18n_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Account","Account"))
 ENDIF
 IF ( NOT (validate(i18n_appointment)))
  DECLARE i18n_appointment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Appointment","Appointment"))
 ENDIF
 IF ( NOT (validate(i18n_client_account)))
  DECLARE i18n_client_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Client Account","Client Account"))
 ENDIF
 IF ( NOT (validate(i18n_research_account)))
  DECLARE i18n_research_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Research Account","Research Account"))
 ENDIF
 IF ( NOT (validate(i18n_patient_account)))
  DECLARE i18n_patient_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Patient Account","Patient Account"))
 ENDIF
 IF ( NOT (validate(i18n_encounter)))
  DECLARE i18n_encounter = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter","Encounter"))
 ENDIF
 IF ( NOT (validate(i18n_claim)))
  DECLARE i18n_claim = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim","Claim"))
 ENDIF
 IF ( NOT (validate(i18n_imeclaim)))
  DECLARE i18n_imeclaim = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.IME Claim","IME Claim"))
 ENDIF
 IF ( NOT (validate(i18n_charge)))
  DECLARE i18n_charge = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge","Charge"))
 ENDIF
 IF ( NOT (validate(i18n_guarantor)))
  DECLARE i18n_guarantor = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Guarantor","Guarantor"))
 ENDIF
 IF ( NOT (validate(i18n_statement)))
  DECLARE i18n_statement = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Statement","Statement"))
 ENDIF
 IF ( NOT (validate(i18n_payment)))
  DECLARE i18n_payment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Payment","Payment"))
 ENDIF
 IF ( NOT (validate(i18n_adjustment)))
  DECLARE i18n_adjustment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Adjustment","Adjustment"))
 ENDIF
 IF ( NOT (validate(i18n_ap_refund)))
  DECLARE i18n_ap_refund = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.A/P Refund","Refund"))
 ENDIF
 IF ( NOT (validate(i18n_batch)))
  DECLARE i18n_batch = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Batch","Batch"))
 ENDIF
 IF ( NOT (validate(i18n_registration)))
  DECLARE i18n_registration = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Registration","Registration"))
 ENDIF
 IF ( NOT (validate(i18n_authorization)))
  DECLARE i18n_authorization = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Authorization","Authorization"))
 ENDIF
 IF ( NOT (validate(i18n_person)))
  DECLARE i18n_person = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Person","Person"))
 ENDIF
 IF ( NOT (validate(i18n_organization)))
  DECLARE i18n_organization = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Organization","Organization"))
 ENDIF
 IF ( NOT (validate(i18n_balance)))
  DECLARE i18n_balance = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance","Balance"))
 ENDIF
 IF ( NOT (validate(i18n_invoice)))
  DECLARE i18n_invoice = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Invoice","Invoice"))
 ENDIF
 IF ( NOT (validate(i18n_research_invoice)))
  DECLARE i18n_research_invoice = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ResearchInvoice","Research Invoice"))
 ENDIF
 IF ( NOT (validate(i18n_client_invoice)))
  DECLARE i18n_client_invoice = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ClientInvoice","Client Invoice"))
 ENDIF
 IF ( NOT (validate(i18n_line_item)))
  DECLARE i18n_line_item = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Line Item","Line Item"))
 ENDIF
 IF ( NOT (validate(i18n_inpatient)))
  DECLARE i18n_inpatient = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Inpatient","Inpatient"))
 ENDIF
 IF ( NOT (validate(i18n_outpatient)))
  DECLARE i18n_outpatient = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Outpatient","Outpatient"))
 ENDIF
 IF ( NOT (validate(i18n_guarantor_account)))
  DECLARE i18n_guarantor_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Guarantor Account","Guarantor Account"))
 ENDIF
 IF ( NOT (validate(i18n_encounter_in_history)))
  DECLARE i18n_encounter_in_history = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter in history","Encounter in history"))
 ENDIF
 IF ( NOT (validate(i18n_balance_status)))
  DECLARE i18n_balance_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance not ready to bill","Balance not ready to bill"))
 ENDIF
 IF ( NOT (validate(i18n_no_formal_payment_plan)))
  DECLARE i18n_no_formal_payment_plan = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No formal payment plan assigned","No formal payment plan assigned"))
 ENDIF
 IF ( NOT (validate(i18n_formal_pay_plan_no_guar)))
  DECLARE i18n_formal_pay_plan_no_guar = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No guarantor found for the encounter.",
    "No guarantor found for the encounter."))
 ENDIF
 IF ( NOT (validate(i18n_formal_pay_plan_unsup_cons_method)))
  DECLARE i18n_formal_pay_plan_unsup_cons_method = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Unsupported consolidated method.","Unsupported consolidated method."))
 ENDIF
 IF ( NOT (validate(i18n_formal_pay_plan_excluded_enc_type)))
  DECLARE i18n_formal_pay_plan_excluded_enc_type = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter type is excluded from payment plans.",
    "Encounter type is excluded from payment plans."))
 ENDIF
 IF ( NOT (validate(i18n_formal_pay_plan_invalid_sp_bal)))
  DECLARE i18n_formal_pay_plan_invalid_sp_bal = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Zero or credit balance on selfpay balance.",
    "Zero or credit balance on selfpay balance."))
 ENDIF
 IF ( NOT (validate(i18n_formal_payment_plan)))
  DECLARE i18n_formal_payment_plan = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Formal payment plan assigned","Formal payment plan assigned"))
 ENDIF
 IF ( NOT (validate(i18n_ext_formal_pay_plan)))
  DECLARE i18n_ext_formal_pay_plan = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Formal payment plan externally managed",
    "Formal payment plan is managed externally"))
 ENDIF
 IF ( NOT (validate(i18n_hold_disable_msg)))
  DECLARE i18n_hold_disable_msg = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter has one or more holds preventing assignment",
    "Encounter has one or more holds preventing assignment"))
 ENDIF
 IF ( NOT (validate(i18n_hold_be_preference_msg)))
  DECLARE i18n_hold_be_preference_msg = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter has holds and billing entity prevent manual claim gen pref set.",
    "Encounter has holds and billing entity prevent manual claim generation preference is set."))
 ENDIF
 IF ( NOT (validate(i18n_encounter_in_pre_collection)))
  DECLARE i18n_encounter_in_pre_collection = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is assigned to pre-collections",
    "Encounter is assigned to pre-collections"))
 ENDIF
 IF ( NOT (validate(i18n_encounter_in_collection)))
  DECLARE i18n_encounter_in_collection = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is assigned to collections",
    "Encounter is assigned to collections"))
 ENDIF
 IF ( NOT (validate(i18n_encounter_not_in_collection)))
  DECLARE i18n_encounter_not_in_collection = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is Removed from collections",
    "Encounter is Removed from collections"))
 ENDIF
 IF ( NOT (validate(i18n_encounter_not_sent_to_collection)))
  DECLARE i18n_encounter_not_sent_to_collection = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is Not in collections","Encounter is Not in collections"))
 ENDIF
 IF ( NOT (validate(i18n_generate_claim)))
  DECLARE i18n_generate_claim = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance is not ready to bill.","Balance is not ready to bill."))
 ENDIF
 IF ( NOT (validate(i18n_generate_on_demand_statement)))
  DECLARE i18n_generate_on_demand_statement = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance is not ready to bill.","Balance is not ready to bill."))
 ENDIF
 IF ( NOT (validate(i18n_credit_charge_status)))
  DECLARE i18n_credit_charge_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge previously credited","Charge previously credited"))
 ENDIF
 IF ( NOT (validate(i18n_write_off_charge_status)))
  DECLARE i18n_write_off_charge_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge previously written off","Charge previously written off"))
 ENDIF
 IF ( NOT (validate(i18n_write_off_charge_credit_status)))
  DECLARE i18n_write_off_charge_credit_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.A credited charge cannot be written off",
    "A credited charge cannot be written off"))
 ENDIF
 IF ( NOT (validate(i18n_apply_comment_status)))
  DECLARE i18n_apply_comment_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Comment cannot be applied to a denial",
    "Comment cannot be applied to a denial"))
 ENDIF
 IF ( NOT (validate(i18n_transaction_transfered)))
  DECLARE i18n_transaction_transfered = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Transaction previously transfered","Transaction previously transfered"))
 ENDIF
 IF ( NOT (validate(i18n_reverse_trns_for_pay_adj_trans)))
  DECLARE i18n_reverse_trns_for_pay_adj_trans = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Reversal transactions cannot be transferred",
    "Reversal transactions cannot be transferred"))
 ENDIF
 IF ( NOT (validate(i18n_reverse_trns_for_pay_adj_reverse)))
  DECLARE i18n_reverse_trns_for_pay_adj_reverse = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Reversal transactions cannot be reversed",
    "Reversal transactions cannot be reversed"))
 ENDIF
 IF ( NOT (validate(i18n_bad_deb_recovery_adj)))
  DECLARE i18n_bad_deb_recovery_adj = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bad debt recovery cannot be manually transferred",
    "Bad debt recovery cannot be manually transferred"))
 ENDIF
 IF ( NOT (validate(i18n_bad_deb_reversal_adj)))
  DECLARE i18n_bad_deb_reversal_adj = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bad debt reversal cannot be transferred",
    "Bad debt reversal cannot be transferred"))
 ENDIF
 IF ( NOT (validate(i18n_bad_deb_reversal_rev)))
  DECLARE i18n_bad_deb_reversal_rev = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bad debt reversal cannot be reversed",
    "Bad debt reversal cannot be reversed"))
 ENDIF
 IF ( NOT (validate(i18n_reversal_bankruptcy_writeoff)))
  DECLARE i18n_reversal_bankruptcy_writeoff = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bankruptcy write-off cannot be reversed",
    "Bankruptcy write-off cannot be reversed"))
 ENDIF
 IF ( NOT (validate(i18n_reversal_bankruptcy_reversal)))
  DECLARE i18n_reversal_bankruptcy_reversal = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bankruptcy reversal cannot be reversed",
    "Bankruptcy reversal cannot be reversed"))
 ENDIF
 IF ( NOT (validate(i18n_bankruptcy_writeoff)))
  DECLARE i18n_bankruptcy_writeoff = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bankruptcy write-off cannot be transferred",
    "Bankruptcy write-off cannot be transferred"))
 ENDIF
 IF ( NOT (validate(i18n_bankruptcy_reversal)))
  DECLARE i18n_bankruptcy_reversal = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bankruptcy reversal cannot be transferred",
    "Bankruptcy reversal cannot be transferred"))
 ENDIF
 IF ( NOT (validate(i18n_trans_already_transfered)))
  DECLARE i18n_trans_already_transfered = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Transaction previously transferred","Transaction previously transferred")
   )
 ENDIF
 IF ( NOT (validate(i18n_trans_already_reversed)))
  DECLARE i18n_trans_already_reversed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Transaction previously reversed","Transaction previously reversed"))
 ENDIF
 IF ( NOT (validate(i18n_no_to_balances)))
  DECLARE i18n_no_to_balances = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.There are no balances to transfer to.",
    "There are no balances to transfer to."))
 ENDIF
 IF ( NOT (validate(i18n_balance_zero)))
  DECLARE i18n_balance_zero = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is zero.","The balance is zero."))
 ENDIF
 IF ( NOT (validate(i18n_no_alias_to_modify)))
  DECLARE i18n_no_alias_to_modify = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No alias to modify","No alias to modify"))
 ENDIF
 IF ( NOT (validate(i18n_no_unbilled_late_charges)))
  DECLARE i18n_no_unbilled_late_charges = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No unbilled late charges","No unbilled late charges"))
 ENDIF
 IF ( NOT (validate(i18n_no_unbilled_charges)))
  DECLARE i18n_no_unbilled_charges = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No unbilled charges","No unbilled charges"))
 ENDIF
 IF ( NOT (validate(i18n_balance_canceled)))
  DECLARE i18n_balance_canceled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Associated balance is canceled or invalid.",
    "Associated balance is canceled or invalid."))
 ENDIF
 IF ( NOT (validate(i18n_billed_charge)))
  DECLARE i18n_billed_charge = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge has been billed.","Charge has been billed."))
 ENDIF
 IF ( NOT (validate(i18n_selfpay_only_charge)))
  DECLARE i18n_selfpay_only_charge = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge is associated to Self Pay Charge Group Only.",
    "Charge is associated to Self Pay Charge Group Only."))
 ENDIF
 IF ( NOT (validate(i18n_remittance_zero_payment)))
  DECLARE i18n_remittance_zero_payment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Remittance with a zero payment amount",
    "Remittance with a zero payment amount"))
 ENDIF
 IF ( NOT (validate(i18n_denial)))
  DECLARE i18n_denial = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Denial","Denial"))
 ENDIF
 IF ( NOT (validate(i18n_remove_charge_batch)))
  DECLARE i18n_remove_charge_batch = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot delete a posted or submitted batch",
    "Cannot delete a posted or submitted batch"))
 ENDIF
 IF ( NOT (validate(i18n_unsupported_task)))
  DECLARE i18n_unsupported_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The task is unsupported.","The task is unsupported."))
 ENDIF
 IF ( NOT (validate(i18n_ime_apply_adjustment_task)))
  DECLARE i18n_ime_apply_adjustment_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Adjustment can not be applied to IME claims.",
    "Adjustment can not be applied to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_ime_apply_comment_task)))
  DECLARE i18n_ime_apply_comment_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Comment can not be applied to IME claims.",
    "Comment can not be applied to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_ime_apply_action_code_task)))
  DECLARE i18n_ime_apply_action_code_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Action code can not applied to IME claims.",
    "Action code can not applied to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_ime_apply_remark_task)))
  DECLARE i18n_ime_apply_remark_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Remark can not be applied to IME claims.",
    "Remark can not be applied to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_corsp_not_cancelled)))
  DECLARE i18n_corsp_not_cancelled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Correspondence not in cancellable status.",
    "Correspondence not in cancellable status."))
 ENDIF
 IF ( NOT (validate(i18n_corsp_not_delivered)))
  DECLARE i18n_corsp_not_delivered = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Correspondence not in delivered status.",
    "Correspondence not in delivered status."))
 ENDIF
 IF ( NOT (validate(i18n_encounter_has_baddebt_or_in_coll)))
  DECLARE i18n_encounter_has_baddebt_or_in_coll = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter has bad debt or in collections.",
    "Encounter has bad debt or in collections."))
 ENDIF
 IF ( NOT (validate(i18n_encounter_already_combined_away)))
  DECLARE i18n_encounter_already_combined_away = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is already combined away.",
    "Encounter is already combined away."))
 ENDIF
 IF ( NOT (validate(i18n_pending_reg_mod_hold)))
  DECLARE i18n_pending_reg_mod_hold = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The pending registration modification hold cannot be released.",
    "The pending registration modification hold cannot be released."))
 ENDIF
 IF ( NOT (validate(i18n_encounter_already_packaged)))
  DECLARE i18n_encounter_already_packaged = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is already packaged.","Encounter is already packaged."))
 ENDIF
 IF ( NOT (validate(i18n_statement_cycle_is_workflow_model)))
  DECLARE i18n_statement_cycle_is_workflow_model = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Statement cycle is being managed by a workflow model. See Workflow view.",
    "Statement cycle is being managed by a workflow model. See Workflow view."))
 ENDIF
 IF ( NOT (validate(i18n_pharmanet_charge)))
  DECLARE i18n_pharmanet_charge = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Disabling the task as it is a PharmaNet charge.",
    "Disabling the task as it is a PharmaNet charge."))
 ENDIF
 IF ( NOT (validate(i18n_corsp_img_not_available)))
  DECLARE i18n_corsp_img_not_available = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Correspondence image is not available.",
    "Correspondence image is not available."))
 ENDIF
 IF ( NOT (validate(i18n_posted_unbilled)))
  DECLARE i18n_posted_unbilled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Posted - Unbilled","Posted - Unbilled"))
 ENDIF
 IF ( NOT (validate(i18n_posted_billed)))
  DECLARE i18n_posted_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Posted - Billed","Posted - Billed"))
 ENDIF
 IF ( NOT (validate(i18n_posted_suppressed)))
  DECLARE i18n_posted_suppressed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Posted - Suppressed","Posted - Suppressed"))
 ENDIF
 IF ( NOT (validate(i18n_credited_billed)))
  DECLARE i18n_credited_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Credited - Billed","Credited - Billed"))
 ENDIF
 IF ( NOT (validate(i18n_credited_suppressed)))
  DECLARE i18n_credited_suppressed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Credited - Suppressed","Credited - Suppressed"))
 ENDIF
 IF ( NOT (validate(i18n_written_off_unbilled)))
  DECLARE i18n_written_off_unbilled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Written Off - Unbilled","Written Off - Unbilled"))
 ENDIF
 IF ( NOT (validate(i18n_written_off_billed)))
  DECLARE i18n_written_off_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Written Off - Billed","Written Off - Billed"))
 ENDIF
 IF ( NOT (validate(i18n_adjusted_unbilled)))
  DECLARE i18n_adjusted_unbilled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Adjusted - Unbilled","Adjusted - Unbilled"))
 ENDIF
 IF ( NOT (validate(i18n_adjusted_billed)))
  DECLARE i18n_adjusted_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Adjusted - Billed","Adjusted - Billed"))
 ENDIF
 IF ( NOT (validate(i18n_late_debit)))
  DECLARE i18n_late_debit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Late Debit","Late Debit"))
 ENDIF
 IF ( NOT (validate(i18n_late_credit)))
  DECLARE i18n_late_credit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Late Credit","Late Credit"))
 ENDIF
 IF ( NOT (validate(i18n_late_debit_late_credit)))
  DECLARE i18n_late_debit_late_credit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Late Debit / Late Credit","Late Debit / Late Credit"))
 ENDIF
 IF ( NOT (validate(i18n_add_billing_hold)))
  DECLARE i18n_add_billing_hold = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot apply a billing hold to a self pay balance",
    "Cannot apply a billing hold to a self pay balance"))
 ENDIF
 IF ( NOT (validate(i18n_self_pay)))
  DECLARE i18n_self_pay = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Self Pay","Self Pay"))
 ENDIF
 IF ( NOT (validate(i18n_ime)))
  DECLARE i18n_ime = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.IME",
    "IME"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_primary)))
  DECLARE i18n_sequence_primary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Primary","Primary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_secondary)))
  DECLARE i18n_sequence_secondary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Secondary","Secondary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_tertiary)))
  DECLARE i18n_sequence_tertiary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Tertiary","Tertiary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_quaternary)))
  DECLARE i18n_sequence_quaternary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Quaternary","Quaternary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_quinary)))
  DECLARE i18n_sequence_quinary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Quinary","Quinary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_senary)))
  DECLARE i18n_sequence_senary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Senary","Senary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_unknown)))
  DECLARE i18n_sequence_unknown = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Unknown","Unknown"))
 ENDIF
 IF ( NOT (validate(i18n_claim_not_cancelable)))
  DECLARE i18n_claim_not_cancelable = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim not in cancelable status","Claim not in cancelable status"))
 ENDIF
 IF ( NOT (validate(i18n_claim_not_replaceble)))
  DECLARE i18n_claim_not_replaceble = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim not in a replaceble status","Claim not in a replaceble status"))
 ENDIF
 IF ( NOT (validate(i18n_claim_not_deniable)))
  DECLARE i18n_claim_not_deniable = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim not in deniable status","Claim not in deniable status"))
 ENDIF
 IF ( NOT (validate(i18n_claim_not_voidable)))
  DECLARE i18n_claim_not_voidable = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim not in a voidable status","Claim not in a voidable status"))
 ENDIF
 IF ( NOT (validate(i18n_no_pricing_detail)))
  DECLARE i18n_no_pricing_detail = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No external identifier found for transaction. Cannot view Pricing Detail.",
    "No external identifier found for transaction. Cannot view Pricing Detail."))
 ENDIF
 IF ( NOT (validate(i18n_no_apply_remark)))
  DECLARE i18n_no_apply_remark = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Remark cannot be applied on Cancelled/Denied/Rejected claim or self",
    "Remark cannot be applied on Cancelled/Denied/Rejected claim or selfpay claims or invalid/cancelled balance."
    ))
 ENDIF
 IF ( NOT (validate(i18n_move_chrg_no_qual_chrg)))
  DECLARE i18n_move_chrg_no_qual_chrg = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No qualifying charges on the source financial encounter.",
    "No qualifying charges on the source financial encounter."))
 ENDIF
 IF ( NOT (validate(i18n_move_chrg_no_enc_reltn)))
  DECLARE i18n_move_chrg_no_enc_reltn = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.There is no relationship between selected encounters",
    "There is no relationship between selected encounters. Unable to move charges."))
 ENDIF
 IF ( NOT (validate(i18n_move_chrg_same_encntrs)))
  DECLARE i18n_move_chrg_same_encntrs = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Same source and target clinical encounters.",
    "Same source and target clinical encounters."))
 ENDIF
 IF ( NOT (validate(i18n_move_chrg_credit)))
  DECLARE i18n_move_chrg_credit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot move a credited charge.","Cannot move a credited charge."))
 ENDIF
 IF ( NOT (validate(i18n_modify_chrg_credit)))
  DECLARE i18n_modify_chrg_credit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot modify a credited charge.","Cannot modify a credited charge."))
 ENDIF
 IF ( NOT (validate(i18n_invalid_balance)))
  DECLARE i18n_invalid_balance = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Voided","Voided"))
 ENDIF
 IF ( NOT (validate(i18n_task_system_error)))
  DECLARE i18n_task_system_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.A system error occurred.","A system error occurred."))
 ENDIF
 IF ( NOT (validate(i18n_separator_semicolon)))
  DECLARE i18n_separator_semicolon = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.SEMICOLON","; "))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_error)))
  DECLARE i18n_task_compl_bal_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to complete the balance.",
    "The system is unable to complete the balance."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_not_insurance)))
  DECLARE i18n_task_compl_bal_not_insurance = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not an insurance balance.",
    "The balance is not an insurance balance."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_invalid_status)))
  DECLARE i18n_task_compl_bal_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not currently in a status that can be set as Complete.",
    "The balance is not currently in a status that can be set as Complete."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_next_bal_invalid_status)))
  DECLARE i18n_task_compl_bal_next_bal_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The next balance in the coord of benefits cant be set to Rdy2Bill.",
    "The next balance in the coordination of benefits cannot be set to a Ready to Bill status."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_remaining_credit_amt)))
  DECLARE i18n_task_compl_bal_remaining_credit_amt = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a remaining credit amount.",
    "The balance has a remaining credit amount."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_encntr_hist)))
  DECLARE i18n_task_compl_bal_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_claim_den_pend_rev)))
  DECLARE i18n_task_compl_bal_claim_den_pend_rev = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_success)))
  DECLARE i18n_task_compl_bal_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance was successfully completed.",
    "The balance was successfully completed."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_error)))
  DECLARE i18n_task_set_bal_rtb_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to set the balance as Ready to Bill.",
    "The system is unable to set the balance as Ready to Bill."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_invalid_status)))
  DECLARE i18n_task_set_bal_rtb_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not currently in a status that can be set as Ready to Bill.",
    "The balance is not currently in a status that can be set as Ready to Bill."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_remaining_credit_amt)))
  DECLARE i18n_task_set_bal_rtb_remaining_credit_amt = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a remaining credit amount.",
    "The balance has a remaining credit amount."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_encntr_hist)))
  DECLARE i18n_task_set_bal_rtb_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_claim_den_pend_rev)))
  DECLARE i18n_task_set_bal_rtb_claim_den_pend_rev = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_success)))
  DECLARE i18n_task_set_bal_rtb_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance status was successfully set as Ready to Bill.",
    "The balance status was successfully set as Ready to Bill."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_error)))
  DECLARE i18n_task_set_bal_wpbc_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to set the balance as Waiting Prev Bal Compl",
    "The system is unable to set the balance as Waiting Previous Balance Completion."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_invalid_status)))
  DECLARE i18n_task_set_bal_wpbc_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not in a status that can be set as Waiting Prev Bal Compl",
    "The balance is not currently in a status that can be set as Waiting Previous Balance Completion."
    ))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_remaining_credit_amt)))
  DECLARE i18n_task_set_bal_wpbc_remaining_credit_amt = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a remaining credit amount.",
    "The balance has a remaining credit amount."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_encntr_hist)))
  DECLARE i18n_task_set_bal_wpbc_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_claim_den_pend_rev)))
  DECLARE i18n_task_set_bal_wpbc_claim_den_pend_rev = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_success)))
  DECLARE i18n_task_set_bal_wpbc_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance status was successfully set as Waiting Prev Bal Compl",
    "The balance status was successfully set as Waiting Previous Balance Completion."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_error)))
  DECLARE i18n_task_set_bal_generated_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to set the balance as Generated.",
    "The system is unable to set the balance as Generated."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_invalid_status)))
  DECLARE i18n_task_set_bal_generated_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not in a status that can be set as Waiting Prev Bal Compl",
    "The balance is not currently in a status that can be set as Waiting Previous Balance Completion."
    ))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_remaining_credit_amt)))
  DECLARE i18n_task_set_bal_generated_remaining_credit_amt = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a remaining credit amount.",
    "The balance has a remaining credit amount."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_encntr_hist)))
  DECLARE i18n_task_set_bal_generated_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_claim_den_pend_rev)))
  DECLARE i18n_task_set_bal_generated_claim_den_pend_rev = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_no_claim)))
  DECLARE i18n_task_set_bal_generated_no_claim = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance does not currently have a valid claim.",
    "The balance does not currently have a valid claim."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_success)))
  DECLARE i18n_task_set_bal_generated_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance status was successfully set as Generated.",
    "The balance status was successfully set as Generated."))
 ENDIF
 IF ( NOT (validate(i18n_task_generate_interim_not_available)))
  DECLARE i18n_task_generate_interim_not_available = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The task is not allowed","The task is not allowed"))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_late_charges_claim_den_pend_rev)))
  DECLARE i18n_task_bill_late_charges_claim_den_pend_rev = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_late_charges_encntr_hist)))
  DECLARE i18n_task_bill_late_charges_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_late_charges_error)))
  DECLARE i18n_task_bill_late_charges_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to bill late charges.",
    "The system is unable to bill late charges."))
 ENDIF
 IF ( NOT (validate(i18n_task_associate_bal_not_institutional)))
  DECLARE i18n_task_associate_bal_not_institutional = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance is not an institutional balance.",
    "The balance is not an institutional balance."))
 ENDIF
 IF ( NOT (validate(i18n_task_associate_bal_already_billed)))
  DECLARE i18n_task_associate_bal_already_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The intitutional balance has already been billed.",
    "The intitutional balance has already been billed."))
 ENDIF
 IF ( NOT (validate(i18n_task_associate_bal_no_professional)))
  DECLARE i18n_task_associate_bal_no_professional = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.There are no professional balances to associate to.",
    "There are no professional balances to associate to."))
 ENDIF
 IF ( NOT (validate(billing_with_professional)))
  DECLARE billing_with_professional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.billing_with_professional","Billing With Professional"))
 ENDIF
 IF ( NOT (validate(billing_on_institutional)))
  DECLARE billing_on_institutional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.billing_on_institutional","Billing On Institutional"))
 ENDIF
 IF ( NOT (validate(billing_with_institutional)))
  DECLARE billing_with_institutional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.billing_with_institutional","Billing With Institutional"))
 ENDIF
 IF ( NOT (validate(billing_on_professional)))
  DECLARE billing_on_professional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.billing_on_professional","Billing On Professional"))
 ENDIF
 IF ( NOT (validate(i18n_assoc_bal_ins_error)))
  DECLARE i18n_assoc_bal_ins_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.assocBalInsError",
    "A system error has occurred. Unable to associate balances for billing."))
 ENDIF
 IF ( NOT (validate(i18n_assoc_bal_upt_error)))
  DECLARE i18n_assoc_bal_upt_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.assocBalUptError",
    "A system error has occurred. Unable to update balance associations for billing."))
 ENDIF
 IF ( NOT (validate(i18n_assoc_bal_success)))
  DECLARE i18n_assoc_bal_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.assocBalSuccess","Balance associations saved."))
 ENDIF
 IF ( NOT (validate(i18n_task_balance_associated_error)))
  DECLARE i18n_task_balance_associated_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance association made.","Balance association made."))
 ENDIF
 IF ( NOT (validate(i18n_uploaded_via_batch)))
  DECLARE i18n_uploaded_via_batch = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Uploaded via batch","Uploaded via batch"))
 ENDIF
 IF ( NOT (validate(i18n_task_mod_pat_resp_no_single_group_per_cg)))
  DECLARE i18n_task_mod_pat_resp_no_single_group_per_cg = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance must be associated to single-charge charge group",
    "Balance must be associated to single-charge charge group"))
 ENDIF
 IF ( NOT (validate(i18n_task_mod_pat_resp_self_pay)))
  DECLARE i18n_task_mod_pat_resp_self_pay = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot modify patient responsibility for self pay balance",
    "Cannot modify patient responsibility for self pay balance"))
 ENDIF
 IF ( NOT (validate(i18n_task_mod_pat_resp_invalid_cg_status)))
  DECLARE i18n_task_mod_pat_resp_invalid_cg_status = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.Charge group is in an invalid status",
    "Charge group is in an invalid status"))
 ENDIF
 IF ( NOT (validate(i18n_task_mod_pat_resp_invalid_balance_status)))
  DECLARE i18n_task_mod_pat_resp_invalid_balance_status = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.Balance is in an invalid status",
    "Balance is in an invalid status"))
 ENDIF
 IF ( NOT (validate(i18n_task_image_action_unauthorized)))
  DECLARE i18n_task_image_action_unauthorized = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Image action unauthorized for user.",
    "Image action unauthorized for user."))
 ENDIF
 IF ( NOT (validate(i18n_ime_add_image_task)))
  DECLARE i18n_ime_add_image_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Image can not be added to IME claims.",
    "Image can not be added to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_submitted)))
  DECLARE i18n_view_batch_submitted = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_SUBMITTED","Waiting to Post"))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_presubmit)))
  DECLARE i18n_view_batch_presubmit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_PRESUBMIT","Pre-Submit"))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_posted)))
  DECLARE i18n_view_batch_posted = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_POSTED","Posted"))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_pending)))
  DECLARE i18n_view_batch_pending = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_PENDING","Open"))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_errored)))
  DECLARE i18n_view_batch_errored = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_ERRORED","In Error"))
 ENDIF
 IF ( NOT (validate(i18n_task_cancelbatchtask)))
  DECLARE i18n_task_cancelbatchtask = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.TASK_CANCEL_BATCH","Cancel Remittance"))
 ENDIF
 IF ( NOT (validate(i18n_system)))
  DECLARE i18n_system = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.LABEL_SYSTEM","System"))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_as_prof_error)))
  DECLARE i18n_task_bill_as_prof_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance cannot be billed as professional.",
    "Balance cannot be billed as professional."))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_as_ins_error)))
  DECLARE i18n_task_bill_as_ins_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance cannot be billed as institutional.",
    "Balance cannot be billed as institutional."))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_as_prof_or_ins_error)))
  DECLARE i18n_task_bill_as_prof_or_ins_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance is not in a status to be billed.",
    "Balance is not in a status to be billed."))
 ENDIF
 IF ( NOT (validate(i18n_refund)))
  DECLARE i18n_refund = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Refund","Refund"))
 ENDIF
 IF ( NOT (validate(i18n_refund_id)))
  DECLARE i18n_refund_id = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Refund Id","Refund Id"))
 ENDIF
 IF ( NOT (validate(i18n_refund_amt)))
  DECLARE i18n_refund_amt = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Refund Amount","Refund Amount"))
 ENDIF
 IF ( NOT (validate(i18n_voided_refund_payment_desc)))
  DECLARE i18n_voided_refund_payment_desc = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Payment to Offset Voided Refund, Refund Id:",
    "Payment to Offset Voided Refund, Refund Id:"))
 ENDIF
 IF ( NOT (validate(i18n_reminder_title)))
  DECLARE i18n_reminder_title = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.REMINDER_TITLE","Reminder"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_title)))
  DECLARE i18n_escalation_title = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_TITLE","Escalation"))
 ENDIF
 IF ( NOT (validate(i18n_reminder_reason_label)))
  DECLARE i18n_reminder_reason_label = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.REMINDER_REASON_LABEL","Reminder Reason:"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_reason_label)))
  DECLARE i18n_escalation_reason_label = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_REASON_LABEL","Escalation Reason:"))
 ENDIF
 IF ( NOT (validate(i18n_reminder_reason_assignee)))
  DECLARE i18n_reminder_reason_assignee = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.REMINDER_REASON_ASSIGNEE","Reminder for assignee of work item"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_reason)))
  DECLARE i18n_escalation_reason = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_REASON","Escalation for incomplete work item"))
 ENDIF
 IF ( NOT (validate(i18n_reminder_message)))
  DECLARE i18n_reminder_message = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.REMINDER_MESSAGE","Reminder: Work Item Overdue"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_message)))
  DECLARE i18n_escalation_message = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_MESSAGE","Escalation: Work Item Overdue"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_text)))
  DECLARE i18n_escalation_text = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_TEXT","ESCALATION: Work Item Overdue for"))
 ENDIF
 IF ( NOT (validate(i18n_resolver_label)))
  DECLARE i18n_resolver_label = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.RESOLVER_LABEL","Resolver:"))
 ENDIF
 IF ( NOT (validate(i18n_auto_approve_failure_workitem_description)))
  DECLARE i18n_auto_approve_failure_workitem_description = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.AUTO_APPROVE_FAILURE_WORKITEM_DESCRIPTION",
    "Adjustment in pending due to failure of WTP auto-approval"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_missing_payee_id_description)))
  DECLARE i18n_fsi_missing_payee_id_description = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.FSI_MISSING_PAYEE_ID_DESCRIPTION","Missing Payee Id"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_locate_logical_domain_description)))
  DECLARE i18n_fsi_fail_locate_logical_domain_description = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.FSI_FAIL_LOCATE_LOGICAL_DOMAIN_DESCRIPTION",
    "Unable to find organization Logical domain"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_set_logical_domain_description)))
  DECLARE i18n_fsi_fail_set_logical_domain_description = vc WITH protect, constant(uar_i18ngetmessage
   (hi18n,"PFT_RCA_I18N_CONSTANTS.FSI_FAIL_SET_LOGICAL_DOMAIN_DESCRIPTION",
    "Failed to set the logical domain"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_missing_payee_and_health_plan_id_description)))
  DECLARE i18n_fsi_fail_missing_payee_and_health_plan_id_description = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.FSI_FAIL_MISSING_PAYEE_AND_HEALTH_PLAN_ID_DESCRIPTION",
    "Missing Payer ID and Health Plan ID"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_find_gl_ar_acct_description)))
  DECLARE i18n_fsi_fail_find_gl_ar_acct_description = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.FSI_FAIL_FIND_GL_AR_ACCT_DESCRIPTION",
    "Unable to Find General A/R Account information"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_find_non_gl_ar_acct_description)))
  DECLARE i18n_fsi_fail_find_non_gl_ar_acct_description = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.FSI_FAIL_FIND_NON_GL_AR_ACCT_DESCRIPTION",
    "Unable to Find Non A/R GL Account information"))
 ENDIF
 CALL echo("End PFT_RCA_I18N_CONSTANTS.INC")
 IF ( NOT (validate(i18n_workflow_model)))
  DECLARE i18n_workflow_model = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.WORKFLOW_MODEL","Workflow Model: "))
 ENDIF
 IF ( NOT (validate(i18n_reset_status)))
  DECLARE i18n_reset_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.RESET_STATUS","model has been Reset."))
 ENDIF
 IF ( NOT (validate(i18n_resume_status)))
  DECLARE i18n_resume_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.RESUME_STATUS","model has been Resumed."))
 ENDIF
 IF ( NOT (validate(i18n_pause_status)))
  DECLARE i18n_pause_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.PAUSE_STATUS","model has been Paused."))
 ENDIF
 IF ( NOT (validate(i18n_cancel_status)))
  DECLARE i18n_cancel_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.CANCEL_STATUS","model has been Cancelled."))
 ENDIF
 IF ( NOT (validate(i18n_complete_status)))
  DECLARE i18n_complete_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.COMPLETE_STATUS","model completed."))
 ENDIF
 IF ( NOT (validate(i18n_workflow_event)))
  DECLARE i18n_workflow_event = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.WORKFLOW_EVENT","Workflow Event : "))
 ENDIF
 IF ( NOT (validate(i18n_error_cancelling_workflow)))
  DECLARE i18n_error_cancelling_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_CANCELLING_WORKFLOW","Workflow Error Occurred Cancelling Workflow")
   )
 ENDIF
 IF ( NOT (validate(i18n_error_resetting_workflow)))
  DECLARE i18n_error_resetting_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_RESETTING_WORKFLOW","Workflow Error Occurred Resetting Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_resuming_workflow)))
  DECLARE i18n_error_resuming_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_RESUMING_WORKFLOW","Workflow Error Occurred Resuming Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_pausing_workflow)))
  DECLARE i18n_error_pausing_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_PAUSING_WORKFLOW","Workflow Error Occurred Pausing Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_starting_workflow)))
  DECLARE i18n_error_starting_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_STARTING_WORKFLOW","Workflow Error Occurred Starting Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_progressing_workflow)))
  DECLARE i18n_error_progressing_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_PROGRESSING_WORKFLOW",
    "Workflow Error Occurred Progressing Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_publishing_workflow)))
  DECLARE i18n_error_publishing_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_PUBLISHING_WORKFLOW","Workflow Error Occurred Publishing Workflow")
   )
 ENDIF
 IF ( NOT (validate(i18n_error_handling_workflow)))
  DECLARE i18n_error_handling_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_HANDLING_WORKFLOW","Workflow Error Occurred Handling Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_autoactionerror_handling_workflow)))
  DECLARE i18n_autoactionerror_handling_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.AUTOACTIONERROR_HANDLING_WORKFLOW","Automated Action Error"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_default_description)))
  DECLARE i18n_workflow_error_default_description = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.WORKFLOW_ERROR_DEFAULT_DESCRIPTION",
    "Workflow Action Error Occurred"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_default_comment)))
  DECLARE i18n_workflow_error_default_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.WORKFLOW_ERROR_DEFAULT_COMMENT","Model Unidentified"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_cancel_resolution)))
  DECLARE i18n_workflow_error_cancel_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_CANCEL_RESOLUTION",
    "Manually cancel the workflow using the cancel task"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_pause_resolution)))
  DECLARE i18n_workflow_error_pause_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_PAUSE_RESOLUTION",
    "Manually pause the workflow using the pause task"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_progress_resolution)))
  DECLARE i18n_workflow_error_progress_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_PROGRESS_RESOLUTION",
    "Manually cancel the workflow, then use the Identify Work item functionality to identify the next work item in the flow"
    ))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_publish_resolution)))
  DECLARE i18n_workflow_error_publish_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_PUBLISH_RESOLUTION",
    "Manually start the workflow using the Identify Work Item functionality"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_reset_resolution)))
  DECLARE i18n_workflow_error_reset_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_RESET_RESOLUTION",
    "Manually reset the workflow using the reset task"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_resume_resolution)))
  DECLARE i18n_workflow_error_resume_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_RESUME_RESOLUTION",
    "Manually resume the workflow using the resume task"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_start_resolution)))
  DECLARE i18n_workflow_error_start_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_START_RESOLUTION",
    "Manually start the workflow using the Identify Work Item functionalilty"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_handle_resolution)))
  DECLARE i18n_workflow_error_handle_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_HANDLE_RESOLUTION","Handle Error Resolution Text."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_down)))
  DECLARE i18n_pharmacy_claim_server_down = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_DOWN",
    "Pharmacy claims query service is down or not responding."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_returned_invalid)))
  DECLARE i18n_pharmacy_claim_server_returned_invalid = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_RETURNED_INVALID",
    "Pharmacy claims server returned invalid claims."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_error)))
  DECLARE i18n_pharmacy_claim_server_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_ERROR",
    "Pharmacy claims server failed with error : "))
 ENDIF
 IF ( NOT (validate(i18n_faux_claim_creation_failed)))
  DECLARE i18n_faux_claim_creation_failed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_FAUX_CLAIM_CREATION_FAILED","Creation of faux claim returned error."
    ))
 ENDIF
 IF ( NOT (validate(i18n_faux_claim_canceled_failed)))
  DECLARE i18n_faux_claim_canceled_failed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_FAUX_CLAIM_CANCELED_FAILED",
    "Cancelling a faux claim returned error."))
 ENDIF
 IF ( NOT (validate(i18n_balance_status_update_failed)))
  DECLARE i18n_balance_status_update_failed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_BALANCE_STATUS_UPDATE_FAILED",
    "Failed to update the balance status to generated."))
 ENDIF
 IF ( NOT (validate(i18n_health_plans_not_matched)))
  DECLARE i18n_health_plans_not_matched = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_HEALTH_PLANS_NOT_MATCHED",
    "Health plans on pharmacy claims did not match with that on encounter."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_down_resolution)))
  DECLARE i18n_pharmacy_claim_server_down_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_DOWN_RESOLUTION",
    "Verify if Pharmacy claims server is running."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_returned_invalid_resolution)))
  DECLARE i18n_pharmacy_claim_server_returned_invalid_resolution = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_RETURNED_INVALID_RESOLUTION",
    "Verify if the external master event id sent to Pharmacy claims server is valid."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_error_resolution)))
  DECLARE i18n_pharmacy_claim_server_error_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_ERROR_RESOLUTION",
    "Pharmacy claims server is throwing an error that has to be resolved."))
 ENDIF
 IF ( NOT (validate(i18n_faux_claim_creation_failed_resolution)))
  DECLARE i18n_faux_claim_creation_failed_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_FAUX_CLAIM_CREATION_FAILED_RESOLUTION",
    "Verify if the claims returned from pharmacy server are valid."))
 ENDIF
 IF ( NOT (validate(i18n_faux_claim_canceled_failed_resolution)))
  DECLARE i18n_faux_claim_canceled_failed_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_FAUX_CLAIM_CANCELED_FAILED_RESOLUTION",
    "Verify if the claim status is valid for canceling."))
 ENDIF
 IF ( NOT (validate(i18n_balance_status_update_failed_resolution)))
  DECLARE i18n_balance_status_update_failed_resolution = vc WITH protect, constant(uar_i18ngetmessage
   (hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_BALANCE_STATUS_UPDATE_FAILED_RESOLUTION",
    "Verify if the balance is in valid state."))
 ENDIF
 IF ( NOT (validate(i18n_health_plans_not_matched_resolution)))
  DECLARE i18n_health_plans_not_matched_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_HEALTH_PLANS_NOT_MATCHED_RESOLUTION",
    "Verify if all the health plans are added to the encounter."))
 ENDIF
 IF ( NOT (validate(i18n_actioncode_alias_inuse)))
  DECLARE i18n_actioncode_alias_inuse = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ACTIONCODE_ALIAS_INUSE",
    "The alias is already in use. Please enter a unique alias."))
 ENDIF
 IF ( NOT (validate(i18n_actioncode_name_inuse)))
  DECLARE i18n_actioncode_name_inuse = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ACTIONCODE_NAME_INUSE",
    "The name is already in use. Please enter a unique name."))
 ENDIF
 IF ( NOT (validate(i18n_workitem_workflow_status)))
  DECLARE i18n_workitem_workflow_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKITEM_WORKFLOW_STATUS","WorkItem with Workflow Status"))
 ENDIF
 IF ( NOT (validate(i18n_assigned_from)))
  DECLARE i18n_assigned_from = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ASSIGNED_FROM","Assigned from"))
 ENDIF
 IF ( NOT (validate(i18n_assigned_to)))
  DECLARE i18n_assigned_to = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ASSIGNED_TO","Assigned to"))
 ENDIF
 IF ( NOT (validate(i18n_final_coding_upt)))
  DECLARE i18n_final_coding_upt = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_FINAL_CODING_UPT",
    "Final coding has been updated after billing has been initiated. Please review to ensure the proper DRG."
    ))
 ENDIF
 IF ( NOT (validate(i18n_other)))
  DECLARE i18n_other = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.OTHER","Other"))
 ENDIF
 IF ( NOT (validate(i18n_adjustmentapproval)))
  DECLARE i18n_adjustmentapproval = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ADJUSTMENTAPPROVAL","Adjustment Approval"))
 ENDIF
 IF ( NOT (validate(i18n_statementgeneration)))
  DECLARE i18n_statementgeneration = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_STATEMENTGENERATION","Statement Generation"))
 ENDIF
 IF ( NOT (validate(i18n_assign_fpp_by_external_system)))
  DECLARE i18n_assign_fpp_by_external_system = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ASSIGN_FPP_BY_EXTERNAL_SYSTEM","Formal payment plan assigned by :"))
 ENDIF
 IF ( NOT (validate(i18n_modify_fpp_by_external_system)))
  DECLARE i18n_modify_fpp_by_external_system = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_MODIFY_FPP_BY_EXTERNAL_SYSTEM","Formal payment plan modified by :"))
 ENDIF
 IF ( NOT (validate(i18n_remove_fpp_by_external_system)))
  DECLARE i18n_remove_fpp_by_external_system = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_REMOVE_FPP_BY_EXTERNAL_SYSTEM","Formal payment plan removed by :"))
 ENDIF
 IF ( NOT (validate(i18n_stmtsuppressionaddedforextfpp)))
  DECLARE i18n_stmtsuppressionaddedforextfpp = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_STMTSUPPRESSIONADDEDFOREXTFPP",
    "Statement Suppression Billing Hold applied."))
 ENDIF
 IF ( NOT (validate(i18n_stmtsuppressionremovedforextfpp)))
  DECLARE i18n_stmtsuppressionremovedforextfpp = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_STMTSUPPRESSIONREMOVEDFOREXTFPP",
    "Statement Suppression Billing Hold removed."))
 ENDIF
 IF ( NOT (validate(i18n_extfppassignedforenc)))
  DECLARE i18n_extfppassignedforenc = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_EXTFPPASSIGNEDFORENC",
    "External Payment Plan assigned for encounter."))
 ENDIF
 IF ( NOT (validate(i18n_task_send_bal_to_collections)))
  DECLARE i18n_task_send_bal_to_collections = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_TASK_SEND_BAL_TO_COLLECTIONS",
    "Cannot send balance to collection as dunning track is not at balance level"))
 ENDIF
 IF ( NOT (validate(i18n_task_modifystatementcycle_bal)))
  DECLARE i18n_task_modifystatementcycle_bal = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_TASK_MODIFYSTATEMENTCYCLE_BAL",
    "Cannot apply statement cycle to balance as dunning track is not at balance level"))
 ENDIF
 IF ( NOT (validate(i18n_transfer_of)))
  DECLARE i18n_transfer_of = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Transfer of","Transfer of"))
 ENDIF
 IF ( NOT (validate(i18n_with_alias)))
  DECLARE i18n_with_alias = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.with alias","with alias"))
 ENDIF
 IF ( NOT (validate(i18n_originally_posted)))
  DECLARE i18n_originally_posted = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.originally posted","originally posted"))
 ENDIF
 IF ( NOT (validate(i18n_with_posted_date_of)))
  DECLARE i18n_with_posted_date_of = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.with a posted date of","with a posted date of"))
 ENDIF
 IF ( NOT (validate(i18n_for_amount_of)))
  DECLARE i18n_for_amount_of = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.for the amount of","for the amount of"))
 ENDIF
 IF ( NOT (validate(i18n_from_account)))
  DECLARE i18n_from_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.from account","from account"))
 ENDIF
 IF ( NOT (validate(i18n_to_account)))
  DECLARE i18n_to_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.to account","to account"))
 ENDIF
 IF ( NOT (validate(i18n_health_plan)))
  DECLARE i18n_health_plan = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.health plan","health plan"))
 ENDIF
 IF ( NOT (validate(i18n_performed_by)))
  DECLARE i18n_performed_by = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.performed by","performed by"))
 ENDIF
 IF ( NOT (validate(i18n_on)))
  DECLARE i18n_on = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.on",
    "on"))
 ENDIF
 DECLARE curinsbalid = f8 WITH protect, noconstant(0.0)
 DECLARE curinsbaluptcnt = i4 WITH protect, noconstant(0)
 DECLARE curinsbalstatuscd = f8 WITH protect, noconstant(0.0)
 DECLARE pftencntrid = f8 WITH protect, noconstant(0.0)
 DECLARE accountid = f8 WITH protect, noconstant(0.0)
 SUBROUTINE (getcurrentbostatus(pbohpid=f8,oldstatuscd=f8(ref)) =i2)
   SELECT INTO "nl:"
    FROM bo_hp_reltn bhr
    WHERE bhr.bo_hp_reltn_id=pbohpid
     AND bhr.active_ind=true
    DETAIL
     oldstatuscd = bhr.bo_hp_status_cd
    WITH nocounter
   ;end select
   IF (oldstatuscd != 0.0)
    RETURN(true)
   ENDIF
   RETURN(false)
 END ;Subroutine
 SUBROUTINE (createactivityforbalstatuschng(curstatus=f8,pbohpid=f8,voidind=i2(value,false)) =i2)
   RECORD activityreq(
     1 activitytypecd = f8
     1 activityspecificattributes[*]
       2 name = vc
       2 value = vc
     1 relatedentities[*]
       2 relationship = vc
       2 entityid = f8
   ) WITH protect
   RECORD activityrep(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SELECT INTO "nl:"
    FROM bo_hp_reltn bhr,
     benefit_order bo,
     pft_encntr pe
    PLAN (bhr
     WHERE bhr.bo_hp_reltn_id=pbohpid
      AND bhr.active_ind=true)
     JOIN (bo
     WHERE bo.benefit_order_id=bhr.benefit_order_id
      AND bo.active_ind=true)
     JOIN (pe
     WHERE pe.pft_encntr_id=bo.pft_encntr_id
      AND pe.active_ind=true)
    DETAIL
     curinsbalid = bhr.bo_hp_reltn_id, curinsbaluptcnt = bhr.updt_cnt, curinsbalstatuscd = bhr
     .bo_hp_status_cd,
     pftencntrid = pe.pft_encntr_id, accountid = pe.acct_id
    WITH nocounter
   ;end select
   IF (curqual != 0)
    SET stat = alterlist(activityreq->relatedentities,3)
    SET stat = alterlist(activityreq->activityspecificattributes,2)
    SET activityreq->activitytypecd = cs18689_balstatchg_cd
    SET activityreq->activityspecificattributes[1].name = attr_bal_orig_status
    SET activityreq->activityspecificattributes[1].value = uar_get_code_display(curstatus)
    SET activityreq->activityspecificattributes[2].name = attr_bal_new_status
    IF (voidind=false)
     SET activityreq->activityspecificattributes[2].value = uar_get_code_display(curinsbalstatuscd)
    ELSE
     SET activityreq->activityspecificattributes[2].value = i18n_invalid_balance
    ENDIF
    SET activityreq->relatedentities[1].relationship = reltn_account
    SET activityreq->relatedentities[1].entityid = accountid
    SET activityreq->relatedentities[2].relationship = reltn_fin_encounter
    SET activityreq->relatedentities[2].entityid = pftencntrid
    SET activityreq->relatedentities[3].relationship = reltn_balance
    SET activityreq->relatedentities[3].entityid = curinsbalid
    EXECUTE pft_create_activity  WITH replace("REQUEST",activityreq), replace("REPLY",activityrep)
    IF ((activityrep->status_data.status != "S"))
     CALL echorecord(activityrep)
     CALL echorecord(activityreq)
     RETURN(false)
    ENDIF
    RETURN(true)
   ENDIF
   RETURN(false)
 END ;Subroutine
 SUBROUTINE (getaccountid(pft_encntr_id=f8,activityacctid=f8(ref)) =i2)
   SELECT INTO "nl:"
    FROM pft_encntr pe
    WHERE pe.pft_encntr_id=pft_encntr_id
     AND pe.active_ind=true
    DETAIL
     activityacctid = pe.acct_id
    WITH nocounter
   ;end select
   IF (activityacctid != 0.0)
    RETURN(true)
   ENDIF
   RETURN(false)
 END ;Subroutine
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF ("Z"=validate(pft_event_log_vrsn,"Z"))
  DECLARE pft_event_log_vrsn = vc WITH public, noconstant("73246.000")
 ENDIF
 IF ("Z"=validate(pft_common_vrsn,"Z"))
  DECLARE pft_common_vrsn = vc WITH noconstant(""), public
 ENDIF
 SET pft_common_vrsn = "500383.087"
 IF ((validate(pft_neither,- (1))=- (1)))
  DECLARE pft_neither = i2 WITH constant(0)
 ENDIF
 IF ((validate(pft_debit,- (1))=- (1)))
  DECLARE pft_debit = i2 WITH constant(1)
 ENDIF
 IF ((validate(pft_credit,- (1))=- (1)))
  DECLARE pft_credit = i2 WITH constant(2)
 ENDIF
 IF (validate(null_f8,0.0)=0.0)
  DECLARE null_f8 = f8 WITH constant(- (0.00001))
 ENDIF
 IF (validate(null_i2,0)=0)
  DECLARE null_i2 = i2 WITH constant(- (1))
 ENDIF
 IF (validate(null_i4,0)=0)
  DECLARE null_i4 = i4 WITH constant(- (1))
 ENDIF
 IF ((validate(null_dt,- (1.0))=- (1.0)))
  DECLARE null_dt = q8 WITH constant(0.0)
 ENDIF
 IF (validate(null_vc,"Z")="Z")
  DECLARE null_vc = vc WITH constant("")
 ENDIF
 IF ((validate(upt_force,- (1))=- (1)))
  DECLARE upt_force = i4 WITH constant(- (99999))
 ENDIF
 IF ((validate(log_error,- (1))=- (1)))
  DECLARE log_error = i4 WITH constant(0)
 ENDIF
 IF ((validate(log_warning,- (1))=- (1)))
  DECLARE log_warning = i4 WITH constant(1)
 ENDIF
 IF ((validate(log_audit,- (1))=- (1)))
  DECLARE log_audit = i4 WITH constant(2)
 ENDIF
 IF ((validate(log_info,- (1))=- (1)))
  DECLARE log_info = i4 WITH constant(3)
 ENDIF
 IF ((validate(log_debug,- (1))=- (1)))
  DECLARE log_debug = i4 WITH constant(4)
 ENDIF
 IF (validate(ein_pft_charge,0)=0)
  DECLARE ein_pft_charge = i4 WITH constant(1)
 ENDIF
 IF (validate(ein_charge_item,0)=0)
  DECLARE ein_charge_item = i4 WITH constant(2)
 ENDIF
 IF (validate(ein_bill_header,0)=0)
  DECLARE ein_bill_header = i4 WITH constant(3)
 ENDIF
 IF (validate(ein_pft_encntr,0)=0)
  DECLARE ein_pft_encntr = i4 WITH constant(4)
 ENDIF
 IF (validate(ein_benefit_order,0)=0)
  DECLARE ein_benefit_order = i4 WITH constant(5)
 ENDIF
 IF (validate(ein_guarantor,0)=0)
  DECLARE ein_guarantor = i4 WITH constant(6)
 ENDIF
 IF (validate(ein_encounter,0)=0)
  DECLARE ein_encounter = i4 WITH constant(7)
 ENDIF
 IF (validate(ein_account,0)=0)
  DECLARE ein_account = i4 WITH constant(8)
 ENDIF
 IF (validate(ein_remittance,0)=0)
  DECLARE ein_remittance = i4 WITH constant(9)
 ENDIF
 IF (validate(ein_eob,0)=0)
  DECLARE ein_eob = i4 WITH constant(10)
 ENDIF
 IF (validate(ein_billing_entity,0)=0)
  DECLARE ein_billing_entity = i4 WITH constant(11)
 ENDIF
 IF (validate(ein_person,0)=0)
  DECLARE ein_person = i4 WITH constant(12)
 ENDIF
 IF (validate(ein_activity,0)=0)
  DECLARE ein_activity = i4 WITH constant(13)
 ENDIF
 IF (validate(ein_fin_nbr,0)=0)
  DECLARE ein_fin_nbr = i4 WITH constant(14)
 ENDIF
 IF (validate(ein_bo_hp_reltn,0)=0)
  DECLARE ein_bo_hp_reltn = i4 WITH constant(15)
 ENDIF
 IF (validate(ein_denial,0)=0)
  DECLARE ein_denial = i4 WITH constant(16)
 ENDIF
 IF (validate(ein_client_account,0)=0)
  DECLARE ein_client_account = i4 WITH constant(17)
 ENDIF
 IF (validate(ein_encntr_clln_reltn,0)=0)
  DECLARE ein_encntr_clln_reltn = i4 WITH constant(18)
 ENDIF
 IF (validate(ein_bill_nbr,0)=0)
  DECLARE ein_bill_nbr = i4 WITH constant(19)
 ENDIF
 IF (validate(ein_trans_alias,0)=0)
  DECLARE ein_trans_alias = i4 WITH constant(20)
 ENDIF
 IF (validate(ein_trans_alias_elements,0)=0)
  DECLARE ein_trans_alias_elements = i4 WITH constant(21)
 ENDIF
 IF (validate(ein_hold,0)=0)
  DECLARE ein_hold = i4 WITH constant(22)
 ENDIF
 IF (validate(ein_hold_prompt,0)=0)
  DECLARE ein_hold_prompt = i4 WITH constant(23)
 ENDIF
 IF (validate(ein_person_at,0)=0)
  DECLARE ein_person_at = i4 WITH constant(24)
 ENDIF
 IF (validate(ein_reversal,0)=0)
  DECLARE ein_reversal = i4 WITH constant(25)
 ENDIF
 IF (validate(ein_ext_acct_id_txt,0)=0)
  DECLARE ein_ext_acct_id_txt = i4 WITH constant(26)
 ENDIF
 IF (validate(ein_organization,0)=0)
  DECLARE ein_organization = i4 WITH constant(27)
 ENDIF
 IF (validate(ein_fifo,0)=0)
  DECLARE ein_fifo = i4 WITH constant(28)
 ENDIF
 IF (validate(ein_nopost,0)=0)
  DECLARE ein_nopost = i4 WITH constant(29)
 ENDIF
 IF (validate(ein_date_time,0)=0)
  DECLARE ein_date_time = i4 WITH constant(30)
 ENDIF
 IF (validate(ein_encntr_package,0)=0)
  DECLARE ein_encntr_package = i4 WITH constant(31)
 ENDIF
 IF (validate(ein_pay_plan_hist,0)=0)
  DECLARE ein_pay_plan_hist = i4 WITH constant(32)
 ENDIF
 IF (validate(ein_report_date,0)=0)
  DECLARE ein_report_date = i4 WITH constant(33)
 ENDIF
 IF (validate(ein_parent_entity,0)=0)
  DECLARE ein_parent_entity = i4 WITH constant(34)
 ENDIF
 IF (validate(ein_pay_plan_suggest,0)=0)
  DECLARE ein_pay_plan_suggest = i4 WITH constant(35)
 ENDIF
 IF (validate(ein_report_instance,0)=0)
  DECLARE ein_report_instance = i4 WITH constant(36)
 ENDIF
 IF (validate(ein_pft_fiscal_daily_id,0)=0)
  DECLARE ein_pft_fiscal_daily_id = i4 WITH constant(37)
 ENDIF
 IF (validate(ein_pft_encntr_fact_active,0)=0)
  DECLARE ein_pft_encntr_fact_active = i4 WITH constant(38)
 ENDIF
 IF (validate(ein_pft_encntr_fact_history,0)=0)
  DECLARE ein_pft_encntr_fact_history = i4 WITH constant(39)
 ENDIF
 IF (validate(ein_invoice,0)=0)
  DECLARE ein_invoice = i4 WITH constant(40)
 ENDIF
 IF (validate(ein_pending_batch,0)=0)
  DECLARE ein_pending_batch = i4 WITH constant(41)
 ENDIF
 IF (validate(ein_application,0)=0)
  DECLARE ein_application = i4 WITH constant(42)
 ENDIF
 IF (validate(ein_view,0)=0)
  DECLARE ein_view = i4 WITH constant(43)
 ENDIF
 IF (validate(ein_test,0)=0)
  DECLARE ein_test = i4 WITH constant(44)
 ENDIF
 IF (validate(ein_trans_alias_best_guess_wo_reason,0)=0)
  DECLARE ein_trans_alias_best_guess_wo_reason = i4 WITH constant(45)
 ENDIF
 IF (validate(ein_submitted_batch,0)=0)
  DECLARE ein_submitted_batch = i4 WITH constant(46)
 ENDIF
 IF (validate(ein_dequeue_wf_batch,0)=0)
  DECLARE ein_dequeue_wf_batch = i4 WITH constant(47)
 ENDIF
 IF (validate(ein_account_date,0)=0)
  DECLARE ein_account_date = i4 WITH constant(48)
 ENDIF
 IF (validate(ein_entity,0)=0)
  DECLARE ein_entity = i4 WITH constant(49)
 ENDIF
 IF (validate(ein_pft_line_item,0)=0)
  DECLARE ein_pft_line_item = i4 WITH constant(50)
 ENDIF
 IF (validate(ein_transfer,0)=0)
  DECLARE ein_transfer = i4 WITH constant(51)
 ENDIF
 IF (validate(ein_suppress,0)=0)
  DECLARE ein_suppress = i4 WITH constant(52)
 ENDIF
 IF (validate(ein_related_trans,0)=0)
  DECLARE ein_related_trans = i4 WITH constant(53)
 ENDIF
 IF (validate(ein_wf_entity_status,0)=0)
  DECLARE ein_wf_entity_status = i4 WITH constant(54)
 ENDIF
 IF (validate(ein_health_plan,0)=0)
  DECLARE ein_health_plan = i4 WITH constant(55)
 ENDIF
 IF (validate(ein_global_preference,0)=0)
  DECLARE ein_global_preference = i4 WITH constant(56)
 ENDIF
 IF (validate(ein_balance,0)=0)
  DECLARE ein_balance = i4 WITH constant(57)
 ENDIF
 IF (validate(ein_user_name,0)=0)
  DECLARE ein_user_name = i4 WITH constant(58)
 ENDIF
 IF (validate(ein_ready_to_bill,0)=0)
  DECLARE ein_ready_to_bill = i4 WITH constant(59)
 ENDIF
 IF (validate(ein_ready_to_bill_claim,0)=0)
  DECLARE ein_ready_to_bill_claim = i4 WITH constant(60)
 ENDIF
 IF (validate(ein_umdap_del,0)=0)
  DECLARE ein_umdap_del = i4 WITH constant(61)
 ENDIF
 IF (validate(ein_umdap_quest,0)=0)
  DECLARE ein_umdap_quest = i4 WITH constant(62)
 ENDIF
 IF (validate(ein_umdap_hist,0)=0)
  DECLARE ein_umdap_hist = i4 WITH constant(63)
 ENDIF
 IF (validate(ein_new_entity,0)=0)
  DECLARE ein_new_entity = i4 WITH constant(64)
 ENDIF
 IF (validate(ein_account_selfpay_bal,0)=0)
  DECLARE ein_account_selfpay_bal = i4 WITH constant(65)
 ENDIF
 IF (validate(ein_guarantor_selfpay_bal,0)=0)
  DECLARE ein_guarantor_selfpay_bal = i4 WITH constant(66)
 ENDIF
 IF (validate(ein_queue,0)=0)
  DECLARE ein_queue = i4 WITH constant(67)
 ENDIF
 IF (validate(ein_supervisor,0)=0)
  DECLARE ein_supervisor = i4 WITH constant(68)
 ENDIF
 IF (validate(ein_ar_management,0)=0)
  DECLARE ein_ar_management = i4 WITH constant(69)
 ENDIF
 IF (validate(ein_status,0)=0)
  DECLARE ein_status = i4 WITH constant(70)
 ENDIF
 IF (validate(ein_status_type_event,0)=0)
  DECLARE ein_status_type_event = i4 WITH constant(71)
 ENDIF
 IF (validate(ein_pftencntr_selfpay_bal,0)=0)
  DECLARE ein_pftencntr_selfpay_bal = i4 WITH constant(72)
 ENDIF
 IF (validate(ein_batch_event,0)=0)
  DECLARE ein_batch_event = i4 WITH constant(73)
 ENDIF
 IF (validate(ein_ready_to_bill_all_sp,0)=0)
  DECLARE ein_ready_to_bill_all_sp = i4 WITH constant(74)
 ENDIF
 IF (validate(ein_account_stmt,0)=0)
  DECLARE ein_account_stmt = i4 WITH constant(75)
 ENDIF
 IF (validate(ein_pft_encntr_stmt,0)=0)
  DECLARE ein_pft_encntr_stmt = i4 WITH constant(76)
 ENDIF
 IF (validate(ein_guarantor_stmt,0)=0)
  DECLARE ein_guarantor_stmt = i4 WITH constant(77)
 ENDIF
 IF (validate(ein_pft_encntr_claim,0)=0)
  DECLARE ein_pft_encntr_claim = i4 WITH constant(78)
 ENDIF
 IF (validate(ein_pftencntr_combine,0)=0)
  DECLARE ein_pftencntr_combine = i4 WITH constant(79)
 ENDIF
 IF (validate(ein_current_eob,0)=0)
  DECLARE ein_current_eob = i4 WITH constant(80)
 ENDIF
 IF (validate(ein_prior_eobs,0)=0)
  DECLARE ein_prior_eobs = i4 WITH constant(81)
 ENDIF
 IF (validate(ein_last,0)=0)
  DECLARE ein_last = i4 WITH constant(82)
 ENDIF
 IF (validate(ein_cob,0)=0)
  DECLARE ein_cob = i4 WITH constant(83)
 ENDIF
 IF (validate(ein_encounter_active,0)=0)
  DECLARE ein_encounter_active = i4 WITH constant(84)
 ENDIF
 IF (validate(ein_remittance_all,0)=0)
  DECLARE ein_remittance_all = i4 WITH constant(85)
 ENDIF
 IF (validate(ein_pay_plan,0)=0)
  DECLARE ein_pay_plan = i4 WITH constant(86)
 ENDIF
 IF (validate(ein_guar_acct,0)=0)
  DECLARE ein_guar_acct = i4 WITH constant(87)
 ENDIF
 IF (validate(ein_report,0)=0)
  DECLARE ein_report = i4 WITH constant(88)
 ENDIF
 IF (validate(ein_ime_benefit_order,0)=0)
  DECLARE ein_ime_benefit_order = i4 WITH constant(89)
 ENDIF
 IF (validate(ein_formal_payment_plan,0)=0)
  DECLARE ein_formal_payment_plan = i4 WITH constant(90)
 ENDIF
 IF (validate(ein_guarantor_account,0)=0)
  DECLARE ein_guarantor_account = i4 WITH constant(91)
 ENDIF
 IF ((validate(gnstat,- (1))=- (1)))
  DECLARE gnstat = i4 WITH noconstant(0)
 ENDIF
 IF (validate(none_action,0)=0
  AND validate(none_action,1)=1)
  DECLARE none_action = i4 WITH public, constant(0)
 ENDIF
 IF (validate(add_action,0)=0
  AND validate(add_action,1)=1)
  DECLARE add_action = i4 WITH public, constant(1)
 ENDIF
 IF (validate(chg_action,0)=0
  AND validate(chg_action,1)=1)
  DECLARE chg_action = i4 WITH public, constant(2)
 ENDIF
 IF (validate(del_action,0)=0
  AND validate(del_action,1)=1)
  DECLARE del_action = i4 WITH public, constant(3)
 ENDIF
 IF (validate(pft_publish_event_flag,null_i2)=null_i2)
  DECLARE pft_publish_event_flag = i2 WITH public, noconstant(0)
 ENDIF
 DECLARE __hpsys = i4 WITH protect, noconstant(0)
 DECLARE __lpsysstat = i4 WITH protect, noconstant(0)
 IF ( NOT (validate(threads)))
  FREE RECORD threads
  RECORD threads(
    1 objarray[*]
      2 request_handle = i4
      2 start_time = dq8
  )
 ENDIF
 IF ( NOT (validate(codevalueslist)))
  RECORD codevalueslist(
    1 codevalues[*]
      2 codevalue = f8
  ) WITH protect
 ENDIF
 IF (validate(logmsg,char(128))=char(128))
  SUBROUTINE (logmsg(sname=vc,smsg=vc,llevel=i4) =null)
    DECLARE hmsg = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrep = i4 WITH protect, noconstant(0)
    DECLARE hobjarray = i4 WITH protect, noconstant(0)
    DECLARE srvstatus = i4 WITH protect, noconstant(0)
    DECLARE submit_log = i4 WITH protect, constant(4099455)
    DECLARE cs23372_failed_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",23372,"FAILED"))
    CALL echo("")
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    CALL echo(concat(sname,": ",smsg))
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    CALL echo("")
    SET __hpsys = 0
    SET __lpsysstat = 0
    CALL uar_syscreatehandle(__hpsys,__lpsysstat)
    IF (__hpsys > 0)
     CALL uar_sysevent(__hpsys,llevel,nullterm(sname),nullterm(smsg))
     CALL uar_sysdestroyhandle(__hpsys)
    ENDIF
    IF (llevel=log_error)
     SET hmsg = uar_srvselectmessage(submit_log)
     SET hreq = uar_srvcreaterequest(hmsg)
     SET hrep = uar_srvcreatereply(hmsg)
     SET hobjarray = uar_srvadditem(hreq,"objArray")
     SET stat = uar_srvsetdouble(hobjarray,"final_status_cd",cs23372_failed_cd)
     SET stat = uar_srvsetstring(hobjarray,"task_name",nullterm(curprog))
     SET stat = uar_srvsetstring(hobjarray,"completion_msg",nullterm(smsg))
     SET stat = uar_srvsetdate(hobjarray,"end_dt_tm",cnvtdatetime(sysdate))
     SET stat = uar_srvsetstring(hobjarray,"current_node_name",nullterm(curnode))
     SET stat = uar_srvsetstring(hobjarray,"server_name",nullterm(build(curserver)))
     SET srvstatus = uar_srvexecute(hmsg,hreq,hrep)
     IF (srvstatus != 0)
      CALL echo(build2("Execution of pft_save_system_activity_log was not successful"))
     ENDIF
     CALL uar_srvdestroyinstance(hreq)
     CALL uar_srvdestroyinstance(hrep)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setreply,char(128))=char(128))
  SUBROUTINE (setreply(sstatus=vc,sname=vc,svalue=vc) =null)
    IF (validate(reply,char(128)) != char(128))
     SET reply->status_data.status = nullterm(sstatus)
     SET reply->status_data.subeventstatus[1].operationstatus = nullterm(sstatus)
     SET reply->status_data.subeventstatus[1].operationname = nullterm(sname)
     SET reply->status_data.subeventstatus[1].targetobjectvalue = nullterm(svalue)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setreplyblock,char(128))=char(128))
  SUBROUTINE (setreplyblock(sstatus=c1,soperstatus=c1,sname=vc,svalue=vc) =null)
   CALL logmsg(sname,svalue,log_debug)
   IF (validate(reply,char(128)) != char(128))
    SET reply->status_data.status = nullterm(sstatus)
    SET reply->status_data.subeventstatus[1].operationstatus = nullterm(soperstatus)
    SET reply->status_data.subeventstatus[1].operationname = nullterm(sname)
    SET reply->status_data.subeventstatus[1].targetobjectvalue = nullterm(svalue)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(beginscript,char(128))=char(128))
  SUBROUTINE (beginscript(sname=vc) =null)
   CALL logmsg(sname,"Begin Script",log_debug)
   CALL setreply("F",sname,"Begin Script")
  END ;Subroutine
 ENDIF
 IF (validate(exitscript,char(128))=char(128))
  SUBROUTINE (exitscript(sname=vc) =null)
   CALL logmsg(sname,"Exit Script",log_debug)
   CALL setreply("S",sname,"Exit Script")
  END ;Subroutine
 ENDIF
 IF (validate(abortscript,char(128))=char(128))
  SUBROUTINE (abortscript(sname=vc,smsg=vc) =null)
   CALL logmsg(sname,smsg,log_warning)
   CALL setreply("F",sname,smsg)
  END ;Subroutine
 ENDIF
 IF (validate(setfieldheader,char(128))=char(128))
  SUBROUTINE (setfieldheader(sfield=vc,stype=vc,sdisplay=vc) =null)
   DECLARE nheadersize = i2 WITH noconstant(0)
   IF (validate(objreply->headers)=1)
    SET nheadersize = (size(objreply->headers,5)+ 1)
    SET stat = alterlist(objreply->headers,nheadersize)
    SET objreply->headers[nheadersize].field_name = sfield
    SET objreply->headers[nheadersize].field_type = stype
    SET objreply->headers[nheadersize].header_display = sdisplay
   ELSEIF (validate(reply->headers)=1)
    SET nheadersize = (size(reply->headers,5)+ 1)
    SET stat = alterlist(reply->headers,nheadersize)
    SET reply->headers[nheadersize].field_name = sfield
    SET reply->headers[nheadersize].field_type = stype
    SET reply->headers[nheadersize].header_display = sdisplay
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setfieldheaderattr,char(128))=char(128))
  SUBROUTINE (setfieldheaderattr(sfield=vc,stype=vc,sdisplay=vc,sgroupprefix=vc,sgrpaggrprefix=vc,
   sgrpaggrfnctn=vc,stotalprefix=vc,stotalfunction=vc) =null)
   DECLARE nheadersize = i2 WITH noconstant(0)
   IF (validate(objreply->headers,char(128)) != char(128))
    SET nheadersize = (size(objreply->headers,5)+ 1)
    SET stat = alterlist(objreply->headers,nheadersize)
    SET objreply->headers[nheadersize].field_name = sfield
    SET objreply->headers[nheadersize].field_type = stype
    SET objreply->headers[nheadersize].header_display = sdisplay
    SET objreply->headers[nheadersize].group_prefix = sgroupprefix
    SET objreply->headers[nheadersize].group_aggr_prefix = sgrpaggrprefix
    SET objreply->headers[nheadersize].group_aggr_func = sgrpaggrfnctn
    SET objreply->headers[nheadersize].total_prefix = stotalprefix
    SET objreply->headers[nheadersize].total_func = stotalfunction
   ELSEIF (validate(reply->headers,char(128)) != char(128))
    SET nheadersize = (size(reply->headers,5)+ 1)
    SET stat = alterlist(reply->headers,nheadersize)
    SET reply->headers[nheadersize].field_name = sfield
    SET reply->headers[nheadersize].field_type = stype
    SET reply->headers[nheadersize].header_display = sdisplay
    SET reply->headers[nheadersize].group_prefix = sgroupprefix
    SET reply->headers[nheadersize].group_aggr_prefix = sgrpaggrprefix
    SET reply->headers[nheadersize].group_aggr_func = sgrpaggrfnctn
    SET reply->headers[nheadersize].total_prefix = stotalprefix
    SET reply->headers[nheadersize].total_func = stotalfunction
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(formatcurrency,char(128))=char(128))
  SUBROUTINE (formatcurrency(damt=f8) =vc)
    DECLARE sformattedamt = vc WITH noconstant("")
    SET sformattedamt = format(damt,"#########.##;I$,;F")
    IF (damt <= 0)
     SET sformattedamt = trim(sformattedamt,3)
     SET sformattedamt = substring(2,textlen(sformattedamt),sformattedamt)
     SET sformattedamt = concat("(",trim(sformattedamt,3),")")
    ENDIF
    SET sformattedamt = trim(sformattedamt,3)
    RETURN(sformattedamt)
  END ;Subroutine
 ENDIF
 IF (validate(setsrvdouble,char(128))=char(128))
  SUBROUTINE (setsrvdouble(hhandle=i4,sfield=vc,dvalue=f8) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetdouble(hhandle,nullterm(sfield),dvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvstring,char(128))=char(128))
  SUBROUTINE (setsrvstring(hhandle=i4,sfield=vc,svalue=vc) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetstring(hhandle,nullterm(sfield),nullterm(svalue))
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvlong,char(128))=char(128))
  SUBROUTINE (setsrvlong(hhandle=i4,sfield=vc,lvalue=i4) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetlong(hhandle,nullterm(sfield),lvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvshort,char(128))=char(128))
  SUBROUTINE (setsrvshort(hhandle=i4,sfield=vc,nvalue=i4) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetshort(hhandle,nullterm(sfield),nvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvdate,char(128))=char(128))
  SUBROUTINE (setsrvdate(hhandle=i4,sfield=vc,dtvalue=q8) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetdate(hhandle,nullterm(sfield),dtvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(publishevent,char(128))=char(128))
  SUBROUTINE (publishevent(dummyvar=i4) =null)
    CALL logmsg(curprog,"IN PublishEvent",log_debug)
    DECLARE nappid = i4 WITH protect, constant(4080000)
    DECLARE ntaskid = i4 WITH protect, constant(4080000)
    DECLARE nreqid = i4 WITH protect, constant(4080140)
    DECLARE sreq = vc WITH protect, constant("pft_manage_event_completion")
    DECLARE happ = i4 WITH protect, noconstant(0)
    DECLARE htask = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrequest = i4 WITH protect, noconstant(0)
    DECLARE hitem = i4 WITH protect, noconstant(0)
    DECLARE hreply = i4 WITH protect, noconstant(0)
    DECLARE hstatus = i4 WITH protect, noconstant(0)
    DECLARE ncnt = i4 WITH protect, noconstant(0)
    DECLARE npidx = i4 WITH protect, noconstant(0)
    DECLARE ipublisheventflg = i2 WITH constant(validate(pft_publish_event_flag,0))
    IF (validate(pft_publish_event_flag))
     CALL logmsg(curprog,concat("pft_publish_event_flag exist. value:: ",cnvtstring(
        pft_publish_event_flag,5)),4)
    ELSE
     CALL logmsg(curprog,"pft_publish_event_flag doesn't exist",4)
    ENDIF
    IF (validate(reply->objarray,char(128))=char(128))
     CALL logmsg(curprog,"No objArray found in reply",log_debug)
     RETURN
    ENDIF
    IF (validate(reply->status_data.status,"F") != "S")
     CALL logmsg(curprog,concat("Reply status as (",validate(reply->status_data.status,"F"),
       "). Not publishing events."),log_debug)
     RETURN
    ENDIF
    CASE (ipublisheventflg)
     OF 0:
      SET curalias eventrec reply->objarray[npidx]
      SET ncnt = size(reply->objarray,5)
     OF 1:
      CALL queueitemstoeventrec(0)
      RETURN
     OF 2:
      SET curalias eventrec pft_event_rec->objarray[npidx]
      SET ncnt = size(pft_event_rec->objarray,5)
    ENDCASE
    IF (ncnt > 0)
     SET npidx = 1
     IF (validate(eventrec->published_ind,null_i2)=null_i2)
      CALL logmsg(curprog,"Field published_ind not found in objArray",log_debug)
      RETURN
     ENDIF
     SET gnstat = uar_crmbeginapp(nappid,happ)
     IF (gnstat != 0)
      CALL logmsg(curprog,"Unable to create application instance (4080000)",log_error)
      RETURN
     ENDIF
     SET gnstat = uar_crmbegintask(happ,ntaskid,htask)
     IF (gnstat != 0)
      CALL logmsg(curprog,"Unable to create task instance (4080000)",log_error)
      IF (happ > 0)
       CALL uar_crmendapp(happ)
      ENDIF
      RETURN
     ENDIF
     FOR (npidx = 1 TO ncnt)
       IF ((eventrec->published_ind=false))
        SET gnstat = uar_crmbeginreq(htask,nullterm(sreq),nreqid,hreq)
        IF (gnstat != 0)
         CALL logmsg(curprog,"Unable to create request instance (4080140)",log_error)
        ELSE
         SET hrequest = uar_crmgetrequest(hreq)
         IF (hrequest=0)
          CALL logmsg(curprog,"Unable to retrieve request handle for (4080140)",log_error)
         ELSE
          SET hitem = uar_srvadditem(hrequest,"objArray")
          IF (hitem=0)
           CALL logmsg(curprog,"Unable to add item to request (4080140)",log_error)
          ELSE
           IF (validate(eventrec->event_key,char(128)) != char(128))
            CALL setsrvstring(hitem,"event_key",eventrec->event_key)
           ELSE
            CALL logmsg(curprog,"Field event_key not found in objArray",log_debug)
           ENDIF
           IF (validate(eventrec->category_key,char(128)) != char(128))
            CALL setsrvstring(hitem,"category_key",eventrec->category_key)
           ELSE
            CALL logmsg(curprog,"Field category_key not found in objArray",log_debug)
           ENDIF
           IF (validate(eventrec->acct_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"acct_id",eventrec->acct_id)
           ENDIF
           IF (validate(eventrec->pft_encntr_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_encntr_id",eventrec->pft_encntr_id)
           ENDIF
           IF (validate(eventrec->encntr_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"encntr_id",eventrec->encntr_id)
           ENDIF
           IF (validate(eventrec->bo_hp_reltn_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"bo_hp_reltn_id",eventrec->bo_hp_reltn_id)
           ENDIF
           IF (validate(eventrec->corsp_activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"corsp_activity_id",eventrec->corsp_activity_id)
           ENDIF
           IF (validate(eventrec->activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"activity_id",eventrec->activity_id)
           ENDIF
           IF (validate(eventrec->pft_charge_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_charge_id",eventrec->pft_charge_id)
           ENDIF
           IF (validate(eventrec->service_cd,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"entity_service_cd",eventrec->service_cd)
           ENDIF
           IF (validate(eventrec->batch_trans_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"batch_trans_id",eventrec->batch_trans_id)
           ENDIF
           IF (validate(eventrec->pft_bill_activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_bill_activity_id",eventrec->pft_bill_activity_id)
           ENDIF
           IF (validate(eventrec->bill_vrsn_nbr,null_i4) != null_i4)
            CALL setsrvlong(hitem,"bill_vrsn_nbr",eventrec->bill_vrsn_nbr)
           ENDIF
           IF (validate(eventrec->pe_status_reason_cd,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pe_status_reason_cd",eventrec->pe_status_reason_cd)
           ENDIF
           CALL logmsg("PFT_COMMON",build("pft_publish_event_binding::",validate(
              pft_publish_event_binding,"N/A")),log_debug)
           IF (validate(pft_publish_event_binding,"") != "")
            SET gnstat = uar_crmperformas(hreq,nullterm(pft_publish_event_binding))
           ELSE
            SET gnstat = uar_crmperform(hreq)
           ENDIF
           IF (gnstat != 0)
            CALL logmsg(curprog,concat("Failed to execute server step (",cnvtstring(nreqid,11),")"),
             log_error)
           ELSE
            SET hreply = uar_crmgetreply(hreq)
            IF (hreply=0)
             CALL logmsg(curprog,"Failed to retrieve reply structure",log_error)
            ELSE
             SET hstatus = uar_srvgetstruct(hreply,"status_data")
             IF (hstatus=0)
              CALL logmsg(curprog,"Failed to retrieve status_block",log_error)
             ELSE
              IF (uar_srvgetstringptr(hstatus,"status")="S")
               SET eventrec->published_ind = true
              ENDIF
             ENDIF
            ENDIF
           ENDIF
          ENDIF
         ENDIF
        ENDIF
        IF (hreq > 0)
         CALL uar_crmendreq(hreq)
        ENDIF
       ENDIF
     ENDFOR
     IF (htask > 0)
      CALL uar_crmendtask(htask)
     ENDIF
     IF (happ > 0)
      CALL uar_crmendapp(happ)
     ENDIF
    ELSE
     CALL logmsg(curprog,"Not objects in objArray",log_debug)
    ENDIF
    SET curalias eventrec off
  END ;Subroutine
 ENDIF
 IF (validate(queueitemstoeventrec,char(128))=char(128))
  SUBROUTINE (queueitemstoeventrec(dummyvar=i4) =null)
    DECLARE ncnt = i4 WITH protect, noconstant(0)
    DECLARE npeventidx = i4 WITH protect, noconstant(0)
    DECLARE npidx = i4 WITH protect, noconstant(0)
    IF (validate(pft_event_rec,char(128))=char(128))
     CALL logmsg(curprog,"pft_event_rec must be declared by call InitEvents",4)
    ENDIF
    SET curalias event_rec pft_event_rec->objarray[npeventidx]
    SET curalias reply_rec reply->objarray[npidx]
    SET ncnt = size(reply->objarray,5)
    FOR (npidx = 1 TO ncnt)
      IF (validate(reply_rec->published_ind,true)=false)
       SET npeventidx = (size(pft_event_rec->objarray,5)+ 1)
       SET stat = alterlist(pft_event_rec->objarray,npeventidx)
       SET event_rec->published_ind = false
       SET event_rec->event_key = validate(reply_rec->event_key,"")
       SET event_rec->category_key = validate(reply_rec->category_key,"")
       SET event_rec->acct_id = validate(reply_rec->acct_id,0.0)
       SET event_rec->pft_encntr_id = validate(reply_rec->pft_encntr_id,0.0)
       SET event_rec->encntr_id = validate(reply_rec->encntr_id,0.0)
       SET event_rec->bo_hp_reltn_id = validate(reply_rec->bo_hp_reltn_id,0.0)
       SET event_rec->corsp_activity_id = validate(reply_rec->corsp_activity_id,0.0)
       SET event_rec->activity_id = validate(reply_rec->activity_id,0.0)
       SET event_rec->pft_charge_id = validate(reply_rec->pft_charge_id,0.0)
       SET event_rec->service_cd = validate(reply_rec->service_cd,0.0)
       SET event_rec->batch_trans_id = validate(reply_rec->batch_trans_id,0.0)
       SET event_rec->pft_bill_activity_id = validate(reply_rec->pft_bill_activity_id,0.0)
       SET event_rec->bill_vrsn_nbr = validate(reply_rec->bill_vrsn_nbr,0)
       SET event_rec->pe_status_reason_cd = validate(reply_rec->pe_status_reason_cd,0.0)
       SET reply_rec->published_ind = true
      ENDIF
    ENDFOR
    SET curalias event_rec off
    SET curalias reply_rec off
  END ;Subroutine
 ENDIF
 IF (validate(initevents,char(128))=char(128))
  SUBROUTINE (initevents(publishflag=i2) =null)
    SET pft_publish_event_flag = publishflag
    FREE RECORD pft_event_rec
    RECORD pft_event_rec(
      1 objarray[*]
        2 service_cd = f8
        2 updt_id = f8
        2 event_key = vc
        2 category_key = vc
        2 published_ind = i2
        2 pe_status_reason_cd = f8
        2 acct_id = f8
        2 activity_id = f8
        2 batch_denial_file_r_id = f8
        2 batch_trans_ext_id = f8
        2 batch_trans_file_id = f8
        2 batch_trans_id = f8
        2 benefit_order_id = f8
        2 bill_item_id = f8
        2 bill_templ_id = f8
        2 bill_vrsn_nbr = i4
        2 billing_entity_id = f8
        2 bo_hp_reltn_id = f8
        2 charge_item_id = f8
        2 chrg_activity_id = f8
        2 claim_status_id = f8
        2 client_org_id = f8
        2 corsp_activity_id = f8
        2 corsp_log_reltn_id = f8
        2 denial_id = f8
        2 dirty_flag = i4
        2 encntr_id = f8
        2 guar_acct_id = f8
        2 guarantor_id = f8
        2 health_plan_id = f8
        2 long_text_id = f8
        2 organization_id = f8
        2 payor_org_id = f8
        2 pe_status_reason_id = f8
        2 person_id = f8
        2 pft_balance_id = f8
        2 pft_bill_activity_id = f8
        2 pft_charge_id = f8
        2 pft_encntr_fact_id = f8
        2 pft_encntr_id = f8
        2 pft_line_item_id = f8
        2 trans_alias_id = f8
        2 pft_payment_plan_id = f8
        2 daily_encntr_bal_id = f8
        2 daily_acct_bal_id = f8
        2 active_ind = i2
        2 active_status_cd = f8
        2 active_status_disp = vc
        2 active_status_desc = vc
        2 active_status_mean = vc
        2 active_status_code_set = f8
        2 active_status_dt_tm = dq8
        2 active_status_prsnl_id = f8
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 updt_applctx = f8
        2 updt_cnt = i4
        2 updt_dt_tm = dq8
        2 updt_id = f8
        2 updt_task = f8
        2 benefit_status_cd = f8
        2 financial_class_cd = f8
        2 payment_plan_flag = i2
        2 payment_location_id = f8
        2 encntr_plan_cob_id = f8
        2 guarantor_account_id = f8
        2 guarantor_id1 = f8
        2 guarantor_id2 = f8
        2 cbos_pe_reltn_id = f8
        2 post_dt_tm = dq8
        2 posting_category_type_flag = i2
    ) WITH persistscript
  END ;Subroutine
 ENDIF
 IF (validate(processevents,char(128))=char(128))
  SUBROUTINE (processevents(dummyvar=i4) =null)
    DECLARE itmppublishflag = i2 WITH private, noconstant(pft_publish_event_flag)
    SET pft_publish_event_flag = 2
    CALL publishevent(0)
    SET pft_publish_event_flag = itmppublishflag
  END ;Subroutine
 ENDIF
 IF (validate(stamptime,char(128))=char(128))
  SUBROUTINE (stamptime(dummyvar=i4) =null)
    CALL echo("-----------------TIME STAMP----------------")
    CALL echo(build("-----------",curprog,"-----------"))
    CALL echo(format(curtime3,"hh:mm:ss:cc;3;M"))
    CALL echo("-----------------TIME STAMP----------------")
  END ;Subroutine
 ENDIF
 IF (validate(isequal,char(128))=char(128))
  SUBROUTINE isequal(damt1,damt2)
   DECLARE tmpdiff = f8 WITH private, noconstant(abs((abs(damt1) - abs(damt2))))
   IF (tmpdiff < 0.009)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(nextavailablethread,char(128))=char(128))
  DECLARE nextavailablethread(null) = i4
  SUBROUTINE nextavailablethread(null)
    DECLARE thread_cnt = i4 WITH noconstant(size(threads->objarray,5))
    DECLARE i = i4 WITH noconstant(thread_cnt)
    DECLARE looping = i2 WITH noconstant(true)
    WHILE (thread_cnt > 0
     AND looping)
     IF ((threads->objarray[i].request_handle > 0))
      IF ((threads->objarray[i].start_time=null))
       SET threads->objarray[i].start_time = cnvtdatetime(sysdate)
      ENDIF
      IF (uar_crmperformpeek(threads->objarray[i].request_handle) IN (0, 1, 4, 5))
       SET stat = uar_crmsynch(threads->objarray[i].request_handle)
       CALL uar_crmendreq(threads->objarray[i].request_handle)
       SET threads->objarray[i].request_handle = 0
       SET threads->objarray[i].start_time = null
       SET looping = false
      ENDIF
     ELSE
      SET looping = false
     ENDIF
     IF (looping)
      SET i = evaluate(i,1,thread_cnt,(i - 1))
     ENDIF
    ENDWHILE
    RETURN(i)
  END ;Subroutine
 ENDIF
 IF (validate(waituntilthreadscomplete,char(128))=char(128))
  DECLARE waituntilthreadscomplete(null) = i4
  SUBROUTINE waituntilthreadscomplete(null)
    DECLARE thread_cnt = i4 WITH noconstant(size(threads->objarray,5))
    DECLARE i = i4 WITH noconstant(thread_cnt)
    FOR (i = 1 TO thread_cnt)
      IF ((threads->objarray[i].request_handle > 0))
       IF ((threads->objarray[i].start_time=null))
        SET threads->objarray[i].start_time = cnvtdatetime(sysdate)
       ENDIF
       SET stat = uar_crmsynch(threads->objarray[i].request_handle)
       CALL uar_crmendreq(threads->objarray[i].request_handle)
       SET threads->objarray[i].request_handle = 0
       SET threads->objarray[i].start_time = null
      ENDIF
    ENDFOR
    RETURN
  END ;Subroutine
 ENDIF
 IF (validate(waitforthreadtocomplete,char(128))=char(128))
  SUBROUTINE (waitforthreadtocomplete(thread=i4) =i4)
    IF ( NOT (validate(threads)))
     RETURN(0)
    ENDIF
    IF ( NOT (size(threads->objarray,5) > 0))
     RETURN(0)
    ENDIF
    IF ((threads->objarray[thread].request_handle > 0))
     IF ((threads->objarray[thread].start_time=null))
      SET threads->objarray[thread].start_time = cnvtdatetime(sysdate)
     ENDIF
     SET stat = uar_crmsynch(threads->objarray[thread].request_handle)
     CALL uar_crmendreq(threads->objarray[thread].request_handle)
     SET threads->objarray[thread].request_handle = 0
     SET threads->objarray[thread].start_time = null
    ENDIF
    RETURN(thread)
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalueindex,char(128))=char(128))
  SUBROUTINE (getcodevalueindex(pcodevalue=f8,prcodevalueslist=vc(ref)) =i4)
    IF (((pcodevalue <= 0.0) OR (size(prcodevalueslist->codevalues,5)=0)) )
     RETURN(0)
    ENDIF
    DECLARE num = i4 WITH protect, noconstant(0)
    RETURN(locateval(num,1,size(prcodevalueslist->codevalues,5),pcodevalue,prcodevalueslist->
     codevalues[num].codevalue))
  END ;Subroutine
 ENDIF
 IF (validate(pfteventlogstruct,char(128))=char(128))
  RECORD pfteventlogstruct(
    1 event_list[*]
      2 activity_id = f8
      2 type_cd = f8
      2 sub_type_cd = f8
      2 desc = vc
      2 detail_list[*]
        3 strdetail = vc
      2 reltn_list[*]
        3 activity_id = f8
        3 acct_id = f8
        3 pft_encntr_id = f8
        3 parent_entity_name = c32
        3 parent_entity_id = f8
  )
 ENDIF
 IF (validate(reply,char(128)) != char(128))
  RECORD reply(
    1 pft_status_data
      2 status = c1
      2 subeventstatus[*]
        3 status = c1
        3 table_name = vc
        3 pk_values = vc
    1 mod_objs[*]
      2 entity_type = vc
      2 mod_recs[*]
        3 table_name = vc
        3 pk_values = vc
        3 mod_flds[*]
          4 field_name = vc
          4 field_type = vc
          4 field_value_obj = vc
          4 field_value_db = vc
    1 failure_stack
      2 failures[*]
        3 programname = vc
        3 routinename = vc
        3 message = vc
    1 status_data
      2 status = c1
      2 subeventstatus[1]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF (validate(createevent,char(128))=char(128))
  SUBROUTINE (createevent(type_cd=f8,sub_type_cd=f8,desc=vc) =i4)
    DECLARE srresult = i4 WITH noconstant(0)
    DECLARE ceindex = i4 WITH private
    SET ceindex = size(pfteventlogstruct->event_list,5)
    SET ceindex += 1
    SET stat = alterlist(pfteventlogstruct->event_list,ceindex)
    SET pfteventlogstruct->event_list[ceindex].type_cd = type_cd
    SET pfteventlogstruct->event_list[ceindex].sub_type_cd = sub_type_cd
    SET pfteventlogstruct->event_list[ceindex].desc = desc
    SET srresult = ceindex
    RETURN(srresult)
  END ;Subroutine
 ENDIF
 IF (validate(addeventdetailstring,char(128))=char(128))
  SUBROUTINE (addeventdetailstring(hevent=i4,strdetail=vc) =null)
    DECLARE strindex = i4 WITH private
    SET strindex = size(pfteventlogstruct->event_list[hevent].detail_list,5)
    SET strindex += 1
    SET stat = alterlist(pfteventlogstruct->event_list[hevent].detail_list,strindex)
    SET pfteventlogstruct->event_list[hevent].detail_list[strindex].strdetail = trim(strdetail)
  END ;Subroutine
 ENDIF
 IF (validate(addeventreltn,char(128))=char(128))
  SUBROUTINE (addeventreltn(hevent=i4,acctid=f8,pft_encntr_id=f8,parent_entity_name=vc,
   parent_entity_id=f8) =null)
    DECLARE aerindex = i4 WITH private
    SET aerindex = size(pfteventlogstruct->event_list[hevent].reltn_list,5)
    SET aerindex += 1
    SET stat = alterlist(pfteventlogstruct->event_list[hevent].reltn_list,aerindex)
    SET pfteventlogstruct->event_list[hevent].reltn_list[aerindex].acct_id = acctid
    SET pfteventlogstruct->event_list[hevent].reltn_list[aerindex].pft_encntr_id = pft_encntr_id
    SET pfteventlogstruct->event_list[hevent].reltn_list[aerindex].parent_entity_name =
    parent_entity_name
    SET pfteventlogstruct->event_list[hevent].reltn_list[aerindex].parent_entity_id =
    parent_entity_id
  END ;Subroutine
 ENDIF
 IF (validate(writeevent,char(128))=char(128))
  SUBROUTINE (writeevent(hevent=i4) =i2)
    FREE RECORD addcorsplog
    RECORD addcorsplog(
      1 objarray[*]
        2 activity_id = f8
        2 corsp_type_cd = f8
        2 corsp_sub_type_cd = f8
        2 corsp_desc = c250
        2 long_text_id = f8
    )
    FREE RECORD addcorsplogreltn
    RECORD addcorsplogreltn(
      1 objarray[*]
        2 activity_id = f8
        2 acct_id = f8
        2 pft_encntr_id = f8
        2 parent_entity_name = c32
        2 parent_entity_id = f8
    )
    FREE RECORD addlongtext
    RECORD addlongtext(
      1 objarray[*]
        2 parent_entity_id = f8
        2 parent_entity_name = c32
        2 long_text = vc
    )
    DECLARE strdetail = vc WITH private
    DECLARE tcorsp_reltn_activity_id = f8 WITH noconstant(0.0)
    DECLARE tlong_text_id = f8 WITH noconstant(0.0)
    DECLARE reltnidx = i4 WITH noconstant(0)
    SET stat = initrec(reply)
    IF (size(pfteventlogstruct->event_list[hevent].detail_list,5) > 0)
     SET strdetail = pfteventlogstruct->event_list[hevent].detail_list[1].strdetail
    ELSE
     SET strdetail = ""
    ENDIF
    IF (size(pfteventlogstruct->event_list[hevent].detail_list,5) > 1)
     FOR (altidx = 2 TO size(pfteventlogstruct->event_list[hevent].detail_list,5))
       SET strdetail = concat(strdetail," || ",pfteventlogstruct->event_list[hevent].detail_list[
        altidx].strdetail)
     ENDFOR
    ENDIF
    SET stat = alterlist(addlongtext->objarray,1)
    SET addlongtext->objarray[1].long_text = strdetail
    SET addlongtext->objarray[1].parent_entity_id = 0.0
    SET addlongtext->objarray[1].parent_entity_name = ""
    EXECUTE pft_da_add_long_text  WITH replace("REQUEST",addlongtext), replace("REPLY",reply)
    IF ((reply->status_data.status != "S"))
     CALL logmsg(curprog,"FAILED SAVING LONG TEXT",log_error)
     RETURN(false)
    ENDIF
    IF ((reply->mod_objs[1].mod_recs[1].table_name="LONG_TEXT"))
     SET tlong_text_id = cnvtreal(reply->mod_objs[1].mod_recs[1].pk_values)
    ENDIF
    SET stat = alterlist(addcorsplog->objarray,1)
    SET addcorsplog->objarray[1].corsp_type_cd = pfteventlogstruct->event_list[hevent].type_cd
    SET addcorsplog->objarray[1].corsp_sub_type_cd = pfteventlogstruct->event_list[hevent].
    sub_type_cd
    SET addcorsplog->objarray[1].corsp_desc = pfteventlogstruct->event_list[hevent].desc
    SET addcorsplog->objarray[1].long_text_id = tlong_text_id
    EXECUTE pft_da_add_corsp_log  WITH replace("REQUEST",addcorsplog), replace("REPLY",reply)
    IF ((reply->status_data.status != "S"))
     CALL logmsg(curprog,"FAILED SAVING CORSP LOG EVENT",log_error)
     RETURN(false)
    ENDIF
    IF ((reply->mod_objs[1].mod_recs[2].table_name="CORSP_LOG"))
     SET tcorsp_activity_id = cnvtreal(reply->mod_objs[1].mod_recs[2].pk_values)
     SET pfteventlogstruct->event_list[hevent].activity_id = tcorsp_activity_id
    ENDIF
    FOR (aclridx = 1 TO size(pfteventlogstruct->event_list[hevent].reltn_list,5))
      SET stat = alterlist(addcorsplogreltn->objarray,aclridx)
      SET addcorsplogreltn->objarray[aclridx].acct_id = pfteventlogstruct->event_list[hevent].
      reltn_list[aclridx].acct_id
      SET addcorsplogreltn->objarray[aclridx].pft_encntr_id = pfteventlogstruct->event_list[hevent].
      reltn_list[aclridx].pft_encntr_id
      SET addcorsplogreltn->objarray[aclridx].parent_entity_name = pfteventlogstruct->event_list[
      hevent].reltn_list[aclridx].parent_entity_name
      SET addcorsplogreltn->objarray[aclridx].parent_entity_id = pfteventlogstruct->event_list[hevent
      ].reltn_list[aclridx].parent_entity_id
      SET addcorsplogreltn->objarray[aclridx].activity_id = tcorsp_activity_id
    ENDFOR
    EXECUTE pft_da_add_corsp_log_reltn  WITH replace("REQUEST",addcorsplogreltn), replace("REPLY",
     reply)
    IF ((reply->status_data.status != "S"))
     CALL logmsg(curprog,"FAILED SAVING CORSP LOG RELTN",log_error)
     RETURN(false)
    ENDIF
    FOR (reltnidx2 = 3 TO size(reply->mod_objs[1].mod_recs,5))
      IF ((reply->mod_objs[1].mod_recs[reltnidx2].table_name="CORSP_LOG_RELTN"))
       SET reltnidx += 1
       SET pfteventlogstruct->event_list[hevent].reltn_list[reltnidx].activity_id = cnvtreal(reply->
        mod_objs[1].mod_recs[reltnidx2].pk_values)
      ENDIF
    ENDFOR
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(dumpeventstructure,char(128))=char(128))
  DECLARE dumpeventstructure(void) = null
  SUBROUTINE dumpeventstructure(void)
    CALL echorecord(pfteventlogstruct)
  END ;Subroutine
 ENDIF
 IF ("Z"=validate(pft_common_vrsn,"Z"))
  DECLARE pft_common_vrsn = vc WITH noconstant(""), public
 ENDIF
 SET pft_common_vrsn = "500383.087"
 IF ((validate(pft_neither,- (1))=- (1)))
  DECLARE pft_neither = i2 WITH constant(0)
 ENDIF
 IF ((validate(pft_debit,- (1))=- (1)))
  DECLARE pft_debit = i2 WITH constant(1)
 ENDIF
 IF ((validate(pft_credit,- (1))=- (1)))
  DECLARE pft_credit = i2 WITH constant(2)
 ENDIF
 IF (validate(null_f8,0.0)=0.0)
  DECLARE null_f8 = f8 WITH constant(- (0.00001))
 ENDIF
 IF (validate(null_i2,0)=0)
  DECLARE null_i2 = i2 WITH constant(- (1))
 ENDIF
 IF (validate(null_i4,0)=0)
  DECLARE null_i4 = i4 WITH constant(- (1))
 ENDIF
 IF ((validate(null_dt,- (1.0))=- (1.0)))
  DECLARE null_dt = q8 WITH constant(0.0)
 ENDIF
 IF (validate(null_vc,"Z")="Z")
  DECLARE null_vc = vc WITH constant("")
 ENDIF
 IF ((validate(upt_force,- (1))=- (1)))
  DECLARE upt_force = i4 WITH constant(- (99999))
 ENDIF
 IF ((validate(log_error,- (1))=- (1)))
  DECLARE log_error = i4 WITH constant(0)
 ENDIF
 IF ((validate(log_warning,- (1))=- (1)))
  DECLARE log_warning = i4 WITH constant(1)
 ENDIF
 IF ((validate(log_audit,- (1))=- (1)))
  DECLARE log_audit = i4 WITH constant(2)
 ENDIF
 IF ((validate(log_info,- (1))=- (1)))
  DECLARE log_info = i4 WITH constant(3)
 ENDIF
 IF ((validate(log_debug,- (1))=- (1)))
  DECLARE log_debug = i4 WITH constant(4)
 ENDIF
 IF (validate(ein_pft_charge,0)=0)
  DECLARE ein_pft_charge = i4 WITH constant(1)
 ENDIF
 IF (validate(ein_charge_item,0)=0)
  DECLARE ein_charge_item = i4 WITH constant(2)
 ENDIF
 IF (validate(ein_bill_header,0)=0)
  DECLARE ein_bill_header = i4 WITH constant(3)
 ENDIF
 IF (validate(ein_pft_encntr,0)=0)
  DECLARE ein_pft_encntr = i4 WITH constant(4)
 ENDIF
 IF (validate(ein_benefit_order,0)=0)
  DECLARE ein_benefit_order = i4 WITH constant(5)
 ENDIF
 IF (validate(ein_guarantor,0)=0)
  DECLARE ein_guarantor = i4 WITH constant(6)
 ENDIF
 IF (validate(ein_encounter,0)=0)
  DECLARE ein_encounter = i4 WITH constant(7)
 ENDIF
 IF (validate(ein_account,0)=0)
  DECLARE ein_account = i4 WITH constant(8)
 ENDIF
 IF (validate(ein_remittance,0)=0)
  DECLARE ein_remittance = i4 WITH constant(9)
 ENDIF
 IF (validate(ein_eob,0)=0)
  DECLARE ein_eob = i4 WITH constant(10)
 ENDIF
 IF (validate(ein_billing_entity,0)=0)
  DECLARE ein_billing_entity = i4 WITH constant(11)
 ENDIF
 IF (validate(ein_person,0)=0)
  DECLARE ein_person = i4 WITH constant(12)
 ENDIF
 IF (validate(ein_activity,0)=0)
  DECLARE ein_activity = i4 WITH constant(13)
 ENDIF
 IF (validate(ein_fin_nbr,0)=0)
  DECLARE ein_fin_nbr = i4 WITH constant(14)
 ENDIF
 IF (validate(ein_bo_hp_reltn,0)=0)
  DECLARE ein_bo_hp_reltn = i4 WITH constant(15)
 ENDIF
 IF (validate(ein_denial,0)=0)
  DECLARE ein_denial = i4 WITH constant(16)
 ENDIF
 IF (validate(ein_client_account,0)=0)
  DECLARE ein_client_account = i4 WITH constant(17)
 ENDIF
 IF (validate(ein_encntr_clln_reltn,0)=0)
  DECLARE ein_encntr_clln_reltn = i4 WITH constant(18)
 ENDIF
 IF (validate(ein_bill_nbr,0)=0)
  DECLARE ein_bill_nbr = i4 WITH constant(19)
 ENDIF
 IF (validate(ein_trans_alias,0)=0)
  DECLARE ein_trans_alias = i4 WITH constant(20)
 ENDIF
 IF (validate(ein_trans_alias_elements,0)=0)
  DECLARE ein_trans_alias_elements = i4 WITH constant(21)
 ENDIF
 IF (validate(ein_hold,0)=0)
  DECLARE ein_hold = i4 WITH constant(22)
 ENDIF
 IF (validate(ein_hold_prompt,0)=0)
  DECLARE ein_hold_prompt = i4 WITH constant(23)
 ENDIF
 IF (validate(ein_person_at,0)=0)
  DECLARE ein_person_at = i4 WITH constant(24)
 ENDIF
 IF (validate(ein_reversal,0)=0)
  DECLARE ein_reversal = i4 WITH constant(25)
 ENDIF
 IF (validate(ein_ext_acct_id_txt,0)=0)
  DECLARE ein_ext_acct_id_txt = i4 WITH constant(26)
 ENDIF
 IF (validate(ein_organization,0)=0)
  DECLARE ein_organization = i4 WITH constant(27)
 ENDIF
 IF (validate(ein_fifo,0)=0)
  DECLARE ein_fifo = i4 WITH constant(28)
 ENDIF
 IF (validate(ein_nopost,0)=0)
  DECLARE ein_nopost = i4 WITH constant(29)
 ENDIF
 IF (validate(ein_date_time,0)=0)
  DECLARE ein_date_time = i4 WITH constant(30)
 ENDIF
 IF (validate(ein_encntr_package,0)=0)
  DECLARE ein_encntr_package = i4 WITH constant(31)
 ENDIF
 IF (validate(ein_pay_plan_hist,0)=0)
  DECLARE ein_pay_plan_hist = i4 WITH constant(32)
 ENDIF
 IF (validate(ein_report_date,0)=0)
  DECLARE ein_report_date = i4 WITH constant(33)
 ENDIF
 IF (validate(ein_parent_entity,0)=0)
  DECLARE ein_parent_entity = i4 WITH constant(34)
 ENDIF
 IF (validate(ein_pay_plan_suggest,0)=0)
  DECLARE ein_pay_plan_suggest = i4 WITH constant(35)
 ENDIF
 IF (validate(ein_report_instance,0)=0)
  DECLARE ein_report_instance = i4 WITH constant(36)
 ENDIF
 IF (validate(ein_pft_fiscal_daily_id,0)=0)
  DECLARE ein_pft_fiscal_daily_id = i4 WITH constant(37)
 ENDIF
 IF (validate(ein_pft_encntr_fact_active,0)=0)
  DECLARE ein_pft_encntr_fact_active = i4 WITH constant(38)
 ENDIF
 IF (validate(ein_pft_encntr_fact_history,0)=0)
  DECLARE ein_pft_encntr_fact_history = i4 WITH constant(39)
 ENDIF
 IF (validate(ein_invoice,0)=0)
  DECLARE ein_invoice = i4 WITH constant(40)
 ENDIF
 IF (validate(ein_pending_batch,0)=0)
  DECLARE ein_pending_batch = i4 WITH constant(41)
 ENDIF
 IF (validate(ein_application,0)=0)
  DECLARE ein_application = i4 WITH constant(42)
 ENDIF
 IF (validate(ein_view,0)=0)
  DECLARE ein_view = i4 WITH constant(43)
 ENDIF
 IF (validate(ein_test,0)=0)
  DECLARE ein_test = i4 WITH constant(44)
 ENDIF
 IF (validate(ein_trans_alias_best_guess_wo_reason,0)=0)
  DECLARE ein_trans_alias_best_guess_wo_reason = i4 WITH constant(45)
 ENDIF
 IF (validate(ein_submitted_batch,0)=0)
  DECLARE ein_submitted_batch = i4 WITH constant(46)
 ENDIF
 IF (validate(ein_dequeue_wf_batch,0)=0)
  DECLARE ein_dequeue_wf_batch = i4 WITH constant(47)
 ENDIF
 IF (validate(ein_account_date,0)=0)
  DECLARE ein_account_date = i4 WITH constant(48)
 ENDIF
 IF (validate(ein_entity,0)=0)
  DECLARE ein_entity = i4 WITH constant(49)
 ENDIF
 IF (validate(ein_pft_line_item,0)=0)
  DECLARE ein_pft_line_item = i4 WITH constant(50)
 ENDIF
 IF (validate(ein_transfer,0)=0)
  DECLARE ein_transfer = i4 WITH constant(51)
 ENDIF
 IF (validate(ein_suppress,0)=0)
  DECLARE ein_suppress = i4 WITH constant(52)
 ENDIF
 IF (validate(ein_related_trans,0)=0)
  DECLARE ein_related_trans = i4 WITH constant(53)
 ENDIF
 IF (validate(ein_wf_entity_status,0)=0)
  DECLARE ein_wf_entity_status = i4 WITH constant(54)
 ENDIF
 IF (validate(ein_health_plan,0)=0)
  DECLARE ein_health_plan = i4 WITH constant(55)
 ENDIF
 IF (validate(ein_global_preference,0)=0)
  DECLARE ein_global_preference = i4 WITH constant(56)
 ENDIF
 IF (validate(ein_balance,0)=0)
  DECLARE ein_balance = i4 WITH constant(57)
 ENDIF
 IF (validate(ein_user_name,0)=0)
  DECLARE ein_user_name = i4 WITH constant(58)
 ENDIF
 IF (validate(ein_ready_to_bill,0)=0)
  DECLARE ein_ready_to_bill = i4 WITH constant(59)
 ENDIF
 IF (validate(ein_ready_to_bill_claim,0)=0)
  DECLARE ein_ready_to_bill_claim = i4 WITH constant(60)
 ENDIF
 IF (validate(ein_umdap_del,0)=0)
  DECLARE ein_umdap_del = i4 WITH constant(61)
 ENDIF
 IF (validate(ein_umdap_quest,0)=0)
  DECLARE ein_umdap_quest = i4 WITH constant(62)
 ENDIF
 IF (validate(ein_umdap_hist,0)=0)
  DECLARE ein_umdap_hist = i4 WITH constant(63)
 ENDIF
 IF (validate(ein_new_entity,0)=0)
  DECLARE ein_new_entity = i4 WITH constant(64)
 ENDIF
 IF (validate(ein_account_selfpay_bal,0)=0)
  DECLARE ein_account_selfpay_bal = i4 WITH constant(65)
 ENDIF
 IF (validate(ein_guarantor_selfpay_bal,0)=0)
  DECLARE ein_guarantor_selfpay_bal = i4 WITH constant(66)
 ENDIF
 IF (validate(ein_queue,0)=0)
  DECLARE ein_queue = i4 WITH constant(67)
 ENDIF
 IF (validate(ein_supervisor,0)=0)
  DECLARE ein_supervisor = i4 WITH constant(68)
 ENDIF
 IF (validate(ein_ar_management,0)=0)
  DECLARE ein_ar_management = i4 WITH constant(69)
 ENDIF
 IF (validate(ein_status,0)=0)
  DECLARE ein_status = i4 WITH constant(70)
 ENDIF
 IF (validate(ein_status_type_event,0)=0)
  DECLARE ein_status_type_event = i4 WITH constant(71)
 ENDIF
 IF (validate(ein_pftencntr_selfpay_bal,0)=0)
  DECLARE ein_pftencntr_selfpay_bal = i4 WITH constant(72)
 ENDIF
 IF (validate(ein_batch_event,0)=0)
  DECLARE ein_batch_event = i4 WITH constant(73)
 ENDIF
 IF (validate(ein_ready_to_bill_all_sp,0)=0)
  DECLARE ein_ready_to_bill_all_sp = i4 WITH constant(74)
 ENDIF
 IF (validate(ein_account_stmt,0)=0)
  DECLARE ein_account_stmt = i4 WITH constant(75)
 ENDIF
 IF (validate(ein_pft_encntr_stmt,0)=0)
  DECLARE ein_pft_encntr_stmt = i4 WITH constant(76)
 ENDIF
 IF (validate(ein_guarantor_stmt,0)=0)
  DECLARE ein_guarantor_stmt = i4 WITH constant(77)
 ENDIF
 IF (validate(ein_pft_encntr_claim,0)=0)
  DECLARE ein_pft_encntr_claim = i4 WITH constant(78)
 ENDIF
 IF (validate(ein_pftencntr_combine,0)=0)
  DECLARE ein_pftencntr_combine = i4 WITH constant(79)
 ENDIF
 IF (validate(ein_current_eob,0)=0)
  DECLARE ein_current_eob = i4 WITH constant(80)
 ENDIF
 IF (validate(ein_prior_eobs,0)=0)
  DECLARE ein_prior_eobs = i4 WITH constant(81)
 ENDIF
 IF (validate(ein_last,0)=0)
  DECLARE ein_last = i4 WITH constant(82)
 ENDIF
 IF (validate(ein_cob,0)=0)
  DECLARE ein_cob = i4 WITH constant(83)
 ENDIF
 IF (validate(ein_encounter_active,0)=0)
  DECLARE ein_encounter_active = i4 WITH constant(84)
 ENDIF
 IF (validate(ein_remittance_all,0)=0)
  DECLARE ein_remittance_all = i4 WITH constant(85)
 ENDIF
 IF (validate(ein_pay_plan,0)=0)
  DECLARE ein_pay_plan = i4 WITH constant(86)
 ENDIF
 IF (validate(ein_guar_acct,0)=0)
  DECLARE ein_guar_acct = i4 WITH constant(87)
 ENDIF
 IF (validate(ein_report,0)=0)
  DECLARE ein_report = i4 WITH constant(88)
 ENDIF
 IF (validate(ein_ime_benefit_order,0)=0)
  DECLARE ein_ime_benefit_order = i4 WITH constant(89)
 ENDIF
 IF (validate(ein_formal_payment_plan,0)=0)
  DECLARE ein_formal_payment_plan = i4 WITH constant(90)
 ENDIF
 IF (validate(ein_guarantor_account,0)=0)
  DECLARE ein_guarantor_account = i4 WITH constant(91)
 ENDIF
 IF ((validate(gnstat,- (1))=- (1)))
  DECLARE gnstat = i4 WITH noconstant(0)
 ENDIF
 IF (validate(none_action,0)=0
  AND validate(none_action,1)=1)
  DECLARE none_action = i4 WITH public, constant(0)
 ENDIF
 IF (validate(add_action,0)=0
  AND validate(add_action,1)=1)
  DECLARE add_action = i4 WITH public, constant(1)
 ENDIF
 IF (validate(chg_action,0)=0
  AND validate(chg_action,1)=1)
  DECLARE chg_action = i4 WITH public, constant(2)
 ENDIF
 IF (validate(del_action,0)=0
  AND validate(del_action,1)=1)
  DECLARE del_action = i4 WITH public, constant(3)
 ENDIF
 IF (validate(pft_publish_event_flag,null_i2)=null_i2)
  DECLARE pft_publish_event_flag = i2 WITH public, noconstant(0)
 ENDIF
 DECLARE __hpsys = i4 WITH protect, noconstant(0)
 DECLARE __lpsysstat = i4 WITH protect, noconstant(0)
 IF ( NOT (validate(threads)))
  FREE RECORD threads
  RECORD threads(
    1 objarray[*]
      2 request_handle = i4
      2 start_time = dq8
  )
 ENDIF
 IF ( NOT (validate(codevalueslist)))
  RECORD codevalueslist(
    1 codevalues[*]
      2 codevalue = f8
  ) WITH protect
 ENDIF
 IF (validate(logmsg,char(128))=char(128))
  SUBROUTINE (logmsg(sname=vc,smsg=vc,llevel=i4) =null)
    DECLARE hmsg = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrep = i4 WITH protect, noconstant(0)
    DECLARE hobjarray = i4 WITH protect, noconstant(0)
    DECLARE srvstatus = i4 WITH protect, noconstant(0)
    DECLARE submit_log = i4 WITH protect, constant(4099455)
    DECLARE cs23372_failed_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",23372,"FAILED"))
    CALL echo("")
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    CALL echo(concat(sname,": ",smsg))
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    CALL echo("")
    SET __hpsys = 0
    SET __lpsysstat = 0
    CALL uar_syscreatehandle(__hpsys,__lpsysstat)
    IF (__hpsys > 0)
     CALL uar_sysevent(__hpsys,llevel,nullterm(sname),nullterm(smsg))
     CALL uar_sysdestroyhandle(__hpsys)
    ENDIF
    IF (llevel=log_error)
     SET hmsg = uar_srvselectmessage(submit_log)
     SET hreq = uar_srvcreaterequest(hmsg)
     SET hrep = uar_srvcreatereply(hmsg)
     SET hobjarray = uar_srvadditem(hreq,"objArray")
     SET stat = uar_srvsetdouble(hobjarray,"final_status_cd",cs23372_failed_cd)
     SET stat = uar_srvsetstring(hobjarray,"task_name",nullterm(curprog))
     SET stat = uar_srvsetstring(hobjarray,"completion_msg",nullterm(smsg))
     SET stat = uar_srvsetdate(hobjarray,"end_dt_tm",cnvtdatetime(sysdate))
     SET stat = uar_srvsetstring(hobjarray,"current_node_name",nullterm(curnode))
     SET stat = uar_srvsetstring(hobjarray,"server_name",nullterm(build(curserver)))
     SET srvstatus = uar_srvexecute(hmsg,hreq,hrep)
     IF (srvstatus != 0)
      CALL echo(build2("Execution of pft_save_system_activity_log was not successful"))
     ENDIF
     CALL uar_srvdestroyinstance(hreq)
     CALL uar_srvdestroyinstance(hrep)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setreply,char(128))=char(128))
  SUBROUTINE (setreply(sstatus=vc,sname=vc,svalue=vc) =null)
    IF (validate(reply,char(128)) != char(128))
     SET reply->status_data.status = nullterm(sstatus)
     SET reply->status_data.subeventstatus[1].operationstatus = nullterm(sstatus)
     SET reply->status_data.subeventstatus[1].operationname = nullterm(sname)
     SET reply->status_data.subeventstatus[1].targetobjectvalue = nullterm(svalue)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setreplyblock,char(128))=char(128))
  SUBROUTINE (setreplyblock(sstatus=c1,soperstatus=c1,sname=vc,svalue=vc) =null)
   CALL logmsg(sname,svalue,log_debug)
   IF (validate(reply,char(128)) != char(128))
    SET reply->status_data.status = nullterm(sstatus)
    SET reply->status_data.subeventstatus[1].operationstatus = nullterm(soperstatus)
    SET reply->status_data.subeventstatus[1].operationname = nullterm(sname)
    SET reply->status_data.subeventstatus[1].targetobjectvalue = nullterm(svalue)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(beginscript,char(128))=char(128))
  SUBROUTINE (beginscript(sname=vc) =null)
   CALL logmsg(sname,"Begin Script",log_debug)
   CALL setreply("F",sname,"Begin Script")
  END ;Subroutine
 ENDIF
 IF (validate(exitscript,char(128))=char(128))
  SUBROUTINE (exitscript(sname=vc) =null)
   CALL logmsg(sname,"Exit Script",log_debug)
   CALL setreply("S",sname,"Exit Script")
  END ;Subroutine
 ENDIF
 IF (validate(abortscript,char(128))=char(128))
  SUBROUTINE (abortscript(sname=vc,smsg=vc) =null)
   CALL logmsg(sname,smsg,log_warning)
   CALL setreply("F",sname,smsg)
  END ;Subroutine
 ENDIF
 IF (validate(setfieldheader,char(128))=char(128))
  SUBROUTINE (setfieldheader(sfield=vc,stype=vc,sdisplay=vc) =null)
   DECLARE nheadersize = i2 WITH noconstant(0)
   IF (validate(objreply->headers)=1)
    SET nheadersize = (size(objreply->headers,5)+ 1)
    SET stat = alterlist(objreply->headers,nheadersize)
    SET objreply->headers[nheadersize].field_name = sfield
    SET objreply->headers[nheadersize].field_type = stype
    SET objreply->headers[nheadersize].header_display = sdisplay
   ELSEIF (validate(reply->headers)=1)
    SET nheadersize = (size(reply->headers,5)+ 1)
    SET stat = alterlist(reply->headers,nheadersize)
    SET reply->headers[nheadersize].field_name = sfield
    SET reply->headers[nheadersize].field_type = stype
    SET reply->headers[nheadersize].header_display = sdisplay
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setfieldheaderattr,char(128))=char(128))
  SUBROUTINE (setfieldheaderattr(sfield=vc,stype=vc,sdisplay=vc,sgroupprefix=vc,sgrpaggrprefix=vc,
   sgrpaggrfnctn=vc,stotalprefix=vc,stotalfunction=vc) =null)
   DECLARE nheadersize = i2 WITH noconstant(0)
   IF (validate(objreply->headers,char(128)) != char(128))
    SET nheadersize = (size(objreply->headers,5)+ 1)
    SET stat = alterlist(objreply->headers,nheadersize)
    SET objreply->headers[nheadersize].field_name = sfield
    SET objreply->headers[nheadersize].field_type = stype
    SET objreply->headers[nheadersize].header_display = sdisplay
    SET objreply->headers[nheadersize].group_prefix = sgroupprefix
    SET objreply->headers[nheadersize].group_aggr_prefix = sgrpaggrprefix
    SET objreply->headers[nheadersize].group_aggr_func = sgrpaggrfnctn
    SET objreply->headers[nheadersize].total_prefix = stotalprefix
    SET objreply->headers[nheadersize].total_func = stotalfunction
   ELSEIF (validate(reply->headers,char(128)) != char(128))
    SET nheadersize = (size(reply->headers,5)+ 1)
    SET stat = alterlist(reply->headers,nheadersize)
    SET reply->headers[nheadersize].field_name = sfield
    SET reply->headers[nheadersize].field_type = stype
    SET reply->headers[nheadersize].header_display = sdisplay
    SET reply->headers[nheadersize].group_prefix = sgroupprefix
    SET reply->headers[nheadersize].group_aggr_prefix = sgrpaggrprefix
    SET reply->headers[nheadersize].group_aggr_func = sgrpaggrfnctn
    SET reply->headers[nheadersize].total_prefix = stotalprefix
    SET reply->headers[nheadersize].total_func = stotalfunction
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(formatcurrency,char(128))=char(128))
  SUBROUTINE (formatcurrency(damt=f8) =vc)
    DECLARE sformattedamt = vc WITH noconstant("")
    SET sformattedamt = format(damt,"#########.##;I$,;F")
    IF (damt <= 0)
     SET sformattedamt = trim(sformattedamt,3)
     SET sformattedamt = substring(2,textlen(sformattedamt),sformattedamt)
     SET sformattedamt = concat("(",trim(sformattedamt,3),")")
    ENDIF
    SET sformattedamt = trim(sformattedamt,3)
    RETURN(sformattedamt)
  END ;Subroutine
 ENDIF
 IF (validate(setsrvdouble,char(128))=char(128))
  SUBROUTINE (setsrvdouble(hhandle=i4,sfield=vc,dvalue=f8) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetdouble(hhandle,nullterm(sfield),dvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvstring,char(128))=char(128))
  SUBROUTINE (setsrvstring(hhandle=i4,sfield=vc,svalue=vc) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetstring(hhandle,nullterm(sfield),nullterm(svalue))
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvlong,char(128))=char(128))
  SUBROUTINE (setsrvlong(hhandle=i4,sfield=vc,lvalue=i4) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetlong(hhandle,nullterm(sfield),lvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvshort,char(128))=char(128))
  SUBROUTINE (setsrvshort(hhandle=i4,sfield=vc,nvalue=i4) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetshort(hhandle,nullterm(sfield),nvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvdate,char(128))=char(128))
  SUBROUTINE (setsrvdate(hhandle=i4,sfield=vc,dtvalue=q8) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetdate(hhandle,nullterm(sfield),dtvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(publishevent,char(128))=char(128))
  SUBROUTINE (publishevent(dummyvar=i4) =null)
    CALL logmsg(curprog,"IN PublishEvent",log_debug)
    DECLARE nappid = i4 WITH protect, constant(4080000)
    DECLARE ntaskid = i4 WITH protect, constant(4080000)
    DECLARE nreqid = i4 WITH protect, constant(4080140)
    DECLARE sreq = vc WITH protect, constant("pft_manage_event_completion")
    DECLARE happ = i4 WITH protect, noconstant(0)
    DECLARE htask = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrequest = i4 WITH protect, noconstant(0)
    DECLARE hitem = i4 WITH protect, noconstant(0)
    DECLARE hreply = i4 WITH protect, noconstant(0)
    DECLARE hstatus = i4 WITH protect, noconstant(0)
    DECLARE ncnt = i4 WITH protect, noconstant(0)
    DECLARE npidx = i4 WITH protect, noconstant(0)
    DECLARE ipublisheventflg = i2 WITH constant(validate(pft_publish_event_flag,0))
    IF (validate(pft_publish_event_flag))
     CALL logmsg(curprog,concat("pft_publish_event_flag exist. value:: ",cnvtstring(
        pft_publish_event_flag,5)),4)
    ELSE
     CALL logmsg(curprog,"pft_publish_event_flag doesn't exist",4)
    ENDIF
    IF (validate(reply->objarray,char(128))=char(128))
     CALL logmsg(curprog,"No objArray found in reply",log_debug)
     RETURN
    ENDIF
    IF (validate(reply->status_data.status,"F") != "S")
     CALL logmsg(curprog,concat("Reply status as (",validate(reply->status_data.status,"F"),
       "). Not publishing events."),log_debug)
     RETURN
    ENDIF
    CASE (ipublisheventflg)
     OF 0:
      SET curalias eventrec reply->objarray[npidx]
      SET ncnt = size(reply->objarray,5)
     OF 1:
      CALL queueitemstoeventrec(0)
      RETURN
     OF 2:
      SET curalias eventrec pft_event_rec->objarray[npidx]
      SET ncnt = size(pft_event_rec->objarray,5)
    ENDCASE
    IF (ncnt > 0)
     SET npidx = 1
     IF (validate(eventrec->published_ind,null_i2)=null_i2)
      CALL logmsg(curprog,"Field published_ind not found in objArray",log_debug)
      RETURN
     ENDIF
     SET gnstat = uar_crmbeginapp(nappid,happ)
     IF (gnstat != 0)
      CALL logmsg(curprog,"Unable to create application instance (4080000)",log_error)
      RETURN
     ENDIF
     SET gnstat = uar_crmbegintask(happ,ntaskid,htask)
     IF (gnstat != 0)
      CALL logmsg(curprog,"Unable to create task instance (4080000)",log_error)
      IF (happ > 0)
       CALL uar_crmendapp(happ)
      ENDIF
      RETURN
     ENDIF
     FOR (npidx = 1 TO ncnt)
       IF ((eventrec->published_ind=false))
        SET gnstat = uar_crmbeginreq(htask,nullterm(sreq),nreqid,hreq)
        IF (gnstat != 0)
         CALL logmsg(curprog,"Unable to create request instance (4080140)",log_error)
        ELSE
         SET hrequest = uar_crmgetrequest(hreq)
         IF (hrequest=0)
          CALL logmsg(curprog,"Unable to retrieve request handle for (4080140)",log_error)
         ELSE
          SET hitem = uar_srvadditem(hrequest,"objArray")
          IF (hitem=0)
           CALL logmsg(curprog,"Unable to add item to request (4080140)",log_error)
          ELSE
           IF (validate(eventrec->event_key,char(128)) != char(128))
            CALL setsrvstring(hitem,"event_key",eventrec->event_key)
           ELSE
            CALL logmsg(curprog,"Field event_key not found in objArray",log_debug)
           ENDIF
           IF (validate(eventrec->category_key,char(128)) != char(128))
            CALL setsrvstring(hitem,"category_key",eventrec->category_key)
           ELSE
            CALL logmsg(curprog,"Field category_key not found in objArray",log_debug)
           ENDIF
           IF (validate(eventrec->acct_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"acct_id",eventrec->acct_id)
           ENDIF
           IF (validate(eventrec->pft_encntr_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_encntr_id",eventrec->pft_encntr_id)
           ENDIF
           IF (validate(eventrec->encntr_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"encntr_id",eventrec->encntr_id)
           ENDIF
           IF (validate(eventrec->bo_hp_reltn_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"bo_hp_reltn_id",eventrec->bo_hp_reltn_id)
           ENDIF
           IF (validate(eventrec->corsp_activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"corsp_activity_id",eventrec->corsp_activity_id)
           ENDIF
           IF (validate(eventrec->activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"activity_id",eventrec->activity_id)
           ENDIF
           IF (validate(eventrec->pft_charge_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_charge_id",eventrec->pft_charge_id)
           ENDIF
           IF (validate(eventrec->service_cd,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"entity_service_cd",eventrec->service_cd)
           ENDIF
           IF (validate(eventrec->batch_trans_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"batch_trans_id",eventrec->batch_trans_id)
           ENDIF
           IF (validate(eventrec->pft_bill_activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_bill_activity_id",eventrec->pft_bill_activity_id)
           ENDIF
           IF (validate(eventrec->bill_vrsn_nbr,null_i4) != null_i4)
            CALL setsrvlong(hitem,"bill_vrsn_nbr",eventrec->bill_vrsn_nbr)
           ENDIF
           IF (validate(eventrec->pe_status_reason_cd,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pe_status_reason_cd",eventrec->pe_status_reason_cd)
           ENDIF
           CALL logmsg("PFT_COMMON",build("pft_publish_event_binding::",validate(
              pft_publish_event_binding,"N/A")),log_debug)
           IF (validate(pft_publish_event_binding,"") != "")
            SET gnstat = uar_crmperformas(hreq,nullterm(pft_publish_event_binding))
           ELSE
            SET gnstat = uar_crmperform(hreq)
           ENDIF
           IF (gnstat != 0)
            CALL logmsg(curprog,concat("Failed to execute server step (",cnvtstring(nreqid,11),")"),
             log_error)
           ELSE
            SET hreply = uar_crmgetreply(hreq)
            IF (hreply=0)
             CALL logmsg(curprog,"Failed to retrieve reply structure",log_error)
            ELSE
             SET hstatus = uar_srvgetstruct(hreply,"status_data")
             IF (hstatus=0)
              CALL logmsg(curprog,"Failed to retrieve status_block",log_error)
             ELSE
              IF (uar_srvgetstringptr(hstatus,"status")="S")
               SET eventrec->published_ind = true
              ENDIF
             ENDIF
            ENDIF
           ENDIF
          ENDIF
         ENDIF
        ENDIF
        IF (hreq > 0)
         CALL uar_crmendreq(hreq)
        ENDIF
       ENDIF
     ENDFOR
     IF (htask > 0)
      CALL uar_crmendtask(htask)
     ENDIF
     IF (happ > 0)
      CALL uar_crmendapp(happ)
     ENDIF
    ELSE
     CALL logmsg(curprog,"Not objects in objArray",log_debug)
    ENDIF
    SET curalias eventrec off
  END ;Subroutine
 ENDIF
 IF (validate(queueitemstoeventrec,char(128))=char(128))
  SUBROUTINE (queueitemstoeventrec(dummyvar=i4) =null)
    DECLARE ncnt = i4 WITH protect, noconstant(0)
    DECLARE npeventidx = i4 WITH protect, noconstant(0)
    DECLARE npidx = i4 WITH protect, noconstant(0)
    IF (validate(pft_event_rec,char(128))=char(128))
     CALL logmsg(curprog,"pft_event_rec must be declared by call InitEvents",4)
    ENDIF
    SET curalias event_rec pft_event_rec->objarray[npeventidx]
    SET curalias reply_rec reply->objarray[npidx]
    SET ncnt = size(reply->objarray,5)
    FOR (npidx = 1 TO ncnt)
      IF (validate(reply_rec->published_ind,true)=false)
       SET npeventidx = (size(pft_event_rec->objarray,5)+ 1)
       SET stat = alterlist(pft_event_rec->objarray,npeventidx)
       SET event_rec->published_ind = false
       SET event_rec->event_key = validate(reply_rec->event_key,"")
       SET event_rec->category_key = validate(reply_rec->category_key,"")
       SET event_rec->acct_id = validate(reply_rec->acct_id,0.0)
       SET event_rec->pft_encntr_id = validate(reply_rec->pft_encntr_id,0.0)
       SET event_rec->encntr_id = validate(reply_rec->encntr_id,0.0)
       SET event_rec->bo_hp_reltn_id = validate(reply_rec->bo_hp_reltn_id,0.0)
       SET event_rec->corsp_activity_id = validate(reply_rec->corsp_activity_id,0.0)
       SET event_rec->activity_id = validate(reply_rec->activity_id,0.0)
       SET event_rec->pft_charge_id = validate(reply_rec->pft_charge_id,0.0)
       SET event_rec->service_cd = validate(reply_rec->service_cd,0.0)
       SET event_rec->batch_trans_id = validate(reply_rec->batch_trans_id,0.0)
       SET event_rec->pft_bill_activity_id = validate(reply_rec->pft_bill_activity_id,0.0)
       SET event_rec->bill_vrsn_nbr = validate(reply_rec->bill_vrsn_nbr,0)
       SET event_rec->pe_status_reason_cd = validate(reply_rec->pe_status_reason_cd,0.0)
       SET reply_rec->published_ind = true
      ENDIF
    ENDFOR
    SET curalias event_rec off
    SET curalias reply_rec off
  END ;Subroutine
 ENDIF
 IF (validate(initevents,char(128))=char(128))
  SUBROUTINE (initevents(publishflag=i2) =null)
    SET pft_publish_event_flag = publishflag
    FREE RECORD pft_event_rec
    RECORD pft_event_rec(
      1 objarray[*]
        2 service_cd = f8
        2 updt_id = f8
        2 event_key = vc
        2 category_key = vc
        2 published_ind = i2
        2 pe_status_reason_cd = f8
        2 acct_id = f8
        2 activity_id = f8
        2 batch_denial_file_r_id = f8
        2 batch_trans_ext_id = f8
        2 batch_trans_file_id = f8
        2 batch_trans_id = f8
        2 benefit_order_id = f8
        2 bill_item_id = f8
        2 bill_templ_id = f8
        2 bill_vrsn_nbr = i4
        2 billing_entity_id = f8
        2 bo_hp_reltn_id = f8
        2 charge_item_id = f8
        2 chrg_activity_id = f8
        2 claim_status_id = f8
        2 client_org_id = f8
        2 corsp_activity_id = f8
        2 corsp_log_reltn_id = f8
        2 denial_id = f8
        2 dirty_flag = i4
        2 encntr_id = f8
        2 guar_acct_id = f8
        2 guarantor_id = f8
        2 health_plan_id = f8
        2 long_text_id = f8
        2 organization_id = f8
        2 payor_org_id = f8
        2 pe_status_reason_id = f8
        2 person_id = f8
        2 pft_balance_id = f8
        2 pft_bill_activity_id = f8
        2 pft_charge_id = f8
        2 pft_encntr_fact_id = f8
        2 pft_encntr_id = f8
        2 pft_line_item_id = f8
        2 trans_alias_id = f8
        2 pft_payment_plan_id = f8
        2 daily_encntr_bal_id = f8
        2 daily_acct_bal_id = f8
        2 active_ind = i2
        2 active_status_cd = f8
        2 active_status_disp = vc
        2 active_status_desc = vc
        2 active_status_mean = vc
        2 active_status_code_set = f8
        2 active_status_dt_tm = dq8
        2 active_status_prsnl_id = f8
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 updt_applctx = f8
        2 updt_cnt = i4
        2 updt_dt_tm = dq8
        2 updt_id = f8
        2 updt_task = f8
        2 benefit_status_cd = f8
        2 financial_class_cd = f8
        2 payment_plan_flag = i2
        2 payment_location_id = f8
        2 encntr_plan_cob_id = f8
        2 guarantor_account_id = f8
        2 guarantor_id1 = f8
        2 guarantor_id2 = f8
        2 cbos_pe_reltn_id = f8
        2 post_dt_tm = dq8
        2 posting_category_type_flag = i2
    ) WITH persistscript
  END ;Subroutine
 ENDIF
 IF (validate(processevents,char(128))=char(128))
  SUBROUTINE (processevents(dummyvar=i4) =null)
    DECLARE itmppublishflag = i2 WITH private, noconstant(pft_publish_event_flag)
    SET pft_publish_event_flag = 2
    CALL publishevent(0)
    SET pft_publish_event_flag = itmppublishflag
  END ;Subroutine
 ENDIF
 IF (validate(stamptime,char(128))=char(128))
  SUBROUTINE (stamptime(dummyvar=i4) =null)
    CALL echo("-----------------TIME STAMP----------------")
    CALL echo(build("-----------",curprog,"-----------"))
    CALL echo(format(curtime3,"hh:mm:ss:cc;3;M"))
    CALL echo("-----------------TIME STAMP----------------")
  END ;Subroutine
 ENDIF
 IF (validate(isequal,char(128))=char(128))
  SUBROUTINE isequal(damt1,damt2)
   DECLARE tmpdiff = f8 WITH private, noconstant(abs((abs(damt1) - abs(damt2))))
   IF (tmpdiff < 0.009)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(nextavailablethread,char(128))=char(128))
  DECLARE nextavailablethread(null) = i4
  SUBROUTINE nextavailablethread(null)
    DECLARE thread_cnt = i4 WITH noconstant(size(threads->objarray,5))
    DECLARE i = i4 WITH noconstant(thread_cnt)
    DECLARE looping = i2 WITH noconstant(true)
    WHILE (thread_cnt > 0
     AND looping)
     IF ((threads->objarray[i].request_handle > 0))
      IF ((threads->objarray[i].start_time=null))
       SET threads->objarray[i].start_time = cnvtdatetime(sysdate)
      ENDIF
      IF (uar_crmperformpeek(threads->objarray[i].request_handle) IN (0, 1, 4, 5))
       SET stat = uar_crmsynch(threads->objarray[i].request_handle)
       CALL uar_crmendreq(threads->objarray[i].request_handle)
       SET threads->objarray[i].request_handle = 0
       SET threads->objarray[i].start_time = null
       SET looping = false
      ENDIF
     ELSE
      SET looping = false
     ENDIF
     IF (looping)
      SET i = evaluate(i,1,thread_cnt,(i - 1))
     ENDIF
    ENDWHILE
    RETURN(i)
  END ;Subroutine
 ENDIF
 IF (validate(waituntilthreadscomplete,char(128))=char(128))
  DECLARE waituntilthreadscomplete(null) = i4
  SUBROUTINE waituntilthreadscomplete(null)
    DECLARE thread_cnt = i4 WITH noconstant(size(threads->objarray,5))
    DECLARE i = i4 WITH noconstant(thread_cnt)
    FOR (i = 1 TO thread_cnt)
      IF ((threads->objarray[i].request_handle > 0))
       IF ((threads->objarray[i].start_time=null))
        SET threads->objarray[i].start_time = cnvtdatetime(sysdate)
       ENDIF
       SET stat = uar_crmsynch(threads->objarray[i].request_handle)
       CALL uar_crmendreq(threads->objarray[i].request_handle)
       SET threads->objarray[i].request_handle = 0
       SET threads->objarray[i].start_time = null
      ENDIF
    ENDFOR
    RETURN
  END ;Subroutine
 ENDIF
 IF (validate(waitforthreadtocomplete,char(128))=char(128))
  SUBROUTINE (waitforthreadtocomplete(thread=i4) =i4)
    IF ( NOT (validate(threads)))
     RETURN(0)
    ENDIF
    IF ( NOT (size(threads->objarray,5) > 0))
     RETURN(0)
    ENDIF
    IF ((threads->objarray[thread].request_handle > 0))
     IF ((threads->objarray[thread].start_time=null))
      SET threads->objarray[thread].start_time = cnvtdatetime(sysdate)
     ENDIF
     SET stat = uar_crmsynch(threads->objarray[thread].request_handle)
     CALL uar_crmendreq(threads->objarray[thread].request_handle)
     SET threads->objarray[thread].request_handle = 0
     SET threads->objarray[thread].start_time = null
    ENDIF
    RETURN(thread)
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalueindex,char(128))=char(128))
  SUBROUTINE (getcodevalueindex(pcodevalue=f8,prcodevalueslist=vc(ref)) =i4)
    IF (((pcodevalue <= 0.0) OR (size(prcodevalueslist->codevalues,5)=0)) )
     RETURN(0)
    ENDIF
    DECLARE num = i4 WITH protect, noconstant(0)
    RETURN(locateval(num,1,size(prcodevalueslist->codevalues,5),pcodevalue,prcodevalueslist->
     codevalues[num].codevalue))
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(cbosmultiguarantors)))
  RECORD cbosmultiguarantors(
    1 cbos[*]
      2 cons_bo_sched_id = f8
      2 acct_id = f8
  ) WITH protect
 ENDIF
 IF ( NOT (validate(cs18669_event_cd)))
  DECLARE cs18669_event_cd = f8 WITH protect, constant(getcodevalue(18669,"EVENT",1))
 ENDIF
 IF ( NOT (validate(cs18689_dnglvlchange_cd)))
  DECLARE cs18689_dnglvlchange_cd = f8 WITH protect, constant(getcodevalue(18689,"DNGLVLCHANGE",1))
 ENDIF
 IF ( NOT (validate(cs18689_cyclechange_cd)))
  DECLARE cs18689_cyclechange_cd = f8 WITH protect, constant(getcodevalue(18689,"CYCLECHANGE",1))
 ENDIF
 IF ( NOT (validate(cs18936_guarantor_cd)))
  DECLARE cs18936_guarantor_cd = f8 WITH protect, constant(getcodevalue(18936,"GUARANTOR",0))
 ENDIF
 IF ( NOT (validate(cs20849_guarantor_cd)))
  DECLARE cs20849_guarantor_cd = f8 WITH protect, constant(getcodevalue(20849,"GUARANTOR",0))
 ENDIF
 IF ( NOT (validate(cs18736_ar_cd)))
  DECLARE cs18736_ar_cd = f8 WITH protect, constant(getcodevalue(18736,"A/R",0))
 ENDIF
 IF ( NOT (validate(g_cs24451_invalid_cd)))
  DECLARE g_cs24451_invalid_cd = f8 WITH protect, noconstant(getcodevalue(24451,"INVALID",0))
 ENDIF
 IF ( NOT (validate(g_cs25095_normal1_cd)))
  DECLARE g_cs25095_normal1_cd = f8 WITH protect, noconstant(getcodevalue(25095,"NORMAL1",0))
 ENDIF
 IF ( NOT (validate(g_cs25095_normal2_cd)))
  DECLARE g_cs25095_normal2_cd = f8 WITH protect, noconstant(getcodevalue(25095,"NORMAL2",0))
 ENDIF
 IF ( NOT (validate(g_cs25095_normal3_cd)))
  DECLARE g_cs25095_normal3_cd = f8 WITH protect, noconstant(getcodevalue(25095,"NORMAL3",0))
 ENDIF
 IF ( NOT (validate(g_cs25095_precollections1_cd)))
  DECLARE g_cs25095_precollections1_cd = f8 WITH protect, noconstant(getcodevalue(25095,"PRECOL1",0))
 ENDIF
 IF ( NOT (validate(g_cs25095_precollections2_cd)))
  DECLARE g_cs25095_precollections2_cd = f8 WITH protect, noconstant(getcodevalue(25095,"PRECOL2",0))
 ENDIF
 IF ( NOT (validate(g_cs25095_collections1_cd)))
  DECLARE g_cs25095_collections1_cd = f8 WITH protect, noconstant(getcodevalue(25095,"COL1",0))
 ENDIF
 IF ( NOT (validate(g_cs25095_collections2_cd)))
  DECLARE g_cs25095_collections2_cd = f8 WITH protect, noconstant(getcodevalue(25095,"COL2",0))
 ENDIF
 IF ( NOT (validate(g_cs25095_collections3_cd)))
  DECLARE g_cs25095_collections3_cd = f8 WITH protect, noconstant(getcodevalue(25095,"COL3",0))
 ENDIF
 IF ( NOT (validate(cs24451_cancelled_cd)))
  DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
 ENDIF
 IF (validate(addcbospereltn,char(128))=char(128))
  DECLARE addcbospereltn(ppftencntrid) = i2
  SUBROUTINE addcbospereltn(ppftencntrid)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE ridx = i4 WITH protect, noconstant(0)
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    IF (validate(debug,0) > 0)
     CALL echorecord(cbosmultiguarantors)
    ENDIF
    IF (size(cbosmultiguarantors->cbos,5))
     RECORD addcbospereltnrequest(
       1 objarray[*]
         2 cbos_pe_reltn_id = f8
         2 pft_encntr_id = f8
         2 cons_bo_sched_id = f8
         2 acct_id = f8
     ) WITH protect
     RECORD uptcbospereltnrequest(
       1 objarray[*]
         2 cbos_pe_reltn_id = f8
         2 cons_bo_sched_id = f8
         2 acct_id = f8
         2 active_ind = i2
         2 updt_cnt = i4
     ) WITH protect
     RECORD cbospereltnreply(
       1 pft_status_data
         2 status = c1
         2 subeventstatus[*]
           3 status = c1
           3 table_name = vc
           3 pk_values = vc
       1 mod_objs[*]
         2 entity_type = vc
         2 mod_recs[*]
           3 table_name = vc
           3 pk_values = vc
           3 mod_flds[*]
             4 field_name = vc
             4 field_type = vc
             4 field_value_obj = vc
             4 field_value_db = vc
       1 failure_stack
         2 failures[*]
           3 programname = vc
           3 routinename = vc
           3 message = vc
       1 status_data
         2 status = c1
         2 subeventstatus[1]
           3 operationname = c25
           3 operationstatus = c1
           3 targetobjectname = c25
           3 targetobjectvalue = vc
     ) WITH protect
     SELECT INTO "nl:"
      FROM cbos_pe_reltn cper
      WHERE cper.pft_encntr_id=ppftencntrid
      DETAIL
       idx = locateval(idx,1,size(cbosmultiguarantors->cbos,5),cper.cons_bo_sched_id,
        cbosmultiguarantors->cbos[idx].cons_bo_sched_id)
       IF (idx > 0
        AND  NOT (cper.active_ind))
        ridx = (size(uptcbospereltnrequest->objarray,5)+ 1), stat = alterlist(uptcbospereltnrequest->
         objarray,ridx), uptcbospereltnrequest->objarray[ridx].cbos_pe_reltn_id = cper
        .cbos_pe_reltn_id,
        uptcbospereltnrequest->objarray[ridx].cons_bo_sched_id = cper.cons_bo_sched_id,
        uptcbospereltnrequest->objarray[ridx].acct_id = cbosmultiguarantors->cbos[idx].acct_id,
        uptcbospereltnrequest->objarray[ridx].active_ind = evaluate(cper.active_ind,false,true),
        uptcbospereltnrequest->objarray[ridx].updt_cnt = cper.updt_cnt
       ENDIF
      WITH nocounter
     ;end select
     IF (ridx > 0)
      EXECUTE pft_da_upt_cbos_pe_reltn  WITH replace("REQUEST",uptcbospereltnrequest), replace(
       "REPLY",cbospereltnreply)
      IF (validate(debug,0) > 0)
       CALL echorecord(uptcbospereltnrequest)
       CALL echorecord(cbospereltnreply)
      ENDIF
      IF ((cbospereltnreply->status_data.status != "S"))
       IF (validate(setdetails,char(128)) != char(128))
        CALL setdetails("addCbosPeReltn","Script pft_da_upt_cbos_pe_reltn failed")
       ENDIF
       IF (validate(addtracemessage,char(128)) != char(128))
        CALL addtracemessage("addCbosPeReltn","Script pft_da_upt_cbos_pe_reltn failed")
       ENDIF
       SET rtnval = false
      ENDIF
     ENDIF
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = value(size(cbosmultiguarantors->cbos,5))),
       cons_bo_sched cbos,
       cbos_pe_reltn cper
      PLAN (d)
       JOIN (cbos
       WHERE (cbos.cons_bo_sched_id=cbosmultiguarantors->cbos[d.seq].cons_bo_sched_id))
       JOIN (cper
       WHERE (cper.pft_encntr_id= Outerjoin(ppftencntrid))
        AND (cper.cons_bo_sched_id= Outerjoin(cbos.cons_bo_sched_id)) )
      HEAD REPORT
       ridx = 0
      DETAIL
       IF (cper.cons_bo_sched_id <= 0.0)
        ridx = (size(addcbospereltnrequest->objarray,5)+ 1), stat = alterlist(addcbospereltnrequest->
         objarray,ridx), addcbospereltnrequest->objarray[ridx].pft_encntr_id = ppftencntrid,
        addcbospereltnrequest->objarray[ridx].cons_bo_sched_id = cbosmultiguarantors->cbos[d.seq].
        cons_bo_sched_id, addcbospereltnrequest->objarray[ridx].acct_id = cbosmultiguarantors->cbos[d
        .seq].acct_id
       ENDIF
      WITH nocounter
     ;end select
     IF (ridx > 0)
      SET stat = initrec(cbospereltnreply)
      EXECUTE pft_da_add_cbos_pe_reltn  WITH replace("REQUEST",addcbospereltnrequest), replace(
       "REPLY",cbospereltnreply)
      IF (validate(debug,0) > 0)
       CALL echorecord(addcbospereltnrequest)
       CALL echorecord(cbospereltnreply)
      ENDIF
      IF ((cbospereltnreply->status_data.status != "S"))
       IF (validate(setdetails,char(128)) != char(128))
        CALL setdetails("addCbosPeReltn","Script pft_da_add_cbos_pe_reltn failed")
       ENDIF
       IF (validate(addtracemessage,char(128)) != char(128))
        CALL addtracemessage("addCbosPeReltn","Script pft_da_add_cbos_pe_reltn failed")
       ENDIF
       SET rtnval = false
      ENDIF
     ENDIF
    ENDIF
    CALL logmessage("addCbosPeReltn","Exiting",log_debug)
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(removecbospereltn,char(128))=char(128))
  DECLARE removecbospereltn(ppftencntrid) = i2
  SUBROUTINE removecbospereltn(ppftencntrid)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE ridx = i4 WITH protect, noconstant(0)
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE tmplvl = f8 WITH protect, noconstant(0.0)
    DECLARE cycleid = f8 WITH protect, noconstant(0.0)
    DECLARE cbosupdtcnt = i4 WITH protect, noconstant(0)
    DECLARE oldcboscycleid = f8 WITH protect, noconstant(0.0)
    DECLARE hcyclechange = i4 WITH protect, noconstant(0)
    DECLARE tcontext = vc WITH protect, constant(validate(request->context,"No Context"))
    RECORD uptcbospereltnrequest(
      1 objarray[*]
        2 cbos_pe_reltn_id = f8
        2 cons_bo_sched_id = f8
        2 acct_id = f8
        2 active_ind = i2
        2 updt_cnt = i4
    ) WITH protect
    RECORD cbospereltnreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD uptconsboschedrequest(
      1 objarray[*]
        2 cons_bo_sched_id = f8
        2 statement_cycle_id = f8
        2 updt_cnt = i4
        2 active_ind = i2
    ) WITH protect
    RECORD uptconsboschedreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF (validate(debug,0)=1)
     CALL echorecord(cbosmultiguarantors)
    ENDIF
    SELECT INTO "nl:"
     FROM cbos_pe_reltn cper
     WHERE cper.pft_encntr_id=ppftencntrid
     DETAIL
      idx = locateval(idx,1,size(cbosmultiguarantors->cbos,5),cper.cons_bo_sched_id,
       cbosmultiguarantors->cbos[idx].cons_bo_sched_id)
      IF (idx <= 0
       AND cper.active_ind)
       ridx = (size(uptcbospereltnrequest->objarray,5)+ 1), stat = alterlist(uptcbospereltnrequest->
        objarray,ridx), uptcbospereltnrequest->objarray[ridx].cbos_pe_reltn_id = cper
       .cbos_pe_reltn_id,
       uptcbospereltnrequest->objarray[ridx].cons_bo_sched_id = cper.cons_bo_sched_id,
       uptcbospereltnrequest->objarray[ridx].acct_id = cper.acct_id, uptcbospereltnrequest->objarray[
       ridx].active_ind = false,
       uptcbospereltnrequest->objarray[ridx].updt_cnt = cper.updt_cnt
      ENDIF
     WITH nocounter
    ;end select
    IF (ridx > 0)
     EXECUTE pft_da_upt_cbos_pe_reltn  WITH replace("REQUEST",uptcbospereltnrequest), replace("REPLY",
      cbospereltnreply)
     IF (validate(debug,0) > 0)
      CALL echorecord(uptcbospereltnrequest)
      CALL echorecord(cbospereltnreply)
     ENDIF
     IF ((cbospereltnreply->status_data.status != "S"))
      IF (validate(setdetails,char(128)) != char(128))
       CALL setdetails("removeCbosPeReltn","Script pft_da_upt_cbos_pe_reltn failed")
      ENDIF
      IF (validate(addtracemessage,char(128)) != char(128))
       CALL addtracemessage("removeCbosPeReltn","Script pft_da_upt_cbos_pe_reltn failed")
      ENDIF
      SET rtnval = false
     ENDIF
     FOR (idx = 1 TO size(uptcbospereltnrequest->objarray,5))
       SET tmplvl = 0.0
       SELECT INTO "nl:"
        FROM cons_bo_sched cbs,
         cbos_pe_reltn cpr
        PLAN (cbs
         WHERE (cbs.cons_bo_sched_id=uptcbospereltnrequest->objarray[idx].cons_bo_sched_id)
          AND cbs.active_ind=true)
         JOIN (cpr
         WHERE cpr.cons_bo_sched_id=cbs.cons_bo_sched_id
          AND cpr.statement_cycle_id > 0.0
          AND cpr.active_ind=true)
        ORDER BY cbs.cons_bo_sched_id
        HEAD cbs.cons_bo_sched_id
         cbosupdtcnt = cbs.updt_cnt, oldcboscycleid = cbs.statement_cycle_id
        DETAIL
         IF (leveltonumber(cpr.dunning_level_cd) > leveltonumber(tmplvl))
          tmplvl = cpr.dunning_level_cd, cycleid = cpr.statement_cycle_id
         ENDIF
        WITH nocounter
       ;end select
       IF (cycleid != oldcboscycleid)
        SET cnt = (size(uptconsboschedrequest->objarray,5)+ 1)
        SET stat = alterlist(uptconsboschedrequest->objarray,cnt)
        SET uptconsboschedrequest->objarray[cnt].statement_cycle_id = cycleid
        SET uptconsboschedrequest->objarray[cnt].cons_bo_sched_id = uptcbospereltnrequest->objarray[
        idx].cons_bo_sched_id
        SET uptconsboschedrequest->objarray[cnt].updt_cnt = cbosupdtcnt
       ENDIF
     ENDFOR
     IF (size(uptconsboschedrequest->objarray,5) > 0)
      EXECUTE pft_da_upt_cons_bo_sched  WITH replace("REQUEST",uptconsboschedrequest), replace(
       "REPLY",uptconsboschedreply)
      IF (validate(debug,0) > 0)
       CALL echorecord(uptconsboschedrequest)
       CALL echorecord(uptconsboschedreply)
      ENDIF
      IF ((uptconsboschedreply->status_data.status != "S"))
       IF (validate(setdetails,char(128)) != char(128))
        CALL setdetails("removeCbosPeReltn",build2("Script pft_da_upt_cbos_pe_reltn failed",
          ", Failed to update consolidated schedule with cycle of most severe dunning level"))
       ENDIF
       IF (validate(addtracemessage,char(128)) != char(128))
        CALL addtracemessage("removeCbosPeReltn",build2("Script pft_da_upt_cbos_pe_reltn failed",
          ", Failed to update consolidated schedule with cycle of most severe dunning level"))
       ENDIF
       SET rtnval = false
      ENDIF
      FOR (idx = 1 TO size(uptconsboschedrequest->objarray,5))
        SET hcyclechange = createevent(cs18669_event_cd,cs18689_cyclechange_cd,build2(
          "cbos guarantor subs - removeCbosPeReltn - Context: ",tcontext))
        CALL addeventreltn(hcyclechange,0.0,0.0,"CONS_BO_SCHED",uptconsboschedrequest->objarray[idx].
         cons_bo_sched_id)
        CALL addeventdetailstring(hcyclechange,build2("CONS_BO_SCHED: ",uptconsboschedrequest->
          objarray[idx].cons_bo_sched_id," changed statement cycle Id: ",cycleid))
        IF ( NOT (writeevent(hcyclechange)))
         CALL logmessage(build2("Failed to write event hCycleChange ",hcyclechange),log_error)
         CALL dumpeventstructure(0)
        ENDIF
      ENDFOR
     ENDIF
     SET stat = initrec(uptconsboschedrequest)
     FOR (idx = 1 TO size(uptcbospereltnrequest->objarray,5))
      SELECT INTO "nl:"
       FROM cbos_pe_reltn cper
       PLAN (cper
        WHERE (cper.cons_bo_sched_id=uptcbospereltnrequest->objarray[idx].cons_bo_sched_id)
         AND (cper.cbos_pe_reltn_id != uptcbospereltnrequest->objarray[idx].cbos_pe_reltn_id)
         AND cper.active_ind=true)
       WITH nocounter
      ;end select
      IF (curqual=0)
       SELECT INTO "nl:"
        FROM cons_bo_sched cbs
        PLAN (cbs
         WHERE (cbs.cons_bo_sched_id=uptcbospereltnrequest->objarray[idx].cons_bo_sched_id)
          AND cbs.active_ind=true
          AND  NOT ( EXISTS (
         (SELECT
          bo.cons_bo_sched_id
          FROM benefit_order bo
          WHERE bo.cons_bo_sched_id=cbs.cons_bo_sched_id
           AND bo.active_ind=true
           AND  NOT (bo.bo_status_cd IN (g_cs24451_invalid_cd, cs24451_cancelled_cd))))))
        DETAIL
         cnt = (size(uptconsboschedrequest->objarray,5)+ 1), stat = alterlist(uptconsboschedrequest->
          objarray,cnt), uptconsboschedrequest->objarray[cnt].cons_bo_sched_id =
         uptcbospereltnrequest->objarray[idx].cons_bo_sched_id,
         uptconsboschedrequest->objarray[cnt].updt_cnt = cbs.updt_cnt, uptconsboschedrequest->
         objarray[cnt].active_ind = false, uptconsboschedrequest->objarray[cnt].statement_cycle_id =
         null_f8
        WITH nocounter
       ;end select
      ENDIF
     ENDFOR
     IF (validate(debug,0)=1)
      CALL echorecord(uptconsboschedrequest)
     ENDIF
     IF (size(uptconsboschedrequest->objarray,5) > 0)
      EXECUTE pft_da_upt_cons_bo_sched  WITH replace("REQUEST",uptconsboschedrequest), replace(
       "REPLY",uptconsboschedreply)
      IF ((uptconsboschedreply->status_data.status != "S"))
       IF (validate(setdetails,char(128)) != char(128))
        CALL setdetails("removeCbosPeReltn",build2("Script PFT_DA_UPT_CONS_BO_SCHED failed",
          ", Failed to update consolidated schedule if cbos_pe_reltn's active_ind's are false"))
       ENDIF
       IF (validate(addtracemessage,char(128)) != char(128))
        CALL addtracemessage("removeCbosPeReltn",build2("Script PFT_DA_UPT_CONS_BO_SCHED failed",
          ", Failed to update consolidated schedule if cbos_pe_reltn's active_ind's are falsel"))
       ENDIF
       SET rtnval = false
      ENDIF
     ENDIF
    ENDIF
    CALL logmessage("removeCbosPeReltn","Exiting",log_debug)
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(leveltonumber,char(128))=char(128))
  SUBROUTINE (leveltonumber(level=f8) =f8)
    CASE (level)
     OF g_cs25095_normal1_cd:
      RETURN(1)
     OF g_cs25095_normal2_cd:
      RETURN(2)
     OF g_cs25095_normal3_cd:
      RETURN(3)
     OF g_cs25095_precollections1_cd:
      RETURN(4)
     OF g_cs25095_precollections2_cd:
      RETURN(5)
     OF g_cs25095_collections1_cd:
      RETURN(6)
     OF g_cs25095_collections2_cd:
      RETURN(7)
     OF g_cs25095_collections3_cd:
      RETURN(8)
     ELSE
      RETURN(0)
    ENDCASE
  END ;Subroutine
 ENDIF
 IF (validate(getguarantorstmtcycles,char(128))=char(128))
  SUBROUTINE (getguarantorstmtcycles(ppftencntrid=f8,prguars=vc(ref),pzerocyc=i2) =i2)
    CALL logmessage("getGuarantorStmtCycles","Enter",log_debug)
    DECLARE gidx = i4 WITH protect, noconstant(0)
    DECLARE lastguarantorid = f8 WITH protect, noconstant(0.0)
    DECLARE zerocycclause = vc WITH protect, noconstant(evaluate(pzerocyc,true,"1 = 1",false,
      "cper.statement_cycle_id > 0.0"))
    SELECT INTO "nl:"
     FROM cbos_pe_reltn cper,
      cons_bo_sched cbos,
      cbos_person_reltn cpr,
      person p,
      organization o,
      statement_cycle sc
     PLAN (cper
      WHERE cper.pft_encntr_id=ppftencntrid
       AND cper.active_ind=true
       AND parser(zerocycclause))
      JOIN (cbos
      WHERE cbos.cons_bo_sched_id=cper.cons_bo_sched_id
       AND cbos.person_id=0.0
       AND cbos.organization_id=0.0
       AND cbos.active_ind=true)
      JOIN (cpr
      WHERE cpr.cons_bo_sched_id=cbos.cons_bo_sched_id
       AND cpr.active_ind=true)
      JOIN (p
      WHERE (p.person_id= Outerjoin(cpr.person_id)) )
      JOIN (o
      WHERE (o.organization_id= Outerjoin(cpr.organization_id)) )
      JOIN (sc
      WHERE (sc.statement_cycle_id= Outerjoin(cper.statement_cycle_id)) )
     ORDER BY cbos.cons_bo_sched_id, cpr.cbos_person_reltn_id
     HEAD cbos.cons_bo_sched_id
      gidx += 1, stat = alterlist(prguars->guarantorresps,gidx), prguars->guarantorresps[gidx].
      cbospereltnid = cper.cbos_pe_reltn_id,
      prguars->guarantorresps[gidx].statementcyclename = nullval(sc.cycle_name,""), prguars->
      guarantorresps[gidx].statementcycleid = cper.statement_cycle_id, prguars->guarantorresps[gidx].
      nextstmtdate = cbos.next_bill_dt_tm,
      lastguarantorid = 0.0
     HEAD cpr.cbos_person_reltn_id
      IF (p.person_id != 0.0)
       IF (lastguarantorid=0.0)
        prguars->guarantorresps[gidx].guarantorname = trim(p.name_full_formatted,3)
       ELSE
        prguars->guarantorresps[gidx].guarantorname = concat(prguars->guarantorresps[gidx].
         guarantorname,"; ",trim(p.name_full_formatted,3))
       ENDIF
       lastguarantorid = cpr.person_id
      ELSEIF (o.organization_id != 0.0)
       prguars->guarantorresps[gidx].guarantorname = trim(o.org_name,3)
      ENDIF
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("getGuarantorStmtCycles","zero guarantor statement cycle's found",log_debug)
     RETURN(false)
    ENDIF
    CALL logmessage("getGuarantorStmtCycles","Exit",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getguarantoraccountbyguarantor,char(128))=char(128))
  SUBROUTINE (getguarantoraccountbyguarantor(ppersonid1=f8,ppersonid2=f8,porgid=f8,pbeid=f8,pracctid=
   f8(ref)) =i2)
    DECLARE acctcnt = i4 WITH protect, noconstant(0)
    SET pracctid = 0.0
    IF (ppersonid1 > 0.0)
     IF (ppersonid2 > 0.0)
      SELECT INTO "nl:"
       FROM pft_acct_reltn par1,
        pft_acct_reltn par2,
        account a
       PLAN (par1
        WHERE par1.parent_entity_id=ppersonid1
         AND par1.parent_entity_name="GUARANTOR"
         AND par1.role_type_cd=cs18936_guarantor_cd
         AND par1.active_ind=true)
        JOIN (par2
        WHERE par2.acct_id=par1.acct_id
         AND par2.parent_entity_id=ppersonid2
         AND par2.parent_entity_name=par1.parent_entity_name
         AND par2.role_type_cd=par1.role_type_cd
         AND par2.active_ind=par1.active_ind)
        JOIN (a
        WHERE a.acct_id=par1.acct_id
         AND a.acct_type_cd=cs18736_ar_cd
         AND a.acct_sub_type_cd=cs20849_guarantor_cd
         AND a.billing_entity_id=pbeid
         AND a.active_ind=true)
       ORDER BY a.acct_id
       HEAD a.acct_id
        acctcnt += 1, pracctid = a.acct_id
       WITH nocounter
      ;end select
     ELSE
      SELECT INTO "nl:"
       FROM pft_acct_reltn par,
        account a
       PLAN (par
        WHERE par.parent_entity_id=ppersonid1
         AND par.parent_entity_name="GUARANTOR"
         AND par.role_type_cd=cs18936_guarantor_cd
         AND par.active_ind=true
         AND  NOT ( EXISTS (
        (SELECT
         1
         FROM pft_acct_reltn par1
         WHERE par1.acct_id=par.acct_id
          AND par1.parent_entity_id != par.parent_entity_id
          AND par1.parent_entity_name=par.parent_entity_name
          AND par1.role_type_cd=par.role_type_cd
          AND par1.active_ind=par.active_ind))))
        JOIN (a
        WHERE a.acct_id=par.acct_id
         AND a.acct_type_cd=cs18736_ar_cd
         AND a.acct_sub_type_cd=cs20849_guarantor_cd
         AND a.billing_entity_id=pbeid
         AND a.active_ind=true)
       ORDER BY a.acct_id
       HEAD a.acct_id
        acctcnt += 1, pracctid = a.acct_id
       WITH nocounter
      ;end select
     ENDIF
    ELSEIF (porgid > 0.0)
     SELECT INTO "nl:"
      FROM pft_acct_reltn par,
       account a
      PLAN (par
       WHERE par.parent_entity_id=porgid
        AND par.parent_entity_name="ORGANIZATION"
        AND par.role_type_cd=cs18936_guarantor_cd
        AND par.active_ind=true)
       JOIN (a
       WHERE a.acct_id=par.acct_id
        AND a.acct_type_cd=cs18736_ar_cd
        AND a.acct_sub_type_cd=cs20849_guarantor_cd
        AND a.billing_entity_id=pbeid
        AND a.active_ind=true)
      ORDER BY a.acct_id
      HEAD a.acct_id
       acctcnt += 1, pracctid = a.acct_id
      WITH nocounter
     ;end select
    ELSE
     CALL logmessage("getGuarantorAccountByGuarantor","Invalid guarantor id(s) passed",log_error)
     RETURN(false)
    ENDIF
    IF (acctcnt <= 0)
     CALL logmessage("getGuarantorAccountByGuarantor","No account found for guarantor",log_error)
     RETURN(false)
    ENDIF
    IF (acctcnt > 1)
     SET pracctid = 0.0
     CALL logmessage("getGuarantorAccountByGuarantor","Multiple accounts found for guarantor",
      log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo("Begin including PFT_GUAR_RESP_SUBS.INC version [692304.15]")
 CALL echo("Begin PFT_CALCULATE_BALANCE_SUBS.INC, version [356730.004]")
 IF ( NOT (validate(zero_flag)))
  DECLARE zero_flag = i2 WITH protect, constant(0)
 ENDIF
 IF ( NOT (validate(debit_flag)))
  DECLARE debit_flag = i2 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(credit_flag)))
  DECLARE credit_flag = i2 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(addamounttobalance)))
  SUBROUTINE (addamounttobalance(porigbalance=f8,porigbalanceflag=i2,pamount=f8,pamountflag=i2,
   prnewbalance=f8(ref),prnewbalanceflag=i2(ref)) =i2)
    SET prnewbalance = 0.0
    SET prnewbalanceflag = 0
    IF (porigbalance < 0.0)
     CALL logmessage("addAmountToBalance","Original Balance < 0",log_error)
     RETURN(false)
    ENDIF
    IF (pamount < 0.0)
     CALL logmessage("addAmountToBalance","Amount < 0",log_error)
     RETURN(false)
    ENDIF
    IF ( NOT (porigbalanceflag IN (zero_flag, debit_flag, credit_flag)))
     CALL logmessage("addAmountToBalance","Original Balance Flag not a ZERO, DEBIT or CREDIT",
      log_error)
     RETURN(false)
    ENDIF
    IF ( NOT (pamountflag IN (zero_flag, debit_flag, credit_flag)))
     CALL logmessage("addAmountToBalance","Amount Flag not a ZERO, DEBIT or CREDIT",log_error)
     RETURN(false)
    ENDIF
    IF (porigbalance > 0.009
     AND  NOT (porigbalanceflag IN (debit_flag, credit_flag)))
     CALL logmessage("addAmountToBalance",
      "Original Balance Flag not DEBIT or CREDIT when Original Balance > 0.009",log_error)
     RETURN(false)
    ENDIF
    IF (round(pamount,2) > 0.0
     AND  NOT (pamountflag IN (debit_flag, credit_flag)))
     CALL logmessage("addAmountToBalance","Amount Flag not DEBIT or CREDIT when Amount > 0.0",
      log_error)
     RETURN(false)
    ENDIF
    DECLARE signedorigbalance = f8 WITH protect, noconstant(evaluate(porigbalanceflag,credit_flag,(
      porigbalance * - (1.0)),porigbalance))
    DECLARE signedamount = f8 WITH protect, noconstant(evaluate(pamountflag,credit_flag,(pamount *
      - (1.0)),pamount))
    DECLARE signednewbalance = f8 WITH protect, noconstant((signedorigbalance+ signedamount))
    SET prnewbalanceflag = getamountflag(signednewbalance)
    SET prnewbalance = abs(signednewbalance)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(addamounttosignedbalance)))
  SUBROUTINE (addamounttosignedbalance(porigbalance=f8,pamount=f8,pamountflag=i2,prnewbalance=f8(ref)
   ) =i2)
    SET prnewbalance = 0.0
    IF (pamount < 0.0)
     CALL logmessage("addAmountToBalance","Amount < 0",log_error)
     RETURN(false)
    ENDIF
    IF ( NOT (pamountflag IN (zero_flag, debit_flag, credit_flag)))
     CALL logmessage("addAmountToSignedBalance","Amount Flag not a ZERO, DEBIT or CREDIT",log_error)
     RETURN(false)
    ENDIF
    IF (round(pamount,2) > 0.0
     AND  NOT (pamountflag IN (debit_flag, credit_flag)))
     CALL logmessage("addAmountToBalance","Amount Flag not DEBIT or CREDIT when Amount > 0.0",
      log_error)
     RETURN(false)
    ENDIF
    DECLARE signedamount = f8 WITH protect, noconstant(evaluate(pamountflag,credit_flag,(pamount *
      - (1.0)),pamount))
    SET prnewbalance = (porigbalance+ signedamount)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(addsignedamounttobalance)))
  SUBROUTINE (addsignedamounttobalance(porigbalance=f8,porigbalanceflag=i2,pamount=f8,prnewbalance=f8
   (ref),prnewbalanceflag=i2(ref)) =i2)
    SET prnewbalance = 0.0
    SET prnewbalanceflag = 0
    IF (porigbalance < 0.0)
     CALL logmessage("addAmountToBalance","Original Balance < 0",log_error)
     RETURN(false)
    ENDIF
    IF ( NOT (porigbalanceflag IN (zero_flag, debit_flag, credit_flag)))
     CALL logmessage("addSignedAmountToBalance","Original Balance Flag not a ZERO, DEBIT or CREDIT",
      log_error)
     RETURN(false)
    ENDIF
    IF (porigbalance > 0.009
     AND  NOT (porigbalanceflag IN (debit_flag, credit_flag)))
     CALL logmessage("addSignedAmountToBalance",
      "Original Bal Flag not DEBIT or CREDIT when Original Bal > 0.009",log_error)
     RETURN(false)
    ENDIF
    DECLARE signedorigbalance = f8 WITH protect, noconstant(evaluate(porigbalanceflag,credit_flag,(
      porigbalance * - (1.0)),porigbalance))
    DECLARE signednewbalance = f8 WITH protect, noconstant((signedorigbalance+ pamount))
    SET prnewbalanceflag = getamountflag(signednewbalance)
    SET prnewbalance = abs(signednewbalance)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(getamountflag)))
  SUBROUTINE (getamountflag(pamount=f8) =i2)
    IF (round(pamount,2) < 0.0)
     RETURN(credit_flag)
    ELSEIF (round(pamount,2) > 0.0)
     RETURN(debit_flag)
    ELSE
     RETURN(zero_flag)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 CALL beginservice("665384.006")
 RECORD publisheventreq(
   1 eventlist[*]
     2 entitytypekey = vc
     2 entityid = f8
     2 eventcd = f8
     2 eventtypecd = f8
     2 eventprocessdelay = f8
     2 workitemamount = f8
     2 reasoncd = f8
     2 origincd = f8
     2 pftlineitemid = f8
     2 params[*]
       3 paramcd = f8
       3 paramvalue = f8
       3 newparamind = i2
       3 doublevalue = f8
       3 stringvalue = vc
       3 datevalue = dq8
       3 parententityname = vc
       3 parententityid = f8
     2 workitems[*]
       3 workitemalias = vc
     2 denials[*]
       3 denialalias = f8
       3 denialgroup = f8
       3 denialtype = f8
       3 denialamount = f8
   1 isguaranteedbatchpublishevent = i2
 ) WITH protect
 RECORD publisheventrep(
   1 status_data
     2 status = c1
     2 subeventstatus[1]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
   1 pfteventoccurid = f8
 ) WITH protect
 RECORD financialencntr(
   1 pftencntrlist[*]
     2 pftencntrid = f8
 ) WITH protect
 IF ( NOT (validate(self_pay_modification)))
  DECLARE self_pay_modification = vc WITH protect, constant("SELF_PAY_MODIFICATION")
 ENDIF
 IF ( NOT (validate(insurance_modification)))
  DECLARE insurance_modification = vc WITH protect, constant("INSURANCE_MODIFICATION")
 ENDIF
 IF ( NOT (validate(self_pay_transfer)))
  DECLARE self_pay_transfer = vc WITH protect, constant("SELF_PAY_TRANSFER")
 ENDIF
 IF ( NOT (validate(self_pay_chrgs)))
  DECLARE self_pay_chrgs = vc WITH protect, constant("SELF_PAY_CHRGS")
 ENDIF
 IF ( NOT (validate(insurance_chrgs)))
  DECLARE insurance_chrgs = vc WITH protect, constant("INSURANCE_CHRGS")
 ENDIF
 IF ( NOT (validate(remittance_posting)))
  DECLARE remittance_posting = vc WITH protect, constant("REMITTANCE_POSTING")
 ENDIF
 IF ( NOT (validate(cs29322_guarbalchg_cd)))
  DECLARE cs29322_guarbalchg_cd = f8 WITH protect, constant(getcodevalue(29322,"GUARBALCHG",0))
 ENDIF
 IF ( NOT (validate(cs23369_wfevent_cd)))
  DECLARE cs23369_wfevent_cd = f8 WITH protect, constant(getcodevalue(23369,"WFEVENT",0))
 ENDIF
 IF ( NOT (validate(cs24454_delay_cd)))
  DECLARE cs24454_delay_cd = f8 WITH protect, constant(getcodevalue(24454,"DELAYEVENT",0))
 ENDIF
 IF ( NOT (validate(cs24454_realtime_cd)))
  DECLARE cs24454_realtime_cd = f8 WITH protect, constant(getcodevalue(24454,"REALTIMEPROC",0))
 ENDIF
 IF ( NOT (validate(cs20849_patient)))
  DECLARE cs20849_patient = f8 WITH protect, constant(getcodevalue(20849,"PATIENT",0))
 ENDIF
 IF ( NOT (validate(cs18736_ar)))
  DECLARE cs18736_ar = f8 WITH protect, constant(getcodevalue(18736,"A/R",0))
 ENDIF
 IF ( NOT (validate(cs20549_guarrespadj_cd)))
  DECLARE cs20549_guarrespadj_cd = f8 WITH protect, constant(getcodevalue(20549,"GUARRESPADJ",0))
 ENDIF
 IF ( NOT (validate(cs24450_guarbalcalc_cd)))
  DECLARE cs24450_guarbalcalc_cd = f8 WITH protect, constant(getcodevalue(24450,"GUARBALCALC",0))
 ENDIF
 DECLARE publishguarbalchangeevent(null) = i2
 SUBROUTINE (geteventtype(ptransmod=vc) =f8)
   IF (ptransmod=null)
    CALL logmessage("getEventType","Transmod is NULL",log_debug)
    RETURN(0.0)
   ENDIF
   IF (size(trim(ptransmod,3),1)=0)
    CALL logmessage("getEventType","Transmod is empty",log_debug)
    RETURN(0.0)
   ENDIF
   IF (ptransmod IN (self_pay_modification, insurance_modification, self_pay_transfer))
    CALL logmessage("getEventType","Real time event processing",log_debug)
    RETURN(cs24454_realtime_cd)
   ENDIF
   RETURN(cs24454_delay_cd)
 END ;Subroutine
 SUBROUTINE (gettransmod(prealtimeind=i2) =vc)
  IF (prealtimeind=true)
   RETURN(self_pay_modification)
  ENDIF
  RETURN(self_pay_chrgs)
 END ;Subroutine
 SUBROUTINE (getclinicalencntrid(ppftencntrid=f8) =f8)
   DECLARE encntrid = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM pft_encntr pe
    WHERE pe.pft_encntr_id=ppftencntrid
     AND pe.active_ind=true
    DETAIL
     encntrid = pe.encntr_id
    WITH nocounter
   ;end select
   RETURN(encntrid)
 END ;Subroutine
 SUBROUTINE (populatepublisheventreqforclinicalencntr(pencntrid=f8) =i2)
   DECLARE pftencntrcount = i4 WITH protect, noconstant(0)
   DECLARE finencntrcounter = i4 WITH protect, noconstant(0)
   SET stat = initrec(financialencntr)
   SELECT INTO "nl:"
    FROM encounter e,
     pft_encntr pe
    PLAN (e
     WHERE e.encntr_id=pencntrid
      AND e.active_ind=true)
     JOIN (pe
     WHERE pe.encntr_id=e.encntr_id
      AND pe.active_ind=true)
    DETAIL
     pftencntrcount += 1, stat = alterlist(financialencntr->pftencntrlist,pftencntrcount),
     financialencntr->pftencntrlist[pftencntrcount].pftencntrid = pe.pft_encntr_id
    WITH nocounter
   ;end select
   FOR (finencntrcounter = 1 TO size(financialencntr->pftencntrlist,5))
     IF ( NOT (populatereqforguarbalchangeevent(financialencntr->pftencntrlist[finencntrcounter].
      pftencntrid,cs24454_realtime_cd)))
      CALL logmessage("publishGuarBalChangeEventForClinicalEncntr",
       "Failed to populate publishEventReq",log_debug)
      RETURN(false)
     ENDIF
   ENDFOR
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (populatepublisheventreqforperson(ppersonid=f8) =i2)
   DECLARE pftencntrcount = i4 WITH protect, noconstant(0)
   DECLARE finencntrcounter = i4 WITH protect, noconstant(0)
   SET stat = initrec(financialencntr)
   SELECT INTO "nl:"
    FROM person p,
     encounter e,
     pft_encntr pe
    PLAN (p
     WHERE p.person_id=ppersonid
      AND p.active_ind=true)
     JOIN (e
     WHERE e.person_id=p.person_id
      AND e.active_ind=true)
     JOIN (pe
     WHERE pe.encntr_id=e.encntr_id
      AND pe.active_ind=true)
    DETAIL
     pftencntrcount += 1, stat = alterlist(financialencntr->pftencntrlist,pftencntrcount),
     financialencntr->pftencntrlist[pftencntrcount].pftencntrid = pe.pft_encntr_id
    WITH nocounter
   ;end select
   FOR (finencntrcounter = 1 TO size(financialencntr->pftencntrlist,5))
     IF ( NOT (populatereqforguarbalchangeevent(financialencntr->pftencntrlist[finencntrcounter].
      pftencntrid,cs24454_realtime_cd)))
      CALL logmessage("populatePublishEventReqForPerson","Failed to populate publishEventReq",
       log_debug)
      RETURN(false)
     ENDIF
   ENDFOR
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (populatereqforguarbalchangeevent(ppftencntrid=f8,peventtype=f8) =i2)
   DECLARE eventindex = i4 WITH protect, noconstant(0)
   DECLARE eventcounter = i4 WITH protect, noconstant(0)
   IF (((validate(ppftencntrid,0.0) <= 0.0) OR (validate(peventtype,0.0) <= 0.0)) )
    CALL logmessage("populateReqForGuarBalChangeEvent","PFT Encounter ID and Event Type are required",
     log_debug)
    RETURN(false)
   ENDIF
   IF ( NOT (isfinencntrassociatedtopatacct(ppftencntrid)))
    CALL logmessage("populateReqForGuarBalChangeEvent",
     "PFT Encounter ID is not associated to Patient Account",log_debug)
    RETURN(true)
   ENDIF
   FOR (eventcounter = 1 TO size(publisheventreq->eventlist,5))
     IF (doeseventexist(ppftencntrid,peventtype,eventcounter))
      CALL logmessage("populateReqForGuarBalChangeEvent",build2(
        "Event for EntityID already exists in publishEventReq: ",ppftencntrid),log_debug)
      RETURN(true)
     ENDIF
   ENDFOR
   SET eventindex = (size(publisheventreq->eventlist,5)+ 1)
   SET stat = alterlist(publisheventreq->eventlist,eventindex)
   SET publisheventreq->eventlist[eventindex].entitytypekey = "PFTENCNTR"
   SET publisheventreq->eventlist[eventindex].entityid = ppftencntrid
   SET publisheventreq->eventlist[eventindex].eventcd = cs29322_guarbalchg_cd
   SET publisheventreq->eventlist[eventindex].eventtypecd = cs23369_wfevent_cd
   SET stat = alterlist(publisheventreq->eventlist[eventindex].params,1)
   SET publisheventreq->eventlist[eventindex].params[1].paramcd = peventtype
   SET publisheventreq->eventlist[eventindex].params[1].newparamind = true
   RETURN(true)
 END ;Subroutine
 SUBROUTINE publishguarbalchangeevent(null)
   IF (size(publisheventreq->eventlist,5) <= 0)
    CALL logmessage("publishGuarBalChangeEvent","publishEventReq EventList is empty",log_debug)
    RETURN(true)
   ENDIF
   EXECUTE pft_publish_event  WITH replace("REQUEST",publisheventreq), replace("REPLY",
    publisheventrep)
   IF ((publisheventrep->status_data.status != "S"))
    CALL logmessage("publishGuarBalChangeEvent","pft_publish_event didn't return success",log_debug)
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (doeseventexist(ppftencntrid=f8,peventtype=f8,pparamindex=i4) =i2)
  IF ((publisheventreq->eventlist[pparamindex].entityid=ppftencntrid)
   AND (publisheventreq->eventlist[pparamindex].params[1].paramcd=peventtype))
   RETURN(true)
  ENDIF
  RETURN(false)
 END ;Subroutine
 SUBROUTINE (isfinencntrassociatedtopatacct(ppftencntrid=f8) =i2)
   DECLARE ispatientacct = i2 WITH protect, noconstant(false)
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     account a
    PLAN (pe
     WHERE pe.pft_encntr_id=ppftencntrid)
     JOIN (a
     WHERE a.acct_id=pe.acct_id
      AND a.acct_type_cd=cs18736_ar
      AND a.acct_sub_type_cd=cs20849_patient)
    DETAIL
     ispatientacct = true
    WITH nocounter
   ;end select
   RETURN(ispatientacct)
 END ;Subroutine
 SUBROUTINE (addencntrtoguarbalchangeevent(ptransmod=vc,ppftencntrid=f8,pservicedate=f8,psubtypecd=f8
  ) =i2)
   CALL logmessage("addEncntrToGuarBalChangeEvent","Entering.......",log_debug)
   DECLARE eventtypecd = f8 WITH protect, noconstant(geteventtype(ptransmod))
   IF (ptransmod=remittance_posting
    AND psubtypecd=cs20549_guarrespadj_cd)
    CALL logmessage("addEncntrToGuarBalChangeEvent",
     "Not required to publish Guarantor Balance Change Event",log_debug)
    RETURN(true)
   ENDIF
   IF ( NOT (populatereqforguarbalchangeevent(ppftencntrid,eventtypecd)))
    CALL logmessage("addEncntrToGuarBalChangeEvent","Failed to populate the delayed event request.",
     log_error)
    RETURN(false)
   ENDIF
   CALL logmessage("addEncntrToGuarBalChangeEvent","Exiting.......",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (publishapplytranstoguaraccttask(ppftencntrid=f8,prealtimeind=i2,
  papplytranstoguaracctreqjson=vc(value,"")) =i2)
   DECLARE pftencntrcnt = i4 WITH protect, noconstant(0)
   DECLARE gcidx = i4 WITH protect, noconstant(0)
   IF (validate(debug,0)=1)
    CALL echo(build("pPftEncntrId is: ",ppftencntrid))
    CALL echo(build("pRealtimeInd is: ",prealtimeind))
   ENDIF
   RECORD wtptaskrequest(
     1 entityid = f8
     1 actionkey = vc
     1 parameters[*]
       2 name = vc
       2 paramkey = vc
       2 doublevalue = f8
       2 stringvalue = vc
       2 integervalue = i4
       2 datevalue = f8
       2 datatypeflag = vc
   ) WITH protect
   RECORD wtpsavereq(
     1 requestjson = vc
     1 processdttm = dq8
     1 taskident = vc
     1 entityname = vc
     1 entityid = f8
     1 taskdatatxt = vc
   ) WITH protect
   RECORD wtpsaverep(
     1 workflowtaskqueueid = f8
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   RECORD applyholdrequest(
     1 objarray[*]
       2 pft_encntr_id = f8
       2 pe_status_reason_cd = f8
       2 reason_comment = vc
       2 reapply_ind = i4
       2 pft_balance_id = f8
       2 pft_hold_id = f8
       2 pe_sub_status_reason_cd = f8
       2 guar_acct_id = f8
   ) WITH protect
   SET wtptaskrequest->entityid = ppftencntrid
   SET wtptaskrequest->actionkey = "GUAR_BAL_WRITEOFF"
   SET stat = alterlist(wtptaskrequest->parameters,2)
   SET wtptaskrequest->parameters[1].paramkey = "WTP"
   SET wtptaskrequest->parameters[1].name = "CALLER"
   SET wtptaskrequest->parameters[1].stringvalue = curprog
   SET wtptaskrequest->parameters[1].datatypeflag = "STRING"
   SET wtptaskrequest->parameters[2].paramkey = "TRANS_MOD"
   SET wtptaskrequest->parameters[2].name = "TRANS_MOD"
   SET wtptaskrequest->parameters[2].stringvalue = gettransmod(prealtimeind)
   SET wtptaskrequest->parameters[2].datatypeflag = "STRING"
   IF (size(trim(papplytranstoguaracctreqjson)) != 0)
    SET stat = cnvtjsontorec(papplytranstoguaracctreqjson)
    IF (validate(debug,0)=1)
     CALL echorecord(applytranstoguaracctreq)
    ENDIF
    SET wtptaskrequest->parameters[2].stringvalue = applytranstoguaracctreq->guar_qual[1].trans_mod
    SET stat = alterlist(wtptaskrequest->parameters,3)
    SET wtptaskrequest->parameters[3].paramkey = "GUAR_REQ"
    SET wtptaskrequest->parameters[3].name = "GUAR_REQ"
    SET wtptaskrequest->parameters[3].stringvalue = cnvtrectojson(applytranstoguaracctreq)
    SET wtptaskrequest->parameters[3].datatypeflag = "STRING"
   ENDIF
   SET wtpsavereq->requestjson = cnvtrectojson(wtptaskrequest)
   SET wtpsavereq->processdttm = cnvtdatetime(curdate,curtime)
   SET wtpsavereq->taskident = "PFT_WF_ADPT_GUAR_BAL_WRITE_OFF"
   SET wtpsavereq->entityname = "PFTENCNTR"
   SET wtpsavereq->entityid = wtptaskrequest->entityid
   EXECUTE wtp_workflow_task_save  WITH replace("REQUEST",wtpsavereq), replace("REPLY",wtpsaverep)
   IF ((wtpsaverep->status_data.status != "S"))
    IF (validate(debug,0)=1)
     CALL echorecord(wtpsavereq)
     CALL echorecord(wtpsaverep)
    ENDIF
    RETURN(false)
   ENDIF
   IF (validate(applytranstoguaracctreq)
    AND ismultipleguarantorfinancialencounter(ppftencntrid))
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE expand(gcidx,1,size(applytranstoguaracctreq->guar_qual,5),pe.pft_encntr_id,
       applytranstoguaracctreq->guar_qual[gcidx].pft_encntr_id)
       AND pe.active_ind=true)
     ORDER BY pe.pft_encntr_id
     HEAD pe.pft_encntr_id
      pftencntrcnt += 1, stat = alterlist(applyholdrequest->objarray,pftencntrcnt), applyholdrequest
      ->objarray[pftencntrcnt].pft_encntr_id = pe.pft_encntr_id,
      applyholdrequest->objarray[pftencntrcnt].pe_status_reason_cd = cs24450_guarbalcalc_cd,
      applyholdrequest->objarray[pftencntrcnt].reapply_ind = true
     WITH nocounter
    ;end select
    IF ( NOT (applybillingholds(applyholdrequest)))
     CALL logmessage("publishApplyTransToGuarAcctTask",
      "Failed to apply Pending Guarantor Balance Calculation hold.",log_error)
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (applybillingholds(prapplyholdrequest=vc(ref)) =i2)
   IF (validate(debug,0)=1)
    CALL echorecord(prapplyholdrequest)
   ENDIF
   RECORD applyholdreply(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
     1 objarray[*]
       2 service_cd = f8
       2 updt_id = f8
       2 event_key = vc
       2 category_key = vc
       2 published_ind = i2
       2 pe_status_reason_cd = f8
       2 acct_id = f8
       2 activity_id = f8
       2 batch_denial_file_r_id = f8
       2 batch_trans_ext_id = f8
       2 batch_trans_file_id = f8
       2 batch_trans_id = f8
       2 benefit_order_id = f8
       2 bill_item_id = f8
       2 bill_templ_id = f8
       2 bill_vrsn_nbr = i4
       2 billing_entity_id = f8
       2 bo_hp_reltn_id = f8
       2 charge_item_id = f8
       2 chrg_activity_id = f8
       2 claim_status_id = f8
       2 client_org_id = f8
       2 corsp_activity_id = f8
       2 corsp_log_reltn_id = f8
       2 denial_id = f8
       2 dirty_flag = i4
       2 encntr_id = f8
       2 guar_acct_id = f8
       2 guarantor_id = f8
       2 health_plan_id = f8
       2 long_text_id = f8
       2 organization_id = f8
       2 payor_org_id = f8
       2 pe_status_reason_id = f8
       2 person_id = f8
       2 pft_balance_id = f8
       2 pft_bill_activity_id = f8
       2 pft_charge_id = f8
       2 pft_encntr_fact_id = f8
       2 pft_encntr_id = f8
       2 pft_line_item_id = f8
       2 trans_alias_id = f8
       2 pft_payment_plan_id = f8
       2 daily_encntr_bal_id = f8
       2 daily_acct_bal_id = f8
       2 active_ind = i2
       2 active_status_cd = f8
       2 active_status_disp = vc
       2 active_status_desc = vc
       2 active_status_mean = vc
       2 active_status_code_set = f8
       2 active_status_dt_tm = dq8
       2 active_status_prsnl_id = f8
       2 beg_effective_dt_tm = dq8
       2 end_effective_dt_tm = dq8
       2 updt_applctx = f8
       2 updt_cnt = i4
       2 updt_dt_tm = dq8
       2 updt_id = f8
       2 updt_task = f8
       2 benefit_status_cd = f8
       2 financial_class_cd = f8
       2 payment_plan_flag = i2
       2 payment_location_id = f8
       2 encntr_plan_cob_id = f8
       2 guarantor_account_id = f8
       2 guarantor_id1 = f8
       2 guarantor_id2 = f8
       2 cbos_pe_reltn_id = f8
       2 post_dt_tm = dq8
       2 posting_category_type_flag = i2
   ) WITH protect
   IF (size(prapplyholdrequest->objarray,5) > 0)
    EXECUTE pft_apply_bill_hold_suspension  WITH replace("REQUEST",prapplyholdrequest), replace(
     "REPLY",applyholdreply)
    IF ((applyholdreply->status_data.status="F"))
     CALL logmessage("applyBillingHolds","Failed to apply billing holds.",log_error)
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 RECORD dailyaccountbalances(
   1 acctid = f8
   1 cbosaddchrg = f8
   1 dailybalances[*]
     2 dailyacctbalid = f8
     2 updtcnt = i4
     2 activitydate = dq8
     2 maxdailyrate = f8
     2 totaldailyratechrgamt = f8
     2 cbosaddchrg = f8
     2 dailyratechanged = i2
     2 benefitorders[*]
       3 benefitorderid = f8
       3 pftencntrid = f8
       3 dailyacctbalreltnid = f8
       3 updtcnt = i4
       3 processed = i2
       3 maxdailyrate = f8
       3 addrespamt = f8
       3 totalrespamt = f8
       3 transtype = f8
       3 valuecriteria = f8
       3 cbosaddchrg = f8
       3 chargedabrid = f8
       3 chargeamt = f8
       3 chargeaddamt = f8
       3 chargeupdtcnt = i4
 ) WITH protect
 RECORD guaracctdata(
   1 accttrans[*]
     2 transtype = f8
     2 transsubtype = f8
     2 addtransamt = f8
   1 dab
     2 addchrg = f8
     2 ttlchrg = f8
     2 addresp = f8
     2 ttlresp = f8
     2 addpay = f8
     2 ttlpay = f8
     2 addadj = f8
     2 ttladj = f8
   1 cbospereltn[*]
     2 guaracctid = f8
     2 pftencntrid = f8
     2 addtransamt = f8
     2 cbospereltnid = f8
     2 cbospeamt = f8
 ) WITH protect
 IF ( NOT (validate(benefitorders)))
  RECORD benefitorders(
    1 benefitorders[*]
      2 benefitorderid = f8
      2 pftdate = dq8
      2 pftdateid = f8
      2 totalchrgamt = f8
      2 totalrespamt = f8
      2 transferboid = f8
      2 pftencntrid = f8
      2 dabtotalresp = f8
      2 dabmaxchrg = f8
      2 dabadjpayamt = f8
      2 cbosaddchrg = f8
      2 cbosonly = i2
      2 roundedtotalrespamt = f8
      2 lastgidx = i2
      2 lastgboidx = i2
      2 insaliasid = f8
      2 totalpatientliabilityamt = f8
      2 totalpaymentamt = f8
      2 bohpreltns[*]
        3 bohpreltnid = f8
        3 finclass = f8
        3 billtype = f8
        3 healthplanid = f8
        3 claimid = f8
        3 healthplanpriorityseq = i4
        3 transaliasid = f8
        3 claimfromdttm = dq8
        3 claimtodttm = dq8
        3 copaycoinsamt = f8
        3 deductibleandotheramt = f8
    1 istrueselfpayflag = i2
  ) WITH protect
 ENDIF
 RECORD rawchrgs(
   1 chrgs[*]
     2 benefitorderid = f8
     2 chrgid = f8
     2 chrgamt = f8
     2 newamt = f8
     2 servicedate = dq8
     2 typecd = f8
     2 payments = f8
     2 adjustments = f8
 ) WITH protect
 RECORD groupchargesbyday(
   1 dailychrgs[*]
     2 servicedate = dq8
     2 benefitorders[*]
       3 benefitorderid = f8
       3 totaldaychrgamt = f8
       3 newchrgamt = f8
       3 typecd = f8
       3 guarantors[*]
         4 personid1 = f8
         4 personid2 = f8
         4 guarantoracctid = f8
         4 newchrgamt = f8
         4 totalchrgamt = f8
         4 finrespprop = f8
 ) WITH protect
 IF ( NOT (validate(cs18649_adjust_cd)))
  DECLARE cs18649_adjust_cd = f8 WITH protect, constant(getcodevalue(18649,"ADJUST",0))
 ENDIF
 IF ( NOT (validate(cs18649_charge_cd)))
  DECLARE cs18649_charge_cd = f8 WITH protect, constant(getcodevalue(18649,"CHARGE",0))
 ENDIF
 IF ( NOT (validate(cs18649_payment_cd)))
  DECLARE cs18649_payment_cd = f8 WITH protect, constant(getcodevalue(18649,"PAYMENT",0))
 ENDIF
 IF ( NOT (validate(cs18937_smallbalance_cd)))
  DECLARE cs18937_smallbalance_cd = f8 WITH protect, constant(getcodevalue(18937,"SM BAL W/O",0))
 ENDIF
 IF ( NOT (validate(cs20549_guarrespadj_cd)))
  DECLARE cs20549_guarrespadj_cd = f8 WITH protect, constant(getcodevalue(20549,"GUARRESPADJ",0))
 ENDIF
 IF ( NOT (validate(cs4092002_maxrate_cd)))
  DECLARE cs4092002_maxrate_cd = f8 WITH protect, constant(getcodevalue(4092002,"MAXRATE",0))
 ENDIF
 IF ( NOT (validate(cs4092002_percentage_cd)))
  DECLARE cs4092002_percentage_cd = f8 WITH protect, constant(getcodevalue(4092002,"PERCENTAGE",0))
 ENDIF
 IF ( NOT (validate(cs4092002_payment_cd)))
  DECLARE cs4092002_payment_cd = f8 WITH protect, constant(getcodevalue(4092002,"PAYMENT",0))
 ENDIF
 IF ( NOT (validate(cs4092002_adjustment_cd)))
  DECLARE cs4092002_adjustment_cd = f8 WITH protect, constant(getcodevalue(4092002,"ADJUSTMENT",0))
 ENDIF
 IF ( NOT (validate(cs4092002_transfer_cd)))
  DECLARE cs4092002_transfer_cd = f8 WITH protect, constant(getcodevalue(4092002,"TRANSFER",0))
 ENDIF
 IF ( NOT (validate(cs4092002_charge_cd)))
  DECLARE cs4092002_charge_cd = f8 WITH protect, constant(getcodevalue(4092002,"CHARGE",0))
 ENDIF
 IF ( NOT (validate(max_lock_attempts)))
  DECLARE max_lock_attempts = i4 WITH protect, constant(4)
 ENDIF
 IF ( NOT (validate(self_pay_modification)))
  DECLARE self_pay_modification = vc WITH protect, constant("SELF_PAY_MODIFICATION")
 ENDIF
 IF ( NOT (validate(insurance_modification)))
  DECLARE insurance_modification = vc WITH protect, constant("INSURANCE_MODIFICATION")
 ENDIF
 IF ( NOT (validate(self_pay_chrgs)))
  DECLARE self_pay_chrgs = vc WITH protect, constant("SELF_PAY_CHRGS")
 ENDIF
 IF ( NOT (validate(insurance_chrgs)))
  DECLARE insurance_chrgs = vc WITH protect, constant("INSURANCE_CHRGS")
 ENDIF
 IF ( NOT (validate(remittance_posting)))
  DECLARE remittance_posting = vc WITH protect, constant("REMITTANCE_POSTING")
 ENDIF
 IF ( NOT (validate(self_pay_transfer)))
  DECLARE self_pay_transfer = vc WITH protect, constant("SELF_PAY_TRANSFER")
 ENDIF
 IF ( NOT (validate(auto_adjust_writeoff)))
  DECLARE auto_adjust_writeoff = vc WITH protect, constant("AUTO_ADJUST_WRITEOFF")
 ENDIF
 DECLARE gqindex = i4 WITH protect, noconstant(0)
 IF (validate(createnewdailyaccountbalance,char(128))=char(128))
  SUBROUTINE (createnewdailyaccountbalance(paccountid=f8,pactivitydttm=f8,pbillingentityid=f8,
   prdailyaccountbalanceid=f8(ref)) =i2)
    DECLARE prevdabid = f8 WITH protect, noconstant(0.0)
    DECLARE prevdabupdatecnt = i4 WITH protect, noconstant(0)
    DECLARE prevdabenddttm = dq8 WITH protect, noconstant(cnvtdatetime("31-DEC-2100 23:59:59.00"))
    DECLARE currdabenddttm = dq8 WITH protect, noconstant(cnvtdatetime(0.0))
    DECLARE addingfirstdabrec = i2 WITH protect, noconstant(false)
    RECORD adddabrequest(
      1 objarray[1]
        2 acct_id = f8
        2 activity_dt_tm = dq8
        2 beg_balance = f8
        2 beg_dr_cr_flag = i2
        2 beg_effective_dt_tm = dq8
        2 billing_entity_id = f8
        2 daily_acct_bal_id = f8
        2 end_balance = f8
        2 end_dr_cr_flag = i2
        2 end_effective_dt_tm = dq8
        2 total_charge_amt = f8
        2 total_payment_amt = f8
        2 total_adjustment_amt = f8
        2 last_payment_dt_tm = dq8
        2 calculated_end_bal = f8
        2 calc_dr_cr_flag = i2
        2 finchrg_amount = f8
        2 finchrg_dr_cr_flag = i2
        2 transfer_amount = f8
        2 transfer_dr_cr_flag = i2
        2 responsibility_amt = f8
        2 total_responsibility_amt = f8
    ) WITH protect
    RECORD adddabreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM daily_acct_bal dab
     WHERE dab.acct_id=paccountid
      AND dab.activity_dt_tm < cnvtdatetime(pactivitydttm)
      AND dab.end_effective_dt_tm > cnvtdatetime(pactivitydttm)
      AND dab.active_ind=true
     ORDER BY dab.activity_dt_tm DESC
     DETAIL
      IF (prevdabid=0.0)
       prevdabid = dab.daily_acct_bal_id, prevdabupdatecnt = dab.updt_cnt, prevdabenddttm = dab
       .end_effective_dt_tm,
       adddabrequest->objarray[1].total_adjustment_amt = dab.total_adjustment_amt, adddabrequest->
       objarray[1].total_charge_amt = dab.total_charge_amt, adddabrequest->objarray[1].
       total_payment_amt = dab.total_payment_amt,
       adddabrequest->objarray[1].beg_balance = dab.end_balance, adddabrequest->objarray[1].
       beg_dr_cr_flag = dab.end_dr_cr_flag, adddabrequest->objarray[1].end_balance = dab.end_balance,
       adddabrequest->objarray[1].end_dr_cr_flag = dab.end_dr_cr_flag, adddabrequest->objarray[1].
       last_payment_dt_tm = dab.last_payment_dt_tm, adddabrequest->objarray[1].
       total_responsibility_amt = dab.total_responsibility_amt
      ENDIF
     WITH nocounter
    ;end select
    IF (prevdabid=0.0)
     SELECT INTO "nl:"
      FROM daily_acct_bal dab
      WHERE dab.acct_id=paccountid
       AND dab.activity_dt_tm > cnvtdatetime(pactivitydttm)
       AND dab.active_ind=true
      ORDER BY dab.activity_dt_tm
      DETAIL
       addingfirstdabrec = true, currdabenddttm = getfacilityendofday(pbillingentityid,datetimeadd(
         dab.beg_effective_dt_tm,- (1)))
      WITH maxrec = 1
     ;end select
    ENDIF
    IF (prevdabid > 0)
     IF ( NOT (closedailyaccountbalance(prevdabid,prevdabupdatecnt,pactivitydttm,pbillingentityid)))
      CALL logmessage("createNewDailyAccountBalance","Error closing previous daily account balance",
       log_error)
      RETURN(false)
     ENDIF
    ENDIF
    SET adddabrequest->objarray[1].acct_id = paccountid
    DECLARE facilitydate = dq8 WITH protect, noconstant(getfacilitybeginningofday(pbillingentityid,
      pactivitydttm))
    SET adddabrequest->objarray[1].activity_dt_tm = facilitydate
    SET adddabrequest->objarray[1].beg_effective_dt_tm = facilitydate
    IF (addingfirstdabrec)
     SET adddabrequest->objarray[1].end_effective_dt_tm = currdabenddttm
    ELSE
     SET adddabrequest->objarray[1].end_effective_dt_tm = prevdabenddttm
    ENDIF
    SET adddabrequest->objarray[1].billing_entity_id = pbillingentityid
    SET adddabrequest->objarray[1].calculated_end_bal = 0.0
    SET adddabrequest->objarray[1].calc_dr_cr_flag = 0
    SET adddabrequest->objarray[1].finchrg_amount = 0.0
    SET adddabrequest->objarray[1].finchrg_dr_cr_flag = 0
    SET adddabrequest->objarray[1].transfer_amount = 0.0
    SET adddabrequest->objarray[1].transfer_dr_cr_flag = 0
    IF (validate(debug,0)=1)
     CALL echorecord(adddabrequest)
    ENDIF
    EXECUTE pft_da_add_daily_acct_bal  WITH replace("REQUEST",adddabrequest), replace("REPLY",
     adddabreply)
    IF (validate(debug,0)=1)
     CALL echorecord(adddabreply)
    ENDIF
    IF ((adddabreply->status_data.status != "S"))
     CALL logmessage("createNewDailyAccountBalance","PFT_DA_ADD_DAILY_ACCT_BAL failed",log_error)
     RETURN(false)
    ENDIF
    SET prdailyaccountbalanceid = adddabrequest->objarray[1].daily_acct_bal_id
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("createNewDailyAccountBalance","Exiting...",log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(closedailyaccountbalance,char(128))=char(128))
  SUBROUTINE (closedailyaccountbalance(pdailyaccountbalanceid=f8,pdailyaccountbalanceupdatecnt=i4,
   pactivitydttm=dq8,pbillingentityid=f8) =i2)
    RECORD uptdabrequest(
      1 objarray[1]
        2 daily_acct_bal_id = f8
        2 end_effective_dt_tm = dq8
        2 updt_cnt = i4
    ) WITH protect
    RECORD uptdabreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET uptdabrequest->objarray[1].daily_acct_bal_id = pdailyaccountbalanceid
    SET uptdabrequest->objarray[1].end_effective_dt_tm = getfacilityendofday(pbillingentityid,
     datetimeadd(pactivitydttm,- (1)))
    SET uptdabrequest->objarray[1].updt_cnt = pdailyaccountbalanceupdatecnt
    IF (validate(debug,0)=1)
     CALL echorecord(uptdabrequest)
    ENDIF
    EXECUTE pft_da_upt_daily_acct_bal  WITH replace("REQUEST",uptdabrequest), replace("REPLY",
     uptdabreply)
    IF (validate(debug,0)=1)
     CALL echorecord(uptdabreply)
    ENDIF
    IF ((uptdabreply->status_data.status != "S"))
     CALL logmessage("closeDailyAccountBalance","PFT_DA_UPT_DAILY_ACCT_BAL failed",log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(updatedailyaccountbalance,char(128))=char(128))
  SUBROUTINE (updatedailyaccountbalance(pdabid=f8,ptranstype=f8,paddtransamt=f8,paddrespamt=f8,
   praddtotalrespamt=f8(ref),praddtotaltransamt=f8(ref)) =i2)
    IF (pdabid <= 0.0)
     CALL logmessage("updateDailyAccountBalance","daily_acct_bal_id is set to 0.0",log_error)
     RETURN(false)
    ENDIF
    DECLARE amountflag = i2 WITH protect, noconstant(0)
    DECLARE newbalanceflag = i2 WITH protect, noconstant(0)
    DECLARE newbalance = f8 WITH protect, noconstant(0.0)
    RECORD uptdabrequest(
      1 objarray[1]
        2 daily_acct_bal_id = f8
        2 beg_balance = f8
        2 beg_dr_cr_flag = i2
        2 end_balance = f8
        2 end_dr_cr_flag = i2
        2 charge_amount = f8
        2 chrg_dr_cr_flag = i2
        2 payment_amount = f8
        2 pay_dr_cr_flag = i2
        2 adjustment_amount = f8
        2 adj_dr_cr_flag = i2
        2 total_charge_amt = f8
        2 total_payment_amt = f8
        2 total_adjustment_amt = f8
        2 last_payment_dt_tm = dq8
        2 updt_cnt = i4
        2 responsibility_amt = f8
        2 total_responsibility_amt = f8
    ) WITH protect
    RECORD uptdabreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM daily_acct_bal dab
     WHERE dab.daily_acct_bal_id=pdabid
     DETAIL
      uptdabrequest->objarray[1].daily_acct_bal_id = dab.daily_acct_bal_id, uptdabrequest->objarray[1
      ].beg_balance = dab.beg_balance, uptdabrequest->objarray[1].beg_dr_cr_flag = dab.beg_dr_cr_flag,
      uptdabrequest->objarray[1].end_balance = dab.end_balance, uptdabrequest->objarray[1].
      end_dr_cr_flag = dab.end_dr_cr_flag, uptdabrequest->objarray[1].charge_amount = dab
      .charge_amount,
      uptdabrequest->objarray[1].chrg_dr_cr_flag = dab.chrg_dr_cr_flag, uptdabrequest->objarray[1].
      payment_amount = dab.payment_amount, uptdabrequest->objarray[1].pay_dr_cr_flag = dab
      .pay_dr_cr_flag,
      uptdabrequest->objarray[1].adjustment_amount = dab.adjustment_amount, uptdabrequest->objarray[1
      ].adj_dr_cr_flag = dab.adj_dr_cr_flag, uptdabrequest->objarray[1].last_payment_dt_tm = dab
      .last_payment_dt_tm,
      uptdabrequest->objarray[1].total_charge_amt = dab.total_charge_amt, uptdabrequest->objarray[1].
      total_payment_amt = dab.total_payment_amt, uptdabrequest->objarray[1].total_adjustment_amt =
      dab.total_adjustment_amt,
      uptdabrequest->objarray[1].updt_cnt = dab.updt_cnt, uptdabrequest->objarray[1].
      responsibility_amt = dab.responsibility_amt, uptdabrequest->objarray[1].
      total_responsibility_amt = dab.total_responsibility_amt
     WITH nocounter
    ;end select
    IF (ptranstype=cs18649_charge_cd)
     IF (abs(paddrespamt) > 0.009)
      SET amountflag = getamountflag(paddrespamt)
      IF ( NOT (addamounttosignedbalance(uptdabrequest->objarray[1].responsibility_amt,abs(
        paddrespamt),amountflag,newbalance)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new daily account end balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].responsibility_amt = newbalance
      ENDIF
      SET praddtotalrespamt += paddrespamt
     ENDIF
     IF (validate(debug,0)=1)
      CALL echo(build2("before record updates DABid: ",uptdabrequest->objarray[1].daily_acct_bal_id))
      CALL echorecord(uptdabrequest)
     ENDIF
     IF ((( NOT (isequal(paddtransamt,0.0))) OR ( NOT (isequal(praddtotaltransamt,0.0)))) )
      SET amountflag = getamountflag(paddtransamt)
      IF (validate(debug,- (1)) > 0)
       CALL logmessage("updateDailyAccountBalance","Transaction Type: Charge",log_debug)
      ENDIF
      IF ( NOT (addamounttobalance(uptdabrequest->objarray[1].charge_amount,uptdabrequest->objarray[1
       ].chrg_dr_cr_flag,abs(paddtransamt),amountflag,newbalance,
       newbalanceflag)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new daily charge balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].charge_amount = newbalance
       SET uptdabrequest->objarray[1].chrg_dr_cr_flag = newbalanceflag
      ENDIF
      SET amountflag = getamountflag(praddtotaltransamt)
      IF ( NOT (addamounttobalance(uptdabrequest->objarray[1].beg_balance,uptdabrequest->objarray[1].
       beg_dr_cr_flag,abs(praddtotaltransamt),amountflag,newbalance,
       newbalanceflag)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new daily account end balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].beg_balance = newbalance
       SET uptdabrequest->objarray[1].beg_dr_cr_flag = newbalanceflag
      ENDIF
      SET praddtotaltransamt += paddtransamt
      SET amountflag = getamountflag(praddtotaltransamt)
      IF ( NOT (addamounttosignedbalance(uptdabrequest->objarray[1].total_charge_amt,abs(
        praddtotaltransamt),amountflag,newbalance)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new total charge balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].total_charge_amt = newbalance
      ENDIF
     ENDIF
    ELSEIF (ptranstype=cs18649_adjust_cd)
     IF (validate(debug,- (1)) > 0)
      CALL logmessage("updateDailyAccountBalance","Transaction Type: Adjustment",log_debug)
     ENDIF
     IF (isequal(paddtransamt,0.0)
      AND isequal(praddtotaltransamt,0.0))
      CALL logmessage("updateDailyAccountBalance","No Transaction Amount to update",log_debug)
     ENDIF
     IF ( NOT (isequal(praddtotaltransamt,0.0)))
      SET amountflag = getamountflag(praddtotaltransamt)
      IF ( NOT (addamounttobalance(uptdabrequest->objarray[1].beg_balance,uptdabrequest->objarray[1].
       beg_dr_cr_flag,abs(praddtotaltransamt),amountflag,newbalance,
       newbalanceflag)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new daily account end balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].beg_balance = newbalance
       SET uptdabrequest->objarray[1].beg_dr_cr_flag = newbalanceflag
      ENDIF
     ENDIF
     IF ( NOT (isequal(paddtransamt,0.0)))
      SET amountflag = getamountflag(paddtransamt)
      IF ( NOT (addamounttobalance(uptdabrequest->objarray[1].adjustment_amount,uptdabrequest->
       objarray[1].adj_dr_cr_flag,abs(paddtransamt),amountflag,newbalance,
       newbalanceflag)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new daily adjustment balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].adjustment_amount = newbalance
       SET uptdabrequest->objarray[1].adj_dr_cr_flag = newbalanceflag
       SET praddtotaltransamt += paddtransamt
      ENDIF
     ENDIF
     IF ( NOT (isequal(praddtotaltransamt,0.0)))
      SET amountflag = getamountflag(praddtotaltransamt)
      IF ( NOT (addamounttosignedbalance(uptdabrequest->objarray[1].total_adjustment_amt,abs(
        praddtotaltransamt),amountflag,newbalance)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new total adjustment balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].total_adjustment_amt = newbalance
      ENDIF
     ENDIF
    ELSEIF (ptranstype=cs18649_payment_cd)
     IF (validate(debug,- (1)) > 0)
      CALL logmessage("updateDailyAccountBalance","Transaction Type: PAYMENT",log_debug)
     ENDIF
     IF (isequal(paddtransamt,0.0)
      AND isequal(praddtotaltransamt,0.0))
      CALL logmessage("updateDailyAccountBalance","No Transaction Amount to update",log_debug)
     ENDIF
     IF ( NOT (isequal(praddtotaltransamt,0.0)))
      SET amountflag = getamountflag(praddtotaltransamt)
      IF ( NOT (addamounttobalance(uptdabrequest->objarray[1].beg_balance,uptdabrequest->objarray[1].
       beg_dr_cr_flag,abs(praddtotaltransamt),amountflag,newbalance,
       newbalanceflag)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new daily account end balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].beg_balance = newbalance
       SET uptdabrequest->objarray[1].beg_dr_cr_flag = newbalanceflag
      ENDIF
     ENDIF
     IF ( NOT (isequal(paddtransamt,0.0)))
      SET amountflag = getamountflag(paddtransamt)
      IF ( NOT (addamounttobalance(uptdabrequest->objarray[1].payment_amount,uptdabrequest->objarray[
       1].pay_dr_cr_flag,abs(paddtransamt),amountflag,newbalance,
       newbalanceflag)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new daily payment balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].payment_amount = newbalance
       SET uptdabrequest->objarray[1].pay_dr_cr_flag = newbalanceflag
       SET praddtotaltransamt += paddtransamt
      ENDIF
     ENDIF
     CALL logmessage("updateDailyAccountBalance","Transaction Type: Payment",log_debug)
     IF ( NOT (isequal(praddtotaltransamt,0.0)))
      SET amountflag = getamountflag(praddtotaltransamt)
      IF ( NOT (addamounttosignedbalance(uptdabrequest->objarray[1].total_payment_amt,abs(
        praddtotaltransamt),amountflag,newbalance)))
       CALL logmessage("updateDailyAccountBalance","Error calculating new total payment balance",
        log_error)
       RETURN(false)
      ELSE
       SET uptdabrequest->objarray[1].total_payment_amt = newbalance
       SET uptdabrequest->objarray[1].last_payment_dt_tm = transinfo->trans_dt_tm
      ENDIF
     ENDIF
    ENDIF
    IF (abs(praddtotaltransamt) > 0.009)
     SET amountflag = getamountflag(praddtotaltransamt)
     IF ( NOT (addamounttobalance(uptdabrequest->objarray[1].end_balance,uptdabrequest->objarray[1].
      end_dr_cr_flag,abs(praddtotaltransamt),amountflag,newbalance,
      newbalanceflag)))
      CALL logmessage("updateDailyAccountBalance","Error calculating new daily account end balance",
       log_error)
      RETURN(false)
     ELSE
      SET uptdabrequest->objarray[1].end_balance = newbalance
      SET uptdabrequest->objarray[1].end_dr_cr_flag = newbalanceflag
     ENDIF
    ENDIF
    IF (abs(praddtotalrespamt) > 0.009)
     SET amountflag = getamountflag(praddtotalrespamt)
     IF ( NOT (addamounttosignedbalance(uptdabrequest->objarray[1].total_responsibility_amt,abs(
       praddtotalrespamt),amountflag,newbalance)))
      CALL logmessage("updateDailyAccountBalance","Error calculating new daily account end balance",
       log_error)
      RETURN(false)
     ELSE
      SET uptdabrequest->objarray[1].total_responsibility_amt = newbalance
     ENDIF
    ENDIF
    IF (validate(debug,0)=1)
     CALL echo(build2("After record updates DABid: ",uptdabrequest->objarray[1].daily_acct_bal_id))
     CALL echorecord(uptdabrequest)
    ENDIF
    EXECUTE pft_da_upt_daily_acct_bal  WITH replace("REQUEST",uptdabrequest), replace("REPLY",
     uptdabreply)
    IF (validate(debug,0)=1)
     CALL echorecord(uptdabreply)
    ENDIF
    IF ((uptdabreply->status_data.status != "S"))
     CALL logmessage("updateDailyAccountBalance","PFT_DA_UPT_DAILY_ACCT_BAL failed",log_error)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(createnewdailyaccountbalancerelation,char(128))=char(128))
  SUBROUTINE (createnewdailyaccountbalancerelation(pdabid=f8,pbenefitorderid=f8,pvaluenbr=f8,
   ptransamt=f8,pvaluecriteria=f8,prdabrid=f8(ref)) =i2)
    RECORD adddabrrequest(
      1 objarray[1]
        2 daily_acct_bal_reltn_id = f8
        2 daily_acct_bal_id = f8
        2 parent_entity_name = vc
        2 parent_entity_id = f8
        2 value_criteria_cd = f8
        2 value_criteria_nbr = f8
        2 value_amt = f8
    ) WITH protect
    RECORD adddabrreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET adddabrrequest->objarray[1].daily_acct_bal_id = pdabid
    SET adddabrrequest->objarray[1].parent_entity_name = "BENEFIT_ORDER"
    SET adddabrrequest->objarray[1].parent_entity_id = pbenefitorderid
    SET adddabrrequest->objarray[1].value_criteria_cd = pvaluecriteria
    IF (pvaluecriteria IN (cs4092002_maxrate_cd, cs4092002_percentage_cd))
     IF (isequal(ptransamt,0.0))
      SET adddabrrequest->objarray[1].value_criteria_nbr = 0.0
      SET adddabrrequest->objarray[1].value_amt = 0.0
     ELSE
      SET adddabrrequest->objarray[1].value_criteria_nbr = pvaluenbr
      SET adddabrrequest->objarray[1].value_amt = ptransamt
     ENDIF
    ELSE
     SET adddabrrequest->objarray[1].value_amt = ptransamt
    ENDIF
    IF (validate(debug,0)=1)
     CALL echorecord(adddabrrequest)
    ENDIF
    EXECUTE pft_da_add_dab_reltn  WITH replace("REQUEST",adddabrrequest), replace("REPLY",
     adddabrreply)
    IF (validate(debug,0)=1)
     CALL echorecord(adddabrreply)
    ENDIF
    IF ((adddabrreply->status_data.status != "S"))
     CALL logmessage("createNewDailyAccountBalanceRelation","pft_da_add_dab_reltn failed",log_error)
     RETURN(false)
    ENDIF
    SET prdabrid = adddabrrequest->objarray[1].daily_acct_bal_reltn_id
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("createNewDailyAccountBalanceRelation","Exiting...",log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(updatedailyaccountbalancerelation,char(128))=char(128))
  SUBROUTINE (updatedailyaccountbalancerelation(pdabrid=f8,pvalueamt=f8,praddrespamt=f8(ref),
   ptotalrespamt=f8,pvaluecriteria=f8) =i2)
    DECLARE newbalance = f8 WITH protect, noconstant(0.0)
    DECLARE respamountflag = i2 WITH protect, noconstant(0)
    RECORD uptdabrrequest(
      1 objarray[1]
        2 daily_acct_bal_reltn_id = f8
        2 value_criteria_cd = f8
        2 value_criteria_nbr = f8
        2 value_amt = f8
        2 updt_cnt = i4
    ) WITH protect
    RECORD uptdabrreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM daily_acct_bal_reltn dabr
     WHERE dabr.daily_acct_bal_reltn_id=pdabrid
     DETAIL
      uptdabrrequest->objarray[1].daily_acct_bal_reltn_id = dabr.daily_acct_bal_reltn_id,
      uptdabrrequest->objarray[1].value_criteria_cd = dabr.value_criteria_cd, uptdabrrequest->
      objarray[1].value_criteria_nbr = dabr.value_criteria_nbr,
      uptdabrrequest->objarray[1].value_amt = dabr.value_amt, uptdabrrequest->objarray[1].updt_cnt =
      dabr.updt_cnt
     WITH nocounter
    ;end select
    SET respamountflag = getamountflag(praddrespamt)
    IF ( NOT (addamounttosignedbalance(uptdabrrequest->objarray[1].value_amt,abs(praddrespamt),
     respamountflag,newbalance)))
     CALL logmessage("updateDailyAccountBalanceRelation","Error calculating newBalance",log_error)
     RETURN(false)
    ELSE
     SET uptdabrrequest->objarray[1].value_amt = newbalance
    ENDIF
    IF (pvaluecriteria IN (cs4092002_charge_cd, cs4092002_percentage_cd, cs4092002_maxrate_cd))
     SET uptdabrrequest->objarray[1].value_criteria_cd = pvaluecriteria
     SET uptdabrrequest->objarray[1].value_criteria_nbr = evaluate(isequal(newbalance,0.0),true,0.0,
      pvalueamt)
    ENDIF
    IF (validate(debug,0)=1)
     CALL echorecord(uptdabrrequest)
    ENDIF
    EXECUTE pft_da_upt_dab_reltn  WITH replace("REQUEST",uptdabrrequest), replace("REPLY",
     uptdabrreply)
    IF (validate(debug,0)=1)
     CALL echorecord(uptdabrreply)
    ENDIF
    IF ((uptdabrreply->status_data.status != "S"))
     CALL logmessage("updateDailyAccountBalanceRelation","pft_da_upt_dab_reltn failed Exiting...",
      log_error)
     RETURN(false)
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("updateDailyAccountBalanceRelation","Exiting...",log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(applydailyaccountbalance,char(128))=char(128))
  SUBROUTINE (applydailyaccountbalance(pdabidx=i4,prdailyacctbalances=vc(ref),prguaracctdata=vc(ref)
   ) =i2)
    DECLARE dabid = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     dailyacctbalid)
    IF (abs(prguaracctdata->dab.addresp) <= 0.009
     AND abs(prguaracctdata->dab.ttlresp) <= 0.009
     AND abs(prguaracctdata->dab.addchrg) <= 0.009
     AND abs(prguaracctdata->dab.ttlchrg) <= 0.009
     AND abs(prguaracctdata->dab.addadj) <= 0.009
     AND abs(prguaracctdata->dab.ttladj) <= 0.009
     AND abs(prguaracctdata->dab.addpay) <= 0.009
     AND abs(prguaracctdata->dab.ttlpay) <= 0.009)
     RETURN(true)
    ENDIF
    IF ( NOT (lockdailyaccountbalance(dabid)))
     RETURN(false)
    ENDIF
    IF (((abs(prguaracctdata->dab.addresp) > 0.009) OR (((abs(prguaracctdata->dab.ttlresp) > 0.009)
     OR (((abs(prguaracctdata->dab.addchrg) > 0.009) OR (abs(prguaracctdata->dab.ttlchrg) > 0.009))
    )) )) )
     IF ( NOT (updatedailyaccountbalance(dabid,cs18649_charge_cd,prguaracctdata->dab.addchrg,
      prguaracctdata->dab.addresp,prguaracctdata->dab.ttlresp,
      prguaracctdata->dab.ttlchrg)))
      RETURN(false)
     ENDIF
    ENDIF
    IF (((abs(prguaracctdata->dab.addadj) > 0.009) OR (abs(prguaracctdata->dab.ttladj) > 0.009)) )
     IF ( NOT (updatedailyaccountbalance(dabid,cs18649_adjust_cd,prguaracctdata->dab.addadj,
      prguaracctdata->dab.addresp,prguaracctdata->dab.ttlresp,
      prguaracctdata->dab.ttladj)))
      RETURN(false)
     ENDIF
    ENDIF
    IF (((abs(prguaracctdata->dab.addpay) > 0.009) OR (abs(prguaracctdata->dab.ttlpay) > 0.009)) )
     IF ( NOT (updatedailyaccountbalance(dabid,cs18649_payment_cd,prguaracctdata->dab.addpay,
      prguaracctdata->dab.addresp,prguaracctdata->dab.ttlresp,
      prguaracctdata->dab.ttlpay)))
      RETURN(false)
     ENDIF
    ENDIF
    SET prguaracctdata->dab.addchrg = 0.0
    SET prguaracctdata->dab.addresp = 0.0
    SET prguaracctdata->dab.addadj = 0.0
    SET prguaracctdata->dab.addpay = 0.0
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(applydailyaccountbalancerelation,char(128))=char(128))
  SUBROUTINE (applydailyaccountbalancerelation(ptransmod=vc,pdabidx=i4,pdaboidx=i4,
   prdailyacctbalances=vc(ref),prguaracctdata=vc(ref)) =i2)
    DECLARE dabrid = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].dailyacctbalreltnid)
    DECLARE dabid = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     dailyacctbalid)
    DECLARE addtransamt = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].addrespamt)
    DECLARE totaltransamt = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].totalrespamt)
    DECLARE benefitorderid = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].benefitorderid)
    DECLARE chargedabrid = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].chargedabrid)
    DECLARE addchargeamt = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].chargeaddamt)
    DECLARE totalchargeamt = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].chargeamt)
    DECLARE valuecriteria = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].valuecriteria)
    DECLARE transtype = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].transtype)
    DECLARE valueamt = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].maxdailyrate)
    DECLARE pftencntrid = f8 WITH protect, noconstant(prdailyacctbalances->dailybalances[pdabidx].
     benefitorders[pdaboidx].pftencntrid)
    IF (((abs(addtransamt) > 0.009) OR (((prdailyacctbalances->dailybalances[pdabidx].
    dailyratechanged) OR (prdailyacctbalances->dailybalances[pdabidx].benefitorders[pdaboidx].
    processed)) )) )
     IF (dabrid <= 0.0)
      IF ( NOT (createnewdailyaccountbalancerelation(dabid,benefitorderid,valueamt,addtransamt,
       valuecriteria,
       dabrid)))
       SET prdailyacctbalances->dailybalances[pdabidx].benefitorders[pdaboidx].dailyacctbalreltnid =
       dabrid
       RETURN(false)
      ENDIF
      SET prdailyacctbalances->dailybalances[pdabidx].benefitorders[pdaboidx].dailyacctbalreltnid =
      dabrid
     ELSE
      IF ( NOT (lockdailyaccountbalancerelation(dabrid)))
       RETURN(false)
      ENDIF
      CALL updatedailyaccountbalancerelation(dabrid,valueamt,addtransamt,totaltransamt,valuecriteria)
     ENDIF
     CALL updateguaracctdatadab(valuecriteria,addtransamt,prguaracctdata)
    ENDIF
    IF (abs(addchargeamt) > 0.009)
     IF (validate(debug,- (1)) > 0)
      CALL echo(build("addChargeAmt: ",addchargeamt))
     ENDIF
     IF (chargedabrid <= 0.0)
      IF ( NOT (createnewdailyaccountbalancerelation(dabid,benefitorderid,0.0,addchargeamt,
       cs4092002_charge_cd,
       chargedabrid)))
       RETURN(false)
      ENDIF
      SET prdailyacctbalances->dailybalances[pdabidx].benefitorders[pdaboidx].chargedabrid =
      chargedabrid
     ELSE
      IF ( NOT (lockdailyaccountbalancerelation(chargedabrid)))
       RETURN(false)
      ENDIF
      CALL updatedailyaccountbalancerelation(chargedabrid,0.0,addchargeamt,totalchargeamt,
       cs4092002_charge_cd)
     ENDIF
     CALL updateguaracctdatadab(cs4092002_charge_cd,addchargeamt,prguaracctdata)
     CALL addguaracctdataaccttrans(transtype,0.0,addchargeamt,prguaracctdata)
    ENDIF
    CALL addguaracctcbospe(prdailyacctbalances->acctid,pftencntrid,evaluate(transtype,
      cs18649_charge_cd,addchargeamt,addtransamt),prguaracctdata)
    IF (((abs(addtransamt) > 0.009) OR (abs(addchargeamt) > 0.009)) )
     CALL addencntrtoguarbalchangeevent(ptransmod,pftencntrid,prdailyacctbalances->dailybalances[
      pdabidx].activitydate,0.0)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(addguaracctcbospe,char(128))=char(128))
  SUBROUTINE (addguaracctcbospe(pacctid=f8,ppeid=f8,paddtransamt=f8,prguaracctdata=vc(ref)) =i2)
    DECLARE cbosidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    IF (((pacctid=0.0) OR (ppeid=0.0)) )
     CALL logmessage("addGuarAcctCbosPE",build2("Missing Required values AcctId:",pacctid,
       ", pftEncntrId:",ppeid),log_error)
     RETURN(false)
    ENDIF
    SET cbosidx = locateval(idx,1,size(prguaracctdata->cbospereltn,5),pacctid,prguaracctdata->
     cbospereltn[idx].guaracctid,
     ppeid,prguaracctdata->cbospereltn[idx].pftencntrid)
    IF (cbosidx <= 0)
     SET cbosidx = (size(prguaracctdata->cbospereltn,5)+ 1)
     SET stat = alterlist(prguaracctdata->cbospereltn,cbosidx)
     SET prguaracctdata->cbospereltn[cbosidx].guaracctid = pacctid
     SET prguaracctdata->cbospereltn[cbosidx].pftencntrid = ppeid
     SET prguaracctdata->cbospereltn[cbosidx].addtransamt = paddtransamt
    ELSE
     SET prguaracctdata->cbospereltn[cbosidx].addtransamt += paddtransamt
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("addGuarAcctCbosPE","Exiting...",log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(addguaracctdataaccttrans,char(128))=char(128))
  SUBROUTINE (addguaracctdataaccttrans(ptranstype=f8,ptranssubtype=f8,paddtransamt=f8,prguaracctdata=
   vc(ref)) =i2)
    DECLARE acctdatacnt = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    IF (ptranstype=0.0)
     CALL logmessage("addGuarAcctCbosPE",build("Missing Required value transType:",ptranstype),
      log_error)
     RETURN(false)
    ENDIF
    SET acctdatacnt = locateval(idx,1,size(prguaracctdata->accttrans,5),ptranstype,prguaracctdata->
     accttrans[idx].transtype,
     ptranssubtype,prguaracctdata->accttrans[idx].transsubtype)
    IF (acctdatacnt <= 0)
     SET acctdatacnt = (size(prguaracctdata->accttrans,5)+ 1)
     SET stat = alterlist(prguaracctdata->accttrans,acctdatacnt)
     SET prguaracctdata->accttrans[acctdatacnt].transtype = ptranstype
     SET prguaracctdata->accttrans[acctdatacnt].transsubtype = ptranssubtype
     SET prguaracctdata->accttrans[acctdatacnt].addtransamt = paddtransamt
    ELSE
     SET prguaracctdata->accttrans[acctdatacnt].addtransamt += paddtransamt
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("addGuarAcctDataAcctTrans","Exiting...",log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(updateguaracctdatadab,char(128))=char(128))
  SUBROUTINE (updateguaracctdatadab(ptype=f8,paddamt=f8,prguaracctdata=vc(ref)) =i2)
    IF (ptype=0.0)
     CALL logmessage("updateGuarAcctDataDAB","Value Criteria type is missing.",log_debug)
     RETURN(false)
    ENDIF
    IF (ptype=cs4092002_payment_cd)
     SET prguaracctdata->dab.addpay += paddamt
    ELSEIF (ptype=cs4092002_adjustment_cd)
     SET prguaracctdata->dab.addadj += paddamt
    ELSEIF (ptype=cs4092002_charge_cd)
     SET prguaracctdata->dab.addchrg += paddamt
    ELSEIF (ptype IN (cs4092002_maxrate_cd, cs4092002_percentage_cd))
     SET prguaracctdata->dab.addresp += paddamt
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("updateGuarAcctDataDAB","Exiting...",log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(lockdailyaccountbalance,char(128))=char(128))
  SUBROUTINE (lockdailyaccountbalance(pdailyaccountbalanceid=f8) =i2)
    DECLARE lindex = i4 WITH private, noconstant(0)
    DECLARE llockind = i2 WITH private, noconstant(0)
    WHILE (lindex < max_lock_attempts
     AND llockind=false)
     SELECT INTO "nl:"
      FROM daily_acct_bal dab
      WHERE dab.daily_acct_bal_id=pdailyaccountbalanceid
      WITH forupdate(dab)
     ;end select
     IF (curqual=0)
      SET lindex += 1
      IF (lindex < max_lock_attempts)
       CALL logmessage("lockDailyAccountBalance",build("Failed to lock DAILY_ACCT_BAL [",
         pdailyaccountbalanceid,"]; waiting 2 seconds..."),log_debug)
       CALL pause(2)
      ENDIF
     ELSE
      CALL logmessage("lockDailyAccountBalance",build("Successfully locked DAILY_ACCT_BAL [",
        pdailyaccountbalanceid,"]"),log_debug)
      SET llockind = true
     ENDIF
    ENDWHILE
    RETURN(llockind)
  END ;Subroutine
 ENDIF
 IF (validate(lockdailyaccountbalancerelation,char(128))=char(128))
  SUBROUTINE (lockdailyaccountbalancerelation(pdailyaccountbalancerelationid=f8) =i2)
    DECLARE lindex = i4 WITH private, noconstant(0)
    DECLARE llockind = i2 WITH private, noconstant(0)
    WHILE (lindex < max_lock_attempts
     AND llockind=false)
     SELECT INTO "nl:"
      FROM daily_acct_bal_reltn dabr
      WHERE dabr.daily_acct_bal_reltn_id=pdailyaccountbalancerelationid
      WITH forupdate(dabr)
     ;end select
     IF (curqual=0)
      SET lindex += 1
      IF (lindex < max_lock_attempts)
       CALL logmessage("lockDailyAccountBalanceRelation",build(
         "Failed to lock DAILY_ACCT_BAL_RELTN [",pdailyaccountbalancerelationid,
         "]; waiting 2 seconds..."),log_debug)
       CALL pause(2)
      ENDIF
     ELSE
      CALL logmessage("lockDailyAccountBalanceRelation",build(
        "Successfully locked DAILY_ACCT_BAL_RELTN [",pdailyaccountbalancerelationid,"]"),log_debug)
      SET llockind = true
     ENDIF
    ENDWHILE
    RETURN(llockind)
  END ;Subroutine
 ENDIF
 IF (validate(getdailyaccountbalancesbyacctid,char(128))=char(128))
  SUBROUTINE (getdailyaccountbalancesbyacctid(paccountid=f8,prdailyaccountbalances=vc(ref),
   pminservicedate=dq8,ppatientid=f8) =i2)
    DECLARE nodupind = i2 WITH protect, noconstant(1)
    DECLARE dupday = dq8 WITH protect, noconstant(0.0)
    DECLARE dupbo = f8 WITH protect, noconstant(0.0)
    DECLARE dabidx = i4 WITH protect, noconstant(0)
    DECLARE daboidx = i4 WITH protect, noconstant(0)
    DECLARE boidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE transtype = f8 WITH protect, noconstant(0.0)
    DECLARE begindate = dq8 WITH protect, noconstant(0.0)
    DECLARE enddtparser = vc WITH protect, noconstant(" 1 = 1 ")
    SELECT INTO "nl:"
     FROM (dummyt d  WITH seq = value(size(benefitorders->benefitorders,5))),
      benefit_order bo
     PLAN (d
      WHERE (benefitorders->benefitorders[d.seq].benefitorderid > 0.0))
      JOIN (bo
      WHERE (bo.benefit_order_id=benefitorders->benefitorders[d.seq].benefitorderid))
     DETAIL
      benefitorders->benefitorders[d.seq].dabtotalresp = 0.0, benefitorders->benefitorders[d.seq].
      dabmaxchrg = 0.0, benefitorders->benefitorders[d.seq].dabadjpayamt = 0.0,
      benefitorders->benefitorders[d.seq].cbosaddchrg = 0.0, benefitorders->benefitorders[d.seq].
      pftencntrid = bo.pft_encntr_id
     WITH nocounter
    ;end select
    SET boidx = size(benefitorders->benefitorders,5)
    SET stat = initrec(prdailyaccountbalances)
    SET prdailyaccountbalances->acctid = paccountid
    IF (pminservicedate > 0.0)
     SET enddtparser = " dab.end_effective_dt_tm >= cnvtdatetime(pMinServiceDate) "
    ENDIF
    SELECT INTO "nl:"
     FROM daily_acct_bal dab,
      daily_acct_bal_reltn dabr,
      account a,
      benefit_order bo,
      pft_encntr pe,
      encounter e
     PLAN (dab
      WHERE dab.acct_id=paccountid
       AND dab.active_ind=true
       AND parser(enddtparser))
      JOIN (dabr
      WHERE (dabr.daily_acct_bal_id= Outerjoin(dab.daily_acct_bal_id))
       AND (dabr.parent_entity_name= Outerjoin("BENEFIT_ORDER"))
       AND (((dabr.value_criteria_cd= Outerjoin(cs4092002_maxrate_cd)) ) OR ((((dabr
      .value_criteria_cd= Outerjoin(cs4092002_adjustment_cd)) ) OR ((((dabr.value_criteria_cd=
       Outerjoin(cs4092002_payment_cd)) ) OR ((((dabr.value_criteria_cd= Outerjoin(
      cs4092002_percentage_cd)) ) OR ((dabr.value_criteria_cd= Outerjoin(cs4092002_charge_cd)) )) ))
      )) )) )
      JOIN (bo
      WHERE (bo.benefit_order_id= Outerjoin(dabr.parent_entity_id)) )
      JOIN (pe
      WHERE (pe.pft_encntr_id= Outerjoin(bo.pft_encntr_id)) )
      JOIN (e
      WHERE (e.encntr_id= Outerjoin(pe.encntr_id)) )
      JOIN (a
      WHERE a.acct_id=dab.acct_id)
     ORDER BY dab.activity_dt_tm, dab.daily_acct_bal_id, dabr.parent_entity_id,
      dabr.daily_acct_bal_reltn_id
     HEAD REPORT
      stat = alterlist(prdailyaccountbalances->dailybalances,10), nodupind = true, dabidx = 0
     HEAD dab.daily_acct_bal_id
      begindate = getfacilitybeginningofday(a.billing_entity_id,dab.activity_dt_tm)
      IF (dabidx != 0
       AND (prdailyaccountbalances->dailybalances[dabidx].activitydate=begindate))
       nodupind = false, dupday = dab.activity_dt_tm
      ELSE
       dabidx += 1
       IF (dabidx > 10
        AND mod(dabidx,10)=1)
        stat = alterlist(prdailyaccountbalances->dailybalances,(dabidx+ 9))
       ENDIF
       prdailyaccountbalances->dailybalances[dabidx].dailyacctbalid = dab.daily_acct_bal_id,
       prdailyaccountbalances->dailybalances[dabidx].updtcnt = dab.updt_cnt, prdailyaccountbalances->
       dailybalances[dabidx].activitydate = begindate,
       daboidx = 0
      ENDIF
     HEAD dabr.daily_acct_bal_reltn_id
      IF (dabr.parent_entity_id != 0.0
       AND ((ppatientid=e.person_id) OR ((ppatientid=- (99.0)))) )
       transtype = evaluate(dabr.value_criteria_cd,cs4092002_payment_cd,cs18649_payment_cd,
        cs4092002_adjustment_cd,cs18649_adjust_cd,
        cs18649_charge_cd), daboidx = locateval(idx,1,size(prdailyaccountbalances->dailybalances[
         dabidx].benefitorders,5),dabr.parent_entity_id,prdailyaccountbalances->dailybalances[dabidx]
        .benefitorders[idx].benefitorderid,
        transtype,prdailyaccountbalances->dailybalances[dabidx].benefitorders[idx].transtype)
       IF (daboidx <= 0)
        daboidx = (size(prdailyaccountbalances->dailybalances[dabidx].benefitorders,5)+ 1), stat =
        alterlist(prdailyaccountbalances->dailybalances[dabidx].benefitorders,daboidx),
        prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].benefitorderid = dabr
        .parent_entity_id,
        prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].pftencntrid = pe
        .pft_encntr_id, prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].
        processed = false, prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].
        addrespamt = 0.0,
        prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].transtype = transtype
       ENDIF
       IF (dabr.value_criteria_cd=cs4092002_charge_cd)
        prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].chargedabrid = dabr
        .daily_acct_bal_reltn_id, prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx
        ].chargeamt = dabr.value_amt, prdailyaccountbalances->dailybalances[dabidx].benefitorders[
        daboidx].chargeupdtcnt = dabr.updt_cnt
       ELSE
        prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].dailyacctbalreltnid =
        dabr.daily_acct_bal_reltn_id, prdailyaccountbalances->dailybalances[dabidx].benefitorders[
        daboidx].maxdailyrate = dabr.value_criteria_nbr, prdailyaccountbalances->dailybalances[dabidx
        ].benefitorders[daboidx].totalrespamt = dabr.value_amt,
        prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].updtcnt = dabr.updt_cnt,
        prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].valuecriteria = dabr
        .value_criteria_cd
       ENDIF
       IF ((prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].valuecriteria=
       cs4092002_maxrate_cd)
        AND (prdailyaccountbalances->dailybalances[dabidx].benefitorders[daboidx].chargedabrid > 0.0)
       )
        prdailyaccountbalances->dailybalances[dabidx].totaldailyratechrgamt += prdailyaccountbalances
        ->dailybalances[dabidx].benefitorders[daboidx].chargeamt
       ENDIF
       IF (((boidx=0) OR ((benefitorders->benefitorders[boidx].benefitorderid != dabr
       .parent_entity_id))) )
        idx = locateval(idx,1,size(benefitorders->benefitorders,5),dabr.parent_entity_id,
         benefitorders->benefitorders[idx].benefitorderid)
        IF (idx <= 0)
         boidx += 1, stat = alterlist(benefitorders->benefitorders,boidx), benefitorders->
         benefitorders[boidx].benefitorderid = dabr.parent_entity_id,
         benefitorders->benefitorders[boidx].cbosonly = true, benefitorders->benefitorders[boidx].
         pftencntrid = bo.pft_encntr_id
        ENDIF
       ENDIF
      ENDIF
     FOOT REPORT
      stat = alterlist(prdailyaccountbalances->dailybalances,dabidx)
     WITH nocounter
    ;end select
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("getDailyAccountBalancesByAcctId",build2("  AcctId: ",paccountid,"  dabIdx: ",
       dabidx,"  MaxCD:",
       format(cs4092002_maxrate_cd,"##########;;I")),log_debug)
     CALL echorecord(prdailyaccountbalances)
     CALL echodailybals(prdailyaccountbalances)
     CALL echobos(null)
    ENDIF
    IF (nodupind=false)
     CALL logmessage("getDailyAccountBalancesByAcctId",build("Duplicate DAILY_ACCT_BAL records [",
       format(dupday,"@SHORTDATE4YR"),", boId: ",dupbo,"]"),log_error)
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("getDailyAccountBalancesByAcctId","Exiting...",log_debug)
    ENDIF
    RETURN(nodupind)
  END ;Subroutine
 ENDIF
 IF (validate(echobos,char(128))=char(128))
  DECLARE echobos(null) = null
  SUBROUTINE echobos(null)
    DECLARE bocnt = i4 WITH protect, noconstant(1)
    CALL echo("--------------------BenefitOrders---------------------")
    CALL echo(build2("trueSelfPay: ",benefitorders->istrueselfpayflag))
    CALL echo(
     "  peId      SP boId    cbos  ttlChrgAmt   ttlRespAmt   dabTResp    dabMChrg    dabAPAmt cbosAddChrg"
     )
    FOR (bocnt = 1 TO size(benefitorders->benefitorders,5))
      CALL echo(build2("  ",substring(0,10,trim(format(benefitorders->benefitorders[bocnt].
           pftencntrid,";;I"),3)),evaluate(benefitorders->benefitorders[bocnt].transferboid,0.0,"0  ",
         "1  "),substring(0,10,trim(format(benefitorders->benefitorders[bocnt].benefitorderid,";;I"),
          3))," ",
        substring(0,1,trim(format(benefitorders->benefitorders[bocnt].cbosonly,";;I"),3)),"  ",format
        (benefitorders->benefitorders[bocnt].totalchrgamt,"#######.##;$;"),"  ",format(benefitorders
         ->benefitorders[bocnt].totalrespamt,"#######.##;$;"),
        "  ",format(benefitorders->benefitorders[bocnt].dabtotalresp,"#######.##;$;"),"  ",format(
         benefitorders->benefitorders[bocnt].dabmaxchrg,"#######.##;$;"),"  ",
        format(benefitorders->benefitorders[bocnt].dabadjpayamt,"#######.##;$;"),"  ",format(
         benefitorders->benefitorders[bocnt].cbosaddchrg,"#######.##;$;")))
    ENDFOR
  END ;Subroutine
 ENDIF
 IF (validate(echodailybals,char(128))=char(128))
  SUBROUTINE (echodailybals(prdab=vc(ref)) =null)
    DECLARE dbcnt = i4 WITH protect, noconstant(1)
    DECLARE bocnt = i4 WITH protect, noconstant(1)
    IF (validate(prdab->acctid))
     CALL echo("--------------------dailyAccountBalances---------------------")
     CALL echo(build2("acctId: ",prdab->acctid,"                                acctCbosAddChrg:",
       format(prdab->cbosaddchrg,"#######.##;$;")))
     FOR (dbcnt = 1 TO size(prdab->dailybalances,5))
       CALL echo(build2(" dabId: ",substring(0,10,trim(format(prdab->dailybalances[dbcnt].
            dailyacctbalid,";;I"),3)),"  ",format(prdab->dailybalances[dbcnt].activitydate,
          "MM/dd/yy HH:MM;;d"),format(prdab->dailybalances[dbcnt].maxdailyrate,"#######.###;$;"),
         "                          ",format(prdab->dailybalances[dbcnt].totaldailyratechrgamt,
          "#######.###;$;")))
       CALL echo(
        "  dabrId    boId     proc  tType      maxRate addRespAmt   ttlRespAmt      addChrg   ttlChrgAmt"
        )
       FOR (bocnt = 1 TO size(prdab->dailybalances[dbcnt].benefitorders,5))
         CALL echo(build2("  ",substring(0,10,trim(format(prdab->dailybalances[dbcnt].benefitorders[
              bocnt].dailyacctbalreltnid,";;I"),3)),substring(0,10,trim(format(prdab->dailybalances[
              dbcnt].benefitorders[bocnt].benefitorderid,";;I"),3)),"  ",substring(0,1,trim(format(
              prdab->dailybalances[dbcnt].benefitorders[bocnt].processed,";;I"),3)),
           "  ",evaluate(prdab->dailybalances[dbcnt].benefitorders[bocnt].valuecriteria,
            cs4092002_maxrate_cd,"max  ",cs4092002_percentage_cd,"pct  ",
            cs4092002_adjustment_cd,"adj  ",cs4092002_payment_cd,"pay  ","     "),"  ",format(prdab->
            dailybalances[dbcnt].benefitorders[bocnt].maxdailyrate,evaluate(prdab->dailybalances[
             dbcnt].benefitorders[bocnt].valuecriteria,cs4092002_percentage_cd,"#######.##%;",
             "#######.###;$;")),format(prdab->dailybalances[dbcnt].benefitorders[bocnt].addrespamt,
            "#######.###;$;"),
           "  ",format(prdab->dailybalances[dbcnt].benefitorders[bocnt].totalrespamt,"#######.###;$;"
            ),"  ",format(prdab->dailybalances[dbcnt].benefitorders[bocnt].chargeaddamt,
            "#######.###;$;"),"  ",
           format(prdab->dailybalances[dbcnt].benefitorders[bocnt].chargeamt,"#######.###;$;")))
       ENDFOR
     ENDFOR
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(applyguartransactionstodailybalances,char(128))=char(128))
  SUBROUTINE (applyguartransactionstodailybalances(ggindex=i4,ptransmod=vc) =i2)
    DECLARE activitydate = dq8 WITH protect, noconstant(0.0)
    DECLARE newrespamt = f8 WITH protect, noconstant(0.0)
    DECLARE totalrespamt = f8 WITH protect, noconstant(0.0)
    DECLARE maxdailyrate = f8 WITH protect, noconstant(0.0)
    DECLARE transtype = f8 WITH protect, noconstant(0.0)
    DECLARE transsubtype = f8 WITH protect, noconstant(0.0)
    DECLARE valuecriteria = f8 WITH protect, noconstant(0.0)
    DECLARE pftencntrid = f8 WITH protect, noconstant(0.0)
    DECLARE boid = f8 WITH protect, noconstant(0.0)
    DECLARE gboindex = i4 WITH protect, noconstant(0)
    DECLARE gcindex = i4 WITH protect, noconstant(0)
    DECLARE dabosize = i4 WITH protect, noconstant(0)
    DECLARE activeind = i4 WITH protect, noconstant(0)
    FOR (gboindex = 1 TO size(guartransactions->guarantors[ggindex].benefitorders,5))
      SET boid = guartransactions->guarantors[ggindex].benefitorders[gboindex].benefitorderid
      SET pftencntrid = guartransactions->guarantors[ggindex].benefitorders[gboindex].pftencntrid
      FOR (gcindex = 1 TO size(guartransactions->guarantors[ggindex].benefitorders[gboindex].chrgs,5)
       )
        SET activitydate = guartransactions->guarantors[ggindex].benefitorders[gboindex].chrgs[
        gcindex].activitydttm
        SET newrespamt = guartransactions->guarantors[ggindex].benefitorders[gboindex].chrgs[gcindex]
        .newchrgamt
        SET totalrespamt = guartransactions->guarantors[ggindex].benefitorders[gboindex].chrgs[
        gcindex].totalchrgamt
        SET maxdailyrate = guartransactions->guarantors[ggindex].benefitorders[gboindex].chrgs[
        gcindex].maxdailyrate
        SET transtype = guartransactions->guarantors[ggindex].benefitorders[gboindex].chrgs[gcindex].
        typecd
        SET transsubtype = guartransactions->guarantors[ggindex].benefitorders[gboindex].chrgs[
        gcindex].subtypecd
        SET valuecriteria = guartransactions->guarantors[ggindex].benefitorders[gboindex].chrgs[
        gcindex].valuecriteria
        SET activeind = guartransactions->guarantors[ggindex].benefitorders[gboindex].chrgs[gcindex].
        activeind
        SET dabidx = getdailybalanceidx(activitydate,(abs(totalrespamt)+ abs(newrespamt)),dabsize,
         dailyaccountbalances)
        IF (dabidx > 0
         AND transsubtype != cs20549_guarrespadj_cd)
         SET dabosize = size(dailyaccountbalances->dailybalances[dabidx].benefitorders,5)
         SET daboidx = locateval(idx,1,dabosize,boid,dailyaccountbalances->dailybalances[dabidx].
          benefitorders[idx].benefitorderid,
          transtype,dailyaccountbalances->dailybalances[dabidx].benefitorders[idx].transtype)
         IF (daboidx=0)
          SET daboidx = adddailybalancesbo(dabidx,boid,maxdailyrate,totalrespamt,newrespamt,
           valuecriteria,transtype,dabosize,dailyaccountbalances,pftencntrid,
           activeind)
         ELSE
          CALL updatedailybalancesboresp(dabidx,daboidx,maxdailyrate,newrespamt,totalrespamt,
           ptransmod,valuecriteria,dailyaccountbalances)
         ENDIF
         IF (transtype IN (cs18649_payment_cd, cs18649_adjust_cd))
          CALL addguaracctdataaccttrans(transtype,transsubtype,newrespamt,guaracctdata)
          CALL addencntrtoguarbalchangeevent(ptransmod,pftencntrid,activitydate,transsubtype)
         ENDIF
        ENDIF
        SET newrespamt = 0.0
      ENDFOR
    ENDFOR
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getdailybalanceidx,char(128))=char(128))
  SUBROUTINE (getdailybalanceidx(pactivitydate=f8,ptransamt=f8,prdabsize=i4(ref),prdab=vc(ref)) =i4)
    DECLARE dabidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    SET dabidx = locatevalsort(idx,1,size(prdab->dailybalances,5),pactivitydate,prdab->dailybalances[
     idx].activitydate)
    IF (dabidx <= 0)
     SET dabidx = abs(dabidx)
     SET prdabsize = (size(prdab->dailybalances,5)+ 1)
     SET stat = alterlist(prdab->dailybalances,prdabsize,dabidx)
     SET dabidx += 1
     SET prdab->dailybalances[dabidx].activitydate = pactivitydate
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("getDailyBalanceIdx Exiting...",build2("  dabIdx: ",dabidx,"  prDabSize: ",
       prdabsize),log_debug)
    ENDIF
    RETURN(dabidx)
  END ;Subroutine
 ENDIF
 IF (validate(adddailybalancesbo,char(128))=char(128))
  SUBROUTINE (adddailybalancesbo(pdabidx=i4,pboid=f8,pmaxdailyrate=f8,ptotalrespamt=f8,pnewrespamt=f8,
   pvaluecriteria=f8,ptranstype=f8,prdabosize=i4(ref),prdab=vc(ref),ppeid=f8,pactiveind=i2) =i4)
    DECLARE dabboidx = i4 WITH protect, noconstant(0)
    IF (pdabidx <= size(prdab->dailybalances,5)
     AND pdabidx > 0
     AND ((pvaluecriteria IN (cs4092002_payment_cd, cs4092002_adjustment_cd)
     AND abs(pnewrespamt) > 0.0) OR (pvaluecriteria IN (cs4092002_maxrate_cd, cs4092002_percentage_cd
    )
     AND ((abs(ptotalrespamt) > 0.0) OR (pactiveind=true)) )) )
     SET prdabosize = (size(prdab->dailybalances[pdabidx].benefitorders,5)+ 1)
     SET stat = alterlist(prdab->dailybalances[pdabidx].benefitorders,prdabosize)
     SET dabboidx = prdabosize
     SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].benefitorderid = pboid
     SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].pftencntrid = ppeid
     SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].processed = true
     SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].transtype = ptranstype
     SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].valuecriteria = pvaluecriteria
     IF (pvaluecriteria IN (cs4092002_payment_cd, cs4092002_adjustment_cd))
      SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].addrespamt = pnewrespamt
      SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].totalrespamt = pnewrespamt
     ELSE
      SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].maxdailyrate = pmaxdailyrate
      SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].totalrespamt = ptotalrespamt
      SET prdab->dailybalances[pdabidx].benefitorders[dabboidx].addrespamt = ptotalrespamt
     ENDIF
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("addDailyBalancesBO Exiting... ",build2("  dabBoIdx: ",dabboidx,"  prDaBoSize: ",
       prdabosize),log_debug)
    ENDIF
    RETURN(dabboidx)
  END ;Subroutine
 ENDIF
 IF (validate(updatedailybalancesboresp,char(128))=char(128))
  SUBROUTINE (updatedailybalancesboresp(pdabidx=i4,pdaboidx=i4,pmaxdailyrate=f8,paddrespamt=f8,
   ptotalrespamt=f8,ptransmod=vc,pvaluecriteria=f8,prdab=vc(ref)) =i2)
    DECLARE newtotalrespamt = f8 WITH protect, noconstant(0.0)
    DECLARE newaddrespamt = f8 WITH protect, noconstant(paddrespamt)
    IF (((pdabidx=0) OR (((pdaboidx=0) OR (((pdabidx > size(prdab->dailybalances,5)) OR (pdaboidx >
    size(prdab->dailybalances[pdabidx].benefitorders,5))) )) )) )
     CALL logmessage("updateDailyBalancesBOResp",build2("  pDabIdx: ",pdabidx,"  pDaBOIdx: ",pdaboidx
       ),log_error)
     RETURN(false)
    ENDIF
    IF (((ptransmod != remittance_posting) OR ( NOT (pvaluecriteria IN (cs4092002_payment_cd,
    cs4092002_adjustment_cd)))) )
     SET newaddrespamt = (ptotalrespamt - prdab->dailybalances[pdabidx].benefitorders[pdaboidx].
     totalrespamt)
    ENDIF
    SET newtotalrespamt = (newaddrespamt+ prdab->dailybalances[pdabidx].benefitorders[pdaboidx].
    totalrespamt)
    IF (pvaluecriteria IN (cs4092002_maxrate_cd, cs4092002_percentage_cd))
     IF ((((pmaxdailyrate != prdab->dailybalances[pdabidx].benefitorders[pdaboidx].maxdailyrate)) OR
     ((ptotalrespamt != prdab->dailybalances[pdabidx].benefitorders[pdaboidx].totalrespamt))) )
      SET prdab->dailybalances[pdabidx].dailyratechanged = true
     ENDIF
     IF ((pvaluecriteria != prdab->dailybalances[pdabidx].benefitorders[pdaboidx].valuecriteria))
      SET prdab->dailybalances[pdabidx].totaldailyratechrgamt += (prdab->dailybalances[pdabidx].
      benefitorders[pdaboidx].chargeamt * evaluate(pvaluecriteria,cs4092002_percentage_cd,- (1),1))
     ENDIF
     SET prdab->dailybalances[pdabidx].benefitorders[pdaboidx].valuecriteria = pvaluecriteria
     SET prdab->dailybalances[pdabidx].benefitorders[pdaboidx].maxdailyrate = pmaxdailyrate
    ENDIF
    SET prdab->dailybalances[pdabidx].benefitorders[pdaboidx].addrespamt = newaddrespamt
    SET prdab->dailybalances[pdabidx].benefitorders[pdaboidx].totalrespamt = newtotalrespamt
    SET prdab->dailybalances[pdabidx].benefitorders[pdaboidx].processed = true
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("updateDailyBalancesBOResp",build2("  newAddRespAmt: ",newaddrespamt,
       "  pMaxDailyRate: ",pmaxdailyrate,"  totalRespAmt: ",
       newtotalrespamt),log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(removeunprocesseddailybalboresp,char(128))=char(128))
  SUBROUTINE (removeunprocesseddailybalboresp(ptransmod=vc,prdab=vc(ref),prguartrans=vc(ref),pgtidx=
   i4) =i2)
    DECLARE dabidx = i4 WITH protect, noconstant(0)
    DECLARE daboidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE boidx = i4 WITH protect, noconstant(0)
    DECLARE gboidx = i4 WITH protect, noconstant(0)
    DECLARE addamt = f8 WITH protect, noconstant(0.0)
    DECLARE boid = f8 WITH protect, noconstant(0.0)
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(prdab)
     CALL echorecord(benefitorders)
     CALL echorecord(prguartrans)
    ENDIF
    FOR (dabidx = 1 TO size(prdab->dailybalances,5))
      FOR (daboidx = 1 TO size(prdab->dailybalances[dabidx].benefitorders,5))
        IF ( NOT (prdab->dailybalances[dabidx].benefitorders[daboidx].processed)
         AND (prdab->dailybalances[dabidx].benefitorders[daboidx].totalrespamt > 0.0)
         AND (prdab->dailybalances[dabidx].benefitorders[daboidx].valuecriteria IN (
        cs4092002_maxrate_cd, cs4092002_percentage_cd)))
         SET boid = prdab->dailybalances[dabidx].benefitorders[daboidx].benefitorderid
         IF (((boidx=0) OR ((boid != benefitorders->benefitorders[boidx].benefitorderid))) )
          SET boidx = locateval(idx,1,size(benefitorders->benefitorders,5),boid,benefitorders->
           benefitorders[idx].benefitorderid)
          SET gboidx = locateval(idx,1,size(prguartrans->guarantors[pgtidx].benefitorders,5),boid,
           prguartrans->guarantors[pgtidx].benefitorders[idx].benefitorderid)
         ENDIF
         IF (((ptransmod != remittance_posting
          AND size(prguartrans->guarantors[pgtidx].benefitorders[gboidx].chrgs,5)=0) OR (((ptransmod=
         insurance_modification) OR (ptransmod=self_pay_modification)) ))
          AND boidx != 0
          AND  NOT (benefitorders->benefitorders[boidx].cbosonly))
          SET addamt = 0.0
          CALL updatedailybalancesboresp(dabidx,daboidx,0.0,addamt,0.0,
           self_pay_modification,cs4092002_maxrate_cd,prdab)
         ENDIF
        ENDIF
      ENDFOR
    ENDFOR
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(prdab)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(updatedailybalanceschrg,char(128))=char(128))
  SUBROUTINE (updatedailybalanceschrg(ptransmod=vc,prdab=vc(ref)) =i2)
    DECLARE dabidx = i4 WITH protect, noconstant(0)
    DECLARE daboidx = i4 WITH protect, noconstant(0)
    DECLARE firstpass = i2 WITH protect, noconstant(true)
    DECLARE dabmaxrate = f8 WITH protect, noconstant(0.0)
    DECLARE totaldailyratechrgamt = f8 WITH protect, noconstant(0.0)
    DECLARE remainingchrgamt = f8 WITH protect, noconstant(0.0)
    DECLARE diffamt = f8 WITH protect, noconstant(0.0)
    DECLARE dabosize = i4 WITH protect, noconstant(0)
    DECLARE dabsize = i4 WITH protect, noconstant(0)
    DECLARE ttlresp = f8 WITH protect, noconstant(0.0)
    DECLARE ttlchrg = f8 WITH protect, noconstant(0.0)
    SET dabsize = size(prdab->dailybalances,5)
    FOR (dabidx = 1 TO dabsize)
      CALL getmaxratetotalchrgamt(dabidx,prdab,dabmaxrate,totaldailyratechrgamt)
      SET remainingchrgamt = (dabmaxrate - totaldailyratechrgamt)
      SET dabosize = size(prdab->dailybalances[dabidx].benefitorders,5)
      IF (dabosize > 0)
       FOR (daboidx = 1 TO dabosize)
        IF ((prdab->dailybalances[dabidx].benefitorders[daboidx].valuecriteria=cs4092002_maxrate_cd))
         IF ((( NOT (firstpass)) OR ((firstpass=prdab->dailybalances[dabidx].benefitorders[daboidx].
         processed))) )
          SET diffamt = (minval(prdab->dailybalances[dabidx].benefitorders[daboidx].totalrespamt,abs(
            prdab->dailybalances[dabidx].benefitorders[daboidx].maxdailyrate)) - prdab->
          dailybalances[dabidx].benefitorders[daboidx].chargeamt)
          IF (diffamt > 0.0
           AND remainingchrgamt > 0.0)
           SET diffamt = minval(diffamt,remainingchrgamt)
          ELSEIF (remainingchrgamt < 0.0
           AND (prdab->dailybalances[dabidx].benefitorders[daboidx].chargeamt > 0.0))
           SET diffamt = - ((1 * minval(abs(remainingchrgamt),prdab->dailybalances[dabidx].
            benefitorders[daboidx].chargeamt)))
          ELSEIF (((isequal(diffamt,0.0)) OR (isequal(remainingchrgamt,0.0)
           AND diffamt > 0.0)) )
           SET diffamt = 0.0
          ENDIF
          IF (diffamt <= abs(remainingchrgamt))
           SET prdab->dailybalances[dabidx].benefitorders[daboidx].chargeaddamt = (diffamt+ prdab->
           dailybalances[dabidx].benefitorders[daboidx].chargeaddamt)
           SET prdab->dailybalances[dabidx].benefitorders[daboidx].chargeamt = (diffamt+ prdab->
           dailybalances[dabidx].benefitorders[daboidx].chargeamt)
           SET remainingchrgamt -= diffamt
           SET totaldailyratechrgamt += diffamt
          ENDIF
         ENDIF
         SET ttlresp += prdab->dailybalances[dabidx].benefitorders[daboidx].totalrespamt
         SET ttlchrg += prdab->dailybalances[dabidx].benefitorders[daboidx].chargeamt
        ELSEIF (firstpass
         AND (cs4092002_percentage_cd=prdab->dailybalances[dabidx].benefitorders[daboidx].
        valuecriteria))
         SET prdab->dailybalances[dabidx].benefitorders[daboidx].chargeaddamt = ((prdab->
         dailybalances[dabidx].benefitorders[daboidx].chargeaddamt+ prdab->dailybalances[dabidx].
         benefitorders[daboidx].totalrespamt) - prdab->dailybalances[dabidx].benefitorders[daboidx].
         chargeamt)
         SET prdab->dailybalances[dabidx].benefitorders[daboidx].chargeamt += prdab->dailybalances[
         dabidx].benefitorders[daboidx].chargeaddamt
        ENDIF
        IF (daboidx=dabosize
         AND firstpass
         AND minval(dabmaxrate,ttlresp) != ttlchrg)
         SET daboidx = 0
         SET ttlresp = 0
         SET ttlchrg = 0
         SET firstpass = false
        ENDIF
       ENDFOR
       SET prdab->dailybalances[dabidx].totaldailyratechrgamt = totaldailyratechrgamt
      ENDIF
      SET ttlresp = 0
      SET ttlchrg = 0
      SET firstpass = true
    ENDFOR
  END ;Subroutine
 ENDIF
 IF (validate(getmaxratetotalchrgamt,char(128))=char(128))
  SUBROUTINE (getmaxratetotalchrgamt(pdabidx=i4,prdab=vc(ref),prmaxrate=f8(ref),prchargeamt=f8(ref)
   ) =null)
    DECLARE idx = i4 WITH protect, noconstant(0)
    SET prmaxrate = 0.0
    SET prchargeamt = 0.0
    FOR (idx = 1 TO size(prdab->dailybalances[pdabidx].benefitorders,5))
      IF ((prdab->dailybalances[pdabidx].benefitorders[idx].valuecriteria=cs4092002_maxrate_cd))
       IF (prmaxrate < abs(prdab->dailybalances[pdabidx].benefitorders[idx].maxdailyrate))
        SET prmaxrate = abs(prdab->dailybalances[pdabidx].benefitorders[idx].maxdailyrate)
       ENDIF
       SET prchargeamt += prdab->dailybalances[pdabidx].benefitorders[idx].chargeamt
      ENDIF
    ENDFOR
    SET prdab->dailybalances[pdabidx].totaldailyratechrgamt = prchargeamt
    SET prdab->dailybalances[pdabidx].maxdailyrate = prmaxrate
  END ;Subroutine
 ENDIF
 IF (validate(getchargesbybenefitorderid,char(128))=char(128))
  SUBROUTINE (getchargesbybenefitorderid(prbenefitorders=vc(ref),prrawchrgs=vc(ref),ppeid=f8) =i2)
    DECLARE cidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE boid = f8 WITH protect, noconstant(0)
    DECLARE chargeamt = f8 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM benefit_order b,
      pft_charge_bo_reltn pcr,
      pft_charge pc,
      pft_trans_reltn ptr,
      charge c
     PLAN (b
      WHERE b.pft_encntr_id=ppeid
       AND b.fin_class_cd=cs354_selfpay_cd
       AND b.active_ind=true)
      JOIN (pcr
      WHERE pcr.benefit_order_id=b.benefit_order_id
       AND pcr.active_ind=true)
      JOIN (pc
      WHERE pc.pft_charge_id=pcr.pft_charge_id
       AND pc.active_ind=true)
      JOIN (ptr
      WHERE ptr.activity_id=pc.activity_id
       AND ptr.parent_entity_name="PFTENCNTR"
       AND ptr.active_ind=true)
      JOIN (c
      WHERE c.charge_item_id=pc.charge_item_id
       AND c.active_ind=true)
     ORDER BY c.service_dt_tm, b.benefit_order_id, c.charge_item_id,
      ptr.trans_type_cd
     HEAD REPORT
      stat = alterlist(prrawchrgs->chrgs,100)
     HEAD b.benefit_order_id
      boid = b.benefit_order_id
     HEAD c.charge_item_id
      cidx += 1
      IF (mod(cidx,10)=1
       AND cidx > 100)
       stat = alterlist(prrawchrgs->chrgs,(cidx+ 9))
      ENDIF
      chargeamt = evaluate(ptr.dr_cr_flag,2,(ptr.amount * - (1)),ptr.amount)
      IF (getposforexistingcharge(c.charge_item_id) > 0)
       prrawchrgs->chrgs[cidx].newamt = chargeamt
      ENDIF
      prrawchrgs->chrgs[cidx].benefitorderid = b.benefit_order_id, prrawchrgs->chrgs[cidx].chrgid = c
      .charge_item_id, prrawchrgs->chrgs[cidx].chrgamt = chargeamt,
      prrawchrgs->chrgs[cidx].servicedate = c.service_dt_tm, prrawchrgs->chrgs[cidx].typecd = ptr
      .trans_type_cd, prbenefitorders->benefitorders[1].totalchrgamt += chargeamt
     FOOT REPORT
      stat = alterlist(prrawchrgs->chrgs,cidx)
     WITH nocounter
    ;end select
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(request)
     CALL echorecord(prrawchrgs)
     CALL echorecord(prbenefitorders)
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("getChargesByBenefitOrderId","Exiting...",log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(populategroupchargesbyday,char(128))=char(128))
  SUBROUTINE (populategroupchargesbyday(prbenefitorders=vc(ref),prrawchrgs=vc(ref),pbillingentityid=
   f8,ptransmod=vc,ppeid=f8) =i2)
    DECLARE gboidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE boidx = i4 WITH protect, noconstant(0)
    DECLARE gidx = i4 WITH protect, noconstant(0)
    DECLARE cidx = i4 WITH protect, noconstant(0)
    DECLARE diff = f8 WITH protect, noconstant(0)
    DECLARE instransamt = f8 WITH protect, noconstant(0)
    DECLARE sptransamt = f8 WITH protect, noconstant(0)
    DECLARE respdelta = f8 WITH protect, noconstant(0)
    IF (isequal(pbillingentityid,0.0))
     CALL logmessage("populateGroupChargesByDay","pBillingEntityId is null. Exiting...",log_debug)
     RETURN(false)
    ENDIF
    IF ( NOT (getbenefitordertotalrespamt(benefitorders)))
     CALL logmessage("getBenefitOrderTotalRespAmt"," Failed calculating Total Responsibility Amount",
      log_debug)
    ENDIF
    IF ( NOT (getchargesbybenefitorderid(prbenefitorders,prrawchrgs,ppeid)))
     CALL logmessage("populateGroupChargesByDay"," No charges were found for given Benefit Order",
      log_debug)
     RETURN(false)
    ENDIF
    IF ( NOT (getchargesforapplyadjustment(prrawchrgs,ppeid)))
     CALL logmessage("getChargesForApplyAdjustment","No transactions associated to the charges",
      log_debug)
    ENDIF
    SET sptransamt = getselfpaynonguarantortransactions(prrawchrgs,ppeid)
    IF ( NOT (ptransmod IN (auto_adjust_writeoff)))
     SET instransamt = getinspftprorationbal(ppeid)
     SET respdelta = (((instransamt+ sptransamt)+ prbenefitorders->benefitorders[1].totalchrgamt) -
     prbenefitorders->benefitorders[1].totalrespamt)
     IF ( NOT (isequal(respdelta,0.0)))
      CALL updatetransferamounts(prbenefitorders->benefitorders[1].benefitorderid,respdelta)
      CALL addencntrtoguarbalchangeevent(ptransmod,ppeid,0.0,0.0)
     ENDIF
     CALL populateinsurancebenefitorders(prbenefitorders)
     IF (validate(debug,- (1)) > 0)
      CALL echo(build2(" BoTotalChrgAmt: ",prbenefitorders->benefitorders[1].totalchrgamt,
        " InsTransAmt: ",instransamt," SpTransAmt: ",
        sptransamt))
     ENDIF
    ENDIF
    SET stat = initrec(groupchargesbyday)
    SET stat = alterlist(groupchargesbyday->dailychrgs,40)
    SET prbenefitorders->benefitorders[1].totalchrgamt = 0.0
    FOR (cidx = 1 TO size(prrawchrgs->chrgs,5))
      SET prbenefitorders->benefitorders[1].totalchrgamt += prrawchrgs->chrgs[cidx].chrgamt
      SET prrawchrgs->chrgs[cidx].servicedate = getfacilitybeginningofday(pbillingentityid,prrawchrgs
       ->chrgs[cidx].servicedate)
      IF (((gidx=0) OR ((groupchargesbyday->dailychrgs[gidx].servicedate != prrawchrgs->chrgs[cidx].
      servicedate))) )
       SET gidx += 1
       IF (mod(gidx,10)=1
        AND gidx > 40)
        SET stat = alterlist(groupchargesbyday->dailychrgs,(cidx+ 9))
       ENDIF
      ENDIF
      SET groupchargesbyday->dailychrgs[gidx].servicedate = prrawchrgs->chrgs[cidx].servicedate
      IF (size(groupchargesbyday->dailychrgs[gidx].benefitorders,5) > 0)
       IF ((prrawchrgs->chrgs[cidx].benefitorderid != groupchargesbyday->dailychrgs[gidx].
       benefitorders[gboidx].benefitorderid))
        SET gboidx = locateval(idx,1,size(groupchargesbyday->dailychrgs[gidx].benefitorders,5),
         prrawchrgs->chrgs[cidx].benefitorderid,groupchargesbyday->dailychrgs[gidx].benefitorders[idx
         ].benefitorderid)
       ENDIF
      ELSE
       SET gboidx = 0
      ENDIF
      IF (gboidx=0)
       SET gboidx = (size(groupchargesbyday->dailychrgs[gidx].benefitorders,5)+ 1)
       SET stat = alterlist(groupchargesbyday->dailychrgs[gidx].benefitorders,gboidx)
       SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].benefitorderid = prrawchrgs->
       chrgs[cidx].benefitorderid
       SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].typecd = prrawchrgs->chrgs[cidx]
       .typecd
       SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].newchrgamt = 0.0
       SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt = 0.0
      ENDIF
      SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].newchrgamt += prrawchrgs->chrgs[
      cidx].newamt
      SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt += prrawchrgs->
      chrgs[cidx].chrgamt
    ENDFOR
    SET stat = alterlist(groupchargesbyday->dailychrgs,gidx)
    IF (validate(debug,- (1)) > 0)
     CALL echo(build2("After Populating GroupChargesByDay gIdx: ",gidx,"  gboIdx: ",gboidx,
       "  boIdx: ",
       boidx,"  cIdx: ",cidx))
     CALL echogcbd(null)
     CALL echorecord(prbenefitorders)
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL echo(build2("After SP Transfer tRespAmt set gIdx: ",gidx,"  gboIdx: ",gboidx,"  boIdx: ",
       boidx))
     CALL echogcbd(null)
     CALL echorecord(prbenefitorders)
    ENDIF
    SET boidx = 0
    FOR (gidx = 1 TO size(groupchargesbyday->dailychrgs,5))
      FOR (gboidx = 1 TO size(groupchargesbyday->dailychrgs[gidx].benefitorders,5))
        IF (((boidx=0) OR ((prbenefitorders->benefitorders[boidx].benefitorderid != groupchargesbyday
        ->dailychrgs[gidx].benefitorders[gboidx].benefitorderid))) )
         SET boidx = locateval(idx,1,size(prbenefitorders->benefitorders,5),groupchargesbyday->
          dailychrgs[gidx].benefitorders[gboidx].benefitorderid,prbenefitorders->benefitorders[idx].
          benefitorderid)
        ENDIF
        IF (isequal(prbenefitorders->benefitorders[boidx].totalchrgamt,0.0))
         SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt = 0.0
        ELSE
         SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt = (
         prbenefitorders->benefitorders[boidx].totalrespamt * (groupchargesbyday->dailychrgs[gidx].
         benefitorders[gboidx].totaldaychrgamt/ prbenefitorders->benefitorders[boidx].totalchrgamt))
         SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt = round(
          groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt,2)
         SET prbenefitorders->benefitorders[boidx].roundedtotalrespamt += groupchargesbyday->
         dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt
         IF ( NOT (isequal(groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt,
          0.0)))
          SET prbenefitorders->benefitorders[boidx].lastgidx = gidx
          SET prbenefitorders->benefitorders[boidx].lastgboidx = gboidx
         ENDIF
        ENDIF
        IF (ptransmod IN (remittance_posting))
         SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].newchrgamt = groupchargesbyday
         ->dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt
        ENDIF
        IF (validate(debug,- (1)) > 0)
         CALL echo(build2("Have\Had Insurance gIdx: ",gidx,"  gboIdx: ",gboidx,"  boIdx: ",
           boidx))
         CALL echogcbd(null)
         CALL echorecord(prbenefitorders)
        ENDIF
      ENDFOR
    ENDFOR
    FOR (boidx = 1 TO size(prbenefitorders->benefitorders,5))
     SET diff = (prbenefitorders->benefitorders[boidx].totalrespamt - prbenefitorders->benefitorders[
     boidx].roundedtotalrespamt)
     IF (diff != 0)
      SET gidx = prbenefitorders->benefitorders[boidx].lastgidx
      SET gboidx = prbenefitorders->benefitorders[boidx].lastgboidx
      SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt += diff
      IF (ptransmod IN (remittance_posting))
       SET groupchargesbyday->dailychrgs[gidx].benefitorders[gboidx].newchrgamt = groupchargesbyday->
       dailychrgs[gidx].benefitorders[gboidx].totaldaychrgamt
      ENDIF
     ENDIF
    ENDFOR
    IF (validate(debug,- (1)) > 0)
     CALL echo("Leaving populateGroupChargesByDay")
     CALL echorecord(prbenefitorders)
     CALL echorecord(groupchargesbyday)
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("populateGroupChargesByDay","Exiting...",log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(echogcbd,char(128))=char(128))
  DECLARE echogcbd(null) = null
  SUBROUTINE echogcbd(null)
    CALL echo("--------------------GroupChargesByDay---------------------")
    CALL echo("#: Service Date")
    DECLARE ocnt = i4 WITH protect, noconstant(1)
    DECLARE bocnt = i4 WITH protect, noconstant(1)
    DECLARE guarcnt = i4 WITH protect, noconstant(1)
    FOR (ocnt = 1 TO size(groupchargesbyday->dailychrgs,5))
      CALL echo(build("  D-",ocnt,":",format(groupchargesbyday->dailychrgs[ocnt].servicedate,
         "MM/dd/yy;;d")))
      FOR (bocnt = 1 TO size(groupchargesbyday->dailychrgs[ocnt].benefitorders,5))
       CALL echo(build(" BO[",bocnt,"] : Benefit Order Id :",format(groupchargesbyday->dailychrgs[
          ocnt].benefitorders[bocnt].benefitorderid,"########.##"),"  Total Day Chrg Amt:",
         format(groupchargesbyday->dailychrgs[ocnt].benefitorders[bocnt].totaldaychrgamt,"#####.##"),
         "  New Chrg Amt:",format(groupchargesbyday->dailychrgs[ocnt].benefitorders[bocnt].newchrgamt,
          "#####.##")))
       FOR (guarcnt = 1 TO size(groupchargesbyday->dailychrgs[ocnt].benefitorders[bocnt].guarantors,5
        ))
         CALL echo(build(" G-",guarcnt,"  gId1:",format(groupchargesbyday->dailychrgs[ocnt].
            benefitorders[bocnt].guarantors[guarcnt].personid1,"########.#"),"  gId2:",
           format(groupchargesbyday->dailychrgs[ocnt].benefitorders[bocnt].guarantors[guarcnt].
            personid2,"########.#"),"  new chrg Amt:",format(groupchargesbyday->dailychrgs[ocnt].
            benefitorders[bocnt].guarantors[guarcnt].newchrgamt,"#####.##"),"  total chrg Amt:",
           format(groupchargesbyday->dailychrgs[ocnt].benefitorders[bocnt].guarantors[guarcnt].
            totalchrgamt,"#####.##"),
           "  finRespProp: ",format(groupchargesbyday->dailychrgs[ocnt].benefitorders[bocnt].
            guarantors[guarcnt].finrespprop,"#.####"),"  active: ",groupchargesbyday->dailychrgs[ocnt
           ].benefitorders[bocnt].guarantors[guarcnt].activeind))
       ENDFOR
      ENDFOR
      CALL echo("----------------------------------------------------------")
    ENDFOR
  END ;Subroutine
 ENDIF
 IF (validate(getselfpaynonguarantortransactions,char(128))=char(128))
  SUBROUTINE (getselfpaynonguarantortransactions(prrawchrgs=vc(ref),ppeid=f8) =f8)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE cidx = i4 WITH protect, noconstant(0)
    DECLARE totalamt = f8 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     transamt = evaluate(ptr.dr_cr_flag,2,(ptr.amount * - (1)),ptr.amount)
     FROM pft_encntr pe,
      benefit_order bo,
      pft_trans_reltn ptr,
      batch_trans_file btf,
      pft_trans_reltn ptrc,
      bo_hp_reltn bohp,
      trans_log tl,
      pft_charge pc
     PLAN (pe
      WHERE pe.pft_encntr_id=ppeid)
      JOIN (bo
      WHERE bo.pft_encntr_id=pe.pft_encntr_id
       AND bo.active_ind=true
       AND bo.fin_class_cd=cs354_selfpay_cd)
      JOIN (bohp
      WHERE bohp.benefit_order_id=bo.benefit_order_id)
      JOIN (ptr
      WHERE ptr.parent_entity_id=pe.pft_encntr_id
       AND ptr.active_ind=true
       AND ptr.parent_entity_name="PFTENCNTR"
       AND ptr.trans_type_cd IN (cs18649_payment_cd, cs18649_adjust_cd)
       AND ptr.benefit_order_id=bohp.bo_hp_reltn_id)
      JOIN (btf
      WHERE btf.batch_trans_file_id=ptr.batch_trans_file_id
       AND btf.guar_acct_id=0)
      JOIN (tl
      WHERE tl.activity_id=ptr.activity_id
       AND tl.active_ind=true)
      JOIN (ptrc
      WHERE (ptrc.activity_id= Outerjoin(ptr.activity_id))
       AND (ptrc.parent_entity_name= Outerjoin("PFTCHARGE"))
       AND (ptrc.active_ind= Outerjoin(true)) )
      JOIN (pc
      WHERE (pc.pft_charge_id= Outerjoin(ptrc.parent_entity_id))
       AND (pc.active_ind= Outerjoin(true)) )
     ORDER BY ptr.activity_id, bo.benefit_order_id
     HEAD ptr.activity_id
      IF (tl.trans_sub_type_cd != cs20549_guarrespadj_cd
       AND tl.trans_reason_cd != cs18937_smallbalance_cd)
       totalamt += transamt
       IF (ptrc.parent_entity_id > 0)
        cidx = locateval(idx,1,size(prrawchrgs->chrgs,5),pc.charge_item_id,prrawchrgs->chrgs[idx].
         chrgid)
        IF (cidx > 0)
         prrawchrgs->chrgs[cidx].adjustments += transamt, prrawchrgs->chrgs[cidx].chrgamt += transamt
        ENDIF
       ENDIF
      ENDIF
     WITH nocounter
    ;end select
    RETURN(totalamt)
  END ;Subroutine
 ENDIF
 IF (validate(getchargesforapplyadjustment,char(128))=char(128))
  SUBROUTINE (getchargesforapplyadjustment(prrawchrgs=vc(ref),ppeid=f8) =i2)
    DECLARE cidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE transamt = f8 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM pft_trans_reltn ptr,
      bo_hp_reltn bohp,
      benefit_order bo,
      pft_charge pc,
      pft_trans_reltn ptrc,
      batch_trans_file btf,
      pft_charge_bo_reltn cbo
     PLAN (ptr
      WHERE ptr.parent_entity_id=ppeid
       AND ptr.parent_entity_name="PFTENCNTR"
       AND ptr.trans_type_cd IN (cs18649_adjust_cd, cs18649_payment_cd)
       AND ptr.active_ind=true)
      JOIN (bohp
      WHERE bohp.bo_hp_reltn_id=ptr.benefit_order_id
       AND bohp.active_ind=true)
      JOIN (bo
      WHERE bo.benefit_order_id=bohp.benefit_order_id
       AND bo.active_ind=true
       AND bo.fin_class_cd != cs354_selfpay_cd)
      JOIN (ptrc
      WHERE (ptrc.activity_id= Outerjoin(ptr.activity_id))
       AND (ptrc.parent_entity_name= Outerjoin("PFTCHARGE"))
       AND (ptrc.active_ind= Outerjoin(true)) )
      JOIN (pc
      WHERE (pc.pft_charge_id= Outerjoin(ptrc.parent_entity_id))
       AND (pc.active_ind= Outerjoin(true)) )
      JOIN (cbo
      WHERE (cbo.pft_charge_id= Outerjoin(pc.pft_charge_id))
       AND (cbo.active_ind= Outerjoin(true)) )
      JOIN (btf
      WHERE btf.batch_trans_file_id=ptr.batch_trans_file_id
       AND btf.corsp_activity_id=0.0
       AND btf.pft_line_item_id=0.0
       AND btf.guar_acct_id=0.0)
     ORDER BY ptr.activity_id, cbo.benefit_order_id
     HEAD ptr.activity_id
      cidx = locateval(idx,1,size(prrawchrgs->chrgs,5),pc.charge_item_id,prrawchrgs->chrgs[idx].
       chrgid)
      IF (cidx > 0)
       transamt = evaluate(ptr.dr_cr_flag,2,(ptr.amount * - (1)),ptr.amount), prrawchrgs->chrgs[cidx]
       .adjustments += transamt, prrawchrgs->chrgs[cidx].chrgamt += transamt
      ENDIF
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("getChargesForApplyAdjustment","No pay/adj asociated with charges",log_debug)
     RETURN(false)
    ENDIF
    CALL logmessage("getChargesForApplyAdjustment","Exiting.......",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getposforexistingcharge,char(128))=char(128))
  SUBROUTINE (getposforexistingcharge(pchargeitemid=f8) =i4)
    DECLARE newamtforexistingchargeidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    IF (validate(request->guar_qual) > 0)
     IF (size(request->guar_qual,5) > 0
      AND validate(request->guar_qual[gqindex].transactions) > 0)
      SET newamtforexistingchargeidx = locateval(idx,1,size(request->guar_qual[gqindex].transactions,
        5),pchargeitemid,request->guar_qual[gqindex].transactions[idx].entity_id,
       "CHARGE",request->guar_qual[gqindex].transactions[idx].entity_name)
     ENDIF
    ENDIF
    RETURN(newamtforexistingchargeidx)
  END ;Subroutine
 ENDIF
 IF (validate(getbenefitordertotalrespamt,char(128))=char(128))
  SUBROUTINE (getbenefitordertotalrespamt(prbenefitorders=vc(ref)) =i2)
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("getBenefitOrderTotalRespAmt","Enter...",log_debug)
    ENDIF
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    SELECT INTO "nl:"
     FROM (dummyt d  WITH seq = value(size(prbenefitorders->benefitorders,5))),
      daily_acct_bal_reltn dabr
     PLAN (d
      WHERE (prbenefitorders->benefitorders[d.seq].benefitorderid != 0.0))
      JOIN (dabr
      WHERE (dabr.parent_entity_id=prbenefitorders->benefitorders[d.seq].benefitorderid)
       AND dabr.parent_entity_name="BENEFIT_ORDER"
       AND dabr.value_criteria_cd=cs4092002_transfer_cd)
     ORDER BY d.seq
     HEAD d.seq
      prbenefitorders->benefitorders[d.seq].totalrespamt = 0.0
     DETAIL
      prbenefitorders->benefitorders[d.seq].totalrespamt = (dabr.value_amt+ prbenefitorders->
      benefitorders[d.seq].totalrespamt)
     WITH nocounter
    ;end select
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(prbenefitorders)
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("getBenefitOrderTotalRespAmt","Exiting...",log_debug)
    ENDIF
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(updatetransferamounts,char(128))=char(128))
  SUBROUTINE (updatetransferamounts(pbenefitorderid=f8,pamount=f8) =i2)
    DECLARE aidx = i4 WITH protect, noconstant(0)
    DECLARE uidx = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    RECORD uptdabrrequest(
      1 objarray[*]
        2 daily_acct_bal_reltn_id = f8
        2 value_criteria_nbr = f8
        2 value_amt = f8
        2 updt_cnt = i4
    ) WITH protect
    RECORD adddabrrequest(
      1 objarray[*]
        2 daily_acct_bal_reltn_id = f8
        2 daily_acct_bal_id = f8
        2 parent_entity_name = vc
        2 parent_entity_id = f8
        2 value_criteria_cd = f8
        2 value_amt = f8
    ) WITH protect
    RECORD dabrreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM benefit_order bo,
      pft_encntr pe,
      daily_acct_bal dab,
      daily_acct_bal_reltn dabr
     PLAN (bo
      WHERE bo.benefit_order_id=pbenefitorderid
       AND bo.fin_class_cd=cs354_selfpay_cd)
      JOIN (pe
      WHERE pe.pft_encntr_id=bo.pft_encntr_id)
      JOIN (dab
      WHERE dab.acct_id=pe.acct_id
       AND dab.active_ind=true)
      JOIN (dabr
      WHERE (dabr.daily_acct_bal_id= Outerjoin(dab.daily_acct_bal_id))
       AND (dabr.parent_entity_id= Outerjoin(pbenefitorderid))
       AND (dabr.parent_entity_name= Outerjoin("BENEFIT_ORDER"))
       AND (dabr.value_criteria_cd= Outerjoin(cs4092002_transfer_cd)) )
     ORDER BY bo.benefit_order_id, dab.activity_dt_tm DESC
     HEAD bo.benefit_order_id
      benefitorders->benefitorders[1].totalrespamt += pamount
      IF (dabr.daily_acct_bal_reltn_id > 0.0)
       IF (((uidx=0) OR ((dabr.daily_acct_bal_reltn_id != uptdabrrequest->objarray[uidx].
       daily_acct_bal_reltn_id))) )
        uidx = locateval(idx,1,size(uptdabrrequest->objarray,5),dabr.daily_acct_bal_reltn_id,
         uptdabrrequest->objarray[idx].daily_acct_bal_reltn_id)
       ENDIF
       IF (uidx=0)
        uidx = (size(uptdabrrequest->objarray,5)+ 1), stat = alterlist(uptdabrrequest->objarray,uidx),
        uptdabrrequest->objarray[uidx].daily_acct_bal_reltn_id = dabr.daily_acct_bal_reltn_id,
        uptdabrrequest->objarray[uidx].updt_cnt = dabr.updt_cnt, uptdabrrequest->objarray[uidx].
        value_amt = dabr.value_amt
       ENDIF
       uptdabrrequest->objarray[uidx].value_amt += pamount
      ELSE
       IF (((aidx=0) OR ((((dabr.daily_acct_bal_reltn_id != adddabrrequest->objarray[aidx].
       daily_acct_bal_id)) OR ((bo.benefit_order_id != adddabrrequest->objarray[aidx].
       parent_entity_id))) )) )
        aidx = locateval(idx,1,size(adddabrrequest->objarray,5),dabr.daily_acct_bal_reltn_id,
         adddabrrequest->objarray[idx].daily_acct_bal_id,
         bo.benefit_order_id,adddabrrequest->objarray[idx].parent_entity_id)
       ENDIF
       IF (aidx=0)
        aidx = (size(adddabrrequest->objarray,5)+ 1), stat = alterlist(adddabrrequest->objarray,aidx),
        adddabrrequest->objarray[aidx].daily_acct_bal_id = dab.daily_acct_bal_id,
        adddabrrequest->objarray[aidx].parent_entity_name = "BENEFIT_ORDER", adddabrrequest->
        objarray[aidx].parent_entity_id = bo.benefit_order_id, adddabrrequest->objarray[aidx].
        value_criteria_cd = cs4092002_transfer_cd
       ENDIF
       adddabrrequest->objarray[aidx].value_amt += pamount
      ENDIF
     WITH nocounter
    ;end select
    IF (size(uptdabrrequest->objarray,5) > 0)
     IF (validate(debug,0)=1)
      CALL echorecord(uptdabrrequest)
     ENDIF
     EXECUTE pft_da_upt_dab_reltn  WITH replace("REQUEST",uptdabrrequest), replace("REPLY",dabrreply)
     IF (validate(debug,0)=1)
      CALL echorecord(dabrreply)
     ENDIF
     IF ((dabrreply->status_data.status != "S"))
      CALL logmessage("updateTransferAmounts","pft_da_upt_dab_reltn failed",log_error)
      SET rtnval = false
     ENDIF
     IF (size(adddabrrequest->objarray,5) > 0)
      SET stat = initrec(dabrreply)
     ENDIF
    ENDIF
    IF (size(adddabrrequest->objarray,5) > 0)
     IF (validate(debug,0)=1)
      CALL echorecord(adddabrrequest)
     ENDIF
     EXECUTE pft_da_add_dab_reltn  WITH replace("REQUEST",adddabrrequest), replace("REPLY",dabrreply)
     IF (validate(debug,0)=1)
      CALL echorecord(dabrreply)
     ENDIF
     IF ((dabrreply->status_data.status != "S"))
      CALL logmessage("updateTransferAmounts","pft_da_add_dab_reltn failed",log_error)
      SET rtnval = false
     ENDIF
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("updateTransferAmounts","Exiting...",log_debug)
    ENDIF
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(populateinsurancebenefitorders,char(128))=char(128))
  SUBROUTINE (populateinsurancebenefitorders(prbenefitorders=vc) =i2)
    IF (size(prbenefitorders->benefitorders,5) < 1)
     RETURN(false)
    ENDIF
    DECLARE pftencntrid = f8 WITH protect, constant(prbenefitorders->benefitorders[1].pftencntrid)
    DECLARE updateneeded = i2 WITH protect, noconstant(false)
    DECLARE boidx = i4 WITH protect, noconstant(1)
    SELECT INTO "nl:"
     FROM benefit_order bo,
      daily_acct_bal_reltn dabr
     PLAN (bo
      WHERE bo.pft_encntr_id=pftencntrid
       AND bo.fin_class_cd != cs354_selfpay_cd)
      JOIN (dabr
      WHERE dabr.parent_entity_name="BENEFIT_ORDER"
       AND dabr.parent_entity_id=bo.benefit_order_id
       AND dabr.value_amt > 0.0)
     ORDER BY bo.benefit_order_id, dabr.value_criteria_cd
     HEAD bo.benefit_order_id
      boidx += 1, stat = alterlist(prbenefitorders->benefitorders,boidx), prbenefitorders->
      benefitorders[boidx].benefitorderid = bo.benefit_order_id
     DETAIL
      IF (dabr.value_criteria_cd=cs4092002_transfer_cd)
       updateneeded = true
      ENDIF
     WITH nocounter
    ;end select
    IF (updateneeded)
     UPDATE  FROM daily_acct_bal_reltn dabr
      SET dabr.parent_entity_name = "", dabr.value_amt = 0, dabr.updt_cnt = (dabr.updt_cnt+ 1),
       dabr.updt_dt_tm = cnvtdatetime(sysdate)
      WHERE expand(boidx,2,size(prbenefitorders->benefitorders,5),dabr.parent_entity_id,
       prbenefitorders->benefitorders[boidx].benefitorderid)
       AND dabr.value_criteria_cd=cs4092002_transfer_cd
     ;end update
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(updatecbosactivityreltn,char(128))=char(128))
  SUBROUTINE (updatecbosactivityreltn(ppftencntrid=f8,phasgfrind=i2,prrawguarresp=vc(ref)) =i2)
    IF (validate(debug,0)=1)
     CALL echorecord(prrawguarresp)
    ENDIF
    RECORD addcbosactivityreltn(
      1 objarray[*]
        2 cbos_activity_reltn_id = f8
        2 parent_entity_name = vc
        2 parent_entity_id = f8
        2 active_ind = i2
        2 updt_cnt = i4
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 cbos_pe_reltn_id = f8
    ) WITH protect
    RECORD uptcbosactivityreltn(
      1 objarray[*]
        2 cbos_activity_reltn_id = f8
        2 parent_entity_name = vc
        2 parent_entity_id = f8
        2 active_ind = i2
        2 updt_cnt = i4
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 cbos_pe_reltn_id = f8
    ) WITH protect
    RECORD replycbosactivityreltn(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    DECLARE gcnt = i4 WITH protect, noconstant(0)
    DECLARE gidx = i4 WITH protect, noconstant(0)
    DECLARE rtnval = i2 WITH protect, noconstant(true)
    FOR (gcnt = 1 TO size(prrawguarresp->guarantors,5))
      SELECT INTO "NL:"
       FROM cbos_activity_reltn car,
        cbos_pe_reltn cper,
        cbos_person_reltn cpr1,
        cbos_person_reltn cpr2
       PLAN (cper
        WHERE cper.pft_encntr_id=ppftencntrid)
        JOIN (cpr1
        WHERE cpr1.cons_bo_sched_id=cper.cons_bo_sched_id
         AND (((cpr1.person_id=prrawguarresp->guarantors[gcnt].guarantorid1)
         AND cpr1.person_id > 0.0) OR (cpr1.organization_id=validate(prrawguarresp->guarantors[gcnt].
         guarorgid,0.0)
         AND cpr1.organization_id > 0.0))
         AND cpr1.active_ind=true)
        JOIN (cpr2
        WHERE (cpr2.active_ind= Outerjoin(true))
         AND (cpr2.cons_bo_sched_id= Outerjoin(cpr1.cons_bo_sched_id))
         AND (cpr2.cbos_person_reltn_id!= Outerjoin(cpr1.cbos_person_reltn_id)) )
        JOIN (car
        WHERE (car.cbos_pe_reltn_id= Outerjoin(cper.cbos_pe_reltn_id))
         AND (car.parent_entity_id= Outerjoin(prrawguarresp->guarantors[gcnt].guarfinancialrespid))
         AND (car.parent_entity_name= Outerjoin("GUAR_FINANCIAL_RESP")) )
       DETAIL
        IF (ismultiguarantor2match(cpr2.person_id,prrawguarresp->guarantors[gcnt].guarantorid2))
         IF (car.cbos_activity_reltn_id <= 0.0
          AND prrawguarresp->guarantors[gcnt].activeind
          AND (prrawguarresp->guarantors[gcnt].guarfinancialrespid > 0.0)
          AND phasgfrind)
          gidx = (size(addcbosactivityreltn->objarray,5)+ 1), stat = alterlist(addcbosactivityreltn->
           objarray,gidx), addcbosactivityreltn->objarray[gidx].parent_entity_name =
          "GUAR_FINANCIAL_RESP",
          addcbosactivityreltn->objarray[gidx].cbos_pe_reltn_id = cper.cbos_pe_reltn_id,
          addcbosactivityreltn->objarray[gidx].parent_entity_id = prrawguarresp->guarantors[gcnt].
          guarfinancialrespid, addcbosactivityreltn->objarray[gidx].beg_effective_dt_tm =
          prrawguarresp->guarantors[gcnt].begineffectivedate,
          addcbosactivityreltn->objarray[gidx].end_effective_dt_tm = prrawguarresp->guarantors[gcnt].
          endeffectivedate, addcbosactivityreltn->objarray[gidx].active_ind = evaluate(prrawguarresp
           ->guarantors[gcnt].activeind,true,true,false)
         ELSEIF (car.cbos_activity_reltn_id > 0.0
          AND ((car.active_ind
          AND (( NOT (prrawguarresp->guarantors[gcnt].activeind)) OR (((abs(datetimediff(car
           .beg_effective_dt_tm,prrawguarresp->guarantors[gcnt].begineffectivedate)) > 0.0) OR (abs(
          datetimediff(car.end_effective_dt_tm,prrawguarresp->guarantors[gcnt].endeffectivedate)) >
         0.0)) )) ) OR (prrawguarresp->guarantors[gcnt].activeind
          AND  NOT (car.active_ind))) )
          gidx = (size(uptcbosactivityreltn->objarray,5)+ 1), stat = alterlist(uptcbosactivityreltn->
           objarray,gidx), uptcbosactivityreltn->objarray[gidx].cbos_activity_reltn_id = car
          .cbos_activity_reltn_id,
          uptcbosactivityreltn->objarray[gidx].parent_entity_name = "GUAR_FINANCIAL_RESP",
          uptcbosactivityreltn->objarray[gidx].updt_cnt = car.updt_cnt, uptcbosactivityreltn->
          objarray[gidx].cbos_pe_reltn_id = cper.cbos_pe_reltn_id,
          uptcbosactivityreltn->objarray[gidx].parent_entity_id = prrawguarresp->guarantors[gcnt].
          guarfinancialrespid, uptcbosactivityreltn->objarray[gidx].beg_effective_dt_tm =
          prrawguarresp->guarantors[gcnt].begineffectivedate, uptcbosactivityreltn->objarray[gidx].
          end_effective_dt_tm = prrawguarresp->guarantors[gcnt].endeffectivedate,
          uptcbosactivityreltn->objarray[gidx].active_ind = evaluate(prrawguarresp->guarantors[gcnt].
           activeind,true,true,false)
         ENDIF
        ENDIF
       WITH nocounter
      ;end select
      SET prrawguarresp->guarantors[gcnt].begineffectivedate = getfacilitybeginningofday(
       prrawguarresp->billingentityid,prrawguarresp->guarantors[gcnt].begineffectivedate)
      SET prrawguarresp->guarantors[gcnt].endeffectivedate = getfacilitybeginningofday(prrawguarresp
       ->billingentityid,prrawguarresp->guarantors[gcnt].endeffectivedate)
    ENDFOR
    IF (size(addcbosactivityreltn->objarray,5) > 0)
     EXECUTE pft_da_add_cbos_activity_reltn  WITH replace("REQUEST",addcbosactivityreltn), replace(
      "REPLY",replycbosactivityreltn)
     IF ((replycbosactivityreltn->status_data.status != "S"))
      CALL logmessage("updateCbosActivityReltn","pft_da_add_cbos_activity_reltn failed",log_error)
      SET rtnval = false
     ENDIF
    ENDIF
    IF (size(uptcbosactivityreltn->objarray,5) > 0)
     EXECUTE pft_da_upt_cbos_activity_reltn  WITH replace("REQUEST",uptcbosactivityreltn), replace(
      "REPLY",replycbosactivityreltn)
     IF ((replycbosactivityreltn->status_data.status != "S"))
      CALL logmessage("updateCbosActivityReltn","pft_da_upt_cbos_activity_reltn failed",log_error)
      SET rtnval = false
     ENDIF
    ENDIF
    IF (validate(debug,- (1)) > 0)
     CALL logmessage("updateCbosActivityReltn","Exiting.......",log_debug)
    ENDIF
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(getinspftprorationbal,char(128))=char(128))
  SUBROUTINE (getinspftprorationbal(ppftencntrid=f8) =f8)
    DECLARE pptransamt = f8 WITH protect, noconstant(0)
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      benefit_order bo,
      bo_hp_reltn bohp,
      pft_proration pp
     PLAN (pe
      WHERE pe.pft_encntr_id=ppftencntrid)
      JOIN (bo
      WHERE bo.pft_encntr_id=pe.pft_encntr_id
       AND bo.active_ind=true
       AND bo.fin_class_cd != cs354_selfpay_cd)
      JOIN (bohp
      WHERE bohp.benefit_order_id=bo.benefit_order_id
       AND bohp.active_ind=true)
      JOIN (pp
      WHERE pp.bo_hp_reltn_id=bohp.bo_hp_reltn_id
       AND pp.active_ind=true)
     ORDER BY bo.benefit_order_id, bohp.bo_hp_reltn_id
     DETAIL
      pptransamt += evaluate(pp.total_pay_amt_dr_cr_flag,2,(pp.total_pay_amt * - (1)),pp
       .total_pay_amt), pptransamt += evaluate(pp.total_adj_dr_cr_flag,2,(pp.total_adj * - (1)),pp
       .total_adj), pptransamt -= evaluate(pp.curr_amount_dr_cr_flag,2,(pp.curr_amt_due * - (1)),pp
       .curr_amt_due)
     WITH nocounter
    ;end select
    RETURN(pptransamt)
  END ;Subroutine
 ENDIF
 IF (validate(hasselfpayresponsibility,char(128))=char(128))
  SUBROUTINE (hasselfpayresponsibility(ppftencntrid=f8,prbenefitorders=vc(ref)) =i2)
    DECLARE rtnval = i2 WITH protect, noconstant(false)
    DECLARE bohpstatuscompleteind = i2 WITH protect, noconstant(false)
    DECLARE isselfpay = i2 WITH protect, noconstant(true)
    DECLARE transferamt = f8 WITH protect, noconstant(0.0)
    SET stat = initrec(prbenefitorders)
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bh,
      daily_acct_bal_reltn dr
     PLAN (bo
      WHERE bo.pft_encntr_id=ppftencntrid
       AND bo.active_ind=true
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
      JOIN (bh
      WHERE bh.benefit_order_id=bo.benefit_order_id
       AND bh.active_ind=true
       AND  NOT (bh.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
      JOIN (dr
      WHERE (dr.parent_entity_id= Outerjoin(bo.benefit_order_id))
       AND (dr.parent_entity_name= Outerjoin("BENEFIT_ORDER"))
       AND (dr.value_criteria_cd= Outerjoin(cs4092002_transfer_cd)) )
     ORDER BY bo.benefit_order_id, dr.daily_acct_bal_reltn_id, bh.bo_hp_reltn_id
     HEAD bo.benefit_order_id
      IF (bo.fin_class_cd=cs354_selfpay_cd)
       stat = alterlist(prbenefitorders->benefitorders,1), prbenefitorders->benefitorders[1].
       benefitorderid = bo.benefit_order_id, prbenefitorders->benefitorders[1].pftencntrid = bo
       .pft_encntr_id
      ELSE
       isselfpay = false
      ENDIF
      transferamt = 0.0
     HEAD dr.daily_acct_bal_reltn_id
      transferamt += nullval(dr.value_amt,0.0)
     HEAD bh.bo_hp_reltn_id
      IF (bh.bo_hp_status_cd=cs24451_complete_cd)
       bohpstatuscompleteind = true
      ENDIF
     FOOT  bo.benefit_order_id
      IF (abs(transferamt) > 0.009)
       bohpstatuscompleteind = true
      ENDIF
     WITH nocounter
    ;end select
    SET prbenefitorders->istrueselfpayflag = isselfpay
    SET rtnval = bor(bohpstatuscompleteind,isselfpay)
    RETURN(rtnval)
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 SUBROUTINE (determinebatchtype(batchtype=i2) =vc)
   DECLARE btype = vc
   CASE (batchtype)
    OF 1:
     SET btype = "Cash Drawer"
    OF 2:
     SET btype = "Batch Trans Entry"
    OF 3:
     SET btype = "EDI 835"
    OF 4:
     SET btype = "Small Balance Write-Offs"
    OF 5:
     SET btype = "Trans Batch Entry - Charge Third Party Post"
    OF 6:
     SET btype = "Trans Batch Entry - Patient Posting"
    OF 7:
     SET btype = "IMaCS"
    OF 8:
     SET btype = "Collection Agency Write-Offs"
    OF 9:
     SET btype = "Client/Research Invoice Batch"
    OF 10:
     SET btype = "Precollections Inbound"
    OF 11:
     SET btype = "Collections inbound"
    OF 12:
     SET btype = "Lockbox "
    OF 500:
     SET btype = "Reversal"
    OF 501:
     SET btype = "Transfer"
    OF 502:
     SET btype = "AdjustForAcct"
    OF 503:
     SET btype = "AdjustForBOHP"
    OF 504:
     SET btype = "AdjustForCharge"
    OF 505:
     SET btype = "AdjustForClaim"
    OF 506:
     SET btype = "AdjustForEncounter"
    OF 507:
     SET btype = "AdjustForInvoice"
    OF 508:
     SET btype = "PaymentForAcct"
    OF 509:
     SET btype = "PaymentForEncounter "
    OF 510:
     SET btype = "PaymentForClaim "
    OF 511:
     SET btype = "PaymentForCharge"
    OF 512:
     SET btype = "PaymentForInvoice "
    OF 513:
     SET btype = "PaymentForStatement "
    OF 514:
     SET btype = "CombinesReversal "
    OF 515:
     SET btype = "UncombinesReversal "
    OF 516:
     SET btype = "SelfPayRemittance "
    OF 517:
     SET btype = "CombinesTransfer "
    OF 518:
     SET btype = "UncombinesTransfer "
    OF 519:
     SET btype = "RegistrationModificationTransfer "
    OF 520:
     SET btype = "Remittance Posting "
    OF 521:
     SET btype = "GuarantorRemittance"
    OF 522:
     SET btype = "RecurringPayment"
    OF 525:
     SET btype = "Partial EDI 835"
    OF 526:
     SET btype = "ApplyRemark"
    OF 527:
     SET btype = "RegistrationModificationReversal "
    OF 528:
     SET btype = "CancelClaimAdjustments"
    OF 529:
     SET btype = "Credit Card Reversal"
    OF 555:
     SET btype = "TransactionDefault "
    OF 557:
     SET btype = "SelpayDiscount"
    OF 558:
     SET btype = "AdjustForLineItem"
    OF 530:
     SET btype = "Retail Pharmacy"
    OF 531:
     SET btype = "External Encounter Remittance"
    OF 532:
     SET btype = "VA Write Off Adjustment"
   ENDCASE
   RETURN(btype)
 END ;Subroutine
 IF (validate(createbatchtext,char(128))=char(128))
  SUBROUTINE (createbatchtext(pbatchtypeflag=i2) =vc)
    CALL logmessage("createBatchText","Enter",log_debug)
    DECLARE username = vc WITH protect, noconstant(curuser)
    DECLARE batchtext = vc WITH private, noconstant("")
    SET batchtext = determinebatchtype(pbatchtypeflag)
    IF (batchtext=null)
     SET batchtext = "TransactionDefault"
    ENDIF
    SELECT INTO "nl:"
     FROM prsnl p
     WHERE (p.person_id=reqinfo->updt_id)
      AND p.active_ind=1
     DETAIL
      username = p.username
     WITH nocounter
    ;end select
    CALL logmessage("createBatchText","Exit",log_debug)
    RETURN(concat(format(cnvtdatetime(sysdate),";;Q")," ",trim(batchtext,3)," ",username))
  END ;Subroutine
 ENDIF
 CALL echo(build("Begin RC_TIMELINE_SUBS_INC, version [",nullterm("RCBACM-22090.013"),"]"))
 CALL echo("Begin PFT_RCA_I18N_CONSTANTS.INC, version [RCBACM-17290]")
 IF (validate(i18nuar_def,999)=999)
  CALL echo("Declaring i18nuar_def")
  DECLARE i18nuar_def = i2 WITH persist
  SET i18nuar_def = 1
  DECLARE uar_i18nlocalizationinit(p1=i4,p2=vc,p3=vc,p4=f8) = i4 WITH persist
  DECLARE uar_i18ngetmessage(p1=i4,p2=vc,p3=vc) = vc WITH persist
  DECLARE uar_i18nbuildmessage() = vc WITH persist
  DECLARE uar_i18ngethijridate(imonth=i2(val),iday=i2(val),iyear=i2(val),sdateformattype=vc(ref)) =
  c50 WITH image_axp = "shri18nuar", image_aix = "libi18n_locale.a(libi18n_locale.o)", uar =
  "uar_i18nGetHijriDate",
  persist
  DECLARE uar_i18nbuildfullformatname(sfirst=vc(ref),slast=vc(ref),smiddle=vc(ref),sdegree=vc(ref),
   stitle=vc(ref),
   sprefix=vc(ref),ssuffix=vc(ref),sinitials=vc(ref),soriginal=vc(ref)) = c250 WITH image_axp =
  "shri18nuar", image_aix = "libi18n_locale.a(libi18n_locale.o)", uar = "i18nBuildFullFormatName",
  persist
  DECLARE uar_i18ngetarabictime(ctime=vc(ref)) = c20 WITH image_axp = "shri18nuar", image_aix =
  "libi18n_locale.a(libi18n_locale.o)", uar = "i18n_GetArabicTime",
  persist
 ENDIF
 DECLARE hi18n = i4 WITH protect, noconstant(0)
 SET stat = uar_i18nlocalizationinit(hi18n,curprog,"",curcclrev)
 IF ( NOT (validate(i18n_professional)))
  DECLARE i18n_professional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Professional","Professional"))
 ENDIF
 IF ( NOT (validate(i18n_institutional)))
  DECLARE i18n_institutional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Institutional","Institutional"))
 ENDIF
 IF ( NOT (validate(i18n_selfpay)))
  DECLARE i18n_selfpay = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.SelfPay","Self Pay"))
 ENDIF
 IF ( NOT (validate(i18n_account)))
  DECLARE i18n_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Account","Account"))
 ENDIF
 IF ( NOT (validate(i18n_appointment)))
  DECLARE i18n_appointment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Appointment","Appointment"))
 ENDIF
 IF ( NOT (validate(i18n_client_account)))
  DECLARE i18n_client_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Client Account","Client Account"))
 ENDIF
 IF ( NOT (validate(i18n_research_account)))
  DECLARE i18n_research_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Research Account","Research Account"))
 ENDIF
 IF ( NOT (validate(i18n_patient_account)))
  DECLARE i18n_patient_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Patient Account","Patient Account"))
 ENDIF
 IF ( NOT (validate(i18n_encounter)))
  DECLARE i18n_encounter = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter","Encounter"))
 ENDIF
 IF ( NOT (validate(i18n_claim)))
  DECLARE i18n_claim = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim","Claim"))
 ENDIF
 IF ( NOT (validate(i18n_imeclaim)))
  DECLARE i18n_imeclaim = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.IME Claim","IME Claim"))
 ENDIF
 IF ( NOT (validate(i18n_charge)))
  DECLARE i18n_charge = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge","Charge"))
 ENDIF
 IF ( NOT (validate(i18n_guarantor)))
  DECLARE i18n_guarantor = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Guarantor","Guarantor"))
 ENDIF
 IF ( NOT (validate(i18n_statement)))
  DECLARE i18n_statement = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Statement","Statement"))
 ENDIF
 IF ( NOT (validate(i18n_payment)))
  DECLARE i18n_payment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Payment","Payment"))
 ENDIF
 IF ( NOT (validate(i18n_adjustment)))
  DECLARE i18n_adjustment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Adjustment","Adjustment"))
 ENDIF
 IF ( NOT (validate(i18n_ap_refund)))
  DECLARE i18n_ap_refund = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.A/P Refund","Refund"))
 ENDIF
 IF ( NOT (validate(i18n_batch)))
  DECLARE i18n_batch = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Batch","Batch"))
 ENDIF
 IF ( NOT (validate(i18n_registration)))
  DECLARE i18n_registration = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Registration","Registration"))
 ENDIF
 IF ( NOT (validate(i18n_authorization)))
  DECLARE i18n_authorization = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Authorization","Authorization"))
 ENDIF
 IF ( NOT (validate(i18n_person)))
  DECLARE i18n_person = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Person","Person"))
 ENDIF
 IF ( NOT (validate(i18n_organization)))
  DECLARE i18n_organization = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Organization","Organization"))
 ENDIF
 IF ( NOT (validate(i18n_balance)))
  DECLARE i18n_balance = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance","Balance"))
 ENDIF
 IF ( NOT (validate(i18n_invoice)))
  DECLARE i18n_invoice = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Invoice","Invoice"))
 ENDIF
 IF ( NOT (validate(i18n_research_invoice)))
  DECLARE i18n_research_invoice = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ResearchInvoice","Research Invoice"))
 ENDIF
 IF ( NOT (validate(i18n_client_invoice)))
  DECLARE i18n_client_invoice = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ClientInvoice","Client Invoice"))
 ENDIF
 IF ( NOT (validate(i18n_line_item)))
  DECLARE i18n_line_item = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Line Item","Line Item"))
 ENDIF
 IF ( NOT (validate(i18n_inpatient)))
  DECLARE i18n_inpatient = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Inpatient","Inpatient"))
 ENDIF
 IF ( NOT (validate(i18n_outpatient)))
  DECLARE i18n_outpatient = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Outpatient","Outpatient"))
 ENDIF
 IF ( NOT (validate(i18n_guarantor_account)))
  DECLARE i18n_guarantor_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Guarantor Account","Guarantor Account"))
 ENDIF
 IF ( NOT (validate(i18n_encounter_in_history)))
  DECLARE i18n_encounter_in_history = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter in history","Encounter in history"))
 ENDIF
 IF ( NOT (validate(i18n_balance_status)))
  DECLARE i18n_balance_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance not ready to bill","Balance not ready to bill"))
 ENDIF
 IF ( NOT (validate(i18n_no_formal_payment_plan)))
  DECLARE i18n_no_formal_payment_plan = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No formal payment plan assigned","No formal payment plan assigned"))
 ENDIF
 IF ( NOT (validate(i18n_formal_pay_plan_no_guar)))
  DECLARE i18n_formal_pay_plan_no_guar = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No guarantor found for the encounter.",
    "No guarantor found for the encounter."))
 ENDIF
 IF ( NOT (validate(i18n_formal_pay_plan_unsup_cons_method)))
  DECLARE i18n_formal_pay_plan_unsup_cons_method = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Unsupported consolidated method.","Unsupported consolidated method."))
 ENDIF
 IF ( NOT (validate(i18n_formal_pay_plan_excluded_enc_type)))
  DECLARE i18n_formal_pay_plan_excluded_enc_type = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter type is excluded from payment plans.",
    "Encounter type is excluded from payment plans."))
 ENDIF
 IF ( NOT (validate(i18n_formal_pay_plan_invalid_sp_bal)))
  DECLARE i18n_formal_pay_plan_invalid_sp_bal = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Zero or credit balance on selfpay balance.",
    "Zero or credit balance on selfpay balance."))
 ENDIF
 IF ( NOT (validate(i18n_formal_payment_plan)))
  DECLARE i18n_formal_payment_plan = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Formal payment plan assigned","Formal payment plan assigned"))
 ENDIF
 IF ( NOT (validate(i18n_ext_formal_pay_plan)))
  DECLARE i18n_ext_formal_pay_plan = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Formal payment plan externally managed",
    "Formal payment plan is managed externally"))
 ENDIF
 IF ( NOT (validate(i18n_hold_disable_msg)))
  DECLARE i18n_hold_disable_msg = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter has one or more holds preventing assignment",
    "Encounter has one or more holds preventing assignment"))
 ENDIF
 IF ( NOT (validate(i18n_hold_be_preference_msg)))
  DECLARE i18n_hold_be_preference_msg = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter has holds and billing entity prevent manual claim gen pref set.",
    "Encounter has holds and billing entity prevent manual claim generation preference is set."))
 ENDIF
 IF ( NOT (validate(i18n_encounter_in_pre_collection)))
  DECLARE i18n_encounter_in_pre_collection = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is assigned to pre-collections",
    "Encounter is assigned to pre-collections"))
 ENDIF
 IF ( NOT (validate(i18n_encounter_in_collection)))
  DECLARE i18n_encounter_in_collection = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is assigned to collections",
    "Encounter is assigned to collections"))
 ENDIF
 IF ( NOT (validate(i18n_encounter_not_in_collection)))
  DECLARE i18n_encounter_not_in_collection = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is Removed from collections",
    "Encounter is Removed from collections"))
 ENDIF
 IF ( NOT (validate(i18n_encounter_not_sent_to_collection)))
  DECLARE i18n_encounter_not_sent_to_collection = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is Not in collections","Encounter is Not in collections"))
 ENDIF
 IF ( NOT (validate(i18n_generate_claim)))
  DECLARE i18n_generate_claim = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance is not ready to bill.","Balance is not ready to bill."))
 ENDIF
 IF ( NOT (validate(i18n_generate_on_demand_statement)))
  DECLARE i18n_generate_on_demand_statement = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance is not ready to bill.","Balance is not ready to bill."))
 ENDIF
 IF ( NOT (validate(i18n_credit_charge_status)))
  DECLARE i18n_credit_charge_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge previously credited","Charge previously credited"))
 ENDIF
 IF ( NOT (validate(i18n_write_off_charge_status)))
  DECLARE i18n_write_off_charge_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge previously written off","Charge previously written off"))
 ENDIF
 IF ( NOT (validate(i18n_write_off_charge_credit_status)))
  DECLARE i18n_write_off_charge_credit_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.A credited charge cannot be written off",
    "A credited charge cannot be written off"))
 ENDIF
 IF ( NOT (validate(i18n_apply_comment_status)))
  DECLARE i18n_apply_comment_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Comment cannot be applied to a denial",
    "Comment cannot be applied to a denial"))
 ENDIF
 IF ( NOT (validate(i18n_transaction_transfered)))
  DECLARE i18n_transaction_transfered = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Transaction previously transfered","Transaction previously transfered"))
 ENDIF
 IF ( NOT (validate(i18n_reverse_trns_for_pay_adj_trans)))
  DECLARE i18n_reverse_trns_for_pay_adj_trans = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Reversal transactions cannot be transferred",
    "Reversal transactions cannot be transferred"))
 ENDIF
 IF ( NOT (validate(i18n_reverse_trns_for_pay_adj_reverse)))
  DECLARE i18n_reverse_trns_for_pay_adj_reverse = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Reversal transactions cannot be reversed",
    "Reversal transactions cannot be reversed"))
 ENDIF
 IF ( NOT (validate(i18n_bad_deb_recovery_adj)))
  DECLARE i18n_bad_deb_recovery_adj = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bad debt recovery cannot be manually transferred",
    "Bad debt recovery cannot be manually transferred"))
 ENDIF
 IF ( NOT (validate(i18n_bad_deb_reversal_adj)))
  DECLARE i18n_bad_deb_reversal_adj = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bad debt reversal cannot be transferred",
    "Bad debt reversal cannot be transferred"))
 ENDIF
 IF ( NOT (validate(i18n_bad_deb_reversal_rev)))
  DECLARE i18n_bad_deb_reversal_rev = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bad debt reversal cannot be reversed",
    "Bad debt reversal cannot be reversed"))
 ENDIF
 IF ( NOT (validate(i18n_reversal_bankruptcy_writeoff)))
  DECLARE i18n_reversal_bankruptcy_writeoff = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bankruptcy write-off cannot be reversed",
    "Bankruptcy write-off cannot be reversed"))
 ENDIF
 IF ( NOT (validate(i18n_reversal_bankruptcy_reversal)))
  DECLARE i18n_reversal_bankruptcy_reversal = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bankruptcy reversal cannot be reversed",
    "Bankruptcy reversal cannot be reversed"))
 ENDIF
 IF ( NOT (validate(i18n_bankruptcy_writeoff)))
  DECLARE i18n_bankruptcy_writeoff = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bankruptcy write-off cannot be transferred",
    "Bankruptcy write-off cannot be transferred"))
 ENDIF
 IF ( NOT (validate(i18n_bankruptcy_reversal)))
  DECLARE i18n_bankruptcy_reversal = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Bankruptcy reversal cannot be transferred",
    "Bankruptcy reversal cannot be transferred"))
 ENDIF
 IF ( NOT (validate(i18n_trans_already_transfered)))
  DECLARE i18n_trans_already_transfered = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Transaction previously transferred","Transaction previously transferred")
   )
 ENDIF
 IF ( NOT (validate(i18n_trans_already_reversed)))
  DECLARE i18n_trans_already_reversed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Transaction previously reversed","Transaction previously reversed"))
 ENDIF
 IF ( NOT (validate(i18n_no_to_balances)))
  DECLARE i18n_no_to_balances = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.There are no balances to transfer to.",
    "There are no balances to transfer to."))
 ENDIF
 IF ( NOT (validate(i18n_balance_zero)))
  DECLARE i18n_balance_zero = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is zero.","The balance is zero."))
 ENDIF
 IF ( NOT (validate(i18n_no_alias_to_modify)))
  DECLARE i18n_no_alias_to_modify = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No alias to modify","No alias to modify"))
 ENDIF
 IF ( NOT (validate(i18n_no_unbilled_late_charges)))
  DECLARE i18n_no_unbilled_late_charges = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No unbilled late charges","No unbilled late charges"))
 ENDIF
 IF ( NOT (validate(i18n_no_unbilled_charges)))
  DECLARE i18n_no_unbilled_charges = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No unbilled charges","No unbilled charges"))
 ENDIF
 IF ( NOT (validate(i18n_balance_canceled)))
  DECLARE i18n_balance_canceled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Associated balance is canceled or invalid.",
    "Associated balance is canceled or invalid."))
 ENDIF
 IF ( NOT (validate(i18n_billed_charge)))
  DECLARE i18n_billed_charge = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge has been billed.","Charge has been billed."))
 ENDIF
 IF ( NOT (validate(i18n_selfpay_only_charge)))
  DECLARE i18n_selfpay_only_charge = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Charge is associated to Self Pay Charge Group Only.",
    "Charge is associated to Self Pay Charge Group Only."))
 ENDIF
 IF ( NOT (validate(i18n_remittance_zero_payment)))
  DECLARE i18n_remittance_zero_payment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Remittance with a zero payment amount",
    "Remittance with a zero payment amount"))
 ENDIF
 IF ( NOT (validate(i18n_denial)))
  DECLARE i18n_denial = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Denial","Denial"))
 ENDIF
 IF ( NOT (validate(i18n_remove_charge_batch)))
  DECLARE i18n_remove_charge_batch = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot delete a posted or submitted batch",
    "Cannot delete a posted or submitted batch"))
 ENDIF
 IF ( NOT (validate(i18n_unsupported_task)))
  DECLARE i18n_unsupported_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The task is unsupported.","The task is unsupported."))
 ENDIF
 IF ( NOT (validate(i18n_ime_apply_adjustment_task)))
  DECLARE i18n_ime_apply_adjustment_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Adjustment can not be applied to IME claims.",
    "Adjustment can not be applied to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_ime_apply_comment_task)))
  DECLARE i18n_ime_apply_comment_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Comment can not be applied to IME claims.",
    "Comment can not be applied to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_ime_apply_action_code_task)))
  DECLARE i18n_ime_apply_action_code_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Action code can not applied to IME claims.",
    "Action code can not applied to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_ime_apply_remark_task)))
  DECLARE i18n_ime_apply_remark_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Remark can not be applied to IME claims.",
    "Remark can not be applied to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_corsp_not_cancelled)))
  DECLARE i18n_corsp_not_cancelled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Correspondence not in cancellable status.",
    "Correspondence not in cancellable status."))
 ENDIF
 IF ( NOT (validate(i18n_corsp_not_delivered)))
  DECLARE i18n_corsp_not_delivered = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Correspondence not in delivered status.",
    "Correspondence not in delivered status."))
 ENDIF
 IF ( NOT (validate(i18n_encounter_has_baddebt_or_in_coll)))
  DECLARE i18n_encounter_has_baddebt_or_in_coll = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter has bad debt or in collections.",
    "Encounter has bad debt or in collections."))
 ENDIF
 IF ( NOT (validate(i18n_encounter_already_combined_away)))
  DECLARE i18n_encounter_already_combined_away = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is already combined away.",
    "Encounter is already combined away."))
 ENDIF
 IF ( NOT (validate(i18n_pending_reg_mod_hold)))
  DECLARE i18n_pending_reg_mod_hold = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The pending registration modification hold cannot be released.",
    "The pending registration modification hold cannot be released."))
 ENDIF
 IF ( NOT (validate(i18n_encounter_already_packaged)))
  DECLARE i18n_encounter_already_packaged = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Encounter is already packaged.","Encounter is already packaged."))
 ENDIF
 IF ( NOT (validate(i18n_statement_cycle_is_workflow_model)))
  DECLARE i18n_statement_cycle_is_workflow_model = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Statement cycle is being managed by a workflow model. See Workflow view.",
    "Statement cycle is being managed by a workflow model. See Workflow view."))
 ENDIF
 IF ( NOT (validate(i18n_pharmanet_charge)))
  DECLARE i18n_pharmanet_charge = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Disabling the task as it is a PharmaNet charge.",
    "Disabling the task as it is a PharmaNet charge."))
 ENDIF
 IF ( NOT (validate(i18n_corsp_img_not_available)))
  DECLARE i18n_corsp_img_not_available = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Correspondence image is not available.",
    "Correspondence image is not available."))
 ENDIF
 IF ( NOT (validate(i18n_posted_unbilled)))
  DECLARE i18n_posted_unbilled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Posted - Unbilled","Posted - Unbilled"))
 ENDIF
 IF ( NOT (validate(i18n_posted_billed)))
  DECLARE i18n_posted_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Posted - Billed","Posted - Billed"))
 ENDIF
 IF ( NOT (validate(i18n_posted_suppressed)))
  DECLARE i18n_posted_suppressed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Posted - Suppressed","Posted - Suppressed"))
 ENDIF
 IF ( NOT (validate(i18n_credited_billed)))
  DECLARE i18n_credited_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Credited - Billed","Credited - Billed"))
 ENDIF
 IF ( NOT (validate(i18n_credited_suppressed)))
  DECLARE i18n_credited_suppressed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Credited - Suppressed","Credited - Suppressed"))
 ENDIF
 IF ( NOT (validate(i18n_written_off_unbilled)))
  DECLARE i18n_written_off_unbilled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Written Off - Unbilled","Written Off - Unbilled"))
 ENDIF
 IF ( NOT (validate(i18n_written_off_billed)))
  DECLARE i18n_written_off_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Written Off - Billed","Written Off - Billed"))
 ENDIF
 IF ( NOT (validate(i18n_adjusted_unbilled)))
  DECLARE i18n_adjusted_unbilled = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Adjusted - Unbilled","Adjusted - Unbilled"))
 ENDIF
 IF ( NOT (validate(i18n_adjusted_billed)))
  DECLARE i18n_adjusted_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Adjusted - Billed","Adjusted - Billed"))
 ENDIF
 IF ( NOT (validate(i18n_late_debit)))
  DECLARE i18n_late_debit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Late Debit","Late Debit"))
 ENDIF
 IF ( NOT (validate(i18n_late_credit)))
  DECLARE i18n_late_credit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Late Credit","Late Credit"))
 ENDIF
 IF ( NOT (validate(i18n_late_debit_late_credit)))
  DECLARE i18n_late_debit_late_credit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Late Debit / Late Credit","Late Debit / Late Credit"))
 ENDIF
 IF ( NOT (validate(i18n_add_billing_hold)))
  DECLARE i18n_add_billing_hold = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot apply a billing hold to a self pay balance",
    "Cannot apply a billing hold to a self pay balance"))
 ENDIF
 IF ( NOT (validate(i18n_self_pay)))
  DECLARE i18n_self_pay = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Self Pay","Self Pay"))
 ENDIF
 IF ( NOT (validate(i18n_ime)))
  DECLARE i18n_ime = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.IME",
    "IME"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_primary)))
  DECLARE i18n_sequence_primary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Primary","Primary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_secondary)))
  DECLARE i18n_sequence_secondary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Secondary","Secondary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_tertiary)))
  DECLARE i18n_sequence_tertiary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Tertiary","Tertiary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_quaternary)))
  DECLARE i18n_sequence_quaternary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Quaternary","Quaternary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_quinary)))
  DECLARE i18n_sequence_quinary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Quinary","Quinary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_senary)))
  DECLARE i18n_sequence_senary = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Senary","Senary"))
 ENDIF
 IF ( NOT (validate(i18n_sequence_unknown)))
  DECLARE i18n_sequence_unknown = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Unknown","Unknown"))
 ENDIF
 IF ( NOT (validate(i18n_claim_not_cancelable)))
  DECLARE i18n_claim_not_cancelable = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim not in cancelable status","Claim not in cancelable status"))
 ENDIF
 IF ( NOT (validate(i18n_claim_not_replaceble)))
  DECLARE i18n_claim_not_replaceble = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim not in a replaceble status","Claim not in a replaceble status"))
 ENDIF
 IF ( NOT (validate(i18n_claim_not_deniable)))
  DECLARE i18n_claim_not_deniable = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim not in deniable status","Claim not in deniable status"))
 ENDIF
 IF ( NOT (validate(i18n_claim_not_voidable)))
  DECLARE i18n_claim_not_voidable = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Claim not in a voidable status","Claim not in a voidable status"))
 ENDIF
 IF ( NOT (validate(i18n_no_pricing_detail)))
  DECLARE i18n_no_pricing_detail = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No external identifier found for transaction. Cannot view Pricing Detail.",
    "No external identifier found for transaction. Cannot view Pricing Detail."))
 ENDIF
 IF ( NOT (validate(i18n_no_apply_remark)))
  DECLARE i18n_no_apply_remark = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Remark cannot be applied on Cancelled/Denied/Rejected claim or self",
    "Remark cannot be applied on Cancelled/Denied/Rejected claim or selfpay claims or invalid/cancelled balance."
    ))
 ENDIF
 IF ( NOT (validate(i18n_move_chrg_no_qual_chrg)))
  DECLARE i18n_move_chrg_no_qual_chrg = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.No qualifying charges on the source financial encounter.",
    "No qualifying charges on the source financial encounter."))
 ENDIF
 IF ( NOT (validate(i18n_move_chrg_no_enc_reltn)))
  DECLARE i18n_move_chrg_no_enc_reltn = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.There is no relationship between selected encounters",
    "There is no relationship between selected encounters. Unable to move charges."))
 ENDIF
 IF ( NOT (validate(i18n_move_chrg_same_encntrs)))
  DECLARE i18n_move_chrg_same_encntrs = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Same source and target clinical encounters.",
    "Same source and target clinical encounters."))
 ENDIF
 IF ( NOT (validate(i18n_move_chrg_credit)))
  DECLARE i18n_move_chrg_credit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot move a credited charge.","Cannot move a credited charge."))
 ENDIF
 IF ( NOT (validate(i18n_modify_chrg_credit)))
  DECLARE i18n_modify_chrg_credit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot modify a credited charge.","Cannot modify a credited charge."))
 ENDIF
 IF ( NOT (validate(i18n_invalid_balance)))
  DECLARE i18n_invalid_balance = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Voided","Voided"))
 ENDIF
 IF ( NOT (validate(i18n_task_system_error)))
  DECLARE i18n_task_system_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.A system error occurred.","A system error occurred."))
 ENDIF
 IF ( NOT (validate(i18n_separator_semicolon)))
  DECLARE i18n_separator_semicolon = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.SEMICOLON","; "))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_error)))
  DECLARE i18n_task_compl_bal_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to complete the balance.",
    "The system is unable to complete the balance."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_not_insurance)))
  DECLARE i18n_task_compl_bal_not_insurance = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not an insurance balance.",
    "The balance is not an insurance balance."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_invalid_status)))
  DECLARE i18n_task_compl_bal_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not currently in a status that can be set as Complete.",
    "The balance is not currently in a status that can be set as Complete."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_next_bal_invalid_status)))
  DECLARE i18n_task_compl_bal_next_bal_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The next balance in the coord of benefits cant be set to Rdy2Bill.",
    "The next balance in the coordination of benefits cannot be set to a Ready to Bill status."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_remaining_credit_amt)))
  DECLARE i18n_task_compl_bal_remaining_credit_amt = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a remaining credit amount.",
    "The balance has a remaining credit amount."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_encntr_hist)))
  DECLARE i18n_task_compl_bal_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_claim_den_pend_rev)))
  DECLARE i18n_task_compl_bal_claim_den_pend_rev = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_compl_bal_success)))
  DECLARE i18n_task_compl_bal_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance was successfully completed.",
    "The balance was successfully completed."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_error)))
  DECLARE i18n_task_set_bal_rtb_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to set the balance as Ready to Bill.",
    "The system is unable to set the balance as Ready to Bill."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_invalid_status)))
  DECLARE i18n_task_set_bal_rtb_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not currently in a status that can be set as Ready to Bill.",
    "The balance is not currently in a status that can be set as Ready to Bill."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_remaining_credit_amt)))
  DECLARE i18n_task_set_bal_rtb_remaining_credit_amt = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a remaining credit amount.",
    "The balance has a remaining credit amount."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_encntr_hist)))
  DECLARE i18n_task_set_bal_rtb_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_claim_den_pend_rev)))
  DECLARE i18n_task_set_bal_rtb_claim_den_pend_rev = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_rtb_success)))
  DECLARE i18n_task_set_bal_rtb_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance status was successfully set as Ready to Bill.",
    "The balance status was successfully set as Ready to Bill."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_error)))
  DECLARE i18n_task_set_bal_wpbc_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to set the balance as Waiting Prev Bal Compl",
    "The system is unable to set the balance as Waiting Previous Balance Completion."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_invalid_status)))
  DECLARE i18n_task_set_bal_wpbc_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not in a status that can be set as Waiting Prev Bal Compl",
    "The balance is not currently in a status that can be set as Waiting Previous Balance Completion."
    ))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_remaining_credit_amt)))
  DECLARE i18n_task_set_bal_wpbc_remaining_credit_amt = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a remaining credit amount.",
    "The balance has a remaining credit amount."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_encntr_hist)))
  DECLARE i18n_task_set_bal_wpbc_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_claim_den_pend_rev)))
  DECLARE i18n_task_set_bal_wpbc_claim_den_pend_rev = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_wpbc_success)))
  DECLARE i18n_task_set_bal_wpbc_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance status was successfully set as Waiting Prev Bal Compl",
    "The balance status was successfully set as Waiting Previous Balance Completion."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_error)))
  DECLARE i18n_task_set_bal_generated_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to set the balance as Generated.",
    "The system is unable to set the balance as Generated."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_invalid_status)))
  DECLARE i18n_task_set_bal_generated_invalid_status = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance is not in a status that can be set as Waiting Prev Bal Compl",
    "The balance is not currently in a status that can be set as Waiting Previous Balance Completion."
    ))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_remaining_credit_amt)))
  DECLARE i18n_task_set_bal_generated_remaining_credit_amt = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.The balance has a remaining credit amount.",
    "The balance has a remaining credit amount."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_encntr_hist)))
  DECLARE i18n_task_set_bal_generated_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_claim_den_pend_rev)))
  DECLARE i18n_task_set_bal_generated_claim_den_pend_rev = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_no_claim)))
  DECLARE i18n_task_set_bal_generated_no_claim = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance does not currently have a valid claim.",
    "The balance does not currently have a valid claim."))
 ENDIF
 IF ( NOT (validate(i18n_task_set_bal_generated_success)))
  DECLARE i18n_task_set_bal_generated_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance status was successfully set as Generated.",
    "The balance status was successfully set as Generated."))
 ENDIF
 IF ( NOT (validate(i18n_task_generate_interim_not_available)))
  DECLARE i18n_task_generate_interim_not_available = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The task is not allowed","The task is not allowed"))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_late_charges_claim_den_pend_rev)))
  DECLARE i18n_task_bill_late_charges_claim_den_pend_rev = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The balance has a claim in a Denied Pending Review status.",
    "The balance has a claim in a Denied Pending Review status."))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_late_charges_encntr_hist)))
  DECLARE i18n_task_bill_late_charges_encntr_hist = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance is associated to an encounter in history.",
    "The balance is associated to an encounter in history."))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_late_charges_error)))
  DECLARE i18n_task_bill_late_charges_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The system is unable to bill late charges.",
    "The system is unable to bill late charges."))
 ENDIF
 IF ( NOT (validate(i18n_task_associate_bal_not_institutional)))
  DECLARE i18n_task_associate_bal_not_institutional = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.The balance is not an institutional balance.",
    "The balance is not an institutional balance."))
 ENDIF
 IF ( NOT (validate(i18n_task_associate_bal_already_billed)))
  DECLARE i18n_task_associate_bal_already_billed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.The intitutional balance has already been billed.",
    "The intitutional balance has already been billed."))
 ENDIF
 IF ( NOT (validate(i18n_task_associate_bal_no_professional)))
  DECLARE i18n_task_associate_bal_no_professional = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.There are no professional balances to associate to.",
    "There are no professional balances to associate to."))
 ENDIF
 IF ( NOT (validate(billing_with_professional)))
  DECLARE billing_with_professional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.billing_with_professional","Billing With Professional"))
 ENDIF
 IF ( NOT (validate(billing_on_institutional)))
  DECLARE billing_on_institutional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.billing_on_institutional","Billing On Institutional"))
 ENDIF
 IF ( NOT (validate(billing_with_institutional)))
  DECLARE billing_with_institutional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.billing_with_institutional","Billing With Institutional"))
 ENDIF
 IF ( NOT (validate(billing_on_professional)))
  DECLARE billing_on_professional = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.billing_on_professional","Billing On Professional"))
 ENDIF
 IF ( NOT (validate(i18n_assoc_bal_ins_error)))
  DECLARE i18n_assoc_bal_ins_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.assocBalInsError",
    "A system error has occurred. Unable to associate balances for billing."))
 ENDIF
 IF ( NOT (validate(i18n_assoc_bal_upt_error)))
  DECLARE i18n_assoc_bal_upt_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.assocBalUptError",
    "A system error has occurred. Unable to update balance associations for billing."))
 ENDIF
 IF ( NOT (validate(i18n_assoc_bal_success)))
  DECLARE i18n_assoc_bal_success = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.assocBalSuccess","Balance associations saved."))
 ENDIF
 IF ( NOT (validate(i18n_task_balance_associated_error)))
  DECLARE i18n_task_balance_associated_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance association made.","Balance association made."))
 ENDIF
 IF ( NOT (validate(i18n_uploaded_via_batch)))
  DECLARE i18n_uploaded_via_batch = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Uploaded via batch","Uploaded via batch"))
 ENDIF
 IF ( NOT (validate(i18n_task_mod_pat_resp_no_single_group_per_cg)))
  DECLARE i18n_task_mod_pat_resp_no_single_group_per_cg = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance must be associated to single-charge charge group",
    "Balance must be associated to single-charge charge group"))
 ENDIF
 IF ( NOT (validate(i18n_task_mod_pat_resp_self_pay)))
  DECLARE i18n_task_mod_pat_resp_self_pay = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Cannot modify patient responsibility for self pay balance",
    "Cannot modify patient responsibility for self pay balance"))
 ENDIF
 IF ( NOT (validate(i18n_task_mod_pat_resp_invalid_cg_status)))
  DECLARE i18n_task_mod_pat_resp_invalid_cg_status = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.Charge group is in an invalid status",
    "Charge group is in an invalid status"))
 ENDIF
 IF ( NOT (validate(i18n_task_mod_pat_resp_invalid_balance_status)))
  DECLARE i18n_task_mod_pat_resp_invalid_balance_status = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.Balance is in an invalid status",
    "Balance is in an invalid status"))
 ENDIF
 IF ( NOT (validate(i18n_task_image_action_unauthorized)))
  DECLARE i18n_task_image_action_unauthorized = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Image action unauthorized for user.",
    "Image action unauthorized for user."))
 ENDIF
 IF ( NOT (validate(i18n_ime_add_image_task)))
  DECLARE i18n_ime_add_image_task = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Image can not be added to IME claims.",
    "Image can not be added to IME claims."))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_submitted)))
  DECLARE i18n_view_batch_submitted = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_SUBMITTED","Waiting to Post"))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_presubmit)))
  DECLARE i18n_view_batch_presubmit = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_PRESUBMIT","Pre-Submit"))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_posted)))
  DECLARE i18n_view_batch_posted = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_POSTED","Posted"))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_pending)))
  DECLARE i18n_view_batch_pending = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_PENDING","Open"))
 ENDIF
 IF ( NOT (validate(i18n_view_batch_errored)))
  DECLARE i18n_view_batch_errored = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.BATCH_ERRORED","In Error"))
 ENDIF
 IF ( NOT (validate(i18n_task_cancelbatchtask)))
  DECLARE i18n_task_cancelbatchtask = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.TASK_CANCEL_BATCH","Cancel Remittance"))
 ENDIF
 IF ( NOT (validate(i18n_system)))
  DECLARE i18n_system = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.LABEL_SYSTEM","System"))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_as_prof_error)))
  DECLARE i18n_task_bill_as_prof_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance cannot be billed as professional.",
    "Balance cannot be billed as professional."))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_as_ins_error)))
  DECLARE i18n_task_bill_as_ins_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance cannot be billed as institutional.",
    "Balance cannot be billed as institutional."))
 ENDIF
 IF ( NOT (validate(i18n_task_bill_as_prof_or_ins_error)))
  DECLARE i18n_task_bill_as_prof_or_ins_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Balance is not in a status to be billed.",
    "Balance is not in a status to be billed."))
 ENDIF
 IF ( NOT (validate(i18n_refund)))
  DECLARE i18n_refund = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Refund","Refund"))
 ENDIF
 IF ( NOT (validate(i18n_refund_id)))
  DECLARE i18n_refund_id = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Refund Id","Refund Id"))
 ENDIF
 IF ( NOT (validate(i18n_refund_amt)))
  DECLARE i18n_refund_amt = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Refund Amount","Refund Amount"))
 ENDIF
 IF ( NOT (validate(i18n_voided_refund_payment_desc)))
  DECLARE i18n_voided_refund_payment_desc = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Payment to Offset Voided Refund, Refund Id:",
    "Payment to Offset Voided Refund, Refund Id:"))
 ENDIF
 IF ( NOT (validate(i18n_reminder_title)))
  DECLARE i18n_reminder_title = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.REMINDER_TITLE","Reminder"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_title)))
  DECLARE i18n_escalation_title = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_TITLE","Escalation"))
 ENDIF
 IF ( NOT (validate(i18n_reminder_reason_label)))
  DECLARE i18n_reminder_reason_label = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.REMINDER_REASON_LABEL","Reminder Reason:"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_reason_label)))
  DECLARE i18n_escalation_reason_label = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_REASON_LABEL","Escalation Reason:"))
 ENDIF
 IF ( NOT (validate(i18n_reminder_reason_assignee)))
  DECLARE i18n_reminder_reason_assignee = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.REMINDER_REASON_ASSIGNEE","Reminder for assignee of work item"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_reason)))
  DECLARE i18n_escalation_reason = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_REASON","Escalation for incomplete work item"))
 ENDIF
 IF ( NOT (validate(i18n_reminder_message)))
  DECLARE i18n_reminder_message = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.REMINDER_MESSAGE","Reminder: Work Item Overdue"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_message)))
  DECLARE i18n_escalation_message = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_MESSAGE","Escalation: Work Item Overdue"))
 ENDIF
 IF ( NOT (validate(i18n_escalation_text)))
  DECLARE i18n_escalation_text = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ESCALATION_TEXT","ESCALATION: Work Item Overdue for"))
 ENDIF
 IF ( NOT (validate(i18n_resolver_label)))
  DECLARE i18n_resolver_label = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.RESOLVER_LABEL","Resolver:"))
 ENDIF
 IF ( NOT (validate(i18n_auto_approve_failure_workitem_description)))
  DECLARE i18n_auto_approve_failure_workitem_description = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.AUTO_APPROVE_FAILURE_WORKITEM_DESCRIPTION",
    "Adjustment in pending due to failure of WTP auto-approval"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_missing_payee_id_description)))
  DECLARE i18n_fsi_missing_payee_id_description = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.FSI_MISSING_PAYEE_ID_DESCRIPTION","Missing Payee Id"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_locate_logical_domain_description)))
  DECLARE i18n_fsi_fail_locate_logical_domain_description = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.FSI_FAIL_LOCATE_LOGICAL_DOMAIN_DESCRIPTION",
    "Unable to find organization Logical domain"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_set_logical_domain_description)))
  DECLARE i18n_fsi_fail_set_logical_domain_description = vc WITH protect, constant(uar_i18ngetmessage
   (hi18n,"PFT_RCA_I18N_CONSTANTS.FSI_FAIL_SET_LOGICAL_DOMAIN_DESCRIPTION",
    "Failed to set the logical domain"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_missing_payee_and_health_plan_id_description)))
  DECLARE i18n_fsi_fail_missing_payee_and_health_plan_id_description = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.FSI_FAIL_MISSING_PAYEE_AND_HEALTH_PLAN_ID_DESCRIPTION",
    "Missing Payer ID and Health Plan ID"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_find_gl_ar_acct_description)))
  DECLARE i18n_fsi_fail_find_gl_ar_acct_description = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.FSI_FAIL_FIND_GL_AR_ACCT_DESCRIPTION",
    "Unable to Find General A/R Account information"))
 ENDIF
 IF ( NOT (validate(i18n_fsi_fail_find_non_gl_ar_acct_description)))
  DECLARE i18n_fsi_fail_find_non_gl_ar_acct_description = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.FSI_FAIL_FIND_NON_GL_AR_ACCT_DESCRIPTION",
    "Unable to Find Non A/R GL Account information"))
 ENDIF
 CALL echo("End PFT_RCA_I18N_CONSTANTS.INC")
 IF ( NOT (validate(i18n_workflow_model)))
  DECLARE i18n_workflow_model = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.WORKFLOW_MODEL","Workflow Model: "))
 ENDIF
 IF ( NOT (validate(i18n_reset_status)))
  DECLARE i18n_reset_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.RESET_STATUS","model has been Reset."))
 ENDIF
 IF ( NOT (validate(i18n_resume_status)))
  DECLARE i18n_resume_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.RESUME_STATUS","model has been Resumed."))
 ENDIF
 IF ( NOT (validate(i18n_pause_status)))
  DECLARE i18n_pause_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.PAUSE_STATUS","model has been Paused."))
 ENDIF
 IF ( NOT (validate(i18n_cancel_status)))
  DECLARE i18n_cancel_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.CANCEL_STATUS","model has been Cancelled."))
 ENDIF
 IF ( NOT (validate(i18n_complete_status)))
  DECLARE i18n_complete_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.COMPLETE_STATUS","model completed."))
 ENDIF
 IF ( NOT (validate(i18n_workflow_event)))
  DECLARE i18n_workflow_event = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.WORKFLOW_EVENT","Workflow Event : "))
 ENDIF
 IF ( NOT (validate(i18n_error_cancelling_workflow)))
  DECLARE i18n_error_cancelling_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_CANCELLING_WORKFLOW","Workflow Error Occurred Cancelling Workflow")
   )
 ENDIF
 IF ( NOT (validate(i18n_error_resetting_workflow)))
  DECLARE i18n_error_resetting_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_RESETTING_WORKFLOW","Workflow Error Occurred Resetting Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_resuming_workflow)))
  DECLARE i18n_error_resuming_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_RESUMING_WORKFLOW","Workflow Error Occurred Resuming Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_pausing_workflow)))
  DECLARE i18n_error_pausing_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_PAUSING_WORKFLOW","Workflow Error Occurred Pausing Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_starting_workflow)))
  DECLARE i18n_error_starting_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_STARTING_WORKFLOW","Workflow Error Occurred Starting Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_progressing_workflow)))
  DECLARE i18n_error_progressing_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_PROGRESSING_WORKFLOW",
    "Workflow Error Occurred Progressing Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_error_publishing_workflow)))
  DECLARE i18n_error_publishing_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_PUBLISHING_WORKFLOW","Workflow Error Occurred Publishing Workflow")
   )
 ENDIF
 IF ( NOT (validate(i18n_error_handling_workflow)))
  DECLARE i18n_error_handling_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.ERROR_HANDLING_WORKFLOW","Workflow Error Occurred Handling Workflow"))
 ENDIF
 IF ( NOT (validate(i18n_autoactionerror_handling_workflow)))
  DECLARE i18n_autoactionerror_handling_workflow = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.AUTOACTIONERROR_HANDLING_WORKFLOW","Automated Action Error"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_default_description)))
  DECLARE i18n_workflow_error_default_description = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.WORKFLOW_ERROR_DEFAULT_DESCRIPTION",
    "Workflow Action Error Occurred"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_default_comment)))
  DECLARE i18n_workflow_error_default_comment = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.WORKFLOW_ERROR_DEFAULT_COMMENT","Model Unidentified"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_cancel_resolution)))
  DECLARE i18n_workflow_error_cancel_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_CANCEL_RESOLUTION",
    "Manually cancel the workflow using the cancel task"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_pause_resolution)))
  DECLARE i18n_workflow_error_pause_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_PAUSE_RESOLUTION",
    "Manually pause the workflow using the pause task"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_progress_resolution)))
  DECLARE i18n_workflow_error_progress_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_PROGRESS_RESOLUTION",
    "Manually cancel the workflow, then use the Identify Work item functionality to identify the next work item in the flow"
    ))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_publish_resolution)))
  DECLARE i18n_workflow_error_publish_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_PUBLISH_RESOLUTION",
    "Manually start the workflow using the Identify Work Item functionality"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_reset_resolution)))
  DECLARE i18n_workflow_error_reset_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_RESET_RESOLUTION",
    "Manually reset the workflow using the reset task"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_resume_resolution)))
  DECLARE i18n_workflow_error_resume_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_RESUME_RESOLUTION",
    "Manually resume the workflow using the resume task"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_start_resolution)))
  DECLARE i18n_workflow_error_start_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_START_RESOLUTION",
    "Manually start the workflow using the Identify Work Item functionalilty"))
 ENDIF
 IF ( NOT (validate(i18n_workflow_error_handle_resolution)))
  DECLARE i18n_workflow_error_handle_resolution = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKFLOW_ERROR_HANDLE_RESOLUTION","Handle Error Resolution Text."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_down)))
  DECLARE i18n_pharmacy_claim_server_down = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_DOWN",
    "Pharmacy claims query service is down or not responding."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_returned_invalid)))
  DECLARE i18n_pharmacy_claim_server_returned_invalid = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_RETURNED_INVALID",
    "Pharmacy claims server returned invalid claims."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_error)))
  DECLARE i18n_pharmacy_claim_server_error = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_ERROR",
    "Pharmacy claims server failed with error : "))
 ENDIF
 IF ( NOT (validate(i18n_faux_claim_creation_failed)))
  DECLARE i18n_faux_claim_creation_failed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_FAUX_CLAIM_CREATION_FAILED","Creation of faux claim returned error."
    ))
 ENDIF
 IF ( NOT (validate(i18n_faux_claim_canceled_failed)))
  DECLARE i18n_faux_claim_canceled_failed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_FAUX_CLAIM_CANCELED_FAILED",
    "Cancelling a faux claim returned error."))
 ENDIF
 IF ( NOT (validate(i18n_balance_status_update_failed)))
  DECLARE i18n_balance_status_update_failed = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_BALANCE_STATUS_UPDATE_FAILED",
    "Failed to update the balance status to generated."))
 ENDIF
 IF ( NOT (validate(i18n_health_plans_not_matched)))
  DECLARE i18n_health_plans_not_matched = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_HEALTH_PLANS_NOT_MATCHED",
    "Health plans on pharmacy claims did not match with that on encounter."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_down_resolution)))
  DECLARE i18n_pharmacy_claim_server_down_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_DOWN_RESOLUTION",
    "Verify if Pharmacy claims server is running."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_returned_invalid_resolution)))
  DECLARE i18n_pharmacy_claim_server_returned_invalid_resolution = vc WITH protect, constant(
   uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_RETURNED_INVALID_RESOLUTION",
    "Verify if the external master event id sent to Pharmacy claims server is valid."))
 ENDIF
 IF ( NOT (validate(i18n_pharmacy_claim_server_error_resolution)))
  DECLARE i18n_pharmacy_claim_server_error_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_PHARMACY_CLAIM_SERVER_ERROR_RESOLUTION",
    "Pharmacy claims server is throwing an error that has to be resolved."))
 ENDIF
 IF ( NOT (validate(i18n_faux_claim_creation_failed_resolution)))
  DECLARE i18n_faux_claim_creation_failed_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_FAUX_CLAIM_CREATION_FAILED_RESOLUTION",
    "Verify if the claims returned from pharmacy server are valid."))
 ENDIF
 IF ( NOT (validate(i18n_faux_claim_canceled_failed_resolution)))
  DECLARE i18n_faux_claim_canceled_failed_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_FAUX_CLAIM_CANCELED_FAILED_RESOLUTION",
    "Verify if the claim status is valid for canceling."))
 ENDIF
 IF ( NOT (validate(i18n_balance_status_update_failed_resolution)))
  DECLARE i18n_balance_status_update_failed_resolution = vc WITH protect, constant(uar_i18ngetmessage
   (hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_BALANCE_STATUS_UPDATE_FAILED_RESOLUTION",
    "Verify if the balance is in valid state."))
 ENDIF
 IF ( NOT (validate(i18n_health_plans_not_matched_resolution)))
  DECLARE i18n_health_plans_not_matched_resolution = vc WITH protect, constant(uar_i18ngetmessage(
    hi18n,"PFT_RCA_I18N_CONSTANTS.I18N_HEALTH_PLANS_NOT_MATCHED_RESOLUTION",
    "Verify if all the health plans are added to the encounter."))
 ENDIF
 IF ( NOT (validate(i18n_actioncode_alias_inuse)))
  DECLARE i18n_actioncode_alias_inuse = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ACTIONCODE_ALIAS_INUSE",
    "The alias is already in use. Please enter a unique alias."))
 ENDIF
 IF ( NOT (validate(i18n_actioncode_name_inuse)))
  DECLARE i18n_actioncode_name_inuse = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ACTIONCODE_NAME_INUSE",
    "The name is already in use. Please enter a unique name."))
 ENDIF
 IF ( NOT (validate(i18n_workitem_workflow_status)))
  DECLARE i18n_workitem_workflow_status = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_WORKITEM_WORKFLOW_STATUS","WorkItem with Workflow Status"))
 ENDIF
 IF ( NOT (validate(i18n_assigned_from)))
  DECLARE i18n_assigned_from = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ASSIGNED_FROM","Assigned from"))
 ENDIF
 IF ( NOT (validate(i18n_assigned_to)))
  DECLARE i18n_assigned_to = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ASSIGNED_TO","Assigned to"))
 ENDIF
 IF ( NOT (validate(i18n_final_coding_upt)))
  DECLARE i18n_final_coding_upt = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_FINAL_CODING_UPT",
    "Final coding has been updated after billing has been initiated. Please review to ensure the proper DRG."
    ))
 ENDIF
 IF ( NOT (validate(i18n_other)))
  DECLARE i18n_other = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.OTHER","Other"))
 ENDIF
 IF ( NOT (validate(i18n_adjustmentapproval)))
  DECLARE i18n_adjustmentapproval = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ADJUSTMENTAPPROVAL","Adjustment Approval"))
 ENDIF
 IF ( NOT (validate(i18n_statementgeneration)))
  DECLARE i18n_statementgeneration = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_STATEMENTGENERATION","Statement Generation"))
 ENDIF
 IF ( NOT (validate(i18n_assign_fpp_by_external_system)))
  DECLARE i18n_assign_fpp_by_external_system = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_ASSIGN_FPP_BY_EXTERNAL_SYSTEM","Formal payment plan assigned by :"))
 ENDIF
 IF ( NOT (validate(i18n_modify_fpp_by_external_system)))
  DECLARE i18n_modify_fpp_by_external_system = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_MODIFY_FPP_BY_EXTERNAL_SYSTEM","Formal payment plan modified by :"))
 ENDIF
 IF ( NOT (validate(i18n_remove_fpp_by_external_system)))
  DECLARE i18n_remove_fpp_by_external_system = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_REMOVE_FPP_BY_EXTERNAL_SYSTEM","Formal payment plan removed by :"))
 ENDIF
 IF ( NOT (validate(i18n_stmtsuppressionaddedforextfpp)))
  DECLARE i18n_stmtsuppressionaddedforextfpp = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_STMTSUPPRESSIONADDEDFOREXTFPP",
    "Statement Suppression Billing Hold applied."))
 ENDIF
 IF ( NOT (validate(i18n_stmtsuppressionremovedforextfpp)))
  DECLARE i18n_stmtsuppressionremovedforextfpp = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_STMTSUPPRESSIONREMOVEDFOREXTFPP",
    "Statement Suppression Billing Hold removed."))
 ENDIF
 IF ( NOT (validate(i18n_extfppassignedforenc)))
  DECLARE i18n_extfppassignedforenc = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_EXTFPPASSIGNEDFORENC",
    "External Payment Plan assigned for encounter."))
 ENDIF
 IF ( NOT (validate(i18n_task_send_bal_to_collections)))
  DECLARE i18n_task_send_bal_to_collections = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_TASK_SEND_BAL_TO_COLLECTIONS",
    "Cannot send balance to collection as dunning track is not at balance level"))
 ENDIF
 IF ( NOT (validate(i18n_task_modifystatementcycle_bal)))
  DECLARE i18n_task_modifystatementcycle_bal = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.I18N_TASK_MODIFYSTATEMENTCYCLE_BAL",
    "Cannot apply statement cycle to balance as dunning track is not at balance level"))
 ENDIF
 IF ( NOT (validate(i18n_transfer_of)))
  DECLARE i18n_transfer_of = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.Transfer of","Transfer of"))
 ENDIF
 IF ( NOT (validate(i18n_with_alias)))
  DECLARE i18n_with_alias = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.with alias","with alias"))
 ENDIF
 IF ( NOT (validate(i18n_originally_posted)))
  DECLARE i18n_originally_posted = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.originally posted","originally posted"))
 ENDIF
 IF ( NOT (validate(i18n_with_posted_date_of)))
  DECLARE i18n_with_posted_date_of = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.with a posted date of","with a posted date of"))
 ENDIF
 IF ( NOT (validate(i18n_for_amount_of)))
  DECLARE i18n_for_amount_of = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.for the amount of","for the amount of"))
 ENDIF
 IF ( NOT (validate(i18n_from_account)))
  DECLARE i18n_from_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.from account","from account"))
 ENDIF
 IF ( NOT (validate(i18n_to_account)))
  DECLARE i18n_to_account = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.to account","to account"))
 ENDIF
 IF ( NOT (validate(i18n_health_plan)))
  DECLARE i18n_health_plan = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.health plan","health plan"))
 ENDIF
 IF ( NOT (validate(i18n_performed_by)))
  DECLARE i18n_performed_by = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
    "PFT_RCA_I18N_CONSTANTS.performed by","performed by"))
 ENDIF
 IF ( NOT (validate(i18n_on)))
  DECLARE i18n_on = vc WITH protect, constant(uar_i18ngetmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.on",
    "on"))
 ENDIF
 IF (validate(getcodevalue,char(128))=char(128))
  EXECUTE NULL ;noop
 ENDIF
 IF (validate(s_cdf_meaning,char(128))=char(128))
  DECLARE s_cdf_meaning = c12 WITH public, noconstant(fillstring(12," "))
 ENDIF
 IF ((validate(s_code_value,- (0.00001))=- (0.00001)))
  DECLARE s_code_value = f8 WITH public, noconstant(0.0)
 ENDIF
 DECLARE pa_table_name = vc WITH protect, noconstant("")
 SUBROUTINE (getcodevalue(code_set=i4,cdf_meaning=vc,option_flag=i2) =f8)
   SET s_cdf_meaning = cdf_meaning
   SET s_code_value = 0.0
   SET stat = uar_get_meaning_by_codeset(code_set,s_cdf_meaning,1,s_code_value)
   IF (((stat != 0) OR (s_code_value <= 0.0)) )
    SET s_code_value = 0.0
    CASE (option_flag)
     OF 0:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      SET pft_failed = uar_error
      EXECUTE pft_log "getcodevalue", pa_table_name, 0
      GO TO exit_script
     OF 1:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
     OF 2:
      SET pa_table_name = build("INFO-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      EXECUTE pft_log "getcodevalue", pa_table_name, 3
     OF 3:
      SET pa_table_name = build("ERROR-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
       '"',",",option_flag,") not found, CURPROG [",curprog,
       "]")
      CALL echo(pa_table_name)
      CALL err_add_message(pa_table_name)
      SET pft_failed = uar_error
    ENDCASE
   ELSE
    CALL echo(build("SUCCESS-->GetCodeValue (",code_set,",",'"',s_cdf_meaning,
      '"',",",option_flag,") CODE_VALUE [",s_code_value,
      "]"))
   ENDIF
   RETURN(s_code_value)
 END ;Subroutine
 IF (validate(formatcurrency,char(128))=char(128))
  SUBROUTINE (formatcurrency(currencyamount=f8,roundind=i2) =vc)
    IF (validate(i18nuar_def,999)=999)
     CALL echo("Declaring i18nuar_def")
     DECLARE i18nuar_def = i2 WITH persist
     SET i18nuar_def = 1
     DECLARE uar_i18nlocalizationinit(p1=i4,p2=vc,p3=vc,p4=f8) = i4 WITH persist
     DECLARE uar_i18ngetmessage(p1=i4,p2=vc,p3=vc) = vc WITH persist
     DECLARE uar_i18nbuildmessage() = vc WITH persist
     DECLARE uar_i18ngethijridate(imonth=i2(val),iday=i2(val),iyear=i2(val),sdateformattype=vc(ref))
      = c50 WITH image_axp = "shri18nuar", image_aix = "libi18n_locale.a(libi18n_locale.o)", uar =
     "uar_i18nGetHijriDate",
     persist
     DECLARE uar_i18nbuildfullformatname(sfirst=vc(ref),slast=vc(ref),smiddle=vc(ref),sdegree=vc(ref),
      stitle=vc(ref),
      sprefix=vc(ref),ssuffix=vc(ref),sinitials=vc(ref),soriginal=vc(ref)) = c250 WITH image_axp =
     "shri18nuar", image_aix = "libi18n_locale.a(libi18n_locale.o)", uar = "i18nBuildFullFormatName",
     persist
     DECLARE uar_i18ngetarabictime(ctime=vc(ref)) = c20 WITH image_axp = "shri18nuar", image_aix =
     "libi18n_locale.a(libi18n_locale.o)", uar = "i18n_GetArabicTime",
     persist
    ENDIF
    DECLARE hi18n = i4 WITH protect, noconstant(0)
    SET stat = uar_i18nlocalizationinit(hi18n,curprog,"",curcclrev)
    DECLARE sformattedamt = vc
    DECLARE negative_currency_prefix = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
      "PFT_FORMAT_CURRENCY_INC.NEGATIVE_CURRENCY_PREFIX","("))
    DECLARE negative_currency_suffix = vc WITH protect, constant(uar_i18ngetmessage(hi18n,
      "PFT_FORMAT_CURRENCY_INC.NEGATIVE_CURRENCY_SUFFIX",")"))
    IF (roundind=1)
     SET currencyamount = round(currencyamount,0)
    ENDIF
    SET sformattedamt = trim(format(abs(currencyamount),"######################.##;IL$,;F"))
    IF (currencyamount < 0)
     SET sformattedamt = concat(negative_currency_prefix,sformattedamt,negative_currency_suffix)
    ENDIF
    RETURN(sformattedamt)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(separator)))
  DECLARE separator = c3 WITH protect, constant(" : ")
 ENDIF
 IF ( NOT (validate(guarantor_remittance_flag)))
  DECLARE guarantor_remittance_flag = i2 WITH protect, constant(521)
 ENDIF
 DECLARE sbaltype = vc WITH protect, noconstant(null)
 DECLARE spriority = vc WITH protect, noconstant(null)
 DECLARE prservicefromdate = dq8 WITH protect, noconstant(null)
 DECLARE prservicetodate = dq8 WITH protect, noconstant(null)
 DECLARE nstatus = i2 WITH protect, noconstant(null)
 DECLARE sbalanceentitydetails = vc WITH protect, noconstant(null)
 RECORD infolist(
   1 entityinfo[*]
     2 status = i2
     2 sbaltype = vc
     2 spriority = vc
     2 pftencntrid = f8
     2 pftencfinclasscd = f8
     2 encntrid = f8
     2 balfromdate = dq8
     2 baltodate = dq8
     2 bohpreltnid = f8
     2 pftencntrfromdate = dq8
     2 pftencntrtodate = dq8
     2 encntralias = vc
     2 recurseq = i4
     2 aliasseq = i4
     2 benefitorderid = f8
 ) WITH protect
 DECLARE encntrid = f8 WITH protect, noconstant(0.0)
 DECLARE finclasscd = f8 WITH protect, noconstant(0.0)
 DECLARE pftencntrservicefromdate = dq8 WITH protect, noconstant(0.0)
 DECLARE pftencntrservicetodate = dq8 WITH protect, noconstant(0.0)
 DECLARE pftencntrid = f8 WITH protect, noconstant(0.0)
 DECLARE bohpid = f8 WITH protect, noconstant(0.0)
 DECLARE cindex = i4 WITH protect, noconstant(0)
 IF ( NOT (validate(cs4484007_account_cd)))
  DECLARE cs4484007_account_cd = f8 WITH protect, constant(getcodevalue(4484007,"ACCT",0))
 ENDIF
 IF ( NOT (validate(cs4484007_encounter_cd)))
  DECLARE cs4484007_encounter_cd = f8 WITH protect, constant(getcodevalue(4484007,"ENCTR",0))
 ENDIF
 IF ( NOT (validate(cs4484007_charge_cd)))
  DECLARE cs4484007_charge_cd = f8 WITH protect, constant(getcodevalue(4484007,"CHRG",0))
 ENDIF
 IF ( NOT (validate(cs4484007_claim_cd)))
  DECLARE cs4484007_claim_cd = f8 WITH protect, constant(getcodevalue(4484007,"CLAIM",0))
 ENDIF
 IF ( NOT (validate(cs4484007_statement_cd)))
  DECLARE cs4484007_statement_cd = f8 WITH protect, constant(getcodevalue(4484007,"STMT",0))
 ENDIF
 IF ( NOT (validate(cs4484007_invoice_cd)))
  DECLARE cs4484007_invoice_cd = f8 WITH protect, constant(getcodevalue(4484007,"INVOICE",0))
 ENDIF
 IF ( NOT (validate(cs4484006_patientaccounting_cd)))
  DECLARE cs4484006_patientaccounting_cd = f8 WITH protect, constant(getcodevalue(4484006,"PATSACCT",
    0))
 ENDIF
 IF ( NOT (validate(cs23372_working_cd)))
  DECLARE cs23372_working_cd = f8 WITH protect, constant(getcodevalue(23372,"WORKING",0))
 ENDIF
 IF ( NOT (validate(cs4484007_payment_cd)))
  DECLARE cs4484007_payment_cd = f8 WITH protect, constant(getcodevalue(4484007,"PMNT",0))
 ENDIF
 IF ( NOT (validate(cs4484007_batch_cd)))
  DECLARE cs4484007_batch_cd = f8 WITH protect, constant(getcodevalue(4484007,"BTCH",0))
 ENDIF
 IF ( NOT (validate(cs4484007_blance_cd)))
  DECLARE cs4484007_blance_cd = f8 WITH protect, constant(getcodevalue(4484007,"BLNC",0))
 ENDIF
 IF ( NOT (validate(cs4484007_guarantor_cd)))
  DECLARE cs4484007_guarantor_cd = f8 WITH protect, constant(getcodevalue(4484007,"GRNTR",0))
 ENDIF
 IF ( NOT (validate(cs4484007_person_cd)))
  DECLARE cs4484007_person_cd = f8 WITH protect, constant(getcodevalue(4484007,"PRSN",0))
 ENDIF
 IF ( NOT (validate(cs4484007_adjust_cd)))
  DECLARE cs4484007_adjust_cd = f8 WITH protect, constant(getcodevalue(4484007,"ADJUST",0))
 ENDIF
 IF ( NOT (validate(cs4484007_ap_refund_cd)))
  DECLARE cs4484007_ap_refund_cd = f8 WITH protect, constant(getcodevalue(4484007,"APREFND",0))
 ENDIF
 IF ( NOT (validate(cs18669_activity_cd)))
  DECLARE cs18669_activity_cd = f8 WITH protect, constant(getcodevalue(18669,"ACTIVITY",0))
 ENDIF
 IF ( NOT (validate(cs319_fin_nbr_cd)))
  DECLARE cs319_fin_nbr_cd = f8 WITH protect, constant(getcodevalue(319,"FIN NBR",0))
 ENDIF
 IF ( NOT (validate(cs21849_patient_stat_cd)))
  DECLARE cs21849_patient_stat_cd = f8 WITH protect, constant(getcodevalue(21849,"PATIENT STAT",0))
 ENDIF
 IF ( NOT (validate(cs354_selfpay_cd)))
  DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
 ENDIF
 IF ( NOT (validate(cs21849_statementinv_cd)))
  DECLARE cs21849_statementinv_cd = f8 WITH protect, constant(getcodevalue(21849,"STATEMENTINV",0))
 ENDIF
 IF ( NOT (validate(cs21749_professional_cd)))
  DECLARE cs21749_professional_cd = f8 WITH protect, constant(getcodevalue(21749,"HCFA_1500",0))
 ENDIF
 IF ( NOT (validate(cs21749_institutional_cd)))
  DECLARE cs21749_institutional_cd = f8 WITH protect, constant(getcodevalue(21749,"HCFA_1450",0))
 ENDIF
 IF ( NOT (validate(cs18669_comment_cd)))
  DECLARE cs18669_comment_cd = f8 WITH protect, constant(getcodevalue(18669,"COMMENT",0))
 ENDIF
 IF ( NOT (validate(cs18649_charge_cd)))
  DECLARE cs18649_charge_cd = f8 WITH protect, constant(getcodevalue(18649,"CHARGE",0))
 ENDIF
 IF ( NOT (validate(cs21849_claim_cd)))
  DECLARE cs21849_claim_cd = f8 WITH protect, constant(getcodevalue(21849,"CLAIM",0))
 ENDIF
 IF ( NOT (validate(cs18649_payment_cd)))
  DECLARE cs18649_payment_cd = f8 WITH protect, constant(getcodevalue(18649,"PAYMENT",0))
 ENDIF
 IF ( NOT (validate(cs18649_adjust_cd)))
  DECLARE cs18649_adjust_cd = f8 WITH protect, constant(getcodevalue(18649,"ADJUST",0))
 ENDIF
 IF ( NOT (validate(cs18669_comment_cd)))
  DECLARE cs18669_comment_cd = f8 WITH protect, constant(getcodevalue(18669,"COMMENT",0))
 ENDIF
 IF ( NOT (validate(cs18689_encntrcmb_cd)))
  DECLARE cs18689_encntrcmb_cd = f8 WITH protect, constant(getcodevalue(18689,"ENCNTRCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_acctcmb_cd)))
  DECLARE cs18689_acctcmb_cd = f8 WITH protect, constant(getcodevalue(18689,"ACCTCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_acctuncmb_cd)))
  DECLARE cs18689_acctuncmb_cd = f8 WITH protect, constant(getcodevalue(18689,"ACCTUNCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_fppapply_cd)))
  DECLARE cs18689_fppapply_cd = f8 WITH protect, constant(getcodevalue(18689,"FPPAPPLY",0))
 ENDIF
 IF ( NOT (validate(cs18689_balstatchg_cd)))
  DECLARE cs18689_balstatchg_cd = f8 WITH protect, constant(getcodevalue(18689,"BALSTATCHG",0))
 ENDIF
 IF ( NOT (validate(cs18689_encntrmove_cd)))
  DECLARE cs18689_encntrmove_cd = f8 WITH protect, constant(getcodevalue(18689,"ENCNTRMOVE",0))
 ENDIF
 IF ( NOT (validate(cs18689_encntruncmb_cd)))
  DECLARE cs18689_encntruncmb_cd = f8 WITH protect, constant(getcodevalue(18689,"ENCNTRUNCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_fincmb_cd)))
  DECLARE cs18689_fincmb_cd = f8 WITH protect, constant(getcodevalue(18689,"FINCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_finuncmb_cd)))
  DECLARE cs18689_finuncmb_cd = f8 WITH protect, constant(getcodevalue(18689,"FINUNCMB",0))
 ENDIF
 IF ( NOT (validate(cs18689_fppmodify_cd)))
  DECLARE cs18689_fppmodify_cd = f8 WITH protect, constant(getcodevalue(18689,"FPPMODIFY",0))
 ENDIF
 IF ( NOT (validate(cs18689_movecharges_cd)))
  DECLARE cs18689_movecharges_cd = f8 WITH protect, constant(getcodevalue(18689,"MOVECHARGES",0))
 ENDIF
 IF ( NOT (validate(cs18689_fppremove_cd)))
  DECLARE cs18689_fppremove_cd = f8 WITH protect, constant(getcodevalue(18689,"FPPREMOVE",0))
 ENDIF
 IF ( NOT (validate(cs18689_transferbal_cd)))
  DECLARE cs18689_transferbal_cd = f8 WITH protect, constant(getcodevalue(18689,"TRANSFERBAL",0))
 ENDIF
 IF ( NOT (validate(cs18689_rmvbillhold_cd)))
  DECLARE cs18689_rmvbillhold_cd = f8 WITH protect, constant(getcodevalue(18689,"RMVBILLHOLD",0))
 ENDIF
 IF ( NOT (validate(cs18689_addhold_cd)))
  DECLARE cs18689_addhold_cd = f8 WITH protect, constant(getcodevalue(18689,"ADDHOLD",0))
 ENDIF
 IF ( NOT (validate(cs18689_workitemiden_cd)))
  DECLARE cs18689_workitemiden_cd = f8 WITH protect, constant(getcodevalue(18689,"WORKITEMIDEN",0))
 ENDIF
 IF ( NOT (validate(cs18689_appactioncd_cd)))
  DECLARE cs18689_appactioncd_cd = f8 WITH protect, constant(getcodevalue(18689,"APPACTIONCD",0))
 ENDIF
 IF ( NOT (validate(cs18689_addcolagency_cd)))
  DECLARE cs18689_addcolagency_cd = f8 WITH protect, constant(getcodevalue(18689,"ADDCOLAGENCY",0))
 ENDIF
 IF ( NOT (validate(cs18689_remove_from_agency_cd)))
  DECLARE cs18689_remove_from_agency_cd = f8 WITH protect, constant(getcodevalue(18689,"RMVCOLAGENCY",
    0))
 ENDIF
 IF ( NOT (validate(cs18689_workflowactn_cd)))
  DECLARE cs18689_workflowactn_cd = f8 WITH protect, constant(getcodevalue(18689,"WORKFLOWACTN",0))
 ENDIF
 IF ( NOT (validate(cs18689_wrkflwstartd_cd)))
  DECLARE cs18689_wrkflwstartd_cd = f8 WITH protect, constant(getcodevalue(18689,"WRKFLWSTARTD",0))
 ENDIF
 IF ( NOT (validate(cs18689_wrkflwerror_cd)))
  DECLARE cs18689_wrkflwerror_cd = f8 WITH protect, constant(getcodevalue(18689,"WRKFLWERROR",0))
 ENDIF
 IF ( NOT (validate(cs18689_wrkflwcmpltd_cd)))
  DECLARE cs18689_wrkflwcmpltd_cd = f8 WITH protect, constant(getcodevalue(18689,"WRKFLWCMPLTD",0))
 ENDIF
 IF ( NOT (validate(cs18689_redistribute_cd)))
  DECLARE cs18689_redistribute_cd = f8 WITH protect, constant(getcodevalue(18689,"REDISTRIBUTE",0))
 ENDIF
 IF ( NOT (validate(cs18689_payment_cd)))
  DECLARE cs18689_payment_cd = f8 WITH protect, constant(getcodevalue(18689,"PAYMENT",0))
 ENDIF
 IF ( NOT (validate(cs4490006_comment_cd)))
  DECLARE cs4490006_comment_cd = f8 WITH protect, constant(getcodevalue(4490006,"COMMENT",0))
 ENDIF
 IF ( NOT (validate(cs4490006_encntrcmb_cd)))
  DECLARE cs4490006_encntrcmb_cd = f8 WITH protect, constant(getcodevalue(4490006,"ENCNTRCMB",0))
 ENDIF
 IF ( NOT (validate(cs4490006_acctcmb_cd)))
  DECLARE cs4490006_acctcmb_cd = f8 WITH protect, constant(getcodevalue(4490006,"ACCTCMB",0))
 ENDIF
 IF ( NOT (validate(cs4490006_acctuncmb_cd)))
  DECLARE cs4490006_acctuncmb_cd = f8 WITH protect, constant(getcodevalue(4490006,"ACCTUNCMB",0))
 ENDIF
 IF ( NOT (validate(cs4490006_fppapply_cd)))
  DECLARE cs4490006_fppapply_cd = f8 WITH protect, constant(getcodevalue(4490006,"FPPAPPLY",0))
 ENDIF
 IF ( NOT (validate(cs4490006_addcolagency_cd)))
  DECLARE cs4490006_addcolagency_cd = f8 WITH protect, constant(getcodevalue(4490006,"ADDCOLAGENCY",0
    ))
 ENDIF
 IF ( NOT (validate(cs4490006_balstatchg_cd)))
  DECLARE cs4490006_balstatchg_cd = f8 WITH protect, constant(getcodevalue(4490006,"BALSTATCHG",0))
 ENDIF
 IF ( NOT (validate(cs4490006_encntrmove_cd)))
  DECLARE cs4490006_encntrmove_cd = f8 WITH protect, constant(getcodevalue(4490006,"ENCNTRMOVE",0))
 ENDIF
 IF ( NOT (validate(cs4490006_encntruncmb_cd)))
  DECLARE cs4490006_encntruncmb_cd = f8 WITH protect, constant(getcodevalue(4490006,"ENCNTRUNCMB",0))
 ENDIF
 IF ( NOT (validate(cs4490006_fincmb_cd)))
  DECLARE cs4490006_fincmb_cd = f8 WITH protect, constant(getcodevalue(4490006,"FINCMB",0))
 ENDIF
 IF ( NOT (validate(cs4490006_finuncmb_cd)))
  DECLARE cs4490006_finuncmb_cd = f8 WITH protect, constant(getcodevalue(4490006,"FINUNCMB",0))
 ENDIF
 IF ( NOT (validate(cs4490006_fppmodify_cd)))
  DECLARE cs4490006_fppmodify_cd = f8 WITH protect, constant(getcodevalue(4490006,"FPPMODIFY",0))
 ENDIF
 IF ( NOT (validate(cs4490006_movecharges_cd)))
  DECLARE cs4490006_movecharges_cd = f8 WITH protect, constant(getcodevalue(4490006,"MOVECHARGES",0))
 ENDIF
 IF ( NOT (validate(cs4490006_fppremove_cd)))
  DECLARE cs4490006_fppremove_cd = f8 WITH protect, constant(getcodevalue(4490006,"FPPREMOVE",0))
 ENDIF
 IF ( NOT (validate(cs4490006_rmvcolagency_cd)))
  DECLARE cs4490006_rmvcolagency_cd = f8 WITH protect, constant(getcodevalue(4490006,"RMVCOLAGENCY",0
    ))
 ENDIF
 IF ( NOT (validate(cs4490006_transferbal_cd)))
  DECLARE cs4490006_transferbal_cd = f8 WITH protect, constant(getcodevalue(4490006,"TRANSFERBAL",0))
 ENDIF
 IF ( NOT (validate(cs4490006_addhold_cd)))
  DECLARE cs4490006_addhold_cd = f8 WITH protect, constant(getcodevalue(4490006,"ADDHOLD",0))
 ENDIF
 IF ( NOT (validate(cs4490006_appactioncd_cd)))
  DECLARE cs4490006_appactioncd_cd = f8 WITH protect, constant(getcodevalue(4490006,"APPACTIONCD",0))
 ENDIF
 IF ( NOT (validate(cs4490006_rmvbillhold_cd)))
  DECLARE cs4490006_rmvbillhold_cd = f8 WITH protect, constant(getcodevalue(4490006,"RMVBILLHOLD",0))
 ENDIF
 IF ( NOT (validate(cs4490006_workitemiden_cd)))
  DECLARE cs4490006_workitemiden_cd = f8 WITH protect, constant(getcodevalue(4490006,"WORKITEMIDEN",0
    ))
 ENDIF
 IF ( NOT (validate(cs4490006_workflowactn_cd)))
  DECLARE cs4490006_workflowactn_cd = f8 WITH protect, constant(getcodevalue(4490006,"WORKFLOWACTN",0
    ))
 ENDIF
 IF ( NOT (validate(cs4490006_wrkflwstartd_cd)))
  DECLARE cs4490006_wrkflwstartd_cd = f8 WITH protect, constant(getcodevalue(4490006,"WRKFLWSTARTD",0
    ))
 ENDIF
 IF ( NOT (validate(cs4490006_wrkflwerror_cd)))
  DECLARE cs4490006_wrkflwerror_cd = f8 WITH protect, constant(getcodevalue(4490006,"WRKFLWERROR",0))
 ENDIF
 IF ( NOT (validate(cs4490006_wrkflwcmpltd_cd)))
  DECLARE cs4490006_wrkflwcmpltd_cd = f8 WITH protect, constant(getcodevalue(4490006,"WRKFLWCMPLTD",0
    ))
 ENDIF
 IF ( NOT (validate(cs4490006_refund_cd)))
  DECLARE cs4490006_refund_cd = f8 WITH protect, constant(getcodevalue(4490006,"REFUND",0))
 ENDIF
 IF ( NOT (validate(cs4490006_redistribute_cd)))
  DECLARE cs4490006_redistribute_cd = f8 WITH protect, constant(getcodevalue(4490006,"REDISTRIBUTE",0
    ))
 ENDIF
 IF ( NOT (validate(cs4490006_payment_cd)))
  DECLARE cs4490006_payment_cd = f8 WITH protect, constant(getcodevalue(4490006,"PAYMENT",0))
 ENDIF
 IF (validate(getappliedtodetails,char(128))=char(128))
  SUBROUTINE (getappliedtodetails(pparententityname=vc,pparententityid=f8,pcommentind=i2,pactivityind
   =i2,pactivityid=f8,prappliedtotxt=vc(ref),prappliedtocd=f8(ref),prnewparententityname=vc(ref),
   prnewparententityid=f8(ref)) =i2)
    DECLARE saccountentitydetails = vc WITH protect, noconstant("")
    DECLARE sencounterentityparser = vc WITH protect, noconstant("")
    DECLARE sencounterentitydetails = vc WITH protect, noconstant("")
    DECLARE nmultientityind = i2 WITH protect, noconstant(0)
    DECLARE sbuildstr = vc WITH protect, noconstant("")
    DECLARE nloopentered = i2 WITH protect, noconstant(false)
    CASE (trim(pparententityname,3))
     OF "ACCOUNT":
      IF (pcommentind)
       SELECT INTO "nl:"
        FROM account a
        WHERE a.acct_id=pparententityid
         AND a.active_ind=true
        DETAIL
         prappliedtotxt = concat(i18n_account,separator,trim(a.ext_acct_id_txt)), prappliedtocd =
         cs4484007_account_cd, prnewparententityname = trim("ACCOUNT",3),
         prnewparententityid = pparententityid
        WITH nocounter
       ;end select
      ENDIF
      IF (pactivityind)
       SELECT INTO "nl:"
        FROM corsp_log_reltn clr,
         corsp_log cl,
         account a
        PLAN (clr
         WHERE clr.activity_id=pactivityid)
         JOIN (cl
         WHERE cl.corsp_type_cd=cs18669_activity_cd
          AND cl.activity_id=clr.activity_id)
         JOIN (a
         WHERE a.acct_id=clr.parent_entity_id)
        HEAD REPORT
         saccountentitydetails = "", nmultientityind = 0
        DETAIL
         IF (a.acct_id=pparententityid)
          IF (nmultientityind)
           saccountentitydetails = concat(saccountentitydetails,notrim(", "),trim(a.ext_acct_id_txt))
          ELSE
           saccountentitydetails = a.ext_acct_id_txt
          ENDIF
          nmultientityind = 1
         ENDIF
        FOOT  clr.activity_id
         prappliedtotxt = concat(i18n_account,separator,trim(saccountentitydetails)), prappliedtocd
          = cs4484007_account_cd, prnewparententityname = trim("ACCOUNT",3),
         prnewparententityid = pparententityid
        WITH nocounter
       ;end select
      ENDIF
     OF "ENCOUNTER":
     OF "CLINICAL_ENCOUNTER":
     OF "CLINICAL ENCOUNTER":
      IF (pparententityname="ENCOUNTER")
       SET sencounterentityparser = " pe.pft_encntr_id =  pParentEntityId "
      ELSE
       SET sencounterentityparser = " pe.encntr_id =  pParentEntityId "
      ENDIF
      IF (pcommentind)
       SELECT INTO "nl:"
        FROM pft_encntr pe,
         encntr_alias ea
        PLAN (pe
         WHERE parser(sencounterentityparser))
         JOIN (ea
         WHERE (ea.encntr_id= Outerjoin(pe.encntr_id))
          AND (ea.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
          AND (ea.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
          AND (ea.active_ind= Outerjoin(true))
          AND (ea.encntr_alias_type_cd= Outerjoin(cs319_fin_nbr_cd)) )
        DETAIL
         IF (pe.recur_current_month > 0
          AND pe.recur_current_year > 0)
          prappliedtotxt = concat(i18n_encounter,separator,build2(trim(ea.alias,3)," - ",trim(
             cnvtstring(pe.recur_seq),3)))
         ELSE
          prappliedtotxt = concat(i18n_encounter,separator,trim(ea.alias,3))
         ENDIF
         IF (pe.pft_encntr_id=pparententityid)
          prnewparententityname = "PFT_ENCNTR", prnewparententityid = pparententityid
         ELSEIF (pe.encntr_id=pparententityid)
          prnewparententityname = "ENCOUNTER", prnewparententityid = pparententityid
         ENDIF
         prappliedtocd = cs4484007_encounter_cd
        WITH nocounter
       ;end select
      ENDIF
      IF (pactivityind)
       SELECT INTO "nl:"
        FROM corsp_log_reltn clr,
         corsp_log cl,
         pft_encntr pe,
         encntr_alias ea
        PLAN (clr
         WHERE clr.activity_id=pactivityid)
         JOIN (cl
         WHERE cl.corsp_type_cd=cs18669_activity_cd
          AND cl.activity_id=clr.activity_id)
         JOIN (pe
         WHERE pe.pft_encntr_id=clr.parent_entity_id)
         JOIN (ea
         WHERE (ea.encntr_id= Outerjoin(pe.encntr_id))
          AND (ea.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
          AND (ea.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
          AND (ea.active_ind= Outerjoin(true))
          AND (ea.encntr_alias_type_cd= Outerjoin(cs319_fin_nbr_cd)) )
        HEAD REPORT
         sencounterentitydetails = "", nmultientityind = 0
        DETAIL
         IF (((pe.pft_encntr_id=pparententityid) OR (pe.encntr_id=pparententityid)) )
          nloopentered = true
          IF (pe.recur_current_month > 0
           AND pe.recur_current_year > 0)
           IF (build(trim(ea.alias,3)," - ",trim(cnvtstring(pe.recur_seq),3)) != trim(
            sencounterentitydetails,3))
            IF (nmultientityind)
             sencounterentitydetails = build2(sencounterentitydetails,notrim(", "),trim(ea.alias,3),
              " - ",trim(cnvtstring(pe.recur_seq),3))
            ELSE
             sencounterentitydetails = build2(trim(ea.alias,3)," - ",trim(cnvtstring(pe.recur_seq),3)
              )
            ENDIF
           ENDIF
          ELSE
           IF (trim(ea.alias,3) != trim(sencounterentitydetails,3))
            IF (nmultientityind)
             sencounterentitydetails = concat(sencounterentitydetails,notrim(", "),trim(ea.alias,3))
            ELSE
             sencounterentitydetails = trim(ea.alias,3)
            ENDIF
           ENDIF
          ENDIF
          nmultientityind = 1
         ENDIF
        FOOT  clr.activity_id
         IF (nloopentered=true)
          prappliedtotxt = concat(i18n_encounter,separator,trim(sencounterentitydetails)),
          prappliedtocd = cs4484007_encounter_cd
          IF (trim(pparententityname,3)="ENCOUNTER")
           prnewparententityname = "PFT_ENCNTR", prnewparententityid = pparententityid
          ELSEIF (((trim(pparententityname,3)="CLINICAL_ENCOUNTER") OR (trim(pparententityname,3)=
          "CLINICAL ENCOUNTER")) )
           prnewparententityname = "ENCOUNTER", prnewparententityid = pparententityid
          ENDIF
         ENDIF
        WITH nocounter
       ;end select
       IF (nloopentered=false)
        SELECT INTO "nl:"
         FROM corsp_log_reltn clr,
          corsp_log cl,
          pft_encntr pe,
          encounter e,
          encntr_combine ec,
          encntr_combine_det ecd,
          encntr_alias ea
         PLAN (clr
          WHERE clr.activity_id=pactivityid)
          JOIN (cl
          WHERE cl.corsp_type_cd=cs18669_activity_cd
           AND cl.activity_id=clr.activity_id)
          JOIN (pe
          WHERE pe.pft_encntr_id=clr.parent_entity_id)
          JOIN (e
          WHERE e.encntr_id=pe.encntr_id)
          JOIN (ec
          WHERE ec.from_encntr_id=e.encntr_id
           AND ec.active_ind=true)
          JOIN (ecd
          WHERE ecd.encntr_combine_id=ec.encntr_combine_id
           AND ecd.entity_name="ENCNTR_ALIAS")
          JOIN (ea
          WHERE (ea.encntr_alias_id= Outerjoin(ecd.entity_id))
           AND (ea.encntr_alias_type_cd= Outerjoin(cs319_fin_nbr_cd))
           AND (ea.active_ind= Outerjoin(true)) )
         HEAD REPORT
          sencounterentitydetails = "", nmultientityind = 0
         DETAIL
          IF (((pe.pft_encntr_id=pparententityid) OR (pe.encntr_id=pparententityid)) )
           IF (pe.recur_current_month > 0
            AND pe.recur_current_year > 0)
            IF (build(trim(ea.alias,3)," - ",trim(cnvtstring(pe.recur_seq),3)) != trim(
             sencounterentitydetails,3))
             IF (nmultientityind)
              sencounterentitydetails = build2(sencounterentitydetails,notrim(", "),trim(ea.alias,3),
               " - ",trim(cnvtstring(pe.recur_seq),3))
             ELSE
              sencounterentitydetails = build2(trim(ea.alias,3)," - ",trim(cnvtstring(pe.recur_seq),3
                ))
             ENDIF
            ENDIF
           ELSE
            IF (trim(ea.alias,3) != trim(sencounterentitydetails,3))
             IF (nmultientityind)
              sencounterentitydetails = concat(sencounterentitydetails,notrim(", "),trim(ea.alias,3))
             ELSE
              sencounterentitydetails = trim(ea.alias,3)
             ENDIF
            ENDIF
           ENDIF
           nmultientityind = 1
          ENDIF
         FOOT  clr.activity_id
          prappliedtotxt = concat(i18n_encounter,separator,trim(sencounterentitydetails)),
          prappliedtocd = cs4484007_encounter_cd
          IF (trim(pparententityname,3)="ENCOUNTER")
           prnewparententityname = "PFT_ENCNTR", prnewparententityid = pparententityid
          ELSEIF (((trim(pparententityname,3)="CLINICAL_ENCOUNTER") OR (trim(pparententityname,3)=
          "CLINICAL ENCOUNTER")) )
           prnewparententityname = "ENCOUNTER", prnewparententityid = pparententityid
          ENDIF
         WITH nocounter
        ;end select
       ENDIF
      ENDIF
     OF "BILL_RECORD":
      SELECT INTO "nl:"
       FROM corsp_log_reltn clr,
        corsp_log cl,
        bill_rec br,
        trans_log tl
       PLAN (clr
        WHERE clr.parent_entity_id=pparententityid
         AND clr.parent_entity_name="BILL_RECORD"
         AND clr.active_ind=true)
        JOIN (cl
        WHERE cl.activity_id=clr.activity_id
         AND cl.corsp_type_cd=cs18669_comment_cd
         AND cl.active_ind=true)
        JOIN (br
        WHERE (br.corsp_activity_id= Outerjoin(clr.parent_entity_id))
         AND (br.active_ind= Outerjoin(true)) )
        JOIN (tl
        WHERE (tl.activity_id= Outerjoin(clr.parent_entity_id))
         AND (tl.active_ind= Outerjoin(true)) )
       DETAIL
        IF (br.bill_class_cd=cs21849_patient_stat_cd)
         prappliedtotxt = concat(i18n_statement,separator,trim(br.bill_nbr_disp)), prappliedtocd =
         cs4484007_statement_cd
        ENDIF
        IF (br.bill_class_cd=cs21849_statementinv_cd)
         prappliedtotxt = concat(i18n_invoice,separator,trim(br.bill_nbr_disp)), prappliedtocd =
         cs4484007_invoice_cd
        ENDIF
        IF (br.bill_class_cd=cs21849_claim_cd)
         prappliedtocd = cs4484007_claim_cd
         IF (br.bill_type_cd=cs21749_professional_cd)
          prappliedtotxt = concat(i18n_claim,separator,trim(br.bill_nbr_disp),separator,
           i18n_professional)
         ELSEIF (br.bill_type_cd=cs21749_institutional_cd)
          prappliedtotxt = concat(i18n_claim,separator,trim(br.bill_nbr_disp),separator,
           i18n_institutional)
         ENDIF
        ENDIF
       FOOT REPORT
        prnewparententityname = "BILL_REC", prnewparententityid = pparententityid
       WITH nocounter
      ;end select
     OF "TRANSACTION":
      IF (pcommentind)
       SELECT INTO "nl:"
        FROM corsp_log_reltn clr,
         pft_charge pc,
         charge c,
         corsp_log cl,
         trans_log tl
        PLAN (clr
         WHERE clr.parent_entity_id=pparententityid
          AND clr.parent_entity_name="TRANSACTION"
          AND clr.active_ind=true)
         JOIN (pc
         WHERE pc.activity_id=clr.parent_entity_id
          AND pc.active_ind=true)
         JOIN (c
         WHERE pc.charge_item_id=c.charge_item_id)
         JOIN (cl
         WHERE cl.activity_id=clr.activity_id
          AND cl.corsp_type_cd=cs18669_comment_cd
          AND cl.active_ind=true)
         JOIN (tl
         WHERE (tl.activity_id= Outerjoin(clr.parent_entity_id))
          AND (tl.active_ind= Outerjoin(true))
          AND (tl.trans_type_cd= Outerjoin(cs18649_charge_cd)) )
        DETAIL
         prappliedtotxt = concat(i18n_charge,separator,trim(c.charge_description),separator,format(c
           .service_dt_tm,"@SHORTDATE4YR"))
        FOOT REPORT
         prappliedtocd = cs4484007_charge_cd, prnewparententityname = "PFT_CHARGE",
         prnewparententityid = pc.pft_charge_id
        WITH nocounter
       ;end select
       IF (curqual=0)
        SELECT INTO "nl:"
         FROM trans_log tl,
          corsp_log_reltn clr,
          corsp_log cl,
          bill_rec br
         PLAN (tl
          WHERE tl.activity_id=pparententityid
           AND tl.active_ind=true
           AND tl.trans_type_cd IN (cs18649_payment_cd, cs18649_adjust_cd))
          JOIN (clr
          WHERE clr.parent_entity_id=tl.activity_id
           AND clr.parent_entity_name="TRANSACTION"
           AND clr.active_ind=true)
          JOIN (cl
          WHERE cl.activity_id=clr.activity_id
           AND cl.corsp_type_cd=cs18669_comment_cd
           AND cl.active_ind=true)
          JOIN (br
          WHERE (br.corsp_activity_id= Outerjoin(clr.parent_entity_id))
           AND (br.active_ind= Outerjoin(true)) )
         DETAIL
          IF (tl.trans_type_cd=cs18649_payment_cd)
           prappliedtocd = cs4484007_payment_cd, prappliedtotxt = concat(i18n_payment,separator,
            format(tl.post_dt_tm,"@SHORTDATE4YR"))
          ELSEIF (tl.trans_type_cd=cs18649_adjust_cd)
           prappliedtocd = cs4484007_adjust_cd, prappliedtotxt = concat(i18n_adjustment,separator,
            format(tl.post_dt_tm,"@SHORTDATE4YR"))
          ENDIF
         FOOT REPORT
          prnewparententityname = "TRANS_LOG", prnewparententityid = pparententityid
         WITH nocounter
        ;end select
       ENDIF
      ENDIF
      IF (pactivityind)
       SELECT INTO "nl:"
        FROM trans_log tl,
         pft_charge pc,
         charge c
        PLAN (tl
         WHERE tl.activity_id=pactivityid
          AND tl.active_ind=true)
         JOIN (pc
         WHERE pc.activity_id=tl.activity_id
          AND pc.active_ind=true)
         JOIN (c
         WHERE c.charge_item_id=pc.charge_item_id)
        DETAIL
         prappliedtotxt = concat(i18n_charge,separator,trim(c.charge_description),separator,format(c
           .service_dt_tm,"@SHORTDATE4YR"))
        FOOT REPORT
         prappliedtocd = cs4484007_charge_cd, prnewparententityname = "PFT_CHARGE",
         prnewparententityid = pc.pft_charge_id
        WITH nocounter
       ;end select
      ENDIF
     OF "BATCH_TRANS":
      SELECT INTO "nl:"
       FROM batch_trans bt
       PLAN (bt
        WHERE bt.batch_trans_id=pparententityid
         AND bt.active_ind=true)
       DETAIL
        prappliedtocd = cs4484007_batch_cd, prappliedtotxt = concat(i18n_batch,separator,trim(
          cnvtstring(bt.batch_trans_id)),separator,trim(bt.ext_batch_id_txt,3))
       FOOT REPORT
        prnewparententityname = "BATCH_TRANS", prnewparententityid = pparententityid
       WITH nocounter
      ;end select
     OF "BO_HP_RELTN":
      IF (pcommentind)
       SET prservicefromdate = null
       SET prservicetodate = null
       SELECT INTO "nl:"
        FROM corsp_log_reltn clr,
         corsp_log cl,
         bo_hp_reltn bhr,
         benefit_order bo,
         bt_condition bt,
         pft_encntr pe,
         encounter e
        PLAN (clr
         WHERE clr.parent_entity_id=pparententityid
          AND clr.parent_entity_name="BO_HP_RELTN")
         JOIN (cl
         WHERE cl.corsp_type_cd=cs18669_comment_cd
          AND cl.activity_id=clr.activity_id)
         JOIN (bhr
         WHERE bhr.bo_hp_reltn_id=clr.parent_entity_id
          AND bhr.active_ind=true)
         JOIN (bo
         WHERE bo.benefit_order_id=bhr.benefit_order_id
          AND bo.active_ind=true)
         JOIN (bt
         WHERE bt.bt_condition_id=bo.bt_condition_id)
         JOIN (pe
         WHERE pe.pft_encntr_id=bo.pft_encntr_id)
         JOIN (e
         WHERE e.encntr_id=pe.encntr_id
          AND e.active_ind=true)
        DETAIL
         nstatus = calculatebalanceservicedates(e.reg_dt_tm,e.disch_dt_tm,pe.recur_current_month,pe
          .recur_current_year,bo.beg_service_dt_tm,
          bo.end_service_dt_tm,bo.eop_dt_tm,bt.single_chrg_ind,prservicefromdate,prservicetodate)
         IF (nstatus)
          nstatus = calculateservicedatesforencounter(e.reg_dt_tm,e.disch_dt_tm,pe
           .recur_current_month,pe.recur_current_year,pftencntrservicefromdate,
           pftencntrservicetodate)
         ENDIF
         IF (bhr.fin_class_cd=cs354_selfpay_cd)
          sbaltype = i18n_self_pay
         ELSE
          IF (bt.bill_type_cd=cs21749_professional_cd)
           sbaltype = i18n_professional
          ELSEIF (bt.bill_type_cd=cs21749_institutional_cd)
           sbaltype = i18n_institutional
          ENDIF
          IF (bhr.priority_seq=1)
           spriority = i18n_sequence_primary
          ELSEIF (bhr.priority_seq=2)
           spriority = i18n_sequence_secondary
          ELSEIF (bhr.priority_seq=3)
           spriority = i18n_sequence_tertiary
          ENDIF
         ENDIF
         bohpid = bhr.bo_hp_reltn_id, encntrid = e.encntr_id, pftencntrid = pe.pft_encntr_id,
         finclasscd = pe.fin_class_cd
        WITH nocounter
       ;end select
       IF (nstatus)
        SET nstatus = midmonthservicedateshelper(pftencntrid,finclasscd,encntrid,prservicefromdate,
         prservicetodate,
         pftencntrservicefromdate,pftencntrservicetodate)
       ENDIF
       IF (nstatus)
        SET prappliedtocd = cs4484007_blance_cd
        SET prnewparententityname = "BO_HP_RELTN"
        SET prnewparententityid = bohpid
        IF (prservicefromdate != null)
         IF (sbaltype=i18n_self_pay)
          IF (prservicetodate != null)
           SET prappliedtotxt = concat(i18n_balance,notrim(": "),sbaltype,notrim(","),notrim(" "),
            format(prservicefromdate,"MM/DD/YYYY;;d"),notrim(" - "),format(prservicetodate,
             "MM/DD/YYYY;;d"))
          ELSE
           SET prappliedtotxt = concat(i18n_balance,notrim(": "),sbaltype,notrim(","),notrim(" "),
            format(prservicefromdate,"MM/DD/YYYY;;d"))
          ENDIF
         ELSEIF (sbaltype IN (i18n_professional, i18n_institutional))
          IF (prservicetodate != null)
           SET prappliedtotxt = concat(i18n_balance,notrim(": "),sbaltype,notrim(", "),spriority,
            notrim(","),notrim(" "),format(prservicefromdate,"MM/DD/YYYY;;d"),notrim(" - "),format(
             prservicetodate,"MM/DD/YYYY;;d"))
          ELSE
           SET prappliedtotxt = concat(i18n_balance,notrim(": "),sbaltype,notrim(", "),spriority,
            notrim(","),notrim(" "),format(prservicefromdate,"MM/DD/YYYY;;d"))
          ENDIF
         ENDIF
        ELSE
         SET prappliedtotxt = concat(i18n_balance,notrim(": "),sbaltype,notrim(", "),spriority)
        ENDIF
       ENDIF
      ENDIF
      IF (pactivityind)
       SET prservicefromdate = null
       SET prservicetodate = null
       SET cindex = 0
       SET stat = initrec(infolist)
       SELECT INTO "nl:"
        FROM bo_hp_reltn bhr,
         corsp_log_reltn clr,
         corsp_log cl,
         benefit_order bo,
         bt_condition bt,
         pft_encntr pe,
         encounter e
        PLAN (clr
         WHERE clr.activity_id=pactivityid
          AND clr.parent_entity_name="BO_HP_RELTN")
         JOIN (cl
         WHERE cl.corsp_type_cd=cs18669_activity_cd
          AND cl.activity_id=clr.activity_id)
         JOIN (bhr
         WHERE bhr.bo_hp_reltn_id=clr.parent_entity_id
          AND bhr.active_ind=true)
         JOIN (bo
         WHERE bo.benefit_order_id=bhr.benefit_order_id
          AND bo.active_ind=true)
         JOIN (bt
         WHERE bt.bt_condition_id=bo.bt_condition_id)
         JOIN (pe
         WHERE pe.pft_encntr_id=bo.pft_encntr_id)
         JOIN (e
         WHERE e.encntr_id=pe.encntr_id
          AND e.active_ind=true)
        HEAD clr.activity_id
         sbalanceentitydetails = "", nmultientityind = 0
        DETAIL
         cindex += 1, stat = alterlist(infolist->entityinfo,cindex), nstatus =
         calculatebalanceservicedates(e.reg_dt_tm,e.disch_dt_tm,pe.recur_current_month,pe
          .recur_current_year,bo.beg_service_dt_tm,
          bo.end_service_dt_tm,bo.eop_dt_tm,bt.single_chrg_ind,infolist->entityinfo[cindex].
          balfromdate,infolist->entityinfo[cindex].baltodate)
         IF (nstatus)
          nstatus = calculateservicedatesforencounter(e.reg_dt_tm,e.disch_dt_tm,pe
           .recur_current_month,pe.recur_current_year,infolist->entityinfo[cindex].pftencntrfromdate,
           infolist->entityinfo[cindex].pftencntrtodate)
         ENDIF
         infolist->entityinfo[cindex].status = nstatus
         IF (bhr.fin_class_cd=cs354_selfpay_cd)
          infolist->entityinfo[cindex].sbaltype = i18n_self_pay
         ELSE
          IF (bt.bill_type_cd=cs21749_professional_cd)
           infolist->entityinfo[cindex].sbaltype = i18n_professional
          ELSEIF (bt.bill_type_cd=cs21749_institutional_cd)
           infolist->entityinfo[cindex].sbaltype = i18n_institutional
          ENDIF
          IF (bhr.priority_seq=1)
           infolist->entityinfo[cindex].spriority = i18n_sequence_primary
          ELSEIF (bhr.priority_seq=2)
           infolist->entityinfo[cindex].spriority = i18n_sequence_secondary
          ELSEIF (bhr.priority_seq=3)
           infolist->entityinfo[cindex].spriority = i18n_sequence_tertiary
          ENDIF
         ENDIF
         infolist->entityinfo[cindex].pftencntrid = pe.pft_encntr_id, infolist->entityinfo[cindex].
         pftencfinclasscd = pe.fin_class_cd, infolist->entityinfo[cindex].encntrid = e.encntr_id,
         infolist->entityinfo[cindex].bohpreltnid = bhr.bo_hp_reltn_id
        WITH nocounter
       ;end select
       IF (size(infolist->entityinfo,5) > 0)
        FOR (cindex = 1 TO size(infolist->entityinfo,5))
          SET prservicefromdate = infolist->entityinfo[cindex].balfromdate
          SET prservicetodate = infolist->entityinfo[cindex].baltodate
          SET nstatus = infolist->entityinfo[cindex].status
          IF (nstatus)
           SET nstatus = midmonthservicedateshelper(infolist->entityinfo[cindex].pftencntrid,infolist
            ->entityinfo[cindex].pftencfinclasscd,infolist->entityinfo[cindex].encntrid,
            prservicefromdate,prservicetodate,
            infolist->entityinfo[cindex].pftencntrfromdate,infolist->entityinfo[cindex].
            pftencntrtodate)
          ENDIF
          IF (nstatus)
           SET prappliedtocd = cs4484007_blance_cd
           SET prnewparententityname = "BO_HP_RELTN"
           SET prnewparententityid = infolist->entityinfo[cindex].bohpreltnid
           IF (prservicefromdate != null)
            IF ((infolist->entityinfo[cindex].sbaltype=i18n_self_pay))
             IF (prservicetodate != null)
              IF (nmultientityind)
               SET sbalanceentitydetails = concat(sbalanceentitydetails,notrim(" , "),infolist->
                entityinfo[cindex].sbaltype,notrim(","),notrim(" "),
                format(prservicefromdate,"MM/DD/YYYY;;d"),notrim(" - "),format(prservicetodate,
                 "MM/DD/YYYY;;d"))
              ELSE
               SET sbalanceentitydetails = concat(infolist->entityinfo[cindex].sbaltype,notrim(","),
                notrim(" "),format(prservicefromdate,"MM/DD/YYYY;;d"),notrim(" - "),
                format(prservicetodate,"MM/DD/YYYY;;d"))
              ENDIF
             ELSE
              IF (nmultientityind)
               SET sbalanceentitydetails = concat(sbalanceentitydetails,notrim(" , "),infolist->
                entityinfo[cindex].sbaltype,notrim(","),notrim(" "),
                format(prservicefromdate,"MM/DD/YYYY;;d"))
              ELSE
               SET sbalanceentitydetails = concat(infolist->entityinfo[cindex].sbaltype,notrim(","),
                notrim(" "),format(prservicefromdate,"MM/DD/YYYY;;d"))
              ENDIF
             ENDIF
            ELSEIF ((infolist->entityinfo[cindex].sbaltype IN (i18n_professional, i18n_institutional)
            ))
             IF (prservicetodate != null)
              IF (nmultientityind)
               SET sbalanceentitydetails = concat(sbalanceentitydetails,notrim(" , "),infolist->
                entityinfo[cindex].sbaltype,notrim(", "),infolist->entityinfo[cindex].spriority,
                notrim(","),notrim(" "),format(prservicefromdate,"MM/DD/YYYY;;d"),notrim(" - "),
                format(prservicetodate,"MM/DD/YYYY;;d"))
              ELSE
               SET sbalanceentitydetails = concat(infolist->entityinfo[cindex].sbaltype,notrim(", "),
                infolist->entityinfo[cindex].spriority,notrim(","),notrim(" "),
                format(prservicefromdate,"MM/DD/YYYY;;d"),notrim(" - "),format(prservicetodate,
                 "MM/DD/YYYY;;d"))
              ENDIF
             ELSE
              IF (nmultientityind)
               SET sbalanceentitydetails = concat(sbalanceentitydetails,notrim(" , "),infolist->
                entityinfo[cindex].sbaltype,notrim(", "),infolist->entityinfo[cindex].spriority,
                notrim(","),notrim(" "),format(prservicefromdate,"MM/DD/YYYY;;d"))
              ELSE
               SET sbalanceentitydetails = concat(infolist->entityinfo[cindex].sbaltype,notrim(", "),
                infolist->entityinfo[cindex].spriority,notrim(","),notrim(" "),
                format(prservicefromdate,"MM/DD/YYYY;;d"))
              ENDIF
             ENDIF
            ENDIF
           ELSE
            IF (nmultientityind)
             SET sbalanceentitydetails = concat(sbalanceentitydetails,notrim(" , "),infolist->
              entityinfo[cindex].sbaltype,notrim(", "),infolist->entityinfo[cindex].spriority)
            ELSE
             SET sbalanceentitydetails = concat(infolist->entityinfo[cindex].sbaltype,notrim(", "),
              infolist->entityinfo[cindex].spriority)
            ENDIF
           ENDIF
          ENDIF
          SET nmultientityind = 1
        ENDFOR
        SET prappliedtotxt = concat(i18n_balance,separator,trim(sbalanceentitydetails,3))
       ENDIF
      ENDIF
     OF "UMDAP":
      SELECT INTO "nl:"
       FROM corsp_log_reltn clr,
        corsp_log cl,
        pft_umdap pu,
        person p
       PLAN (clr
        WHERE clr.parent_entity_id=pparententityid
         AND clr.parent_entity_name="UMDAP"
         AND clr.active_ind=true)
        JOIN (cl
        WHERE cl.activity_id=clr.activity_id
         AND cl.corsp_type_cd=cs18669_comment_cd
         AND cl.active_ind=true)
        JOIN (pu
        WHERE pu.pft_umdap_id=clr.parent_entity_id
         AND pu.active_ind=true)
        JOIN (p
        WHERE p.person_id=pu.person_id)
       DETAIL
        prappliedtotxt = concat(i18n_guarantor,separator,trim(p.name_full_formatted)), prappliedtocd
         = cs4484007_guarantor_cd, prnewparententityname = "PFT_UMDAP",
        prnewparententityid = pu.pft_umdap_id
       WITH nocounter
      ;end select
     OF "BATCH_TRANS_FILE":
      SELECT INTO "nl:"
       FROM batch_trans_file btf,
        batch_trans bt
       PLAN (btf
        WHERE btf.batch_trans_file_id=pparententityid
         AND btf.active_ind=true
         AND btf.trans_type_cd=cs18649_payment_cd)
        JOIN (bt
        WHERE bt.batch_trans_id=btf.batch_trans_id
         AND bt.active_ind=true)
       DETAIL
        prappliedtocd = cs4484007_payment_cd, prappliedtotxt = concat(i18n_payment,separator,format(
          btf.beg_effective_dt_tm,"@SHORTDATE4YR")), prnewparententityname = "BATCH_TRANS_FILE",
        prnewparententityid = pparententityid
       WITH nocounter
      ;end select
      SELECT INTO "nl:"
       FROM batch_trans_file btf,
        batch_trans bt
       PLAN (btf
        WHERE btf.batch_trans_file_id=pparententityid
         AND btf.active_ind=true
         AND btf.trans_type_cd=cs18649_adjust_cd)
        JOIN (bt
        WHERE bt.batch_trans_id=btf.batch_trans_id
         AND bt.active_ind=true)
       DETAIL
        prappliedtocd = cs4484007_adjust_cd, prappliedtotxt = concat(i18n_adjustment,separator,format
         (btf.beg_effective_dt_tm,"@SHORTDATE4YR")), prnewparententityname = "BATCH_TRANS_FILE",
        prnewparententityid = pparententityid
       WITH nocounter
      ;end select
     OF "AP REFUND":
      IF (pcommentind)
       SELECT INTO "nl:"
        FROM pft_ap_refund par
        PLAN (par
         WHERE par.pft_ap_refund_id=pparententityid
          AND par.active_ind=true)
        DETAIL
         prappliedtocd = cs4484007_ap_refund_cd, prappliedtotxt = concat(i18n_ap_refund,separator,
          trim(cnvtstring(par.pft_ap_refund_id,38)),separator,format(par.refund_dt_tm,"@SHORTDATE4YR"
           )), prnewparententityname = "PFT_AP_REFUND",
         prnewparententityid = pparententityid
        WITH nocounter
       ;end select
      ENDIF
     OF "PERSON":
      SELECT INTO "nl:"
       FROM person p
       PLAN (p
        WHERE p.person_id=pparententityid
         AND p.active_ind=1)
       DETAIL
        prappliedtocd = cs4484007_person_cd, prappliedtotxt = concat(i18n_person,separator,trim(p
          .name_full_formatted)), prnewparententityname = "PERSON",
        prnewparententityid = pparententityid
       WITH nocounter
      ;end select
     ELSE
      CALL logmessage("getAppliedToDetails","unable to identify the comment/activity details",
       log_debug)
      RETURN(false)
    ENDCASE
    IF (((textlen(trim(prnewparententityname))=0) OR (((textlen(trim(prappliedtotxt))=0) OR (((
    prappliedtocd=0.0) OR (prnewparententityid=0.0)) )) )) )
     SET sbuildstr = build("The subroutine couldn't resolve Description Text(",pparententityname,")")
     CALL logmessage("getAppliedToDetails",sbuildstr,log_debug)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getdescriptiontext,char(128))=char(128))
  SUBROUTINE (getdescriptiontext(plongtext=vc,prdescriptiontext=vc(ref)) =i2)
   IF (findstring("Work Item Identified:",plongtext) > 0)
    SET prdescriptiontext = replace(plongtext,"Work Item Identified: ","Work Item: ",1)
   ELSEIF (findstring("Add Hold",plongtext) > 0)
    SET prdescriptiontext = replace(plongtext,"Add Hold","Hold:",2)
   ELSEIF (findstring("Assign Encounter To Agency",plongtext) > 0)
    SET prdescriptiontext = replace(plongtext,"Assign Encounter To Agency","",2)
   ELSEIF (findstring("Return Encounter From Agency",plongtext) > 0)
    SET prdescriptiontext = replace(plongtext,"Return Encounter From Agency","",2)
   ELSEIF (((findstring("Action Code:",plongtext) > 0) OR (findstring("CODE:",plongtext) > 0)) )
    SET prdescriptiontext = plongtext
   ELSEIF (findstring("Release Hold ",plongtext) > 0)
    SET prdescriptiontext = replace(plongtext,"Release Hold ","",2)
   ELSE
    SET prdescriptiontext = trim(plongtext)
   ENDIF
   RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getactivitytypecd,char(128))=char(128))
  SUBROUTINE (getactivitytypecd(pcorsptypecd=f8,pcorspsubtypecd=f8,plongtext=vc,practivitytypecd=f8(
    ref)) =i2)
   IF (pcorsptypecd=cs18669_comment_cd
    AND pcorspsubtypecd=0.0
    AND findstring(cnvtlower("Action Code:"),cnvtlower(plongtext),1,0)=0
    AND findstring(cnvtlower("Work Item Identified:"),cnvtlower(plongtext),1,0)=0
    AND findstring(cnvtlower("CODE:"),cnvtlower(plongtext),1,0)=0
    AND findstring(cnvtlower("Release Hold"),cnvtlower(plongtext),1,0)=0
    AND findstring(cnvtlower("Add Hold"),cnvtlower(plongtext),1,0)=0
    AND findstring(cnvtlower("Assign Encounter To Agency"),cnvtlower(plongtext),1,0)=0
    AND findstring(cnvtlower("Return Encounter From Agency"),cnvtlower(plongtext),1,0)=0
    AND findstring(cnvtlower("Workflow Model"),cnvtlower(plongtext),1,0)=0
    AND findstring(cnvtlower("Workflow Error Occurred"),cnvtlower(plongtext),1,0)=0
    AND findstring(cnvtlower("Workflow Started"),cnvtlower(plongtext),1,0)=0)
    SET practivitytypecd = cs4490006_comment_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","Couldn't resolve comment type cd",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_encntrcmb_cd)
    SET practivitytypecd = cs4490006_encntrcmb_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Encounter combine code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_acctcmb_cd)
    SET practivitytypecd = cs4490006_acctcmb_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Account combine code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_acctuncmb_cd)
    SET practivitytypecd = cs4490006_acctuncmb_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Account uncombine code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_fppapply_cd)
    SET practivitytypecd = cs4490006_fppapply_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","FPP apply code value is not found in code set 4490006",
      log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_addcolagency_cd)
    SET practivitytypecd = cs4490006_addcolagency_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Add collection agency code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_balstatchg_cd)
    SET practivitytypecd = cs4490006_balstatchg_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Balance status change code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_encntrmove_cd)
    SET practivitytypecd = cs4490006_encntrmove_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","Encounter move code value is not found in code set 4490006",
      log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_encntruncmb_cd)
    SET practivitytypecd = cs4490006_encntruncmb_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Encounter uncombine code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_fincmb_cd)
    SET practivitytypecd = cs4490006_fincmb_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Financial combine code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_finuncmb_cd)
    SET practivitytypecd = cs4490006_finuncmb_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Financial combine code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_fppmodify_cd)
    SET practivitytypecd = cs4490006_fppmodify_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","FPP modify code value is not found in code set 4490006",
      log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_movecharges_cd)
    SET practivitytypecd = cs4490006_movecharges_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","Move charges code value is not found in code set 4490006",
      log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_fppremove_cd)
    SET practivitytypecd = cs4490006_fppremove_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","FPP move code value is not found in code set 4490006",
      log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_remove_from_agency_cd)
    SET practivitytypecd = cs4490006_rmvcolagency_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Remove collection agency code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_transferbal_cd)
    SET practivitytypecd = cs4490006_transferbal_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Transfer balance code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_workflowactn_cd)
    SET practivitytypecd = cs4490006_workflowactn_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Workflow action code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_wrkflwstartd_cd)
    SET practivitytypecd = cs4490006_wrkflwstartd_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Workflow started code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_wrkflwerror_cd)
    SET practivitytypecd = cs4490006_wrkflwerror_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","Workfloe error code value is not found in code set 4490006",
      log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_wrkflwcmpltd_cd)
    SET practivitytypecd = cs4490006_wrkflwcmpltd_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Workflow completed code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (((pcorspsubtypecd=cs18689_addhold_cd) OR (findstring(cnvtlower("Add Hold"),cnvtlower(
     plongtext),1,0) > 0)) )
    SET practivitytypecd = cs4490006_addhold_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","Couldn't resolve add hold cd",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (((pcorspsubtypecd=cs18689_appactioncd_cd) OR (((findstring(cnvtlower("Action Code:"),
    cnvtlower(plongtext),1,0) > 0) OR (findstring(cnvtlower("Code:"),cnvtlower(plongtext),1,0) > 0))
    AND findstring(cnvtlower("Add Hold"),cnvtlower(plongtext),1,0)=0)) )
    SET practivitytypecd = cs4490006_appactioncd_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","Apply action code value is not found in code set 4490006",
      log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (((pcorspsubtypecd=cs18689_rmvbillhold_cd) OR (findstring(cnvtlower("Release Hold"),
    cnvtlower(plongtext),1,0) > 0)) )
    SET practivitytypecd = cs4490006_rmvbillhold_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Remove billing hold code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (((pcorspsubtypecd=cs18689_workitemiden_cd) OR (findstring(cnvtlower(
     "Work Item Identified:"),cnvtlower(plongtext),1,0) > 0)) )
    SET practivitytypecd = cs4490006_workitemiden_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD",
      "Workitem identified code value is not found in code set 4490006",log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_redistribute_cd)
    SET practivitytypecd = cs4490006_redistribute_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","Redistribute code value is not found in code set 4490006",
      log_debug)
     RETURN(false)
    ENDIF
   ELSEIF (pcorspsubtypecd=cs18689_payment_cd)
    SET practivitytypecd = cs4490006_payment_cd
    IF (practivitytypecd=0.0)
     CALL logmessage("getActivityTypeCD","Payment code value is not found in code set 4490006",
      log_debug)
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getappliedtodetailsforrefund,char(128))=char(128))
  SUBROUTINE (getappliedtodetailsforrefund(pparententityname=vc,pparententityid=f8,prappliedtotxt=vc(
    ref),prappliedtocd=f8(ref)) =i2)
    DECLARE sbaltype = vc WITH protect, noconstant(null)
    DECLARE spriority = vc WITH protect, noconstant(null)
    DECLARE prservicefromdate = f8 WITH protect, noconstant(null)
    DECLARE prservicetodate = f8 WITH protect, noconstant(null)
    DECLARE nstatus = i2 WITH protect, noconstant(null)
    DECLARE sbalanceentitydetails = vc WITH protect, noconstant(null)
    IF (pparententityname="BO_HP_RELTN")
     SELECT INTO "nl:"
      FROM bo_hp_reltn bhr,
       benefit_order bo,
       bt_condition bt,
       pft_encntr pe,
       encounter e
      PLAN (bhr
       WHERE bhr.bo_hp_reltn_id=pparententityid
        AND bhr.active_ind=true)
       JOIN (bo
       WHERE bo.benefit_order_id=bhr.benefit_order_id
        AND bo.active_ind=true)
       JOIN (bt
       WHERE bt.bt_condition_id=bo.bt_condition_id)
       JOIN (pe
       WHERE pe.pft_encntr_id=bo.pft_encntr_id)
       JOIN (e
       WHERE e.encntr_id=pe.encntr_id
        AND e.active_ind=true)
      DETAIL
       nstatus = calculatebalanceservicedates(e.reg_dt_tm,e.disch_dt_tm,pe.recur_current_month,pe
        .recur_current_year,bo.beg_service_dt_tm,
        bo.end_service_dt_tm,bo.eop_dt_tm,bt.single_chrg_ind,prservicefromdate,prservicetodate)
       IF (nstatus)
        nstatus = calculateservicedatesforencounter(e.reg_dt_tm,e.disch_dt_tm,pe.recur_current_month,
         pe.recur_current_year,pftencntrservicefromdate,
         pftencntrservicetodate)
       ENDIF
       IF (bhr.fin_class_cd=cs354_selfpay_cd)
        sbaltype = i18n_self_pay
       ELSE
        IF (bt.bill_type_cd=cs21749_professional_cd)
         sbaltype = i18n_professional
        ELSEIF (bt.bill_type_cd=cs21749_institutional_cd)
         sbaltype = i18n_institutional
        ENDIF
        IF (bhr.priority_seq=1)
         spriority = i18n_sequence_primary
        ELSEIF (bhr.priority_seq=2)
         spriority = i18n_sequence_secondary
        ELSEIF (bhr.priority_seq=3)
         spriority = i18n_sequence_tertiary
        ENDIF
       ENDIF
       bohpid = bhr.bo_hp_reltn_id, encntrid = e.encntr_id, pftencntrid = pe.pft_encntr_id,
       finclasscd = pe.fin_class_cd
      WITH nocounter
     ;end select
     SET nstatus = midmonthservicedateshelper(pftencntrid,finclasscd,encntrid,prservicefromdate,
      prservicetodate,
      pftencntrservicefromdate,pftencntrservicetodate)
     IF (nstatus)
      SET prappliedtocd = cs4484007_blance_cd
      SET prnewparententityname = "BO_HP_RELTN"
      SET prnewparententityid = bohpid
      IF (prservicefromdate != null)
       IF (sbaltype=i18n_self_pay)
        IF (prservicetodate != null)
         SET sbalanceentitydetails = concat(sbaltype,notrim(","),notrim(" "),format(prservicefromdate,
           "MM/DD/YYYY;;d"),notrim(" - "),
          format(prservicetodate,"MM/DD/YYYY;;d"))
        ELSE
         SET sbalanceentitydetails = concat(sbaltype,notrim(","),notrim(" "),format(prservicefromdate,
           "MM/DD/YYYY;;d"))
        ENDIF
       ELSEIF (sbaltype IN (i18n_professional, i18n_institutional))
        IF (prservicetodate != null)
         SET sbalanceentitydetails = concat(sbaltype,notrim(", "),spriority,notrim(","),notrim(" "),
          format(prservicefromdate,"MM/DD/YYYY;;d"),notrim(" - "),format(prservicetodate,
           "MM/DD/YYYY;;d"))
        ELSE
         SET sbalanceentitydetails = concat(sbaltype,notrim(", "),spriority,notrim(","),notrim(" "),
          format(prservicefromdate,"MM/DD/YYYY;;d"))
        ENDIF
       ENDIF
      ELSE
       SET sbalanceentitydetails = concat(sbaltype,notrim(", "),spriority)
      ENDIF
     ENDIF
     IF (sbalanceentitydetails != null)
      SET prappliedtotxt = concat(i18n_balance,separator,trim(sbalanceentitydetails,3))
     ENDIF
    ELSEIF (pparententityname="TRANS_LOG")
     SELECT INTO "nl:"
      FROM trans_log tl
      PLAN (tl
       WHERE tl.activity_id=pparententityid
        AND tl.active_ind=true)
      DETAIL
       IF (tl.trans_type_cd=cs18649_payment_cd)
        prappliedtocd = cs4484007_encounter_cd, prappliedtotxt = concat(i18n_payment,separator,format
         (tl.post_dt_tm,"@SHORTDATE4YR"))
       ENDIF
      WITH nocounter
     ;end select
    ELSE
     CALL logmessage("getAppliedToDetails","unable to identify the comment/activity details",
      log_debug)
     RETURN(false)
    ENDIF
    IF (((textlen(trim(prappliedtotxt))=0) OR (prappliedtocd=0.0)) )
     SET sbuildstr = build("The subroutine couldn't resolve Description Text(",pparententityname,")")
     CALL logmessage("getAppliedToDetails",sbuildstr,log_debug)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(getrefundactivitydescription,char(128))=char(128))
  SUBROUTINE (getrefundactivitydescription(aprefundid=f8,refundamt=f8,changedfieldcd=f8,previousvalue
   =f8,currentvalue=f8) =vc)
    CALL logmessage("getRefundActivityDescription","Entering...",log_debug)
    DECLARE desc = vc WITH noconstant("")
    DECLARE prev_value = f8 WITH constant(cnvtint(previousvalue))
    DECLARE current_value = f8 WITH constant(cnvtint(currentvalue))
    DECLARE changed_field = vc WITH constant(uar_get_code_display(changedfieldcd))
    DECLARE pftencntralias = vc WITH noconstant("")
    SELECT INTO "nl:"
     FROM pft_ap_refund par,
      pft_ap_refund_reltn parr,
      pft_encntr pe,
      encntr_alias ea
     PLAN (par
      WHERE par.pft_ap_refund_id=aprefundid
       AND par.active_ind=true)
      JOIN (parr
      WHERE parr.pft_ap_refund_id=par.pft_ap_refund_id
       AND parr.parent_entity_name="PFT_ENCNTR"
       AND parr.active_ind=true)
      JOIN (pe
      WHERE pe.pft_encntr_id=parr.parent_entity_id
       AND pe.active_ind=true)
      JOIN (ea
      WHERE (ea.encntr_id= Outerjoin(pe.encntr_id))
       AND (ea.beg_effective_dt_tm<= Outerjoin(cnvtdatetime(sysdate)))
       AND (ea.end_effective_dt_tm> Outerjoin(cnvtdatetime(sysdate)))
       AND (ea.active_ind= Outerjoin(true))
       AND (ea.encntr_alias_type_cd= Outerjoin(cs319_fin_nbr_cd)) )
     HEAD parr.pft_ap_refund_id
      IF (pe.recur_current_month > 0
       AND pe.recur_current_year > 0)
       pftencntralias = concat(trim(cnvtstring(ea.alias),3)," - ",trim(cnvtstring(pe.recur_seq),3))
      ELSE
       pftencntralias = trim(ea.alias,3)
      ENDIF
     WITH nocounter
    ;end select
    SET desc = build2(i18n_encounter," ",trim(pftencntralias,3))
    SET desc = build2(desc,", ",i18n_refund_id," ",cnvtstring(aprefundid))
    SET desc = build2(desc,", ",i18n_refund_amt," ",formatcurrency(refundamt,0))
    IF (prev_value != 0)
     SET desc = build2(desc,", ",uar_i18nbuildmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.Modified from",
       "%1 modified from %2 to %3","sss",nullterm(trim(changed_field,3)),
       nullterm(trim(uar_get_code_meaning(prev_value),3)),nullterm(trim(uar_get_code_meaning(
          current_value),3))))
    ELSE
     SET desc = build2(desc,", ",uar_i18nbuildmessage(hi18n,"PFT_RCA_I18N_CONSTANTS.Set to",
       "%1 set to %2","ss",nullterm(trim(changed_field,3)),
       nullterm(trim(uar_get_code_meaning(current_value),3))))
    ENDIF
    CALL logmessage("getRefundActivityDescription","Exiting...",log_debug)
    RETURN(desc)
  END ;Subroutine
 ENDIF
 IF (validate(midmonthservicedateshelper,char(128))=char(128))
  SUBROUTINE (midmonthservicedateshelper(pftencntrid=f8,finclasscd=f8,encntrid=f8,prservicefromdate=
   dq8(ref),prservicetodate=dq8(ref),encntrfromdate=dq8,encntrtodate=dq8) =i2)
   IF (finclasscd != cs354_selfpay_cd
    AND ismidmonthpreferenceenabled
    AND checkiforgmarkedforhpexpire(encntrid))
    IF (cnvtdatetime(cnvtdate(prservicefromdate),0)=cnvtdatetime(cnvtdate(encntrfromdate),0)
     AND cnvtdatetime(cnvtdate(prservicetodate),0)=cnvtdatetime(cnvtdate(encntrtodate),0))
     IF ( NOT (calculatemidmonthservicedates(pftencntrid,prservicefromdate,prservicetodate)))
      CALL logmessage("calculateMidMonthServiceDates","Failed to change dates for mid month scenario",
       log_debug)
      RETURN(false)
     ELSE
      RETURN(true)
     ENDIF
    ENDIF
   ENDIF
   RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(cs24454_aprefund_cd)))
  DECLARE cs24454_aprefund_cd = f8 WITH protect, constant(getcodevalue(24454,"APREFUND_ID",0))
 ENDIF
 IF ( NOT (validate(cs24454_rfndaddrmod_cd)))
  DECLARE cs24454_rfndaddrmod_cd = f8 WITH protect, constant(getcodevalue(24454,"RFNDADDRMOD",0))
 ENDIF
 IF ( NOT (validate(cs29322_aprfndcreat_cd)))
  DECLARE cs29322_aprfndcreat_cd = f8 WITH protect, constant(getcodevalue(29322,"APRFNDCREAT",0))
 ENDIF
 IF ( NOT (validate(cs29420_created_cd)))
  DECLARE cs29420_created_cd = f8 WITH protect, constant(getcodevalue(29420,"CREATED",0))
 ENDIF
 IF ( NOT (validate(cs29420_approved_cd)))
  DECLARE cs29420_approved_cd = f8 WITH protect, constant(getcodevalue(29420,"APPROVED",0))
 ENDIF
 IF ( NOT (validate(cs29420_submitted_cd)))
  DECLARE cs29420_submitted_cd = f8 WITH protect, constant(getcodevalue(29420,"SUBMITTED",0))
 ENDIF
 IF ( NOT (validate(cs29420_checkcut_cd)))
  DECLARE cs29420_checkcut_cd = f8 WITH protect, constant(getcodevalue(29420,"CHECK_CUT",0))
 ENDIF
 IF ( NOT (validate(cs29420_voidrequest_cd)))
  DECLARE cs29420_voidrequest_cd = f8 WITH protect, constant(getcodevalue(29420,"VOIDREQUEST",0))
 ENDIF
 IF ( NOT (validate(cs29420_voidsubmit_cd)))
  DECLARE cs29420_voidsubmit_cd = f8 WITH protect, constant(getcodevalue(29420,"VOIDSUBMIT",0))
 ENDIF
 IF ( NOT (validate(cs29420_cancelled_cd)))
  DECLARE cs29420_cancelled_cd = f8 WITH protect, constant(getcodevalue(29420,"CANCELLED",0))
 ENDIF
 IF ( NOT (validate(cs29420_completed_cd)))
  DECLARE cs29420_completed_cd = f8 WITH protect, constant(getcodevalue(29420,"COMPLETED",0))
 ENDIF
 IF ( NOT (validate(cs29420_check_cashed_cd)))
  DECLARE cs29420_check_cashed_cd = f8 WITH protect, constant(getcodevalue(29420,"CHECK_CASHED",0))
 ENDIF
 IF ( NOT (validate(cs29420_voided_cd)))
  DECLARE cs29420_voided_cd = f8 WITH protect, constant(getcodevalue(29420,"VOIDED",0))
 ENDIF
 IF ( NOT (validate(cs29420_pending_cd)))
  DECLARE cs29420_pending_cd = f8 WITH protect, constant(getcodevalue(29420,"PENDING",0))
 ENDIF
 IF ( NOT (validate(cs29420_denied_cd)))
  DECLARE cs29420_denied_cd = f8 WITH protect, constant(getcodevalue(29420,"DENIED",0))
 ENDIF
 IF ( NOT (validate(cs4003340_other_cd)))
  DECLARE cs4003340_other_cd = f8 WITH protect, constant(getcodevalue(4003340,"OTHER",0))
 ENDIF
 IF ( NOT (validate(cs25571_cancelled_cd)))
  DECLARE cs25571_cancelled_cd = f8 WITH protect, constant(getcodevalue(25571,"CANCELLED",0))
 ENDIF
 IF ( NOT (validate(cs29424_immediately_post_refunds_cd)))
  DECLARE cs29424_immediately_post_refunds_cd = f8 WITH protect, constant(uar_get_code_by(
    "DISPLAYKEY",29424,"IMMEDIATELYPOSTREFUNDS"))
 ENDIF
 IF ( NOT (validate(cs23372_comp_wo_err_cd)))
  DECLARE cs23372_comp_wo_err_cd = f8 WITH protect, constant(getcodevalue(23372,"COMP WO ERR",0))
 ENDIF
 IF ( NOT (validate(cs29322_aprfndccfail_cd)))
  DECLARE cs29322_aprfndccfail_cd = f8 WITH protect, constant(getcodevalue(29322,"APRFNDCCFAIL",0))
 ENDIF
 IF ( NOT (validate(cs23369_wfevent_cd)))
  DECLARE cs23369_wfevent_cd = f8 WITH protect, constant(getcodevalue(23369,"WFEVENT",0))
 ENDIF
 IF ( NOT (validate(cs24454_aprefund_id_cd)))
  DECLARE cs24454_aprefund_id_cd = f8 WITH protect, constant(getcodevalue(24454,"APREFUND_ID",0))
 ENDIF
 IF ( NOT (validate(cs4490006_refund_cd)))
  DECLARE cs4490006_refund_cd = f8 WITH protect, constant(getcodevalue(4490006,"REFUND",0))
 ENDIF
 IF ( NOT (validate(cs4484006_patientaccounting_cd)))
  DECLARE cs4484006_patientaccounting_cd = f8 WITH protect, constant(getcodevalue(4484006,"PATSACCT",
    0))
 ENDIF
 IF (validate(_hi18n)=0)
  DECLARE _hi18n = i4 WITH protect, noconstant(0)
 ENDIF
 CALL uar_i18nlocalizationinit(_hi18n,curprog,"",curcclrev)
 DECLARE ap_refund_cancel_i18n = vc WITH protect, constant(uar_i18ngetmessage(_hi18n,
   "AP_REFUND_CANCEL_I18N","AP Refund Could Not Process."))
 IF ( NOT (validate(credit_card_reversal_trans_batch_type)))
  DECLARE credit_card_reversal_trans_batch_type = i4 WITH public, constant(529)
 ENDIF
 DECLARE phase_two_complete = vc WITH protect, constant("Phase Two Complete")
 DECLARE reconciliation_event_created = vc WITH protect, constant("Reconciliation Event Created")
 DECLARE interface_transaction_updated = vc WITH protect, constant("Interface Transaction Updted")
 DECLARE ap_refund_update_failed = vc WITH protect, constant("AP Refund Update Failed")
 DECLARE refund_posted = vc WITH protect, constant("Refund Posted")
 DECLARE batch_cancelled = vc WITH protect, constant("Refund Batch Cancelled")
 DECLARE phase_one_failed = vc WITH protect, constant("Refund Phase 1 Failed")
 DECLARE phase_one_complete = vc WITH protect, constant("Refund Phase 1 Complete")
 DECLARE tempparamf8 = f8 WITH protect, noconstant(0.0)
 DECLARE tempparamvc = vc WITH protect, noconstant("")
 SUBROUTINE (getaprefundidforworkitem(workflowitemid=f8) =f8)
   DECLARE aprefundid = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM pft_queue_item_wf_hist pqh,
     pft_queue_item_wf_reltn pqr
    PLAN (pqh
     WHERE pqh.pft_queue_item_id=workflowitemid)
     JOIN (pqr
     WHERE pqr.pft_queue_item_wf_hist_id=pqh.pft_queue_item_wf_hist_id
      AND pqr.parent_entity_name="APREFUND_ID")
    DETAIL
     aprefundid = pqr.parent_entity_id
    WITH nocounter
   ;end select
   RETURN(aprefundid)
 END ;Subroutine
 SUBROUTINE (isrefundaddressmodified(aprefundid=f8) =f8)
   DECLARE addressmodified = i2 WITH protect, noconstant(- (1))
   SELECT INTO "nl:"
    FROM pft_ap_refund_reltn parr,
     pft_event_occur_log peo,
     pft_event pe,
     pft_event_params pep,
     pft_event_params pep2
    PLAN (parr
     WHERE parr.pft_ap_refund_id=aprefundid
      AND parr.parent_entity_name="PFT_ENCNTR")
     JOIN (peo
     WHERE peo.parent_entity_id=parr.parent_entity_id
      AND peo.parent_entity_name="PFTENCNTR")
     JOIN (pe
     WHERE pe.pft_event_id=peo.pft_event_id
      AND pe.pft_event_sub_type_cd=cs29322_aprfndcreat_cd)
     JOIN (pep
     WHERE pep.pft_event_occur_log_id=peo.pft_event_occur_log_id
      AND pep.value=cnvtstring(aprefundid,19,0)
      AND pep.value_specifier_cd=cs24454_aprefund_cd)
     JOIN (pep2
     WHERE pep2.pft_event_occur_log_id=peo.pft_event_occur_log_id
      AND pep2.value_specifier_cd=cs24454_rfndaddrmod_cd)
    DETAIL
     addressmodified = evaluate(cnvtint(pep2.value),0,false,true)
    WITH nocounter
   ;end select
   RETURN(addressmodified)
 END ;Subroutine
 SUBROUTINE (updatepaymentdetail(prefundid=f8,pupdaterefundable=i2,padd2pending=i2,pupdatepending=i2,
  pbatchtransid=f8(value,0.0),pisvoided=i2(value,0)) =i2)
   CALL logmessage("updatePaymentDetail","Entering...",log_debug)
   DECLARE pdcnt = i4 WITH protect, noconstant(0)
   DECLARE amtflag = i2 WITH protect, noconstant(evaluate(padd2pending,true,debit_flag,credit_flag))
   DECLARE rtnval = i2 WITH private, noconstant(true)
   RECORD pdrequest(
     1 objarray[*]
       2 payment_detail_id = f8
       2 updt_cnt = i4
       2 refundable_amount = f8
       2 pending_refund_amount = f8
       2 refundedamt = f8
   ) WITH protect
   RECORD pdreply(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   IF (prefundid > 0.0)
    SELECT INTO "nl:"
     FROM pft_ap_refund_reltn parr,
      payment_detail pd
     PLAN (parr
      WHERE parr.pft_ap_refund_id=prefundid
       AND parr.parent_entity_name="PAYMENT_DETAIL"
       AND parr.active_ind=1)
      JOIN (pd
      WHERE pd.payment_detail_id=parr.parent_entity_id)
     ORDER BY pd.payment_detail_id
     HEAD pd.payment_detail_id
      pdcnt += 1, stat = alterlist(pdrequest->objarray,pdcnt), pdrequest->objarray[pdcnt].
      payment_detail_id = pd.payment_detail_id,
      pdrequest->objarray[pdcnt].updt_cnt = pd.updt_cnt, pdrequest->objarray[pdcnt].
      pending_refund_amount = pd.pending_refund_amount, pdrequest->objarray[pdcnt].refundable_amount
       = pd.refundable_amount
     DETAIL
      pdrequest->objarray[pdcnt].refundedamt = (parr.refund_amt+ pdrequest->objarray[pdcnt].
      refundedamt)
     WITH nocounter
    ;end select
   ELSEIF (pbatchtransid > 0.0)
    SELECT INTO "nl:"
     FROM batch_trans_file btf,
      trans_log tl,
      payment_detail pd
     PLAN (btf
      WHERE btf.batch_trans_id=pbatchtransid
       AND btf.parent_entity_name="ACTIVITY_LOG")
      JOIN (tl
      WHERE tl.activity_id=btf.parent_entity_id)
      JOIN (pd
      WHERE pd.payment_detail_id=tl.payment_detail_id)
     ORDER BY pd.payment_detail_id
     HEAD pd.payment_detail_id
      pdcnt += 1, stat = alterlist(pdrequest->objarray,pdcnt), pdrequest->objarray[pdcnt].
      payment_detail_id = pd.payment_detail_id,
      pdrequest->objarray[pdcnt].updt_cnt = pd.updt_cnt, pdrequest->objarray[pdcnt].
      pending_refund_amount = pd.pending_refund_amount, pdrequest->objarray[pdcnt].refundable_amount
       = pd.refundable_amount
     DETAIL
      pdrequest->objarray[pdcnt].refundedamt = (btf.trans_total_amount+ pdrequest->objarray[pdcnt].
      refundedamt)
    ;end select
   ENDIF
   IF (pdcnt <= 0)
    CALL logmessage("updatePaymentDetail","No payment details to update",log_error)
    RETURN(rtnval)
   ENDIF
   FOR (pdcnt = 1 TO size(pdrequest->objarray,5))
    IF (pupdatepending)
     IF ( NOT (addamounttosignedbalance(pdrequest->objarray[pdcnt].pending_refund_amount,pdrequest->
      objarray[pdcnt].refundedamt,amtflag,pdrequest->objarray[pdcnt].pending_refund_amount)))
      CALL logmessage("updatePaymentDetail",
       "Failed, updating Pending Refund Amount for Payment Detail",log_error)
      SET rtnval = false
     ENDIF
     IF ((pdrequest->objarray[pdcnt].pending_refund_amount < 0.0))
      SET pdrequest->objarray[pdcnt].pending_refund_amount = 0.0
     ENDIF
    ENDIF
    IF (pupdaterefundable)
     IF (pisvoided)
      IF ( NOT (addamounttosignedbalance(pdrequest->objarray[pdcnt].refundable_amount,pdrequest->
       objarray[pdcnt].refundedamt,debit_flag,pdrequest->objarray[pdcnt].refundable_amount)))
       CALL logmessage("updatePaymentDetail","Failed, updating Refundable Amount for Payment Detail",
        log_error)
       SET rtnval = false
      ENDIF
     ELSE
      IF ( NOT (addamounttosignedbalance(pdrequest->objarray[pdcnt].refundable_amount,pdrequest->
       objarray[pdcnt].refundedamt,credit_flag,pdrequest->objarray[pdcnt].refundable_amount)))
       CALL logmessage("updatePaymentDetail","Failed, updating Refundable Amount for Payment Detail",
        log_error)
       SET rtnval = false
      ENDIF
     ENDIF
     IF ((pdrequest->objarray[pdcnt].refundable_amount < 0.0))
      SET pdrequest->objarray[pdcnt].refundable_amount = 0.0
     ENDIF
    ENDIF
   ENDFOR
   IF (rtnval
    AND size(pdrequest->objarray,5) > 0)
    EXECUTE pft_da_upt_payment_detail  WITH replace("REQUEST",pdrequest), replace("REPLY",pdreply)
    IF ((pdreply->status_data.status != "S"))
     CALL logmessage("updatePaymentDetail","Failed, pft_da_upt_payment_detail did not return success",
      log_error)
     RETURN(false)
    ENDIF
    CALL logmessage("updatePaymentDetail","Success, updated Payment Detail",log_debug)
   ENDIF
   CALL logmessage("updatePaymentDetail","Exiting...",log_debug)
   RETURN(rtnval)
 END ;Subroutine
 SUBROUTINE (updatestatus(paprefundid=f8,poldcode=f8,pnewcode=f8) =i2)
   CALL logmessage("updateStatus",build2("updateStatus: Entering, refund ID = ",cnvtstring(
      paprefundid,17,2)),log_debug)
   IF (paprefundid <= 0.0)
    CALL logmessage("updateStatus",build2("Exiting AP Refund Id (",paprefundid,") does not exist"),
     log_debug)
    RETURN(true)
   ENDIF
   DECLARE refundstatuscd = f8 WITH protect, noconstant(0.0)
   DECLARE updatecount = i4 WITH protect, noconstant(0)
   DECLARE currentstatuscd = f8 WITH protect, noconstant(0.0)
   DECLARE cancelreasoncd = f8 WITH protect, noconstant(0.0)
   RECORD aprefundrequest(
     1 objarray[*]
       2 pft_ap_refund_id = f8
       2 refund_status_cd = f8
       2 cancel_reason_cd = f8
       2 updt_cnt = i4
   ) WITH protect
   RECORD aprefundhistoryrequest(
     1 dap_refund_id = f8
     1 field_qual[*]
       2 dfield_name_cd = f8
       2 sprev_value = vc
       2 scurr_value = vc
   ) WITH protect
   RECORD updatereply(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SET updatecount = getupdatecount(paprefundid,currentstatuscd,cancelreasoncd)
   IF (validate(debug,- (1))=1)
    CALL logmessage("updateStatus",build2("Current status = ",currentstatuscd," New status code = ",
      trim(cnvtstring(pnewcode,17,2),3)),log_debug)
    CALL logmessage("updateStatus",build2("updateStatus: updateCount = ",cnvtstring(updatecount,17,2)
      ),log_debug)
   ENDIF
   IF (updatecount < 0)
    CALL logmessage("updateStatus","FAILURE updating refund status",log_error)
    RETURN(false)
   ENDIF
   IF (currentstatuscd=pnewcode)
    CALL logmessage("updateStatus","Exiting refund status already set to new status",log_error)
    RETURN(true)
   ELSEIF (poldcode > 0.0)
    SET currentstatuscd = poldcode
   ENDIF
   IF (pnewcode=cs29420_cancelled_cd
    AND cancelreasoncd <= 0.0)
    SET cancelreasoncd = cs4003340_other_cd
   ENDIF
   SET stat = alterlist(aprefundrequest->objarray,1)
   SET aprefundrequest->objarray[1].pft_ap_refund_id = paprefundid
   SET aprefundrequest->objarray[1].refund_status_cd = pnewcode
   SET aprefundrequest->objarray[1].updt_cnt = updatecount
   SET aprefundrequest->objarray[1].cancel_reason_cd = cancelreasoncd
   EXECUTE pft_da_upt_ap_refund  WITH replace("REQUEST",aprefundrequest), replace("REPLY",updatereply
    )
   IF ((updatereply->status_data.status != "S"))
    CALL logmessage("updateStatus","FAILURE updating pft_ap_refund table",log_error)
    RETURN(false)
   ELSE
    CALL logmessage("updateStatus","updateStatus: successfully updated status in pft_ap_refund table",
     log_debug)
    SET stat = initrec(updatereply)
    SET stat = uar_get_meaning_by_codeset(29421,"STATUSCODE",1,refundstatuscd)
    SET stat = alterlist(aprefundhistoryrequest->field_qual,1)
    SET aprefundhistoryrequest->dap_refund_id = paprefundid
    SET aprefundhistoryrequest->field_qual[1].dfield_name_cd = refundstatuscd
    SET aprefundhistoryrequest->field_qual[1].scurr_value = cnvtstring(pnewcode,17,0)
    SET aprefundhistoryrequest->field_qual[1].sprev_value = cnvtstring(currentstatuscd,17,0)
    EXECUTE pft_add_ap_refund_hist  WITH replace("REQUEST",aprefundhistoryrequest), replace("REPLY",
     updatereply)
    IF ((updatereply->status_data.status="F"))
     CALL logmessage("updateStatus","FAILURE adding to pft_ap_refund_hist",log_error)
     RETURN(false)
    ENDIF
    IF ( NOT (buildrctimelinerequestforrefund(paprefundid,refundstatuscd,currentstatuscd,pnewcode)))
     CALL logmessage(curprog,"failed to save BuildRCTimelineRequestForRefund()",log_debug)
     RETURN(false)
    ENDIF
   ENDIF
   CALL logmessage("updateStatus"," successfully updated status in pft_ap_refund_hist table",
    log_debug)
   CALL logmessage("updateStatus"," Exiting...",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getupdatecount(paprefundid=f8,proldstatus=f8(ref,tempparamf8),prcancelreason=f8(ref,
   tempparamf8)) =i4)
   CALL logmessage("getUpdateCount","getUpdateCount: Entering...",log_debug)
   DECLARE updatecount = i4 WITH protect, noconstant(- (1))
   SELECT INTO "nl:"
    FROM pft_ap_refund par
    WHERE par.pft_ap_refund_id=paprefundid
    DETAIL
     updatecount = par.updt_cnt, prcancelreason = par.cancel_reason_cd, proldstatus = par
     .refund_status_cd
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL logmessage("getUpdateCount",build2(
      "getUpdateCount: Could not find update count for refund ID: ",paprefundid),log_debug)
   ENDIF
   CALL logmessage("getUpdateCount","getUpdateCount: Exiting...",log_debug)
   RETURN(updatecount)
 END ;Subroutine
 SUBROUTINE (postcreditcardrefund(aprefundid=f8,prstatuscode=f8(ref,tempparamf8)) =i2)
   CALL logmessage("postCreditCardRefund","postCreditCardRefund: Entering...",log_debug)
   CALL logmessage("postCreditCardRefund",build2("postCreditCardRefund: Refund ID = ",cnvtstring(
      aprefundid,17,2)),log_debug)
   RECORD applyrefundrequest(
     1 activityid = f8
     1 paymentdetails[*]
       2 paymentdetailid = f8
       2 paymentmethodcd = f8
       2 refundedamount = f8
       2 refundableamount = f8
       2 updt_cnt = i4
       2 externalident = vc
       2 carddescription = vc
       2 pendingrefundamount = f8
     1 aprefundid = f8
   ) WITH protect
   RECORD applyrefundreply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
     1 message = vc
     1 statuscodekey = vc
     1 receipts[*]
       2 merchantcopy = vc
       2 customercopy = vc
       2 emailcopy = vc
     1 refundreceiptblob = gvc
     1 failedtransactions[*]
       2 paymentdetailid = f8
       2 externalident = vc
       2 carddescription = vc
       2 errormessage = vc
     1 errors[*]
       2 errorcode = vc
       2 errormessage = vc
   ) WITH protect
   SET stat = alterlist(applyrefundrequest->paymentdetails,1)
   SELECT INTO "nl:"
    FROM pft_ap_refund par,
     pft_ap_refund_reltn parr,
     pft_ap_refund_reltn parr2,
     payment_detail pd
    PLAN (par
     WHERE par.pft_ap_refund_id=aprefundid
      AND par.active_ind=1)
     JOIN (parr
     WHERE parr.pft_ap_refund_id IN (par.pft_ap_refund_id, par.parent_pft_ap_refund_id)
      AND parr.parent_entity_name="TRANS_LOG"
      AND parr.active_ind=1)
     JOIN (parr2
     WHERE parr2.pft_ap_refund_id=par.pft_ap_refund_id
      AND parr2.parent_entity_name="PAYMENT_DETAIL"
      AND parr2.active_ind=1)
     JOIN (pd
     WHERE pd.payment_detail_id=parr2.parent_entity_id)
    DETAIL
     applyrefundrequest->activityid = parr.parent_entity_id, applyrefundrequest->paymentdetails[1].
     paymentdetailid = pd.payment_detail_id, applyrefundrequest->paymentdetails[1].paymentmethodcd =
     pd.payment_method_cd,
     applyrefundrequest->paymentdetails[1].refundedamount = par.refund_amt, applyrefundrequest->
     paymentdetails[1].refundableamount = (pd.refundable_amount - par.refund_amt), applyrefundrequest
     ->paymentdetails[1].updt_cnt = pd.updt_cnt,
     applyrefundrequest->paymentdetails[1].externalident = pd.external_ident, applyrefundrequest->
     paymentdetails[1].carddescription = pd.payment_num_desc, applyrefundrequest->paymentdetails[1].
     pendingrefundamount = (pd.pending_refund_amount - par.refund_amt)
    WITH nocounter
   ;end select
   IF (curqual <= 0)
    CALL logmessage("postCreditCardRefund",
     "postCreditCardRefund: Could not find any credit card refunds, exiting...",log_debug)
    RETURN(true)
   ENDIF
   SET applyrefundrequest->aprefundid = aprefundid
   CALL logmessage("postCreditCardRefund",build2(
     "postCreditCardRefund: Posting credit card refund for ",cnvtstring(applyrefundrequest->
      paymentdetails[1].refundedamount,17,2)),log_debug)
   EXECUTE pft_rca_apply_refund  WITH replace("REQUEST",applyrefundrequest), replace("REPLY",
    applyrefundreply)
   CALL getupdatecount(aprefundid,prstatuscode)
   IF (validate(applyrefundreply->errors)
    AND validate(reply->errors))
    SET stat = moverec(applyrefundreply->errors,reply->errors)
   ENDIF
   IF (validate(applyrefundreply->statuscodekey)
    AND validate(reply->statuscodekey))
    SET reply->statuscodekey = applyrefundreply->statuscodekey
   ENDIF
   IF ((applyrefundreply->status_data.status="F"))
    CALL logmessage("postCreditCardRefund",
     "Exiting, Failed to post credit card refund (pft_rca_apply_refund returned failure)",log_error)
    RETURN(false)
   ENDIF
   CALL logmessage("postCreditCardRefund","postCreditCardRefund: exiting with success",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (changeparentrefundstatusandamt(aprefundid=f8,aprefundstatus=f8) =i2)
   CALL logmessage("changeParentRefundStatusAndAmt","Entering...",log_debug)
   DECLARE parentid = f8 WITH protect, noconstant(0)
   DECLARE refundcounter = i2 WITH protect, noconstant(0)
   DECLARE refundcount = i2 WITH protect, noconstant(0)
   DECLARE updatecounter = i4 WITH privateprotect, noconstant(0)
   DECLARE refundamountcd = f8 WITH protect, noconstant(0)
   DECLARE prevparentrefundamt = f8 WITH protect, noconstant(0)
   DECLARE bsiblingsareinfinal = i2 WITH privateprotect, noconstant(true)
   DECLARE bsiblingsarecancelledorvoided = i2 WITH privateprotect, noconstant(true)
   RECORD childrefunds(
     1 completedchildrefundtotal = f8
     1 statuses[*]
       2 childstatus = f8
       2 childrefundamt = f8
   ) WITH protect
   RECORD updateparentrefundamountrequest(
     1 objarray[*]
       2 pft_ap_refund_id = f8
       2 refund_amt = f8
       2 updt_cnt = i4
   ) WITH protect
   RECORD aprefundamounthistoryrequest(
     1 dap_refund_id = f8
     1 field_qual[*]
       2 dfield_name_cd = f8
       2 sprev_value = vc
       2 scurr_value = vc
   ) WITH protect
   RECORD updateparentrefundamountreply(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SELECT INTO "nl:"
    FROM pft_ap_refund par,
     pft_ap_refund par2
    PLAN (par
     WHERE par.pft_ap_refund_id=aprefundid
      AND par.parent_pft_ap_refund_id > 0.0)
     JOIN (par2
     WHERE par2.parent_pft_ap_refund_id=par.parent_pft_ap_refund_id)
    ORDER BY par2.pft_ap_refund_id
    HEAD par2.pft_ap_refund_id
     stat = alterlist(childrefunds->statuses,refundcount)
    DETAIL
     parentid = par.parent_pft_ap_refund_id, refundcount += 1, stat = alterlist(childrefunds->
      statuses,refundcount),
     childrefunds->statuses[refundcount].childstatus = par2.refund_status_cd, childrefunds->statuses[
     refundcount].childrefundamt = par2.refund_amt
     IF (par2.refund_status_cd=cs29420_completed_cd)
      childrefunds->completedchildrefundtotal += par2.refund_amt
     ENDIF
    WITH nocounter
   ;end select
   IF (curqual=0)
    CALL logmessage("changeParentRefundStatusAndAmt","No parent to update, single refund",log_debug)
    RETURN(true)
   ENDIF
   FOR (refundcounter = 1 TO size(childrefunds->statuses,5))
    IF ( NOT ((((childrefunds->statuses[refundcounter].childstatus=cs29420_completed_cd)) OR ((((
    childrefunds->statuses[refundcounter].childstatus=cs29420_check_cashed_cd)) OR ((childrefunds->
    statuses[refundcounter].childstatus=cs29420_voided_cd))) )) ))
     CALL logmessage("changeParentRefundStatusAndAmt",
      "Parent refund status not updated, all child refunds not in final state",log_debug)
     SET bsiblingsareinfinal = false
    ENDIF
    IF ( NOT ((((childrefunds->statuses[refundcounter].childstatus=cs29420_voided_cd)) OR ((
    childrefunds->statuses[refundcounter].childstatus=cs29420_cancelled_cd))) ))
     SET bsiblingsarecancelledorvoided = false
    ENDIF
   ENDFOR
   IF (bsiblingsarecancelledorvoided)
    IF ( NOT (updatestatus(parentid,cs29420_pending_cd,cs29420_cancelled_cd)))
     CALL logmessage("changeParentRefundStatusAndAmt",
      "Failed to update status of parent refund to Cancelled",log_error)
     RETURN(false)
    ENDIF
    CALL logmessage("changeParentRefundStatusAndAmt",
     "Successfully changed status of parent refund to Cancelled",log_debug)
   ENDIF
   IF (bsiblingsareinfinal)
    IF ( NOT (updatestatus(parentid,cs29420_pending_cd,cs29420_completed_cd)))
     CALL logmessage("changeParentRefundStatusAndAmt",
      "Failed to update status of parent refund to Completed",log_error)
     RETURN(false)
    ENDIF
    CALL logmessage("changeParentRefundStatusAndAmt",
     "Successfully changed status of parent refund to Completed",log_debug)
   ENDIF
   IF (aprefundstatus=cs29420_voided_cd)
    SET updatecounter = getupdatecount(parentid)
    IF (updatecounter < 0)
     CALL logmessage("changeParentRefundStatusAndAmt",build2(
       "Exiting: FAILURE retrieving current update count for refund parentId=",parentid),log_debug)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_ap_refund par,
      pft_ap_refund par2
     PLAN (par
      WHERE par.pft_ap_refund_id=aprefundid
       AND par.parent_pft_ap_refund_id > 0.0)
      JOIN (par2
      WHERE par2.pft_ap_refund_id=par.parent_pft_ap_refund_id)
     ORDER BY par2.pft_ap_refund_id
     HEAD par2.pft_ap_refund_id
      prevparentrefundamt = par2.refund_amt, aprefundamounthistoryrequest->dap_refund_id = par2
      .pft_ap_refund_id
     WITH nocounter
    ;end select
    SET stat = alterlist(updateparentrefundamountrequest->objarray,1)
    SET updateparentrefundamountrequest->objarray[1].pft_ap_refund_id = parentid
    SET updateparentrefundamountrequest->objarray[1].refund_amt = childrefunds->
    completedchildrefundtotal
    SET updateparentrefundamountrequest->objarray[1].updt_cnt = updatecounter
    EXECUTE pft_da_upt_ap_refund  WITH replace("REQUEST",updateparentrefundamountrequest), replace(
     "REPLY",updateparentrefundamountreply)
    IF ((updateparentrefundamountreply->status_data.status != "S"))
     CALL logmessage("changeParentRefundStatusAndAmt",
      "FAILURE updating parent refund amount in pft_ap_refund table",log_error)
     RETURN(false)
    ENDIF
    SET stat = uar_get_meaning_by_codeset(29421,"REFUND_AMT",1,refundamountcd)
    SET stat = initrec(updateparentrefundamountreply)
    SET stat = alterlist(aprefundamounthistoryrequest->field_qual,1)
    SET aprefundamounthistoryrequest->field_qual[1].dfield_name_cd = refundamountcd
    SET aprefundamounthistoryrequest->field_qual[1].scurr_value = cnvtstring(childrefunds->
     completedchildrefundtotal,17,0)
    SET aprefundamounthistoryrequest->field_qual[1].sprev_value = cnvtstring(prevparentrefundamt,17,0
     )
    EXECUTE pft_add_ap_refund_hist  WITH replace("REQUEST",aprefundamounthistoryrequest), replace(
     "REPLY",updateparentrefundamountreply)
    IF ((updateparentrefundamountreply->status_data.status="F"))
     CALL logmessage("changeParentRefundStatusAndAmt",
      "FAILURE adding parent refund amount into pft_ap_refund_hist",log_error)
     RETURN(false)
    ENDIF
   ENDIF
   CALL logmessage("changeParentRefundStatusAndAmt","Exiting...",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (isrefundcashedorvoided(aprefundid=f8) =i2)
   CALL logmessage("isRefundCashed","Entering...",log_debug)
   DECLARE iscashedorvoided = i2 WITH protect, noconstant(false)
   SELECT INTO "nl:"
    FROM pft_ap_refund_hist parh
    WHERE parh.pft_ap_refund_id=aprefundid
     AND ((parh.current_value=cnvtstring(cs29420_check_cashed_cd,17,0)) OR (parh.current_value=
    cnvtstring(cs29420_voided_cd,17,0)))
    DETAIL
     iscashedorvoided = true
    WITH nocounter
   ;end select
   CALL logmessage("isRefundCashedOrVoided",build2("Exiting:  isRefundCashedOrVoided=",
     iscashedorvoided),log_debug)
   RETURN(iscashedorvoided)
 END ;Subroutine
 SUBROUTINE (getimmediatelypostoption(billingentityid=f8) =i2)
   CALL logmessage("getImmediatelyPostOption","Entering...",log_debug)
   DECLARE immediatelypostoption = i2 WITH protect, noconstant(false)
   SELECT INTO "nl:"
    FROM pft_ap_options pao
    WHERE pao.billing_entity_id=billingentityid
     AND pao.ap_type_name_cd=cs29424_immediately_post_refunds_cd
    DETAIL
     IF (cnvtupper(pao.ap_type_result_str)="YES")
      immediatelypostoption = true
     ENDIF
    WITH nocounter
   ;end select
   CALL logmessage("getImmediatelyPostOption",build2("Exiting:  immediatelyPostOption=",
     immediatelypostoption),log_debug)
   RETURN(immediatelypostoption)
 END ;Subroutine
 SUBROUTINE (logrefundcapabilityinfo(aprefundid=f8,capabilityid=vc) =null)
   RECORD capabilitylogrequest(
     1 capability_ident = vc
     1 teamname = vc
     1 entities[*]
       2 entity_id = f8
       2 entity_name = vc
   ) WITH protect
   RECORD capabilitylogreply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SET capabilitylogrequest->capability_ident = capabilityid
   SET capabilitylogrequest->teamname = "PATIENT_ACCOUNTING"
   SET stat = alterlist(capabilitylogrequest->entities,1)
   SET capabilitylogrequest->entities[1].entity_id = aprefundid
   SET capabilitylogrequest->entities[1].entity_name = "REFUND"
   EXECUTE pft_log_solution_capability  WITH replace("REQUEST",capabilitylogrequest), replace("REPLY",
    capabilitylogreply)
   IF ((capabilitylogreply->status_data.status != "S"))
    CALL logmessage(curprog,"logRefundCapabilityInfo: pft_log_solution_capability failed.",log_error)
   ENDIF
   RETURN
 END ;Subroutine
 SUBROUTINE (disablereversetransforinstrans(bohpreltnid=f8) =i2)
   CALL logmessage("disableReverseTransForInsTrans","Entering disableReverseTransForInsTrans()...",
    log_debug)
   DECLARE disablereversetransaction = i2 WITH protect, noconstant(false)
   SELECT INTO "nl:"
    FROM bo_hp_reltn bhr,
     pft_ap_refund_reltn parr,
     pft_ap_refund_reltn parr1,
     pft_ap_options pao,
     pft_ap_refund par
    PLAN (bhr
     WHERE bhr.bo_hp_reltn_id=bohpreltnid)
     JOIN (parr
     WHERE parr.parent_entity_name="BO_HP_RELTN"
      AND parr.parent_entity_id=bhr.bo_hp_reltn_id)
     JOIN (parr1
     WHERE parr1.parent_entity_name="BILLING_ENTITY"
      AND parr1.pft_ap_refund_id=parr.pft_ap_refund_id)
     JOIN (pao
     WHERE pao.billing_entity_id=parr1.parent_entity_id
      AND pao.ap_type_name_cd=cs29424_immediately_post_refunds_cd)
     JOIN (par
     WHERE par.pft_ap_refund_id=parr.pft_ap_refund_id
      AND  NOT (par.refund_status_cd IN (cs29420_cancelled_cd, cs29420_denied_cd, cs29420_voided_cd))
     )
    DETAIL
     IF (cnvtupper(pao.ap_type_result_str)="YES")
      IF (par.refund_status_cd IN (cs29420_created_cd, cs29420_approved_cd))
       disablereversetransaction = true
      ENDIF
     ELSEIF (cnvtupper(pao.ap_type_result_str)="NO")
      IF (par.refund_status_cd IN (cs29420_created_cd, cs29420_approved_cd, cs29420_submitted_cd,
      cs29420_checkcut_cd, cs29420_voidrequest_cd,
      cs29420_voidsubmit_cd))
       disablereversetransaction = true
      ENDIF
     ENDIF
    WITH nocounter
   ;end select
   CALL logmessage("disableReverseTransForInsTrans","Exiting disableReverseTransForInsTrans()...",
    log_debug)
   RETURN(disablereversetransaction)
 END ;Subroutine
 SUBROUTINE (addcancelaprefundcomment(prefundid=f8,prefundcommenttext=vc) =i2)
   CALL logmessage("addCancelAPRefundComment","Entering",log_debug)
   IF (prefundid < 0.0)
    CALL logmessage("addCancelAPRefundComment",build2("Exiting AP Refund Id (",prefundid,
      ") does not exist"),log_debug)
    RETURN(true)
   ENDIF
   RECORD commentrequest(
     1 comment_text = vc
     1 related_id = f8
     1 related_vrsn_nbr = i4
     1 class_desc = i4
     1 importance_flag = i2
     1 comment_date = dq8
     1 charge_ind = i2
     1 reason_cd = f8
   ) WITH protect
   RECORD commentreply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SET commentrequest->comment_text = evaluate(prefundcommenttext,"",ap_refund_cancel_i18n,concat(
     ap_refund_cancel_i18n," ",prefundcommenttext))
   SET commentrequest->related_id = prefundid
   SET commentrequest->class_desc = 15
   SET commentrequest->importance_flag = 1
   EXECUTE pft_rca_apply_comment  WITH replace("REQUEST",commentrequest), replace("REPLY",
    commentreply)
   IF ((commentreply->status_data.status != "S"))
    CALL addtracemessage("addCancelAPRefundComment","Failed to apply comment")
    RETURN(false)
   ENDIF
   CALL logmessage("addCancelAPRefundComment","Exiting",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (updaterefundstatus(paprefundid=f8,pbatchtransid=f8,pinterfacetransid=f8,pupdatestatus=f8,
  pauthmsg=vc,prrefundstate=vc(ref)) =i2)
   CALL logmessage("updateRefundStatus","Entering",log_debug)
   IF (paprefundid <= 0.0
    AND pbatchtransid <= 0.0
    AND pinterfacetransid <= 0.0)
    CALL addtracemessage("updateRefundStatus",
     "Missing AP Refund, Batch Trans, or Interface Transaction Identifier")
    RETURN(false)
   ELSEIF ( NOT (pupdatestatus IN (cs29420_completed_cd, cs29420_cancelled_cd, cs29420_approved_cd)))
    CALL addtracemessage("updateRefundStatus","Failed because status is not supported")
    RETURN(false)
   ENDIF
   CASE (pupdatestatus)
    OF cs29420_completed_cd:
     IF (pinterfacetransid > 0)
      IF ( NOT (updateinterfacetransactionstatus(pinterfacetransid,cs25571_cancelled_cd,prrefundstate
       )))
       CALL addtracemessage("updateRefundStatus","Failed to Cancel Interface Transaction")
       RETURN(false)
      ENDIF
     ELSE
      IF (size(pauthmsg,3) > 1
       AND pbatchtransid > 0.0)
       CALL updateccauth(pbatchtransid,pauthmsg)
      ENDIF
      IF ( NOT (postccreversalbatch(pbatchtransid,prrefundstate)))
       CALL addtracemessage("updateRefundStatus","Failed to post reversal batch")
       RETURN(false)
      ENDIF
      IF ( NOT (updateaprefundreltn(paprefundid,pbatchtransid)))
       CALL addtracemessage("updateRefundStatus","Failed to update AP Refund Reltn Details")
       RETURN(false)
      ENDIF
      IF ( NOT (updatepaymentdetail(paprefundid,true,false,true,pbatchtransid)))
       CALL addtracemessage("updateRefundStatus",
        "Failed to update Payment Details Refundable and Pending Amounts")
       RETURN(false)
      ENDIF
     ENDIF
    OF cs29420_cancelled_cd:
     IF ( NOT (updatepeoneob(pbatchtransid)))
      CALL addtracemessage("updateRefundStatus","Failed to update EOB Details in our batch")
      RETURN(false)
     ENDIF
     IF ( NOT (updateaprefundreltn(paprefundid,pbatchtransid)))
      CALL addtracemessage("updateRefundStatus","Failed to update AP Refund Reltn Details")
      RETURN(false)
     ENDIF
     IF ( NOT (updatepaymentdetail(paprefundid,false,false,true,pbatchtransid)))
      CALL addtracemessage("updateRefundStatus",
       "Failed to update Payment Details Pending Refund Amount")
      RETURN(false)
     ENDIF
     IF ( NOT (cancelbatch(pbatchtransid,prrefundstate)))
      CALL addtracemessage("updateRefundStatus","Failed to cancel batch")
      RETURN(false)
     ENDIF
     CALL addcancelaprefundcomment(paprefundid,pauthmsg)
    OF cs29420_approved_cd:
     IF (paprefundid <= 0.0)
      IF ( NOT (updatepaymentdetail(0.0,false,true,true,pbatchtransid)))
       CALL addtracemessage("updateRefundStatus","Failed to add update Pending Refund Amount")
       RETURN(false)
      ENDIF
     ENDIF
   ENDCASE
   IF ( NOT (updatestatus(paprefundid,0.0,pupdatestatus)))
    CALL addtracemessage("updateRefundStatus",build2("Failed to update refund status to ",
      uar_get_code_display(pupdatestatus)))
    RETURN(false)
   ENDIF
   CALL logmessage("updateRefundStatus","Exiting",log_debug)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (updateccauth(pbatchtransid=f8,prefundauthnbr=vc) =i2)
   RECORD btfreq(
     1 objarray[*]
       2 batch_trans_file_id = f8
       2 cc_auth_nbr = vc
       2 updt_cnt = f8
   ) WITH protect
   RECORD btfrep(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   DECLARE idx = i4 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM batch_trans_file btf
    WHERE btf.batch_trans_id=pbatchtransid
     AND btf.batch_trans_id > 0.0
    DETAIL
     idx += 1, stat = alterlist(btfreq->objarray,idx), btfreq->objarray[idx].batch_trans_file_id =
     btf.batch_trans_file_id,
     btfreq->objarray[idx].cc_auth_nbr = prefundauthnbr, btfreq->objarray[idx].updt_cnt = btf
     .updt_cnt
    WITH nocounter
   ;end select
   IF (idx > 0)
    EXECUTE pft_da_upt_batch_trans_file  WITH replace("REQUEST",btfreq), replace("REPLY",btfrep)
   ENDIF
   IF ((btfrep->status_data.status != "S"))
    CALL echorecord(btfreq)
    CALL echorecord(btfrep)
    CALL addtracemessage("updateCCAuth",build2("Failed to populate cc_auth_nbr for Batch Id: ",
      pbatchtransid))
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (cancelbatch(pbatchtransid=f8,prrefundstate=vc(ref)) =i2)
   RECORD cancelbatchreq(
     1 batch_trans_id = f8
   ) WITH protect
   RECORD cancelbatchrep(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   IF (pbatchtransid <= 0.0)
    CALL logmessage("cancelBatch",build2("Exiting Batch Id (",pbatchtransid,") does not exist"),
     log_debug)
    RETURN(true)
   ENDIF
   SET cancelbatchreq->batch_trans_id = pbatchtransid
   EXECUTE pft_undo_batchprocessing  WITH replace("REQUEST",cancelbatchreq), replace("REPLY",
    cancelbatchrep)
   IF ((cancelbatchrep->status_data.status != "S"))
    CALL addtracemessage("cancelBatch","PFT_UNDO_BATCHPROCESSING returned failure.")
    IF (validate(debug,0)=1)
     CALL echorecord(cancelbatchreq)
     CALL echorecord(cancelbatchrep)
    ENDIF
    RETURN(false)
   ENDIF
   SET prrefundstate = batch_cancelled
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (postccreversalbatch(pbatchtransid=f8,prrefundstate=vc(ref)) =i2)
   DECLARE batchflag = i2 WITH protect, noconstant(0)
   DECLARE batchstatus = f8 WITH protect, noconstant(0.0)
   RECORD postbatchreq(
     1 batchid = f8
   ) WITH protect
   RECORD postbatchrep(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SELECT INTO "nl:"
    FROM batch_trans b
    WHERE b.batch_trans_id=pbatchtransid
    DETAIL
     postbatchreq->batchid = b.batch_trans_id, batchflag = b.batch_type_flag, batchstatus = b
     .batch_status_cd
    WITH nocounter
   ;end select
   IF (batchflag=credit_card_reversal_trans_batch_type)
    EXECUTE pft_rca_post_remittance  WITH replace("REQUEST",postbatchreq), replace("REPLY",
     postbatchrep)
    IF ((postbatchrep->status_data.status != "S"))
     CALL addtracemessage("postCCReversalBatch","Failed during call to pft_rca_post_remittance")
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM batch_trans b
     WHERE b.batch_trans_id=pbatchtransid
     DETAIL
      batchflag = b.batch_type_flag, batchstatus = b.batch_status_cd
     WITH nocounter
    ;end select
   ENDIF
   IF (batchstatus != cs23372_comp_wo_err_cd)
    CALL addtracemessage("postCCReversalBatch",build2("Failed Posting Batch:",pbatchtransid,
      "  Status:",uar_get_code_display(batchstatus)))
    RETURN(false)
   ENDIF
   SET prrefundstate = refund_posted
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (updateinterfacetransactionstatus(pinterfacetransid=f8,pstatus=f8,pupdtcnt=i4,
  prrefundstate=vc(ref,tempparamvc)) =i2)
   RECORD iftupdatereq(
     1 objarray[*]
       2 interface_transaction_id = f8
       2 interface_status_cd = f8
       2 updt_cnt = i4
   ) WITH protect
   RECORD iftupdaterep(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SELECT INTO "nl:"
    FROM interface_transaction it
    WHERE it.interface_transaction_id=pinterfacetransid
    DETAIL
     stat = alterlist(iftupdatereq->objarray,1), iftupdatereq->objarray[1].interface_transaction_id
      = it.interface_transaction_id, iftupdatereq->objarray[1].interface_status_cd = pstatus,
     iftupdatereq->objarray[1].updt_cnt = it.updt_cnt
    WITH nocounter
   ;end select
   IF (size(iftupdatereq->objarray,5) > 1)
    EXECUTE pft_da_upt_interface_trans  WITH replace("REQUEST",iftupdatereq), replace("REPLY",
     iftupdaterep)
   ENDIF
   IF ((iftupdaterep->status_data.status != "S"))
    CALL addtracemessage("updateInterfaceTransactionStatus","Failed to update interface_transaction")
    RETURN(false)
   ENDIF
   SET prrefundstate = interface_transaction_updated
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (updateaprefundreltn(paprefundid=f8,pbatchtransid=f8) =i2)
   RECORD aprreltnreq(
     1 objarray[*]
       2 pft_ap_refund_reltn_id = f8
       2 parent_entity_id = f8
       2 updt_cnt = i4
   ) WITH protect
   RECORD aprreltnrep(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   DECLARE pftencntrid = f8 WITH protect, noconstant(0.0)
   DECLARE bohpreltnid = f8 WITH protect, noconstant(0.0)
   DECLARE activityid = f8 WITH protect, noconstant(0.0)
   DECLARE paymentdetailid = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM batch_trans_file btf,
     trans_log tl,
     payment_detail pd
    PLAN (btf
     WHERE btf.batch_trans_id=pbatchtransid
      AND btf.parent_entity_name="ACTIVITY_LOG")
     JOIN (tl
     WHERE (tl.activity_id= Outerjoin(btf.parent_entity_id)) )
     JOIN (pd
     WHERE (pd.payment_detail_id= Outerjoin(tl.payment_detail_id)) )
    HEAD REPORT
     pftencntrid = btf.pft_encntr_id, bohpreltnid = btf.benefit_order_id, activityid = btf
     .parent_entity_id,
     paymentdetailid = pd.payment_detail_id
    WITH nocounter
   ;end select
   DECLARE newentityid = f8 WITH protect, noconstant(0.0)
   DECLARE idx = i4 WITH protect, noconstant(0)
   IF (paprefundid > 0.0)
    SELECT INTO "nl:"
     FROM pft_ap_refund_reltn par
     PLAN (par
      WHERE par.pft_ap_refund_id=paprefundid
       AND par.active_ind=1)
     DETAIL
      CASE (par.parent_entity_name)
       OF "PFT_ENCNTR":
        newentityid = pftencntrid
       OF "BO_HP_RELTN":
        newentityid = bohpreltnid
       OF "TRANS_LOG":
        newentityid = activityid
       OF "PAYMENT_DETAIL":
        newentityid = paymentdetailid
       ELSE
        newentityid = 0.0
      ENDCASE
      IF (par.parent_entity_id != newentityid
       AND newentityid > 0.0
       AND par.parent_entity_id > 0.0)
       idx += 1, stat = alterlist(aprreltnreq->objarray,idx), aprreltnreq->objarray[idx].
       pft_ap_refund_reltn_id = par.pft_ap_refund_reltn_id,
       aprreltnreq->objarray[idx].parent_entity_id = newentityid, aprreltnreq->objarray[idx].updt_cnt
        = par.updt_cnt
      ENDIF
     WITH nocounter
    ;end select
   ENDIF
   IF (idx > 0)
    EXECUTE pft_da_upt_pft_ap_refund_reltn  WITH replace("REQUEST",aprreltnreq), replace("REPLY",
     aprreltnrep)
    IF ((aprreltnrep->status_data.status != "S"))
     CALL addtracemessage("updateApRefundReltn","Failed to udpate PFT_AP_REFUND_RELTN Entity Ids")
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (updateaprefundencounterrelations(aprefundlist=vc(ref),topftencntr=f8) =i2)
   RECORD aprefundreq(
     1 objarray[*]
       2 pft_ap_refund_reltn_id = f8
       2 parent_entity_name = vc
       2 parent_entity_id = f8
       2 active_status_cd = f8
       2 updt_cnt = i4
   ) WITH protect
   RECORD aprefundrep(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   DECLARE bohpreltnid = f8 WITH protect, noconstant(0.0)
   DECLARE activityid = f8 WITH protect, noconstant(0.0)
   DECLARE paymentdetailid = f8 WITH protect, noconstant(0.0)
   DECLARE pbatchtransfileid = f8 WITH protect, noconstant(0.0)
   DECLARE idx = i4 WITH protect, noconstant(0)
   FOR (ridx = 1 TO size(aprefundlist->objarray,5))
    DECLARE newentityid = f8 WITH noconstant(0.0)
    IF ((aprefundlist->objarray[ridx].pft_ap_refund_id > 0.0))
     SELECT DISTINCT INTO "nl:"
      FROM pft_ap_refund_reltn parr,
       payment_detail pd,
       trans_log tl,
       pft_trans_reltn ptr,
       batch_trans_file btf
      PLAN (parr
       WHERE (parr.pft_ap_refund_id=aprefundlist->objarray[ridx].pft_ap_refund_id)
        AND parr.parent_entity_name="PAYMENT_DETAIL"
        AND parr.active_ind=true)
       JOIN (pd
       WHERE pd.payment_detail_id=parr.parent_entity_id
        AND pd.active_ind=true)
       JOIN (tl
       WHERE tl.payment_detail_id=pd.payment_detail_id
        AND tl.active_ind=true)
       JOIN (ptr
       WHERE ptr.activity_id=tl.activity_id
        AND ptr.parent_entity_name="PFTENCNTR"
        AND ptr.dr_cr_flag=2
        AND ptr.active_ind=true)
       JOIN (btf
       WHERE btf.parent_entity_id=ptr.activity_id
        AND btf.parent_entity_name="ACTIVITY_LOG"
        AND btf.pft_encntr_id=topftencntr
        AND btf.active_ind=true)
      ORDER BY btf.batch_trans_file_id
      HEAD btf.batch_trans_file_id
       pbatchtransfileid = btf.batch_trans_file_id, bohpreltnid = btf.benefit_order_id
      WITH nocounter
     ;end select
     IF (pbatchtransfileid > 0.0)
      SELECT INTO "nl:"
       FROM pft_trans_reltn ptr,
        trans_log tl
       PLAN (ptr
        WHERE ptr.batch_trans_file_id=pbatchtransfileid
         AND ptr.parent_entity_name="PFTENCNTR"
         AND ptr.parent_entity_id=topftencntr
         AND ptr.active_ind=true)
        JOIN (tl
        WHERE tl.activity_id=ptr.activity_id
         AND tl.active_ind=true)
       ORDER BY tl.activity_id
       HEAD tl.activity_id
        activityid = tl.activity_id, paymentdetailid = tl.payment_detail_id
       WITH nocounter
      ;end select
     ENDIF
     SELECT INTO "nl:"
      FROM pft_ap_refund_reltn parr
      PLAN (parr
       WHERE (parr.pft_ap_refund_id=aprefundlist->objarray[ridx].pft_ap_refund_id)
        AND parr.active_ind=1)
      DETAIL
       CASE (parr.parent_entity_name)
        OF "PFT_ENCNTR":
         newentityid = topftencntr
        OF "BO_HP_RELTN":
         newentityid = bohpreltnid
        OF "TRANS_LOG":
         newentityid = activityid
        OF "PAYMENT_DETAIL":
         newentityid = paymentdetailid
        ELSE
         newentityid = 0.0
       ENDCASE
       IF (newentityid > 0.0
        AND parr.parent_entity_id > 0.0)
        idx += 1, stat = alterlist(aprefundreq->objarray,idx), aprefundreq->objarray[idx].
        pft_ap_refund_reltn_id = parr.pft_ap_refund_reltn_id,
        aprefundreq->objarray[idx].parent_entity_id = newentityid, aprefundreq->objarray[idx].
        updt_cnt = parr.updt_cnt, aprefundreq->objarray[idx].parent_entity_name = parr
        .parent_entity_name,
        aprefundreq->objarray[idx].active_status_cd = parr.active_status_cd
       ENDIF
      WITH nocounter
     ;end select
    ENDIF
   ENDFOR
   IF (size(aprefundreq->objarray,5) > 0)
    EXECUTE pft_da_upt_pft_ap_refund_reltn  WITH replace("REQUEST",aprefundreq), replace("REPLY",
     aprefundrep)
    IF ((aprefundrep->status_data.status != "S"))
     CALL addtracemessage("UpdateAPRefundEncounterRelations",
      "pft_da_upt_pft_ap_refund_reltn did not return success while updating")
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (updatepeoneob(pbatchtransid=f8) =i2)
   RECORD uptpeeobreq(
     1 objarray[*]
       2 batch_trans_id = f8
       2 ext_batch_id_txt = vc
       2 batch_status_cd = f8
       2 batch_status_disp = vc
       2 batch_status_desc = vc
       2 batch_status_mean = vc
       2 batch_status_code_set = i4
       2 pay_stated_total = f8
       2 adj_stated_total = f8
       2 fc_stated_total = f8
       2 onepayment_ind = i2
       2 billing_entity_id = f8
       2 post_dt_tm = dq8
       2 batch_type_flag = i2
       2 batch_type_disp = vc
       2 pay_restated_total = f8
       2 adj_restated_total = f8
       2 fc_restated_total = f8
       2 pay_computed_total = f8
       2 adj_computed_total = f8
       2 fc_computed_total = f8
       2 submitted_ind = i2
       2 submitted_dt_tm = dq8
       2 updt_cnt = i4
       2 pft_event_occur_log_id = f8
       2 session_id = f8
       2 batchjob_ind = i2
       2 deposit_record_id = f8
       2 purged_ind = i2
       2 created_dt_tm = dq8
       2 created_prsnl_id = f8
       2 batch_control_nbr = vc
       2 ext_batch_id_txt_key = vc
       2 ext_batch_id_txt_key_nls = vc
       2 be_name = vc
       2 entity_instance_desc = vc
       2 entity_resource_large_key = vc
       2 entity_resource_small_key = vc
       2 entity_name = vc
       2 active_ind = i2
       2 active_status_cd = f8
       2 active_status_disp = vc
       2 active_status_desc = vc
       2 active_status_mean = vc
       2 active_status_code_set = i4
       2 active_status_dt_tm = dq8
       2 active_status_prsnl_id = f8
       2 beg_effective_dt_tm = dq8
       2 end_effective_dt_tm = dq8
       2 updt_applctx = i4
       2 updt_dt_tm = dq8
       2 updt_id = f8
       2 updt_task = i4
       2 logical_domain_id = f8
   ) WITH protect
   RECORD uptpeeobrep(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
     1 objarray[*]
       2 service_cd = f8
       2 updt_id = f8
       2 event_key = vc
       2 category_key = vc
       2 published_ind = i2
       2 pe_status_reason_cd = f8
       2 acct_id = f8
       2 activity_id = f8
       2 batch_denial_file_r_id = f8
       2 batch_trans_ext_id = f8
       2 batch_trans_file_id = f8
       2 batch_trans_id = f8
       2 benefit_order_id = f8
       2 bill_item_id = f8
       2 bill_templ_id = f8
       2 bill_vrsn_nbr = i4
       2 billing_entity_id = f8
       2 bo_hp_reltn_id = f8
       2 charge_item_id = f8
       2 chrg_activity_id = f8
       2 claim_status_id = f8
       2 client_org_id = f8
       2 corsp_activity_id = f8
       2 corsp_log_reltn_id = f8
       2 denial_id = f8
       2 dirty_flag = i4
       2 encntr_id = f8
       2 guar_acct_id = f8
       2 guarantor_id = f8
       2 health_plan_id = f8
       2 long_text_id = f8
       2 organization_id = f8
       2 payor_org_id = f8
       2 pe_status_reason_id = f8
       2 person_id = f8
       2 pft_balance_id = f8
       2 pft_bill_activity_id = f8
       2 pft_charge_id = f8
       2 pft_encntr_fact_id = f8
       2 pft_encntr_id = f8
       2 pft_line_item_id = f8
       2 trans_alias_id = f8
       2 pft_payment_plan_id = f8
       2 daily_encntr_bal_id = f8
       2 daily_acct_bal_id = f8
       2 active_ind = i2
       2 active_status_cd = f8
       2 active_status_disp = vc
       2 active_status_desc = vc
       2 active_status_mean = vc
       2 active_status_code_set = f8
       2 active_status_dt_tm = dq8
       2 active_status_prsnl_id = f8
       2 beg_effective_dt_tm = dq8
       2 end_effective_dt_tm = dq8
       2 updt_applctx = f8
       2 updt_cnt = i4
       2 updt_dt_tm = dq8
       2 updt_id = f8
       2 updt_task = f8
       2 benefit_status_cd = f8
       2 financial_class_cd = f8
       2 payment_plan_flag = i2
       2 payment_location_id = f8
       2 encntr_plan_cob_id = f8
       2 guarantor_account_id = f8
       2 guarantor_id1 = f8
       2 guarantor_id2 = f8
       2 cbos_pe_reltn_id = f8
       2 post_dt_tm = dq8
       2 posting_category_type_flag = i2
   ) WITH protect
   IF (pbatchtransid > 0.0)
    SET stat = alterlist(uptpeeobreq->objarray,1)
    SET uptpeeobreq->objarray[1].batch_trans_id = pbatchtransid
    SET uptpeeobreq->objarray[1].batch_type_flag = credit_card_reversal_trans_batch_type
    EXECUTE pft_update_pft_encntr_on_eob  WITH replace("REQUEST",uptpeeobreq), replace("REPLY",
     uptpeeobrep)
    IF ((uptpeeobrep->status_data.status != "S"))
     CALL addtracemessage("updatePeOnEob","Failed to udpate EOB data for the batch")
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 IF (validate(buildrctimelinerequestforrefund,char(128))=char(128))
  SUBROUTINE (buildrctimelinerequestforrefund(paprefundid=f8,refundstatuscd=f8,currentstatuscd=f8,
   pnewcode=f8) =i2)
    RECORD rctimelinerequest(
      1 activitytypecd = f8
      1 appliedtocd = f8
      1 appliedtotext = vc
      1 activitycreatedprsnlid = f8
      1 activitycreateddatetime = dq8
      1 longtextcommentid = f8
      1 longtextdescriptionid = f8
      1 commenttext = vc
      1 descriptiontext = vc
      1 parententityid = f8
      1 parententityname = vc
      1 prioritynumber = i2
      1 solutioncd = f8
      1 sourcerefidentifier = vc
    ) WITH protect
    RECORD rctimelinereply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    DECLARE sappliedtotxt = vc WITH protect, noconstant("")
    DECLARE dappliedtocd = f8 WITH protect, noconstant(0.0)
    DECLARE sparententityname = vc WITH protect, constant("PFT_AP_REFUND")
    DECLARE sdescriptiontext = vc WITH protect, noconstant("")
    DECLARE dactivitytypecd = f8 WITH protect, noconstant(0.0)
    DECLARE appliedtotxt = vc WITH protect, noconstant("")
    DECLARE appliedtocd = f8 WITH protect, noconstant(0.0)
    DECLARE parententityname = vc WITH protect, noconstant("")
    DECLARE parententityid = f8 WITH protect, noconstant(0.0)
    DECLARE description = vc WITH protect, noconstant("")
    DECLARE refundamt = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM pft_ap_refund par,
      pft_ap_refund_reltn parr
     PLAN (par
      WHERE par.pft_ap_refund_id=paprefundid
       AND par.active_ind=true)
      JOIN (parr
      WHERE parr.pft_ap_refund_id=par.pft_ap_refund_id
       AND parr.parent_entity_name IN ("BO_HP_RELTN", "TRANS_LOG")
       AND parr.active_ind=true)
     HEAD parr.pft_ap_refund_id
      parententityname = parr.parent_entity_name, parententityid = parr.parent_entity_id, refundamt
       = par.refund_amt
     WITH nocounter
    ;end select
    IF ( NOT (getappliedtodetailsforrefund(parententityname,parententityid,appliedtotxt,appliedtocd))
    )
     CALL logmessage("getAppliedToDetailsForRefund",
      "Not a valid parent_entity_name or parent_entity_id.",log_debug)
     RETURN(false)
    ENDIF
    SET description = getrefundactivitydescription(paprefundid,refundamt,refundstatuscd,
     currentstatuscd,pnewcode)
    SET rctimelinerequest->activitytypecd = cs4490006_refund_cd
    SET rctimelinerequest->appliedtocd = appliedtocd
    SET rctimelinerequest->appliedtotext = appliedtotxt
    SET rctimelinerequest->activitycreateddatetime = cnvtdatetime(sysdate)
    SET rctimelinerequest->activitycreatedprsnlid = reqinfo->updt_id
    SET rctimelinerequest->parententityid = paprefundid
    SET rctimelinerequest->parententityname = sparententityname
    SET rctimelinerequest->prioritynumber = 1
    SET rctimelinerequest->solutioncd = cs4484006_patientaccounting_cd
    SET rctimelinerequest->descriptiontext = description
    EXECUTE rc_timeline_save  WITH replace("REQUEST",rctimelinerequest), replace("REPLY",
     rctimelinereply)
    IF ((rctimelinereply->status_data.status != "S"))
     CALL echorecord(rctimelinerequest)
     CALL logmessage("BuildRCTimelineRequestForRefund","falied to save the data to rc_timeline",
      log_debug)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 SUBROUTINE (publishccfailureevent(pftencntrid=f8,workitemamt=f8) =null)
   CALL logmessage("publishCCFailureEvent","Entering publishCCFailureEvent()",log_debug)
   RECORD publishccfailureeventrequest(
     1 eventlist[*]
       2 entitytypekey = vc
       2 entityid = f8
       2 eventcd = f8
       2 eventtypecd = f8
       2 eventprocessdelay = f8
       2 workitemamount = f8
       2 reasoncd = f8
       2 origincd = f8
       2 pftlineitemid = f8
       2 params[*]
         3 paramcd = f8
         3 paramvalue = f8
         3 newparamind = i2
         3 doublevalue = f8
         3 stringvalue = vc
         3 datevalue = dq8
         3 parententityname = vc
         3 parententityid = f8
       2 workitems[*]
         3 workitemalias = vc
       2 denials[*]
         3 denialalias = f8
         3 denialgroup = f8
         3 denialtype = f8
         3 denialamount = f8
     1 isguaranteedbatchpublishevent = i2
   ) WITH protect
   RECORD publishccfailureeventreply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   IF (pftencntrid > 0.0)
    SET stat = alterlist(publishccfailureeventrequest->eventlist,1)
    SET publishccfailureeventrequest->eventlist[1].entitytypekey = "PFTENCNTR"
    SET publishccfailureeventrequest->eventlist[1].entityid = pftencntrid
    SET publishccfailureeventrequest->eventlist[1].eventcd = cs29322_aprfndccfail_cd
    SET publishccfailureeventrequest->eventlist[1].eventtypecd = cs23369_wfevent_cd
    SET publishccfailureeventrequest->eventlist[1].workitemamount = workitemamt
    SET stat = alterlist(publishccfailureeventrequest->eventlist[1].params,1)
    SET publishccfailureeventrequest->eventlist[1].params[1].newparamind = 1
    SET publishccfailureeventrequest->eventlist[1].params[1].paramcd = cs24454_aprefund_id_cd
    SET publishccfailureeventrequest->eventlist[1].params[1].doublevalue = request->aprefundid
    EXECUTE pft_publish_event  WITH replace("REQUEST",publishccfailureeventrequest), replace("REPLY",
     publishccfailureeventreply)
    IF ((publishccfailureeventreply->status_data.status != "S"))
     CALL logmessage("publishCCFailureEvent",build2(
       "Failed to publish credit card failure event for financial encounter: ",pftencntrid),log_error
      )
    ENDIF
    IF (validate(debug,0)=1)
     CALL echorecord(publishccfailureeventrequest)
     CALL echorecord(publishccfailureeventreply)
    ENDIF
   ENDIF
   CALL logmessage("publishCCFailureEvent","Exiting publishCCFailureEvent()",log_debug)
 END ;Subroutine
 CALL echo("Begin file_name version [661002.001]")
 IF (validate(publishinsurancereadytobillevent,char(128))=char(128))
  SUBROUTINE (publishinsurancereadytobillevent(pbohpreltnid=f8) =i2)
    RECORD readytobillrequest(
      1 bohpreltnid = f8
    ) WITH protect
    SET readytobillrequest->bohpreltnid = pbohpreltnid
    RECORD readytobillreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    EXECUTE pft_publish_ins_ready_to_bill  WITH replace("REQUEST",readytobillrequest), replace(
     "REPLY",readytobillreply)
    IF ((readytobillreply->status_data.status="F"))
     CALL logmessage("publishInsuranceReadyToBillWorkEvent",build2(
       "pft_publish_ins_ready_to_bill failed : bo_hp_reltn_id = ",pbohpreltnid),log_error)
     CALL echorecord(readytobillrequest)
     CALL echorecord(readytobillreply)
     RETURN(false)
    ENDIF
    IF ((readytobillreply->status_data.status="Z"))
     CALL logmessage("publishInsuranceReadyToBillWorkEvent",build2(
       "pft_publish_ins_ready_to_bill didn't publish event due to holds : bo_hp_reltn_id = ",
       pbohpreltnid),log_info)
     RETURN(true)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo("Begin pft_dm_info_common.inc, version[639549.001]")
 IF ("Z"=validate(pft_common_vrsn,"Z"))
  DECLARE pft_common_vrsn = vc WITH noconstant(""), public
 ENDIF
 SET pft_common_vrsn = "500383.087"
 IF ((validate(pft_neither,- (1))=- (1)))
  DECLARE pft_neither = i2 WITH constant(0)
 ENDIF
 IF ((validate(pft_debit,- (1))=- (1)))
  DECLARE pft_debit = i2 WITH constant(1)
 ENDIF
 IF ((validate(pft_credit,- (1))=- (1)))
  DECLARE pft_credit = i2 WITH constant(2)
 ENDIF
 IF (validate(null_f8,0.0)=0.0)
  DECLARE null_f8 = f8 WITH constant(- (0.00001))
 ENDIF
 IF (validate(null_i2,0)=0)
  DECLARE null_i2 = i2 WITH constant(- (1))
 ENDIF
 IF (validate(null_i4,0)=0)
  DECLARE null_i4 = i4 WITH constant(- (1))
 ENDIF
 IF ((validate(null_dt,- (1.0))=- (1.0)))
  DECLARE null_dt = q8 WITH constant(0.0)
 ENDIF
 IF (validate(null_vc,"Z")="Z")
  DECLARE null_vc = vc WITH constant("")
 ENDIF
 IF ((validate(upt_force,- (1))=- (1)))
  DECLARE upt_force = i4 WITH constant(- (99999))
 ENDIF
 IF ((validate(log_error,- (1))=- (1)))
  DECLARE log_error = i4 WITH constant(0)
 ENDIF
 IF ((validate(log_warning,- (1))=- (1)))
  DECLARE log_warning = i4 WITH constant(1)
 ENDIF
 IF ((validate(log_audit,- (1))=- (1)))
  DECLARE log_audit = i4 WITH constant(2)
 ENDIF
 IF ((validate(log_info,- (1))=- (1)))
  DECLARE log_info = i4 WITH constant(3)
 ENDIF
 IF ((validate(log_debug,- (1))=- (1)))
  DECLARE log_debug = i4 WITH constant(4)
 ENDIF
 IF (validate(ein_pft_charge,0)=0)
  DECLARE ein_pft_charge = i4 WITH constant(1)
 ENDIF
 IF (validate(ein_charge_item,0)=0)
  DECLARE ein_charge_item = i4 WITH constant(2)
 ENDIF
 IF (validate(ein_bill_header,0)=0)
  DECLARE ein_bill_header = i4 WITH constant(3)
 ENDIF
 IF (validate(ein_pft_encntr,0)=0)
  DECLARE ein_pft_encntr = i4 WITH constant(4)
 ENDIF
 IF (validate(ein_benefit_order,0)=0)
  DECLARE ein_benefit_order = i4 WITH constant(5)
 ENDIF
 IF (validate(ein_guarantor,0)=0)
  DECLARE ein_guarantor = i4 WITH constant(6)
 ENDIF
 IF (validate(ein_encounter,0)=0)
  DECLARE ein_encounter = i4 WITH constant(7)
 ENDIF
 IF (validate(ein_account,0)=0)
  DECLARE ein_account = i4 WITH constant(8)
 ENDIF
 IF (validate(ein_remittance,0)=0)
  DECLARE ein_remittance = i4 WITH constant(9)
 ENDIF
 IF (validate(ein_eob,0)=0)
  DECLARE ein_eob = i4 WITH constant(10)
 ENDIF
 IF (validate(ein_billing_entity,0)=0)
  DECLARE ein_billing_entity = i4 WITH constant(11)
 ENDIF
 IF (validate(ein_person,0)=0)
  DECLARE ein_person = i4 WITH constant(12)
 ENDIF
 IF (validate(ein_activity,0)=0)
  DECLARE ein_activity = i4 WITH constant(13)
 ENDIF
 IF (validate(ein_fin_nbr,0)=0)
  DECLARE ein_fin_nbr = i4 WITH constant(14)
 ENDIF
 IF (validate(ein_bo_hp_reltn,0)=0)
  DECLARE ein_bo_hp_reltn = i4 WITH constant(15)
 ENDIF
 IF (validate(ein_denial,0)=0)
  DECLARE ein_denial = i4 WITH constant(16)
 ENDIF
 IF (validate(ein_client_account,0)=0)
  DECLARE ein_client_account = i4 WITH constant(17)
 ENDIF
 IF (validate(ein_encntr_clln_reltn,0)=0)
  DECLARE ein_encntr_clln_reltn = i4 WITH constant(18)
 ENDIF
 IF (validate(ein_bill_nbr,0)=0)
  DECLARE ein_bill_nbr = i4 WITH constant(19)
 ENDIF
 IF (validate(ein_trans_alias,0)=0)
  DECLARE ein_trans_alias = i4 WITH constant(20)
 ENDIF
 IF (validate(ein_trans_alias_elements,0)=0)
  DECLARE ein_trans_alias_elements = i4 WITH constant(21)
 ENDIF
 IF (validate(ein_hold,0)=0)
  DECLARE ein_hold = i4 WITH constant(22)
 ENDIF
 IF (validate(ein_hold_prompt,0)=0)
  DECLARE ein_hold_prompt = i4 WITH constant(23)
 ENDIF
 IF (validate(ein_person_at,0)=0)
  DECLARE ein_person_at = i4 WITH constant(24)
 ENDIF
 IF (validate(ein_reversal,0)=0)
  DECLARE ein_reversal = i4 WITH constant(25)
 ENDIF
 IF (validate(ein_ext_acct_id_txt,0)=0)
  DECLARE ein_ext_acct_id_txt = i4 WITH constant(26)
 ENDIF
 IF (validate(ein_organization,0)=0)
  DECLARE ein_organization = i4 WITH constant(27)
 ENDIF
 IF (validate(ein_fifo,0)=0)
  DECLARE ein_fifo = i4 WITH constant(28)
 ENDIF
 IF (validate(ein_nopost,0)=0)
  DECLARE ein_nopost = i4 WITH constant(29)
 ENDIF
 IF (validate(ein_date_time,0)=0)
  DECLARE ein_date_time = i4 WITH constant(30)
 ENDIF
 IF (validate(ein_encntr_package,0)=0)
  DECLARE ein_encntr_package = i4 WITH constant(31)
 ENDIF
 IF (validate(ein_pay_plan_hist,0)=0)
  DECLARE ein_pay_plan_hist = i4 WITH constant(32)
 ENDIF
 IF (validate(ein_report_date,0)=0)
  DECLARE ein_report_date = i4 WITH constant(33)
 ENDIF
 IF (validate(ein_parent_entity,0)=0)
  DECLARE ein_parent_entity = i4 WITH constant(34)
 ENDIF
 IF (validate(ein_pay_plan_suggest,0)=0)
  DECLARE ein_pay_plan_suggest = i4 WITH constant(35)
 ENDIF
 IF (validate(ein_report_instance,0)=0)
  DECLARE ein_report_instance = i4 WITH constant(36)
 ENDIF
 IF (validate(ein_pft_fiscal_daily_id,0)=0)
  DECLARE ein_pft_fiscal_daily_id = i4 WITH constant(37)
 ENDIF
 IF (validate(ein_pft_encntr_fact_active,0)=0)
  DECLARE ein_pft_encntr_fact_active = i4 WITH constant(38)
 ENDIF
 IF (validate(ein_pft_encntr_fact_history,0)=0)
  DECLARE ein_pft_encntr_fact_history = i4 WITH constant(39)
 ENDIF
 IF (validate(ein_invoice,0)=0)
  DECLARE ein_invoice = i4 WITH constant(40)
 ENDIF
 IF (validate(ein_pending_batch,0)=0)
  DECLARE ein_pending_batch = i4 WITH constant(41)
 ENDIF
 IF (validate(ein_application,0)=0)
  DECLARE ein_application = i4 WITH constant(42)
 ENDIF
 IF (validate(ein_view,0)=0)
  DECLARE ein_view = i4 WITH constant(43)
 ENDIF
 IF (validate(ein_test,0)=0)
  DECLARE ein_test = i4 WITH constant(44)
 ENDIF
 IF (validate(ein_trans_alias_best_guess_wo_reason,0)=0)
  DECLARE ein_trans_alias_best_guess_wo_reason = i4 WITH constant(45)
 ENDIF
 IF (validate(ein_submitted_batch,0)=0)
  DECLARE ein_submitted_batch = i4 WITH constant(46)
 ENDIF
 IF (validate(ein_dequeue_wf_batch,0)=0)
  DECLARE ein_dequeue_wf_batch = i4 WITH constant(47)
 ENDIF
 IF (validate(ein_account_date,0)=0)
  DECLARE ein_account_date = i4 WITH constant(48)
 ENDIF
 IF (validate(ein_entity,0)=0)
  DECLARE ein_entity = i4 WITH constant(49)
 ENDIF
 IF (validate(ein_pft_line_item,0)=0)
  DECLARE ein_pft_line_item = i4 WITH constant(50)
 ENDIF
 IF (validate(ein_transfer,0)=0)
  DECLARE ein_transfer = i4 WITH constant(51)
 ENDIF
 IF (validate(ein_suppress,0)=0)
  DECLARE ein_suppress = i4 WITH constant(52)
 ENDIF
 IF (validate(ein_related_trans,0)=0)
  DECLARE ein_related_trans = i4 WITH constant(53)
 ENDIF
 IF (validate(ein_wf_entity_status,0)=0)
  DECLARE ein_wf_entity_status = i4 WITH constant(54)
 ENDIF
 IF (validate(ein_health_plan,0)=0)
  DECLARE ein_health_plan = i4 WITH constant(55)
 ENDIF
 IF (validate(ein_global_preference,0)=0)
  DECLARE ein_global_preference = i4 WITH constant(56)
 ENDIF
 IF (validate(ein_balance,0)=0)
  DECLARE ein_balance = i4 WITH constant(57)
 ENDIF
 IF (validate(ein_user_name,0)=0)
  DECLARE ein_user_name = i4 WITH constant(58)
 ENDIF
 IF (validate(ein_ready_to_bill,0)=0)
  DECLARE ein_ready_to_bill = i4 WITH constant(59)
 ENDIF
 IF (validate(ein_ready_to_bill_claim,0)=0)
  DECLARE ein_ready_to_bill_claim = i4 WITH constant(60)
 ENDIF
 IF (validate(ein_umdap_del,0)=0)
  DECLARE ein_umdap_del = i4 WITH constant(61)
 ENDIF
 IF (validate(ein_umdap_quest,0)=0)
  DECLARE ein_umdap_quest = i4 WITH constant(62)
 ENDIF
 IF (validate(ein_umdap_hist,0)=0)
  DECLARE ein_umdap_hist = i4 WITH constant(63)
 ENDIF
 IF (validate(ein_new_entity,0)=0)
  DECLARE ein_new_entity = i4 WITH constant(64)
 ENDIF
 IF (validate(ein_account_selfpay_bal,0)=0)
  DECLARE ein_account_selfpay_bal = i4 WITH constant(65)
 ENDIF
 IF (validate(ein_guarantor_selfpay_bal,0)=0)
  DECLARE ein_guarantor_selfpay_bal = i4 WITH constant(66)
 ENDIF
 IF (validate(ein_queue,0)=0)
  DECLARE ein_queue = i4 WITH constant(67)
 ENDIF
 IF (validate(ein_supervisor,0)=0)
  DECLARE ein_supervisor = i4 WITH constant(68)
 ENDIF
 IF (validate(ein_ar_management,0)=0)
  DECLARE ein_ar_management = i4 WITH constant(69)
 ENDIF
 IF (validate(ein_status,0)=0)
  DECLARE ein_status = i4 WITH constant(70)
 ENDIF
 IF (validate(ein_status_type_event,0)=0)
  DECLARE ein_status_type_event = i4 WITH constant(71)
 ENDIF
 IF (validate(ein_pftencntr_selfpay_bal,0)=0)
  DECLARE ein_pftencntr_selfpay_bal = i4 WITH constant(72)
 ENDIF
 IF (validate(ein_batch_event,0)=0)
  DECLARE ein_batch_event = i4 WITH constant(73)
 ENDIF
 IF (validate(ein_ready_to_bill_all_sp,0)=0)
  DECLARE ein_ready_to_bill_all_sp = i4 WITH constant(74)
 ENDIF
 IF (validate(ein_account_stmt,0)=0)
  DECLARE ein_account_stmt = i4 WITH constant(75)
 ENDIF
 IF (validate(ein_pft_encntr_stmt,0)=0)
  DECLARE ein_pft_encntr_stmt = i4 WITH constant(76)
 ENDIF
 IF (validate(ein_guarantor_stmt,0)=0)
  DECLARE ein_guarantor_stmt = i4 WITH constant(77)
 ENDIF
 IF (validate(ein_pft_encntr_claim,0)=0)
  DECLARE ein_pft_encntr_claim = i4 WITH constant(78)
 ENDIF
 IF (validate(ein_pftencntr_combine,0)=0)
  DECLARE ein_pftencntr_combine = i4 WITH constant(79)
 ENDIF
 IF (validate(ein_current_eob,0)=0)
  DECLARE ein_current_eob = i4 WITH constant(80)
 ENDIF
 IF (validate(ein_prior_eobs,0)=0)
  DECLARE ein_prior_eobs = i4 WITH constant(81)
 ENDIF
 IF (validate(ein_last,0)=0)
  DECLARE ein_last = i4 WITH constant(82)
 ENDIF
 IF (validate(ein_cob,0)=0)
  DECLARE ein_cob = i4 WITH constant(83)
 ENDIF
 IF (validate(ein_encounter_active,0)=0)
  DECLARE ein_encounter_active = i4 WITH constant(84)
 ENDIF
 IF (validate(ein_remittance_all,0)=0)
  DECLARE ein_remittance_all = i4 WITH constant(85)
 ENDIF
 IF (validate(ein_pay_plan,0)=0)
  DECLARE ein_pay_plan = i4 WITH constant(86)
 ENDIF
 IF (validate(ein_guar_acct,0)=0)
  DECLARE ein_guar_acct = i4 WITH constant(87)
 ENDIF
 IF (validate(ein_report,0)=0)
  DECLARE ein_report = i4 WITH constant(88)
 ENDIF
 IF (validate(ein_ime_benefit_order,0)=0)
  DECLARE ein_ime_benefit_order = i4 WITH constant(89)
 ENDIF
 IF (validate(ein_formal_payment_plan,0)=0)
  DECLARE ein_formal_payment_plan = i4 WITH constant(90)
 ENDIF
 IF (validate(ein_guarantor_account,0)=0)
  DECLARE ein_guarantor_account = i4 WITH constant(91)
 ENDIF
 IF ((validate(gnstat,- (1))=- (1)))
  DECLARE gnstat = i4 WITH noconstant(0)
 ENDIF
 IF (validate(none_action,0)=0
  AND validate(none_action,1)=1)
  DECLARE none_action = i4 WITH public, constant(0)
 ENDIF
 IF (validate(add_action,0)=0
  AND validate(add_action,1)=1)
  DECLARE add_action = i4 WITH public, constant(1)
 ENDIF
 IF (validate(chg_action,0)=0
  AND validate(chg_action,1)=1)
  DECLARE chg_action = i4 WITH public, constant(2)
 ENDIF
 IF (validate(del_action,0)=0
  AND validate(del_action,1)=1)
  DECLARE del_action = i4 WITH public, constant(3)
 ENDIF
 IF (validate(pft_publish_event_flag,null_i2)=null_i2)
  DECLARE pft_publish_event_flag = i2 WITH public, noconstant(0)
 ENDIF
 DECLARE __hpsys = i4 WITH protect, noconstant(0)
 DECLARE __lpsysstat = i4 WITH protect, noconstant(0)
 IF ( NOT (validate(threads)))
  FREE RECORD threads
  RECORD threads(
    1 objarray[*]
      2 request_handle = i4
      2 start_time = dq8
  )
 ENDIF
 IF ( NOT (validate(codevalueslist)))
  RECORD codevalueslist(
    1 codevalues[*]
      2 codevalue = f8
  ) WITH protect
 ENDIF
 IF (validate(logmsg,char(128))=char(128))
  SUBROUTINE (logmsg(sname=vc,smsg=vc,llevel=i4) =null)
    DECLARE hmsg = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrep = i4 WITH protect, noconstant(0)
    DECLARE hobjarray = i4 WITH protect, noconstant(0)
    DECLARE srvstatus = i4 WITH protect, noconstant(0)
    DECLARE submit_log = i4 WITH protect, constant(4099455)
    DECLARE cs23372_failed_cd = f8 WITH protect, constant(uar_get_code_by("MEANING",23372,"FAILED"))
    CALL echo("")
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    CALL echo(concat(sname,": ",smsg))
    CALL echo("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")
    CALL echo("")
    SET __hpsys = 0
    SET __lpsysstat = 0
    CALL uar_syscreatehandle(__hpsys,__lpsysstat)
    IF (__hpsys > 0)
     CALL uar_sysevent(__hpsys,llevel,nullterm(sname),nullterm(smsg))
     CALL uar_sysdestroyhandle(__hpsys)
    ENDIF
    IF (llevel=log_error)
     SET hmsg = uar_srvselectmessage(submit_log)
     SET hreq = uar_srvcreaterequest(hmsg)
     SET hrep = uar_srvcreatereply(hmsg)
     SET hobjarray = uar_srvadditem(hreq,"objArray")
     SET stat = uar_srvsetdouble(hobjarray,"final_status_cd",cs23372_failed_cd)
     SET stat = uar_srvsetstring(hobjarray,"task_name",nullterm(curprog))
     SET stat = uar_srvsetstring(hobjarray,"completion_msg",nullterm(smsg))
     SET stat = uar_srvsetdate(hobjarray,"end_dt_tm",cnvtdatetime(sysdate))
     SET stat = uar_srvsetstring(hobjarray,"current_node_name",nullterm(curnode))
     SET stat = uar_srvsetstring(hobjarray,"server_name",nullterm(build(curserver)))
     SET srvstatus = uar_srvexecute(hmsg,hreq,hrep)
     IF (srvstatus != 0)
      CALL echo(build2("Execution of pft_save_system_activity_log was not successful"))
     ENDIF
     CALL uar_srvdestroyinstance(hreq)
     CALL uar_srvdestroyinstance(hrep)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setreply,char(128))=char(128))
  SUBROUTINE (setreply(sstatus=vc,sname=vc,svalue=vc) =null)
    IF (validate(reply,char(128)) != char(128))
     SET reply->status_data.status = nullterm(sstatus)
     SET reply->status_data.subeventstatus[1].operationstatus = nullterm(sstatus)
     SET reply->status_data.subeventstatus[1].operationname = nullterm(sname)
     SET reply->status_data.subeventstatus[1].targetobjectvalue = nullterm(svalue)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setreplyblock,char(128))=char(128))
  SUBROUTINE (setreplyblock(sstatus=c1,soperstatus=c1,sname=vc,svalue=vc) =null)
   CALL logmsg(sname,svalue,log_debug)
   IF (validate(reply,char(128)) != char(128))
    SET reply->status_data.status = nullterm(sstatus)
    SET reply->status_data.subeventstatus[1].operationstatus = nullterm(soperstatus)
    SET reply->status_data.subeventstatus[1].operationname = nullterm(sname)
    SET reply->status_data.subeventstatus[1].targetobjectvalue = nullterm(svalue)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(beginscript,char(128))=char(128))
  SUBROUTINE (beginscript(sname=vc) =null)
   CALL logmsg(sname,"Begin Script",log_debug)
   CALL setreply("F",sname,"Begin Script")
  END ;Subroutine
 ENDIF
 IF (validate(exitscript,char(128))=char(128))
  SUBROUTINE (exitscript(sname=vc) =null)
   CALL logmsg(sname,"Exit Script",log_debug)
   CALL setreply("S",sname,"Exit Script")
  END ;Subroutine
 ENDIF
 IF (validate(abortscript,char(128))=char(128))
  SUBROUTINE (abortscript(sname=vc,smsg=vc) =null)
   CALL logmsg(sname,smsg,log_warning)
   CALL setreply("F",sname,smsg)
  END ;Subroutine
 ENDIF
 IF (validate(setfieldheader,char(128))=char(128))
  SUBROUTINE (setfieldheader(sfield=vc,stype=vc,sdisplay=vc) =null)
   DECLARE nheadersize = i2 WITH noconstant(0)
   IF (validate(objreply->headers)=1)
    SET nheadersize = (size(objreply->headers,5)+ 1)
    SET stat = alterlist(objreply->headers,nheadersize)
    SET objreply->headers[nheadersize].field_name = sfield
    SET objreply->headers[nheadersize].field_type = stype
    SET objreply->headers[nheadersize].header_display = sdisplay
   ELSEIF (validate(reply->headers)=1)
    SET nheadersize = (size(reply->headers,5)+ 1)
    SET stat = alterlist(reply->headers,nheadersize)
    SET reply->headers[nheadersize].field_name = sfield
    SET reply->headers[nheadersize].field_type = stype
    SET reply->headers[nheadersize].header_display = sdisplay
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setfieldheaderattr,char(128))=char(128))
  SUBROUTINE (setfieldheaderattr(sfield=vc,stype=vc,sdisplay=vc,sgroupprefix=vc,sgrpaggrprefix=vc,
   sgrpaggrfnctn=vc,stotalprefix=vc,stotalfunction=vc) =null)
   DECLARE nheadersize = i2 WITH noconstant(0)
   IF (validate(objreply->headers,char(128)) != char(128))
    SET nheadersize = (size(objreply->headers,5)+ 1)
    SET stat = alterlist(objreply->headers,nheadersize)
    SET objreply->headers[nheadersize].field_name = sfield
    SET objreply->headers[nheadersize].field_type = stype
    SET objreply->headers[nheadersize].header_display = sdisplay
    SET objreply->headers[nheadersize].group_prefix = sgroupprefix
    SET objreply->headers[nheadersize].group_aggr_prefix = sgrpaggrprefix
    SET objreply->headers[nheadersize].group_aggr_func = sgrpaggrfnctn
    SET objreply->headers[nheadersize].total_prefix = stotalprefix
    SET objreply->headers[nheadersize].total_func = stotalfunction
   ELSEIF (validate(reply->headers,char(128)) != char(128))
    SET nheadersize = (size(reply->headers,5)+ 1)
    SET stat = alterlist(reply->headers,nheadersize)
    SET reply->headers[nheadersize].field_name = sfield
    SET reply->headers[nheadersize].field_type = stype
    SET reply->headers[nheadersize].header_display = sdisplay
    SET reply->headers[nheadersize].group_prefix = sgroupprefix
    SET reply->headers[nheadersize].group_aggr_prefix = sgrpaggrprefix
    SET reply->headers[nheadersize].group_aggr_func = sgrpaggrfnctn
    SET reply->headers[nheadersize].total_prefix = stotalprefix
    SET reply->headers[nheadersize].total_func = stotalfunction
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(formatcurrency,char(128))=char(128))
  SUBROUTINE (formatcurrency(damt=f8) =vc)
    DECLARE sformattedamt = vc WITH noconstant("")
    SET sformattedamt = format(damt,"#########.##;I$,;F")
    IF (damt <= 0)
     SET sformattedamt = trim(sformattedamt,3)
     SET sformattedamt = substring(2,textlen(sformattedamt),sformattedamt)
     SET sformattedamt = concat("(",trim(sformattedamt,3),")")
    ENDIF
    SET sformattedamt = trim(sformattedamt,3)
    RETURN(sformattedamt)
  END ;Subroutine
 ENDIF
 IF (validate(setsrvdouble,char(128))=char(128))
  SUBROUTINE (setsrvdouble(hhandle=i4,sfield=vc,dvalue=f8) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetdouble(hhandle,nullterm(sfield),dvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvstring,char(128))=char(128))
  SUBROUTINE (setsrvstring(hhandle=i4,sfield=vc,svalue=vc) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetstring(hhandle,nullterm(sfield),nullterm(svalue))
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvlong,char(128))=char(128))
  SUBROUTINE (setsrvlong(hhandle=i4,sfield=vc,lvalue=i4) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetlong(hhandle,nullterm(sfield),lvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvshort,char(128))=char(128))
  SUBROUTINE (setsrvshort(hhandle=i4,sfield=vc,nvalue=i4) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetshort(hhandle,nullterm(sfield),nvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(setsrvdate,char(128))=char(128))
  SUBROUTINE (setsrvdate(hhandle=i4,sfield=vc,dtvalue=q8) =null)
    IF (uar_srvfieldexists(hhandle,nullterm(sfield)))
     SET gnstat = uar_srvsetdate(hhandle,nullterm(sfield),dtvalue)
     IF (gnstat=0)
      CALL logmsg(curprog,concat("Set ",sfield," failed"),log_debug)
     ENDIF
    ELSE
     CALL logmsg(curprog,concat("Field ",sfield," doesn't exist in the request structure"),log_debug)
    ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(publishevent,char(128))=char(128))
  SUBROUTINE (publishevent(dummyvar=i4) =null)
    CALL logmsg(curprog,"IN PublishEvent",log_debug)
    DECLARE nappid = i4 WITH protect, constant(4080000)
    DECLARE ntaskid = i4 WITH protect, constant(4080000)
    DECLARE nreqid = i4 WITH protect, constant(4080140)
    DECLARE sreq = vc WITH protect, constant("pft_manage_event_completion")
    DECLARE happ = i4 WITH protect, noconstant(0)
    DECLARE htask = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrequest = i4 WITH protect, noconstant(0)
    DECLARE hitem = i4 WITH protect, noconstant(0)
    DECLARE hreply = i4 WITH protect, noconstant(0)
    DECLARE hstatus = i4 WITH protect, noconstant(0)
    DECLARE ncnt = i4 WITH protect, noconstant(0)
    DECLARE npidx = i4 WITH protect, noconstant(0)
    DECLARE ipublisheventflg = i2 WITH constant(validate(pft_publish_event_flag,0))
    IF (validate(pft_publish_event_flag))
     CALL logmsg(curprog,concat("pft_publish_event_flag exist. value:: ",cnvtstring(
        pft_publish_event_flag,5)),4)
    ELSE
     CALL logmsg(curprog,"pft_publish_event_flag doesn't exist",4)
    ENDIF
    IF (validate(reply->objarray,char(128))=char(128))
     CALL logmsg(curprog,"No objArray found in reply",log_debug)
     RETURN
    ENDIF
    IF (validate(reply->status_data.status,"F") != "S")
     CALL logmsg(curprog,concat("Reply status as (",validate(reply->status_data.status,"F"),
       "). Not publishing events."),log_debug)
     RETURN
    ENDIF
    CASE (ipublisheventflg)
     OF 0:
      SET curalias eventrec reply->objarray[npidx]
      SET ncnt = size(reply->objarray,5)
     OF 1:
      CALL queueitemstoeventrec(0)
      RETURN
     OF 2:
      SET curalias eventrec pft_event_rec->objarray[npidx]
      SET ncnt = size(pft_event_rec->objarray,5)
    ENDCASE
    IF (ncnt > 0)
     SET npidx = 1
     IF (validate(eventrec->published_ind,null_i2)=null_i2)
      CALL logmsg(curprog,"Field published_ind not found in objArray",log_debug)
      RETURN
     ENDIF
     SET gnstat = uar_crmbeginapp(nappid,happ)
     IF (gnstat != 0)
      CALL logmsg(curprog,"Unable to create application instance (4080000)",log_error)
      RETURN
     ENDIF
     SET gnstat = uar_crmbegintask(happ,ntaskid,htask)
     IF (gnstat != 0)
      CALL logmsg(curprog,"Unable to create task instance (4080000)",log_error)
      IF (happ > 0)
       CALL uar_crmendapp(happ)
      ENDIF
      RETURN
     ENDIF
     FOR (npidx = 1 TO ncnt)
       IF ((eventrec->published_ind=false))
        SET gnstat = uar_crmbeginreq(htask,nullterm(sreq),nreqid,hreq)
        IF (gnstat != 0)
         CALL logmsg(curprog,"Unable to create request instance (4080140)",log_error)
        ELSE
         SET hrequest = uar_crmgetrequest(hreq)
         IF (hrequest=0)
          CALL logmsg(curprog,"Unable to retrieve request handle for (4080140)",log_error)
         ELSE
          SET hitem = uar_srvadditem(hrequest,"objArray")
          IF (hitem=0)
           CALL logmsg(curprog,"Unable to add item to request (4080140)",log_error)
          ELSE
           IF (validate(eventrec->event_key,char(128)) != char(128))
            CALL setsrvstring(hitem,"event_key",eventrec->event_key)
           ELSE
            CALL logmsg(curprog,"Field event_key not found in objArray",log_debug)
           ENDIF
           IF (validate(eventrec->category_key,char(128)) != char(128))
            CALL setsrvstring(hitem,"category_key",eventrec->category_key)
           ELSE
            CALL logmsg(curprog,"Field category_key not found in objArray",log_debug)
           ENDIF
           IF (validate(eventrec->acct_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"acct_id",eventrec->acct_id)
           ENDIF
           IF (validate(eventrec->pft_encntr_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_encntr_id",eventrec->pft_encntr_id)
           ENDIF
           IF (validate(eventrec->encntr_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"encntr_id",eventrec->encntr_id)
           ENDIF
           IF (validate(eventrec->bo_hp_reltn_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"bo_hp_reltn_id",eventrec->bo_hp_reltn_id)
           ENDIF
           IF (validate(eventrec->corsp_activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"corsp_activity_id",eventrec->corsp_activity_id)
           ENDIF
           IF (validate(eventrec->activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"activity_id",eventrec->activity_id)
           ENDIF
           IF (validate(eventrec->pft_charge_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_charge_id",eventrec->pft_charge_id)
           ENDIF
           IF (validate(eventrec->service_cd,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"entity_service_cd",eventrec->service_cd)
           ENDIF
           IF (validate(eventrec->batch_trans_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"batch_trans_id",eventrec->batch_trans_id)
           ENDIF
           IF (validate(eventrec->pft_bill_activity_id,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pft_bill_activity_id",eventrec->pft_bill_activity_id)
           ENDIF
           IF (validate(eventrec->bill_vrsn_nbr,null_i4) != null_i4)
            CALL setsrvlong(hitem,"bill_vrsn_nbr",eventrec->bill_vrsn_nbr)
           ENDIF
           IF (validate(eventrec->pe_status_reason_cd,null_f8) != null_f8)
            CALL setsrvdouble(hitem,"pe_status_reason_cd",eventrec->pe_status_reason_cd)
           ENDIF
           CALL logmsg("PFT_COMMON",build("pft_publish_event_binding::",validate(
              pft_publish_event_binding,"N/A")),log_debug)
           IF (validate(pft_publish_event_binding,"") != "")
            SET gnstat = uar_crmperformas(hreq,nullterm(pft_publish_event_binding))
           ELSE
            SET gnstat = uar_crmperform(hreq)
           ENDIF
           IF (gnstat != 0)
            CALL logmsg(curprog,concat("Failed to execute server step (",cnvtstring(nreqid,11),")"),
             log_error)
           ELSE
            SET hreply = uar_crmgetreply(hreq)
            IF (hreply=0)
             CALL logmsg(curprog,"Failed to retrieve reply structure",log_error)
            ELSE
             SET hstatus = uar_srvgetstruct(hreply,"status_data")
             IF (hstatus=0)
              CALL logmsg(curprog,"Failed to retrieve status_block",log_error)
             ELSE
              IF (uar_srvgetstringptr(hstatus,"status")="S")
               SET eventrec->published_ind = true
              ENDIF
             ENDIF
            ENDIF
           ENDIF
          ENDIF
         ENDIF
        ENDIF
        IF (hreq > 0)
         CALL uar_crmendreq(hreq)
        ENDIF
       ENDIF
     ENDFOR
     IF (htask > 0)
      CALL uar_crmendtask(htask)
     ENDIF
     IF (happ > 0)
      CALL uar_crmendapp(happ)
     ENDIF
    ELSE
     CALL logmsg(curprog,"Not objects in objArray",log_debug)
    ENDIF
    SET curalias eventrec off
  END ;Subroutine
 ENDIF
 IF (validate(queueitemstoeventrec,char(128))=char(128))
  SUBROUTINE (queueitemstoeventrec(dummyvar=i4) =null)
    DECLARE ncnt = i4 WITH protect, noconstant(0)
    DECLARE npeventidx = i4 WITH protect, noconstant(0)
    DECLARE npidx = i4 WITH protect, noconstant(0)
    IF (validate(pft_event_rec,char(128))=char(128))
     CALL logmsg(curprog,"pft_event_rec must be declared by call InitEvents",4)
    ENDIF
    SET curalias event_rec pft_event_rec->objarray[npeventidx]
    SET curalias reply_rec reply->objarray[npidx]
    SET ncnt = size(reply->objarray,5)
    FOR (npidx = 1 TO ncnt)
      IF (validate(reply_rec->published_ind,true)=false)
       SET npeventidx = (size(pft_event_rec->objarray,5)+ 1)
       SET stat = alterlist(pft_event_rec->objarray,npeventidx)
       SET event_rec->published_ind = false
       SET event_rec->event_key = validate(reply_rec->event_key,"")
       SET event_rec->category_key = validate(reply_rec->category_key,"")
       SET event_rec->acct_id = validate(reply_rec->acct_id,0.0)
       SET event_rec->pft_encntr_id = validate(reply_rec->pft_encntr_id,0.0)
       SET event_rec->encntr_id = validate(reply_rec->encntr_id,0.0)
       SET event_rec->bo_hp_reltn_id = validate(reply_rec->bo_hp_reltn_id,0.0)
       SET event_rec->corsp_activity_id = validate(reply_rec->corsp_activity_id,0.0)
       SET event_rec->activity_id = validate(reply_rec->activity_id,0.0)
       SET event_rec->pft_charge_id = validate(reply_rec->pft_charge_id,0.0)
       SET event_rec->service_cd = validate(reply_rec->service_cd,0.0)
       SET event_rec->batch_trans_id = validate(reply_rec->batch_trans_id,0.0)
       SET event_rec->pft_bill_activity_id = validate(reply_rec->pft_bill_activity_id,0.0)
       SET event_rec->bill_vrsn_nbr = validate(reply_rec->bill_vrsn_nbr,0)
       SET event_rec->pe_status_reason_cd = validate(reply_rec->pe_status_reason_cd,0.0)
       SET reply_rec->published_ind = true
      ENDIF
    ENDFOR
    SET curalias event_rec off
    SET curalias reply_rec off
  END ;Subroutine
 ENDIF
 IF (validate(initevents,char(128))=char(128))
  SUBROUTINE (initevents(publishflag=i2) =null)
    SET pft_publish_event_flag = publishflag
    FREE RECORD pft_event_rec
    RECORD pft_event_rec(
      1 objarray[*]
        2 service_cd = f8
        2 updt_id = f8
        2 event_key = vc
        2 category_key = vc
        2 published_ind = i2
        2 pe_status_reason_cd = f8
        2 acct_id = f8
        2 activity_id = f8
        2 batch_denial_file_r_id = f8
        2 batch_trans_ext_id = f8
        2 batch_trans_file_id = f8
        2 batch_trans_id = f8
        2 benefit_order_id = f8
        2 bill_item_id = f8
        2 bill_templ_id = f8
        2 bill_vrsn_nbr = i4
        2 billing_entity_id = f8
        2 bo_hp_reltn_id = f8
        2 charge_item_id = f8
        2 chrg_activity_id = f8
        2 claim_status_id = f8
        2 client_org_id = f8
        2 corsp_activity_id = f8
        2 corsp_log_reltn_id = f8
        2 denial_id = f8
        2 dirty_flag = i4
        2 encntr_id = f8
        2 guar_acct_id = f8
        2 guarantor_id = f8
        2 health_plan_id = f8
        2 long_text_id = f8
        2 organization_id = f8
        2 payor_org_id = f8
        2 pe_status_reason_id = f8
        2 person_id = f8
        2 pft_balance_id = f8
        2 pft_bill_activity_id = f8
        2 pft_charge_id = f8
        2 pft_encntr_fact_id = f8
        2 pft_encntr_id = f8
        2 pft_line_item_id = f8
        2 trans_alias_id = f8
        2 pft_payment_plan_id = f8
        2 daily_encntr_bal_id = f8
        2 daily_acct_bal_id = f8
        2 active_ind = i2
        2 active_status_cd = f8
        2 active_status_disp = vc
        2 active_status_desc = vc
        2 active_status_mean = vc
        2 active_status_code_set = f8
        2 active_status_dt_tm = dq8
        2 active_status_prsnl_id = f8
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 updt_applctx = f8
        2 updt_cnt = i4
        2 updt_dt_tm = dq8
        2 updt_id = f8
        2 updt_task = f8
        2 benefit_status_cd = f8
        2 financial_class_cd = f8
        2 payment_plan_flag = i2
        2 payment_location_id = f8
        2 encntr_plan_cob_id = f8
        2 guarantor_account_id = f8
        2 guarantor_id1 = f8
        2 guarantor_id2 = f8
        2 cbos_pe_reltn_id = f8
        2 post_dt_tm = dq8
        2 posting_category_type_flag = i2
    ) WITH persistscript
  END ;Subroutine
 ENDIF
 IF (validate(processevents,char(128))=char(128))
  SUBROUTINE (processevents(dummyvar=i4) =null)
    DECLARE itmppublishflag = i2 WITH private, noconstant(pft_publish_event_flag)
    SET pft_publish_event_flag = 2
    CALL publishevent(0)
    SET pft_publish_event_flag = itmppublishflag
  END ;Subroutine
 ENDIF
 IF (validate(stamptime,char(128))=char(128))
  SUBROUTINE (stamptime(dummyvar=i4) =null)
    CALL echo("-----------------TIME STAMP----------------")
    CALL echo(build("-----------",curprog,"-----------"))
    CALL echo(format(curtime3,"hh:mm:ss:cc;3;M"))
    CALL echo("-----------------TIME STAMP----------------")
  END ;Subroutine
 ENDIF
 IF (validate(isequal,char(128))=char(128))
  SUBROUTINE isequal(damt1,damt2)
   DECLARE tmpdiff = f8 WITH private, noconstant(abs((abs(damt1) - abs(damt2))))
   IF (tmpdiff < 0.009)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
  END ;Subroutine
 ENDIF
 IF (validate(nextavailablethread,char(128))=char(128))
  DECLARE nextavailablethread(null) = i4
  SUBROUTINE nextavailablethread(null)
    DECLARE thread_cnt = i4 WITH noconstant(size(threads->objarray,5))
    DECLARE i = i4 WITH noconstant(thread_cnt)
    DECLARE looping = i2 WITH noconstant(true)
    WHILE (thread_cnt > 0
     AND looping)
     IF ((threads->objarray[i].request_handle > 0))
      IF ((threads->objarray[i].start_time=null))
       SET threads->objarray[i].start_time = cnvtdatetime(sysdate)
      ENDIF
      IF (uar_crmperformpeek(threads->objarray[i].request_handle) IN (0, 1, 4, 5))
       SET stat = uar_crmsynch(threads->objarray[i].request_handle)
       CALL uar_crmendreq(threads->objarray[i].request_handle)
       SET threads->objarray[i].request_handle = 0
       SET threads->objarray[i].start_time = null
       SET looping = false
      ENDIF
     ELSE
      SET looping = false
     ENDIF
     IF (looping)
      SET i = evaluate(i,1,thread_cnt,(i - 1))
     ENDIF
    ENDWHILE
    RETURN(i)
  END ;Subroutine
 ENDIF
 IF (validate(waituntilthreadscomplete,char(128))=char(128))
  DECLARE waituntilthreadscomplete(null) = i4
  SUBROUTINE waituntilthreadscomplete(null)
    DECLARE thread_cnt = i4 WITH noconstant(size(threads->objarray,5))
    DECLARE i = i4 WITH noconstant(thread_cnt)
    FOR (i = 1 TO thread_cnt)
      IF ((threads->objarray[i].request_handle > 0))
       IF ((threads->objarray[i].start_time=null))
        SET threads->objarray[i].start_time = cnvtdatetime(sysdate)
       ENDIF
       SET stat = uar_crmsynch(threads->objarray[i].request_handle)
       CALL uar_crmendreq(threads->objarray[i].request_handle)
       SET threads->objarray[i].request_handle = 0
       SET threads->objarray[i].start_time = null
      ENDIF
    ENDFOR
    RETURN
  END ;Subroutine
 ENDIF
 IF (validate(waitforthreadtocomplete,char(128))=char(128))
  SUBROUTINE (waitforthreadtocomplete(thread=i4) =i4)
    IF ( NOT (validate(threads)))
     RETURN(0)
    ENDIF
    IF ( NOT (size(threads->objarray,5) > 0))
     RETURN(0)
    ENDIF
    IF ((threads->objarray[thread].request_handle > 0))
     IF ((threads->objarray[thread].start_time=null))
      SET threads->objarray[thread].start_time = cnvtdatetime(sysdate)
     ENDIF
     SET stat = uar_crmsynch(threads->objarray[thread].request_handle)
     CALL uar_crmendreq(threads->objarray[thread].request_handle)
     SET threads->objarray[thread].request_handle = 0
     SET threads->objarray[thread].start_time = null
    ENDIF
    RETURN(thread)
  END ;Subroutine
 ENDIF
 IF (validate(getcodevalueindex,char(128))=char(128))
  SUBROUTINE (getcodevalueindex(pcodevalue=f8,prcodevalueslist=vc(ref)) =i4)
    IF (((pcodevalue <= 0.0) OR (size(prcodevalueslist->codevalues,5)=0)) )
     RETURN(0)
    ENDIF
    DECLARE num = i4 WITH protect, noconstant(0)
    RETURN(locateval(num,1,size(prcodevalueslist->codevalues,5),pcodevalue,prcodevalueslist->
     codevalues[num].codevalue))
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(getdminfodetails)))
  SUBROUTINE (getdminfodetails(pinfodomain=vc,pinfoname=vc) =f8)
    DECLARE infonumber = f8 WITH public, noconstant(0.0)
    RECORD getdminforequest(
      1 debug_ind = i2
      1 info_domain = vc
      1 info_name = vc
      1 info_date = dq8
      1 info_char = vc
      1 info_number = f8
      1 info_long_id = f8
    ) WITH protect
    RECORD getdminforeply(
      1 qual[*]
        2 info_domain = vc
        2 info_name = vc
        2 info_date = dq8
        2 info_char = vc
        2 info_number = f8
        2 info_long_id = f8
        2 updt_applctx = f8
        2 updt_task = i4
        2 updt_dt_tm = dq8
        2 updt_cnt = i4
        2 updt_id = f8
        2 info_domain_id = f8
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET getdminforequest->info_domain = pinfodomain
    SET getdminforequest->info_name = pinfoname
    EXECUTE pft_get_dm_info  WITH replace("REQUEST",getdminforequest), replace("REPLY",getdminforeply
     )
    IF ((getdminforeply->status_data.status != "S"))
     CALL logmsg("getDMInfoDetails","Call to pft_get_dm_info failed",log_debug)
     IF (validate(debug,0) > 0)
      CALL echorecord(getdminforequest)
      CALL echorecord(getdminforeply)
     ENDIF
     SET infonumber = 0.0
    ENDIF
    IF (size(getdminforeply->qual,5) > 0)
     SET infonumber = getdminforeply->qual[1].info_number
    ENDIF
    RETURN(infonumber)
  END ;Subroutine
 ENDIF
 CALL echo("Begin pft_rcc_encntr_linking_subs.inc version [719825.004]")
 CALL echo("Begin pft_rca_exec_script_async_subs.inc version [666471.002]")
 IF (validate(executescriptasync,char(128))=char(128))
  SUBROUTINE (executescriptasync(pscriptname=vc,asyncreq=vc(ref),asyncrep=vc(ref),pevalstmt=vc(value,
    "")) =i2)
    DECLARE subroutine_name = vc WITH protect, constant("executeScriptAsync")
    DECLARE req_json = gvc WITH protect, constant(cnvtrectojson(asyncreq))
    DECLARE rep_json = gvc WITH protect, constant(cnvtrectojson(asyncrep))
    DECLARE happid = i4 WITH protect, constant(4080000)
    DECLARE htaskid = i4 WITH protect, constant(4080000)
    DECLARE hreqid = i4 WITH protect, constant(4099569)
    DECLARE happ = i4 WITH protect, noconstant(0)
    DECLARE htask = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hstep = i4 WITH protect, noconstant(0)
    DECLARE crmstatus = i4 WITH protect, noconstant(0)
    EXECUTE crmrtl
    EXECUTE srvrtl
    SET crmstatus = uar_crmbeginapp(happid,happ)
    IF (crmstatus != 0)
     CALL logmessage(subroutine_name,build2("Starting application [",happid,
       "] failed with CRM status [",crmstatus,"]"),log_error)
     RETURN(false)
    ENDIF
    SET crmstatus = uar_crmbegintask(happ,htaskid,htask)
    IF (crmstatus != 0)
     CALL uar_crmendapp(happ)
     CALL logmessage(subroutine_name,build2("Starting task [",htaskid,"] failed with CRM status [",
       crmstatus,"]"),log_error)
     RETURN(false)
    ENDIF
    SET crmstatus = uar_crmbeginreq(htask,"",hreqid,hstep)
    IF (crmstatus != 0)
     CALL uar_crmendtask(htask)
     CALL uar_crmendapp(happ)
     CALL logmessage(subroutine_name,build2("Starting request [",hreqid,"] failed with CRM status [",
       crmstatus,"]"),log_error)
     RETURN(false)
    ENDIF
    SET hreq = uar_crmgetrequest(hstep)
    IF (hreq <= 0)
     CALL uar_crmendreq(hstep)
     CALL uar_crmendtask(htask)
     CALL uar_crmendapp(happ)
     CALL logmessage(subroutine_name,build2("Obtaining handle to request [",hreqid,"] failed"),
      log_error)
     RETURN(false)
    ENDIF
    SET stat = uar_srvsetstring(hreq,"scriptName",nullterm(pscriptname))
    SET stat = uar_srvsetstring(hreq,"requestJson",nullterm(req_json))
    SET stat = uar_srvsetstring(hreq,"replyJson",nullterm(rep_json))
    SET stat = uar_srvsetstring(hreq,"evaluationStatement",nullterm(pevalstmt))
    SET crmstatus = uar_crmperform(hstep)
    IF (crmstatus != 0)
     CALL uar_crmendtask(htask)
     CALL logmessage(subroutine_name,build2("Request [",hreqid,"] failed with CRM status [",crmstatus,
       "]"),log_error)
    ENDIF
    CALL uar_crmendreq(hstep)
    CALL uar_crmendtask(htask)
    CALL uar_crmendapp(happ)
    RETURN(evaluate(crmstatus,0,true,false))
  END ;Subroutine
 ENDIF
 IF (validate(processencounterlinkingrequestasync,char(128))=char(128))
  SUBROUTINE (processencounterlinkingrequestasync(pactivityeventname=vc,pencounterid=f8) =i2)
    RECORD encntrlinkreq(
      1 activityeventname = vc
      1 encounterid = f8
    ) WITH protect
    RECORD encntrlinkrep(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    DECLARE encntr_linking_script_name = vc WITH protect, constant("PFT_RCC_ENCNTR_LINKING")
    SET encntrlinkreq->activityeventname = pactivityeventname
    SET encntrlinkreq->encounterid = pencounterid
    RETURN(executescriptasync(encntr_linking_script_name,encntrlinkreq,encntrlinkrep))
  END ;Subroutine
 ENDIF
 IF (validate(cnvtdq8toisodttmstr,char(128))=char(128))
  SUBROUTINE (cnvtdq8toisodttmstr(pdttm=f8,ptimezoneindex=i4) =vc)
    DECLARE convertedisodttm = vc WITH noconstant("")
    DECLARE timezonedesignator = vc WITH noconstant("")
    DECLARE dttminutc = dq8 WITH noconstant(0)
    DECLARE dttmintimezone = dq8 WITH noconstant(0)
    DECLARE offsetseconds = i4 WITH noconstant(0)
    DECLARE hours = i4 WITH noconstant(0)
    DECLARE minutes = i4 WITH noconstant(0)
    IF (pdttm > 0.0)
     SET dttminutc = cnvtdatetimeutc(cnvtdatetime(pdttm),3)
     SET dttmintimezone = cnvtdatetimeutc(dttminutc,4,ptimezoneindex)
     SET offsetseconds = datetimediff(dttmintimezone,dttminutc,5)
     IF (offsetseconds < 0)
      SET timezonedesignator = "-"
      SET offsetseconds *= - (1)
     ELSE
      SET timezonedesignator = "+"
     ENDIF
     SET hours = (offsetseconds/ 3600)
     SET offsetseconds -= (3600 * hours)
     SET minutes = (offsetseconds/ 60)
     SET timezonedesignator = concat(timezonedesignator,format(trim(cnvtstring(hours)),"##;P0"),":",
      format(trim(cnvtstring(minutes)),"##;P0"))
     SET convertedisodttm = concat(format(dttmintimezone,"YYYY-MM-DDTHH:MM:SS.CCC;3;Q"),
      timezonedesignator)
    ENDIF
    RETURN(convertedisodttm)
  END ;Subroutine
 ENDIF
 RECORD bohpstatus(
   1 status[*]
     2 oldstatus = f8
     2 bohpreltnid = f8
 ) WITH protect
 RECORD applydailybalancebalreq(
   1 objarray[*]
     2 adjustment_amt = f8
     2 billing_entity_id = f8
     2 bo_hp_reltn_id = f8
     2 bo_hp_status_cd = f8
     2 charge_amt = f8
     2 payment_amt = f8
     2 roll_in_amt = f8
     2 roll_out_amt = f8
     2 transfer_in_amt = f8
     2 transfer_out_amt = f8
     2 beg_effective_dt_tm = dq8
 ) WITH protect
 IF ( NOT (validate(pftrmtimerevents)))
  RECORD pftrmtimerevents(
    1 timerevents[*]
      2 elapsedtime = f8
      2 timername = vc
      2 subtimername = vc
      2 metadata1 = vc
      2 metadata2 = vc
      2 metadata3 = vc
  ) WITH protect
 ENDIF
 IF ( NOT (validate(initial_interim)))
  DECLARE initial_interim = i2 WITH protect, constant(1)
 ENDIF
 IF ( NOT (validate(continuing_interim)))
  DECLARE continuing_interim = i2 WITH protect, constant(2)
 ENDIF
 IF ( NOT (validate(ein_trans_alias_elements)))
  DECLARE ein_trans_alias_elements = i4 WITH protect, constant(21)
 ENDIF
 IF ( NOT (validate(ein_trans_alias)))
  DECLARE ein_trans_alias = i4 WITH protect, constant(20)
 ENDIF
 IF ( NOT (validate(encounter_mod_type_flag)))
  DECLARE encounter_mod_type_flag = i4 WITH protect, constant(519)
 ENDIF
 IF ( NOT (validate(reg_mod_reversal)))
  DECLARE reg_mod_reversal = i4 WITH protect, constant(527)
 ENDIF
 IF ( NOT (validate(dm_info_domain_gl_alias_hist)))
  DECLARE dm_info_domain_gl_alias_hist = vc WITH protect, constant("pft_gl_alias_hist_option")
 ENDIF
 IF ( NOT (validate(dm_info_name_gl_alias_hist)))
  DECLARE dm_info_name_gl_alias_hist = vc WITH protect, constant("pft_full_gl_hist")
 ENDIF
 IF ( NOT (validate(dm_info_domain_mods_async)))
  DECLARE dm_info_domain_mods_async = vc WITH protect, constant("ENCOUNTER_MODS_ASYNC")
 ENDIF
 IF ( NOT (validate(dm_info_name_guar_bal)))
  DECLARE dm_info_name_guar_bal = vc WITH protect, constant("PFT_WF_ADPT_GUAR_BAL_WRITE_OFF")
 ENDIF
 IF ( NOT (validate(cs24451_cancelled_cd)))
  DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
 ENDIF
 IF ( NOT (validate(cs24451_invalid_cd)))
  DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
 ENDIF
 IF ( NOT (validate(cs354_selfpay_cd)))
  DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",0))
 ENDIF
 IF ( NOT (validate(cs24451_waitforprior_cd)))
  DECLARE cs24451_waitforprior_cd = f8 WITH protect, constant(getcodevalue(24451,"WAITBOCOMPL",0))
 ENDIF
 IF ( NOT (validate(cs24451_readytobill_cd)))
  DECLARE cs24451_readytobill_cd = f8 WITH protect, constant(getcodevalue(24451,"READYTOBILL",0))
 ENDIF
 IF ( NOT (validate(cs24451_complete_cd)))
  DECLARE cs24451_complete_cd = f8 WITH protect, constant(getcodevalue(24451,"COMPLETE",0))
 ENDIF
 IF ( NOT (validate(cs24451_waitcrosovr_cd)))
  DECLARE cs24451_waitcrosovr_cd = f8 WITH protect, constant(getcodevalue(24451,"WAITCROSOVR",0))
 ENDIF
 IF ( NOT (validate(cs24451_transxovrpay_cd)))
  DECLARE cs24451_transxovrpay_cd = f8 WITH protect, constant(getcodevalue(24451,"TRANSXOVRPAY",0))
 ENDIF
 IF ( NOT (validate(cs21849_claim_cd)))
  DECLARE cs21849_claim_cd = f8 WITH protect, constant(getcodevalue(21849,"CLAIM",0))
 ENDIF
 IF ( NOT (validate(cs4002267_suspchg_cd)))
  DECLARE cs4002267_suspchg_cd = f8 WITH protect, constant(getcodevalue(4002267,"SUSPENDCHRGS",0))
 ENDIF
 IF ( NOT (validate(cs4002267_enchist_cd)))
  DECLARE cs4002267_enchist_cd = f8 WITH protect, constant(getcodevalue(4002267,"ENCNTRINHIST",0))
 ENDIF
 IF ( NOT (validate(cs4002267_encbaddebt_cd)))
  DECLARE cs4002267_encbaddebt_cd = f8 WITH protect, constant(getcodevalue(4002267,"ENCNTRINBD",0))
 ENDIF
 IF ( NOT (validate(cs18649_adjustment_cd)))
  DECLARE cs18649_adjustment_cd = f8 WITH protect, constant(getcodevalue(18649,"ADJUST",0))
 ENDIF
 IF ( NOT (validate(cs18649_payment_cd)))
  DECLARE cs18649_payment_cd = f8 WITH protect, constant(getcodevalue(18649,"PAYMENT",0))
 ENDIF
 IF ( NOT (validate(cs20549_expectedadj_cd)))
  DECLARE cs20549_expectedadj_cd = f8 WITH protect, constant(getcodevalue(20549,"EXP REIM ADJ",0))
 ENDIF
 IF ( NOT (validate(cs21849_statement_cd)))
  DECLARE cs21849_statement_cd = f8 WITH protect, constant(getcodevalue(21849,"PATIENT STAT",1))
 ENDIF
 IF ( NOT (validate(cs29322_manrelease_cd)))
  DECLARE cs29322_manrelease_cd = f8 WITH protect, constant(getcodevalue(29322,"MANRELEASE",1))
 ENDIF
 IF ( NOT (validate(cs29320_selfpay_cd)))
  DECLARE cs29320_selfpay_cd = f8 WITH protect, constant(getcodevalue(29320,"SELFPAY",0))
 ENDIF
 IF ( NOT (validate(cs29321_complete_cd)))
  DECLARE cs29321_complete_cd = f8 WITH protect, constant(getcodevalue(29321,"COMPLETE",0))
 ENDIF
 IF ( NOT (validate(cs18937_disc_adj_cd)))
  DECLARE cs18937_disc_adj_cd = f8 WITH protect, constant(getcodevalue(18937,"DISC ADJ",1))
 ENDIF
 IF ( NOT (validate(cs20549_discount_adj_cd)))
  DECLARE cs20549_discount_adj_cd = f8 WITH protect, constant(getcodevalue(20549,"DISCOUNT ADJ",1))
 ENDIF
 IF ( NOT (validate(cs18649_adjust_cd)))
  DECLARE cs18649_adjust_cd = f8 WITH protect, constant(getcodevalue(18649,"ADJUST",1))
 ENDIF
 IF ( NOT (validate(cs323570_eob_rem_amt_cd)))
  DECLARE cs323570_eob_rem_amt_cd = f8 WITH protect, constant(getcodevalue(323570,"EOB_REM_AMT",0))
 ENDIF
 IF ( NOT (validate(cs4002853_queued_cd)))
  DECLARE cs4002853_queued_cd = f8 WITH protect, constant(getcodevalue(4002853,"QUEUED",0))
 ENDIF
 IF ( NOT (validate(cs4002853_inprocess_cd)))
  DECLARE cs4002853_inprocess_cd = f8 WITH protect, constant(getcodevalue(4002853,"INPROCESS",0))
 ENDIF
 IF ( NOT (validate(cs4002853_inerror_cd)))
  DECLARE cs4002853_inerror_cd = f8 WITH protect, constant(getcodevalue(4002853,"INERROR",0))
 ENDIF
 IF ( NOT (validate(cs4003481_unprocessed_cd)))
  DECLARE cs4003481_unprocessed_cd = f8 WITH protect, constant(getcodevalue(4003481,"UNPROCESSED",0))
 ENDIF
 IF ( NOT (validate(cs29322_guarnotfound_cd)))
  DECLARE cs29322_guarnotfound_cd = f8 WITH protect, constant(getcodevalue(29322,"GUARNOTFOUND",0))
 ENDIF
 IF ( NOT (validate(cs23369_wfevent_cd)))
  DECLARE cs23369_wfevent_cd = f8 WITH protect, constant(getcodevalue(23369,"WFEVENT",0))
 ENDIF
 IF ( NOT (validate(cs18936_client_cd)))
  DECLARE cs18936_client_cd = f8 WITH protect, constant(getcodevalue(18936,"CLIENT",0))
 ENDIF
 IF ( NOT (validate(cs4002709_atdemoout)))
  DECLARE cs4002709_atdemoout = f8 WITH protect, constant(getcodevalue(4002709,"ATDEMOOUT",0))
 ENDIF
 IF ( NOT (validate(cs319_fin_nbr_cd)))
  DECLARE cs319_fin_nbr_cd = f8 WITH protect, constant(getcodevalue(319,"FIN NBR",0))
 ENDIF
 IF ( NOT (validate(cs26913_dollar_amt_cd)))
  DECLARE cs26913_dollar_amt_cd = f8 WITH protect, constant(getcodevalue(26913,"DOLLARAMT",0))
 ENDIF
 IF ( NOT (validate(cs18935_canceled_cd)))
  DECLARE cs18935_canceled_cd = f8 WITH protect, constant(getcodevalue(18935,"CANCELED",0))
 ENDIF
 IF ( NOT (validate(cs29322_insrdytobill_cd)))
  DECLARE cs29322_insrdytobill_cd = f8 WITH protect, constant(getcodevalue(29322,"INSRDYTOBILL",0))
 ENDIF
 DECLARE actcnt = i4 WITH protect, noconstant(0)
 DECLARE wfindex = i4 WITH protect, noconstant(0)
 DECLARE eventsvctimerstartdttm = dm12 WITH protect, noconstant(0.0)
 IF (validate(svcrepackageencounter,char(128))=char(128))
  SUBROUTINE (svcrepackageencounter(pftencntrid=f8) =i2)
    IF ( NOT (isglobalbillingenabled(pftencntrid)))
     CALL addtracemessage("svcRepackageEncounter",
      "Global Billing is disabled, skipping repackage task.")
     RETURN(true)
    ENDIF
    RECORD requptencntr(
      1 objarray[*]
        2 pft_encntr_id = f8
        2 package_status_cd = f8
        2 updt_cnt = i4
    ) WITH protect
    RECORD repuptencntr(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD rmuptchargereq(
      1 objarray[*]
        2 charge_item_id = f8
        2 pricing_status_cd = f8
        2 updt_cnt = i4
    ) WITH protect
    RECORD rmuptchargereply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    DECLARE chrgcount = i4 WITH protect, noconstant(0)
    SET stat = alterlist(requptencntr->objarray,1)
    SET requptencntr->objarray[1].package_status_cd = cs4003481_unprocessed_cd
    SET requptencntr->objarray[1].pft_encntr_id = pftencntrid
    SET requptencntr->objarray[1].updt_cnt = upt_force
    EXECUTE pft_da_upt_pft_encntr  WITH replace("REQUEST",requptencntr), replace("REPLY",repuptencntr
     )
    IF ((repuptencntr->status_data.status != "S"))
     CALL addtracemessage("svcRepackageEncounter","PFT_DA_UPT_PFT_ENCNTR did not return success")
     CALL echorecord(requptencntr)
     CALL echorecord(repuptencntr)
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM pft_charge pc,
      charge c
     PLAN (pc
      WHERE pc.pft_encntr_id=pftencntrid)
      JOIN (c
      WHERE c.charge_item_id=pc.charge_item_id
       AND c.offset_charge_item_id=0.0)
     DETAIL
      chrgcount += 1, stat = alterlist(rmuptchargereq->objarray,chrgcount), rmuptchargereq->objarray[
      chrgcount].charge_item_id = c.charge_item_id,
      rmuptchargereq->objarray[chrgcount].pricing_status_cd = cs4002853_queued_cd, rmuptchargereq->
      objarray[chrgcount].updt_cnt = c.updt_cnt
     WITH nocounter
    ;end select
    IF (size(rmuptchargereq->objarray,5) > 0)
     EXECUTE pft_da_upt_charge  WITH replace("REQUEST",rmuptchargereq), replace("REPLY",
      rmuptchargereply)
     IF ((rmuptchargereply->status_data.status != "S"))
      CALL addtracemessage("svcRepackageEncounter","PFT_DA_UPT_CHARGE did not return success")
      CALL echorecord(rmuptchargereq)
      CALL echorecord(rmuptchargereply)
      RETURN(false)
     ENDIF
    ENDIF
    DECLARE hmsg = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hrep = i4 WITH protect, noconstant(0)
    DECLARE hitem = i4 WITH protect, noconstant(0)
    DECLARE submit_for_package = i4 WITH protect, constant(4091027)
    SET hmsg = uar_srvselectmessage(submit_for_package)
    SET hreq = uar_srvcreaterequest(hmsg)
    SET hrep = uar_srvcreatereply(hmsg)
    SET hitem = uar_srvadditem(hreq,"pftEncounterIds")
    SET stat = uar_srvsetdouble(hitem,"pftEncounterId",pftencntrid)
    SET stat = uar_srvexecute(hmsg,hreq,hrep)
    CALL addtracemessage("svcRepackageEncounter",concat(
      "asynchronous call to request 4091027 for repackaging pft_encntr [",cnvtstring(pftencntrid),
      "] issued."))
    CALL uar_srvdestroyinstance(hreq)
    CALL uar_srvdestroyinstance(hrep)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcapplycommenttoencounter,char(128))=char(128))
  SUBROUTINE (svcapplycommenttoencounter(pftencntrid=f8,comment=vc,importance=i4,personid=f8) =i2)
    RECORD rmsvcrequest(
      1 objarray[1]
        2 corsp_desc = vc
        2 importance_flag = i2
        2 comment_dt_tm = dq8
        2 pft_encntr_id = f8
        2 created_prsnl_id = f8
    ) WITH protect
    RECORD rmsvcreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF ( NOT (importance IN (0, 1, 2)))
     CALL addtracemessage("svcApplyCommentToEncounter","invalid importance flag for comment")
     RETURN(false)
    ENDIF
    IF ( NOT (retrieveactivefinencntr(pftencntrid)))
     CALL addtracemessage("svcApplyCommentToEncounter",
      "Unable to apply comment to inactive financial encounter.")
     RETURN(false)
    ENDIF
    SET rmsvcrequest->objarray[1].corsp_desc = trim(comment)
    SET rmsvcrequest->objarray[1].importance_flag = importance
    SET rmsvcrequest->objarray[1].pft_encntr_id = pftencntrid
    SET rmsvcrequest->objarray[1].comment_dt_tm = cnvtdatetime(sysdate)
    SET rmsvcrequest->objarray[1].created_prsnl_id = personid
    EXECUTE pft_apply_comment_for_encntr  WITH replace("REQUEST",rmsvcrequest), replace("REPLY",
     rmsvcreply)
    IF ((rmsvcreply->status_data.status != "S"))
     CALL addtracemessage("svcApplyCommentToEncounter",
      "pft_apply_comment_for_encntr did not return success")
     CALL echorecord(rmsvcrequest)
     CALL echorecord(rmsvcreply)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svccreateinsurancechargegroupsforcharges,char(128))=char(128))
  SUBROUTINE (svccreateinsurancechargegroupsforcharges(pftencntrid=f8,chargestoaddtocg=vc(ref)) =i2)
    SET eventsvctimerstartdttm = systimestamp
    DECLARE spbenefitorderid = f8 WITH protect, noconstant(0.0)
    RECORD acicgrep(
      1 pftencntrs[*]
        2 pftencntrid = f8
        2 pftcharges[*]
          3 pftchargeid = f8
          3 selfpaybenefitorderid = f8
          3 nonselfpaybenefitorderid = f8
      1 error_cd = f8
      1 error_prog = vc
      1 error_sub = vc
      1 error_msg = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF (size(chargestoaddtocg->pftcharges,5)=0)
     RETURN(true)
    ENDIF
    EXECUTE pft_rm_svc_add_chrg_to_ins_cg  WITH replace("REQUEST",chargestoaddtocg), replace("REPLY",
     acicgrep)
    CALL adddiscretetimerevent(mods_disrete_timer,"svcCreateInsuranceChargeGroupsForCharges",
     eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    IF ((acicgrep->status_data.status != "S"))
     CALL addtracemessage("svcCreateInsuranceChargeGroupsForCharges",
      "pft_add_charge_to_insurance_cg did not return success status")
     CALL echorecord(chargestoaddtocg)
     CALL echorecord(acicgrep)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcupdateencounterfinancialclass,char(128))=char(128))
  SUBROUTINE (svcupdateencounterfinancialclass(pftencntrid=f8,finclasscd=f8) =i2)
    CALL logmessage("svcUpdateEncounterFinancialClass","Entering",log_debug)
    RECORD dareq(
      1 objarray[*]
        2 pft_encntr_id = f8
        2 fin_class_cd = f8
        2 updt_cnt = f8
    ) WITH protect
    RECORD darep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid
       AND pe.active_ind=true
       AND pe.fin_class_cd != finclasscd)
     HEAD REPORT
      stat = alterlist(dareq->objarray,1), dareq->objarray[1].pft_encntr_id = pftencntrid, dareq->
      objarray[1].fin_class_cd = finclasscd,
      dareq->objarray[1].updt_cnt = upt_force
     WITH nocounter
    ;end select
    IF (size(dareq->objarray,5) > 0)
     EXECUTE pft_da_upt_pft_encntr  WITH replace("REQUEST",dareq), replace("REPLY",darep)
     IF ((darep->status_data.status != "S"))
      CALL addtracemessage("svcUpdateEncounterFinancialClass",
       "pft_da_upt_pft_encntr did not return success")
      CALL echorecord(dareq)
      CALL echorecord(darep)
      RETURN(false)
     ENDIF
    ENDIF
    CALL logmessage("svcUpdateEncounterFinancialClass","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcunrollchargegroupbalances,char(128))=char(128))
  SUBROUTINE (svcunrollchargegroupbalances(benefitorderid=f8,prioritysequence=i4) =i2)
    SET eventsvctimerstartdttm = systimestamp
    RECORD unrollrequest(
      1 insurancebenefitorderid = f8
      1 targetprioritysequence = i4
    ) WITH protect
    RECORD unrollreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 pftencntrid = f8
      1 spbenefitorderid = f8
      1 unrolledamt = f8
    ) WITH protect
    SET unrollrequest->insurancebenefitorderid = benefitorderid
    SET unrollrequest->targetprioritysequence = prioritysequence
    EXECUTE pft_unroll_cg_balances  WITH replace("REQUEST",unrollrequest), replace("REPLY",
     unrollreply)
    CALL adddiscretetimerevent(mods_disrete_timer,"svcUnrollChargeGroupBalances",
     eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    IF ((unrollreply->status_data.status != "S"))
     CALL addtracemessage("svcUnrollChargeGroupBalances",
      "pft_unroll_cg_balances did not return success")
     CALL echorecord(unrollrequest)
     CALL echorecord(unrollreply)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcreclassifyglaliasesfortransactions,char(128))=char(128))
  SUBROUTINE (svcreclassifyglaliasesfortransactions(transactionlist=vc(ref)) =i2)
    CALL logmessage("svcReclassifyGLAliasesForTransactions","Entering",log_debug)
    SET eventsvctimerstartdttm = systimestamp
    RECORD getaliasreply(
      1 transactions[*]
        2 activityid = f8
        2 accounts[2]
          3 gltranslogid = f8
          3 accountid = f8
          3 accounttypecd = f8
          3 accountsubtypecd = f8
          3 companyaliasnumber = vc
          3 companyunitaliasnumber = vc
          3 accountaliasnumber = vc
          3 accountunitaliasnumber = vc
          3 companyaliasid = f8
          3 companyunitaliasid = f8
          3 accountaliasid = f8
          3 accountunitaliasid = f8
        2 billingentityid = f8
        2 qualifiers
          3 stranstype = c1
          3 dacctsubtypecd = f8
          3 dactivitytypecd = f8
          3 dbillingentityid = f8
          3 dbillitemid = f8
          3 dbilltypecd = f8
          3 dclientaccountid = f8
          3 dclientorgid = f8
          3 dcurrentfinclasscd = f8
          3 dcurrentinsorgid = f8
          3 ddepartmentcd = f8
          3 dfinclasscd = f8
          3 dencntrtypecd = f8
          3 dinstitutioncd = f8
          3 dinsuranceorgid = f8
          3 dlevel5cd = f8
          3 dhealthplanid = f8
          3 dlocfacilitycd = f8
          3 dlocbuildingcd = f8
          3 dlocnurseunitcd = f8
          3 dmedservicecd = f8
          3 dorderingloccd = f8
          3 dorderingphysid = f8
          3 dpatientloccd = f8
          3 dpftpaymentlocationid = f8
          3 dperformingloccd = f8
          3 dperformingphysid = f8
          3 dsectioncd = f8
          3 dsubsectioncd = f8
          3 dtiergroupcd = f8
          3 dtransreasoncd = f8
          3 dtranssubtypecd = f8
          3 dverifyphysid = f8
          3 cdmcodes[*]
            4 dcdmcd = f8
            4 dcdmdesc = vc
          3 revenuecodes[*]
            4 drevenuecd = f8
          3 providerspecialtycodes[*]
            4 dproviderspecialtycd = f8
          3 dlocroomcd = f8
          3 dlocbedcd = f8
          3 dencntrtypeclasscd = f8
          3 dprimaryhealthplanid = f8
          3 dactivitysubtypecd = f8
          3 dsupervisingphysid = f8
          3 dattendingphysid = f8
          3 dorderingphysgroupid = f8
          3 drenderingphysgroupid = f8
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
    ) WITH protect
    EXECUTE pft_get_gl_aliases_for_trans  WITH replace("REQUEST",transactionlist), replace("REPLY",
     getaliasreply)
    IF ((getaliasreply->status_data.status != "S"))
     CALL addtracemessage("svcReclassifyGLAliasesForTransactions",
      "pft_get_gl_aliases_for_trans did not return success")
     CALL echorecord(transactionlist)
     CALL echorecord(getaliasreply)
     RETURN(false)
    ENDIF
    RECORD uptglalias1(
      1 dgl_tl_cd = f8
      1 dgl_trans_log_id = f8
      1 saccount_alias_nbr = vc
      1 saccount_unit_alias_nbr = vc
      1 scompany_alias_nbr = vc
      1 scompany_unit_alias_nbr = vc
      1 sbilling_entity_id = f8
      1 daccount_alias_id = f8
      1 daccount_unit_alias_id = f8
      1 dcompany_alias_id = f8
      1 dcompany_unit_alias_id = f8
      1 qualifiers
        2 stranstype = c1
        2 dacctsubtypecd = f8
        2 dactivitytypecd = f8
        2 dbillingentityid = f8
        2 dbillitemid = f8
        2 dbilltypecd = f8
        2 dclientaccountid = f8
        2 dclientorgid = f8
        2 dcurrentfinclasscd = f8
        2 dcurrentinsorgid = f8
        2 ddepartmentcd = f8
        2 dfinclasscd = f8
        2 dencntrtypecd = f8
        2 dinstitutioncd = f8
        2 dinsuranceorgid = f8
        2 dlevel5cd = f8
        2 dhealthplanid = f8
        2 dlocfacilitycd = f8
        2 dlocbuildingcd = f8
        2 dlocnurseunitcd = f8
        2 dmedservicecd = f8
        2 dorderingloccd = f8
        2 dorderingphysid = f8
        2 dpatientloccd = f8
        2 dpftpaymentlocationid = f8
        2 dperformingloccd = f8
        2 dperformingphysid = f8
        2 dsectioncd = f8
        2 dsubsectioncd = f8
        2 dtiergroupcd = f8
        2 dtransreasoncd = f8
        2 dtranssubtypecd = f8
        2 dverifyphysid = f8
        2 cdmcodes[*]
          3 dcdmcd = f8
          3 dcdmdesc = vc
        2 revenuecodes[*]
          3 drevenuecd = f8
        2 providerspecialtycodes[*]
          3 dproviderspecialtycd = f8
        2 dlocroomcd = f8
        2 dlocbedcd = f8
        2 dencntrtypeclasscd = f8
        2 dprimaryhealthplanid = f8
        2 dactivitysubtypecd = f8
        2 dsupervisingphysid = f8
        2 dattendingphysid = f8
        2 dorderingphysgroupid = f8
        2 drenderingphysgroupid = f8
    ) WITH protect
    RECORD uptglalias2(
      1 dgl_tl_cd = f8
      1 dgl_trans_log_id = f8
      1 saccount_alias_nbr = vc
      1 saccount_unit_alias_nbr = vc
      1 scompany_alias_nbr = vc
      1 scompany_unit_alias_nbr = vc
      1 sbilling_entity_id = f8
      1 daccount_alias_id = f8
      1 daccount_unit_alias_id = f8
      1 dcompany_alias_id = f8
      1 dcompany_unit_alias_id = f8
      1 qualifiers
        2 stranstype = c1
        2 dacctsubtypecd = f8
        2 dactivitytypecd = f8
        2 dbillingentityid = f8
        2 dbillitemid = f8
        2 dbilltypecd = f8
        2 dclientaccountid = f8
        2 dclientorgid = f8
        2 dcurrentfinclasscd = f8
        2 dcurrentinsorgid = f8
        2 ddepartmentcd = f8
        2 dfinclasscd = f8
        2 dencntrtypecd = f8
        2 dinstitutioncd = f8
        2 dinsuranceorgid = f8
        2 dlevel5cd = f8
        2 dhealthplanid = f8
        2 dlocfacilitycd = f8
        2 dlocbuildingcd = f8
        2 dlocnurseunitcd = f8
        2 dmedservicecd = f8
        2 dorderingloccd = f8
        2 dorderingphysid = f8
        2 dpatientloccd = f8
        2 dpftpaymentlocationid = f8
        2 dperformingloccd = f8
        2 dperformingphysid = f8
        2 dsectioncd = f8
        2 dsubsectioncd = f8
        2 dtiergroupcd = f8
        2 dtransreasoncd = f8
        2 dtranssubtypecd = f8
        2 dverifyphysid = f8
        2 cdmcodes[*]
          3 dcdmcd = f8
          3 dcdmdesc = vc
        2 revenuecodes[*]
          3 drevenuecd = f8
        2 providerspecialtycodes[*]
          3 dproviderspecialtycd = f8
        2 dlocroomcd = f8
        2 dlocbedcd = f8
        2 dencntrtypeclasscd = f8
        2 dprimaryhealthplanid = f8
        2 dactivitysubtypecd = f8
        2 dsupervisingphysid = f8
        2 dattendingphysid = f8
        2 dorderingphysgroupid = f8
        2 drenderingphysgroupid = f8
    ) WITH protect
    RECORD uptglaliasreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    DECLARE transidx = i4 WITH protect, noconstant(0)
    DECLARE transcnt = i4 WITH protect, noconstant(size(getaliasreply->transactions,5))
    DECLARE fullglaliashist = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM dm_info d
     PLAN (d
      WHERE d.info_domain=dm_info_domain_gl_alias_hist
       AND d.info_name=dm_info_name_gl_alias_hist
       AND d.info_number=1.0)
     DETAIL
      fullglaliashist = true
     WITH nocounter
    ;end select
    FOR (transidx = 1 TO transcnt)
      SET stat = initrec(uptglalias1)
      SET stat = initrec(uptglalias2)
      SELECT INTO "nl:"
       FROM gl_trans_log gtl,
        (dummyt d  WITH seq = 2),
        account a,
        pft_acct_reltn par
       PLAN (gtl
        WHERE (gtl.activity_id=getaliasreply->transactions[transidx].activityid)
         AND gtl.active_ind=true
         AND gtl.reclassified_ind=false)
        JOIN (d
        WHERE (getaliasreply->transactions[transidx].accounts[d.seq].accounttypecd=gtl.acct_type_cd))
        JOIN (a
        WHERE (a.acct_id=getaliasreply->transactions[transidx].accounts[d.seq].accountid))
        JOIN (par
        WHERE (par.acct_id= Outerjoin(a.acct_id))
         AND (par.role_type_cd= Outerjoin(cs18936_client_cd))
         AND (par.active_ind= Outerjoin(true))
         AND (par.parent_entity_name= Outerjoin("ORGANIZATION")) )
       DETAIL
        IF (((fullglaliashist=true) OR (fullglaliashist=false
         AND (((getaliasreply->transactions[transidx].accounts[d.seq].companyaliasnumber != gtl
        .gl_company_alias_nbr)) OR ((((getaliasreply->transactions[transidx].accounts[d.seq].
        companyunitaliasnumber != gtl.gl_company_unit_alias_nbr)) OR ((((getaliasreply->transactions[
        transidx].accounts[d.seq].accountaliasnumber != gtl.gl_account_alias_nbr)) OR ((getaliasreply
        ->transactions[transidx].accounts[d.seq].accountunitaliasnumber != gtl.gl_acct_unit_alias_nbr
        ))) )) )) )) )
         IF (d.seq=1)
          uptglalias1->dgl_tl_cd = gtl.gl_status_cd, uptglalias1->dgl_trans_log_id = gtl
          .gl_trans_log_id, uptglalias1->scompany_alias_nbr = getaliasreply->transactions[transidx].
          accounts[d.seq].companyaliasnumber,
          uptglalias1->scompany_unit_alias_nbr = getaliasreply->transactions[transidx].accounts[d.seq
          ].companyunitaliasnumber, uptglalias1->saccount_alias_nbr = getaliasreply->transactions[
          transidx].accounts[d.seq].accountaliasnumber, uptglalias1->saccount_unit_alias_nbr =
          getaliasreply->transactions[transidx].accounts[d.seq].accountunitaliasnumber,
          uptglalias1->daccount_alias_id = getaliasreply->transactions[transidx].accounts[d.seq].
          accountaliasid, uptglalias1->daccount_unit_alias_id = getaliasreply->transactions[transidx]
          .accounts[d.seq].accountunitaliasid, uptglalias1->dcompany_alias_id = getaliasreply->
          transactions[transidx].accounts[d.seq].companyaliasid,
          uptglalias1->dcompany_unit_alias_id = getaliasreply->transactions[transidx].accounts[d.seq]
          .companyunitaliasid, uptglalias1->sbilling_entity_id = getaliasreply->transactions[transidx
          ].billingentityid, stat = moverec(getaliasreply->transactions[transidx].qualifiers,
           uptglalias1->qualifiers),
          uptglalias1->qualifiers.dacctsubtypecd = a.acct_sub_type_cd
          IF (par.parent_entity_id > 0.0)
           uptglalias1->qualifiers.dclientaccountid = a.acct_id, uptglalias1->qualifiers.dclientorgid
            = par.parent_entity_id
          ENDIF
         ELSE
          uptglalias2->dgl_tl_cd = gtl.gl_status_cd, uptglalias2->dgl_trans_log_id = gtl
          .gl_trans_log_id, uptglalias2->scompany_alias_nbr = getaliasreply->transactions[transidx].
          accounts[d.seq].companyaliasnumber,
          uptglalias2->scompany_unit_alias_nbr = getaliasreply->transactions[transidx].accounts[d.seq
          ].companyunitaliasnumber, uptglalias2->saccount_alias_nbr = getaliasreply->transactions[
          transidx].accounts[d.seq].accountaliasnumber, uptglalias2->saccount_unit_alias_nbr =
          getaliasreply->transactions[transidx].accounts[d.seq].accountunitaliasnumber,
          uptglalias2->daccount_alias_id = getaliasreply->transactions[transidx].accounts[d.seq].
          accountaliasid, uptglalias2->daccount_unit_alias_id = getaliasreply->transactions[transidx]
          .accounts[d.seq].accountunitaliasid, uptglalias2->dcompany_alias_id = getaliasreply->
          transactions[transidx].accounts[d.seq].companyaliasid,
          uptglalias2->dcompany_unit_alias_id = getaliasreply->transactions[transidx].accounts[d.seq]
          .companyunitaliasid, uptglalias2->sbilling_entity_id = getaliasreply->transactions[transidx
          ].billingentityid, stat = moverec(getaliasreply->transactions[transidx].qualifiers,
           uptglalias2->qualifiers),
          uptglalias2->qualifiers.dacctsubtypecd = a.acct_sub_type_cd
          IF (par.parent_entity_id > 0.0)
           uptglalias2->qualifiers.dclientaccountid = a.acct_id, uptglalias2->qualifiers.dclientorgid
            = par.parent_entity_id
          ENDIF
         ENDIF
        ENDIF
       WITH nocounter
      ;end select
      IF ((uptglalias1->dgl_trans_log_id > 0.0))
       EXECUTE pft_powacct_upt_gltrans  WITH replace("REQUEST",uptglalias1), replace("REPLY",
        uptglaliasreply)
       IF ((uptglaliasreply->status_data.status != "S"))
        CALL addtracemessage("svcReclassifyGLAliasesForTransactions",
         "pft_powacct_upt_gltrans did not return success")
        CALL echorecord(uptglalias1)
        CALL echorecord(uptglaliasreply)
        RETURN(false)
       ENDIF
      ENDIF
      IF ((uptglalias2->dgl_trans_log_id > 0.0))
       EXECUTE pft_powacct_upt_gltrans  WITH replace("REQUEST",uptglalias2), replace("REPLY",
        uptglaliasreply)
       IF ((uptglaliasreply->status_data.status != "S"))
        CALL addtracemessage("svcReclassifyGLAliasesForTransactions",
         "pft_powacct_upt_gltrans did not return success")
        CALL echorecord(uptglalias2)
        CALL echorecord(uptglaliasreply)
        RETURN(false)
       ENDIF
      ENDIF
    ENDFOR
    CALL adddiscretetimerevent(mods_disrete_timer,"svcReclassifyGLAliasesForTransactions",
     eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    CALL logmessage("svcReclassifyGLAliasesForTransactions","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcresetinsurancebillingforchargegroup,char(128))=char(128))
  SUBROUTINE (svcresetinsurancebillingforchargegroup(benefitorderid=f8,prioritysequence=i4) =i2)
    SET eventsvctimerstartdttm = systimestamp
    CALL logmessage("svcResetInsuranceBillingForChargeGroup","Entering",log_debug)
    DECLARE balcnt = i4 WITH protect, noconstant(0)
    DECLARE primaryhpid = f8 WITH protect, noconstant(0)
    DECLARE secondaryhpid = f8 WITH protect, noconstant(0)
    DECLARE secondarybohpid = f8 WITH protect, noconstant(0)
    DECLARE secondaryupdtcnt = i4 WITH protect, noconstant(0)
    DECLARE billingentityid = f8 WITH protect, noconstant(0)
    DECLARE billtypecd = f8 WITH protect, noconstant(0)
    DECLARE isprimarycomplete = i2 WITH protect, noconstant(false)
    DECLARE isprimaryclaimsubmitted = i2 WITH protect, noconstant(false)
    DECLARE secondarynoncrossoverind = i2 WITH protect, noconstant(false)
    DECLARE balancestatus = f8 WITH protect, noconstant(0)
    DECLARE maxpriorityseq = i4 WITH protect, noconstant(0)
    DECLARE nonsecbohpid = f8 WITH protect, noconstant(0)
    DECLARE nonsecupdtcnt = i4 WITH protect, noconstant(0)
    DECLARE priorityseq = i4 WITH protect, noconstant(0)
    RECORD balreq(
      1 objarray[*]
        2 bo_hp_reltn_id = f8
        2 updt_cnt = f8
        2 bo_hp_status_cd = f8
    ) WITH protect
    RECORD darep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD publisheventrequest(
      1 eventlist[*]
        2 entitytypekey = vc
        2 entityid = f8
        2 eventcd = f8
        2 eventtypecd = f8
        2 workitemamount = f8
        2 params[*]
          3 paramcd = f8
          3 paramvalue = f8
    ) WITH protect
    RECORD publisheventreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF (prioritysequence=1)
     CALL addtracemessage("svcResetInsuranceBillingForChargeGroup",
      "Priority seq of 1 not supported by this subroutine.")
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM bo_hp_reltn bhr
     PLAN (bhr
      WHERE bhr.benefit_order_id=benefitorderid
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.active_ind=true)
     ORDER BY bhr.priority_seq
     DETAIL
      maxpriorityseq = bhr.priority_seq
     WITH nocounter
    ;end select
    FOR (priorityseq = prioritysequence TO maxpriorityseq)
     IF (priorityseq=2)
      SELECT INTO "nl:"
       FROM bo_hp_reltn bhr,
        bill_reltn br,
        bill_rec brec
       PLAN (bhr
        WHERE bhr.benefit_order_id=benefitorderid
         AND bhr.active_ind=true
         AND bhr.priority_seq=1
         AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
         AND bhr.fin_class_cd != cs354_selfpay_cd)
        JOIN (br
        WHERE br.parent_entity_id=bhr.bo_hp_reltn_id
         AND br.parent_entity_name="BO_HP_RELTN"
         AND br.active_ind=true)
        JOIN (brec
        WHERE brec.corsp_activity_id=br.corsp_activity_id
         AND brec.bill_class_cd=cs21849_claim_cd
         AND  NOT (brec.interim_bill_flag IN (initial_interim, continuing_interim))
         AND brec.active_ind=true)
       DETAIL
        IF (bhr.bo_hp_status_cd=cs24451_complete_cd)
         isprimarycomplete = true
        ENDIF
        IF ( NOT (brec.submit_dt_tm IN (0, null)))
         isprimaryclaimsubmitted = true
        ENDIF
        primaryhpid = bhr.health_plan_id, billtypecd = brec.bill_type_cd
       WITH nocounter
      ;end select
      IF (primaryhpid > 0)
       SELECT INTO "nl:"
        FROM benefit_order bo,
         pft_encntr pe,
         bo_hp_reltn bhr
        PLAN (bo
         WHERE bo.benefit_order_id=benefitorderid)
         JOIN (pe
         WHERE pe.pft_encntr_id=bo.pft_encntr_id)
         JOIN (bhr
         WHERE bhr.benefit_order_id=bo.benefit_order_id
          AND bhr.active_ind=true
          AND bhr.priority_seq=2
          AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
          AND bhr.fin_class_cd != cs354_selfpay_cd)
        DETAIL
         secondarybohpid = bhr.bo_hp_reltn_id, secondaryhpid = bhr.health_plan_id, secondaryupdtcnt
          = bhr.updt_cnt,
         billingentityid = pe.billing_entity_id
        WITH nocounter
       ;end select
       IF (((secondaryhpid=0) OR (billingentityid=0)) )
        CALL addtracemessage("svcResetInsuranceBillingForChargeGroup","Secondary balance not found.")
        RETURN(false)
       ENDIF
       IF (getcrossoverdelaythreshold(billingentityid,primaryhpid,secondaryhpid,billtypecd) > 0)
        IF (isprimarycomplete)
         SET balancestatus = cs24451_waitcrosovr_cd
        ELSEIF (isprimaryclaimsubmitted)
         SET balancestatus = cs24451_transxovrpay_cd
        ELSE
         SET balancestatus = cs24451_waitforprior_cd
        ENDIF
        SET balcnt += 1
        SET stat = alterlist(balreq->objarray,balcnt)
        SET balreq->objarray[balcnt].bo_hp_reltn_id = secondarybohpid
        SET balreq->objarray[balcnt].updt_cnt = secondaryupdtcnt
        SET balreq->objarray[balcnt].bo_hp_status_cd = balancestatus
       ELSE
        SET secondarynoncrossoverind = true
       ENDIF
      ELSE
       SET secondarynoncrossoverind = true
      ENDIF
     ENDIF
     IF (((priorityseq > 2) OR (secondarynoncrossoverind=true)) )
      SELECT INTO "nl:"
       FROM bo_hp_reltn bhr
       PLAN (bhr
        WHERE bhr.benefit_order_id=benefitorderid
         AND bhr.active_ind=true
         AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
       ORDER BY bhr.priority_seq
       DETAIL
        IF ((bhr.priority_seq=(priorityseq - 1)))
         IF (bhr.bo_hp_status_cd=cs24451_complete_cd)
          balancestatus = cs24451_readytobill_cd
         ELSE
          balancestatus = cs24451_waitforprior_cd
         ENDIF
        ENDIF
        IF (bhr.priority_seq=priorityseq)
         nonsecbohpid = bhr.bo_hp_reltn_id, nonsecupdtcnt = bhr.updt_cnt
        ENDIF
       WITH nocounter
      ;end select
      IF (curqual=0)
       CALL addtracemessage("svcResetInsuranceBillingForChargeGroup",build2(
         "Balance not found: benefitOrderId[",benefitorderid,"], prioritySeq = ",(priorityseq - 1)))
       RETURN(false)
      ENDIF
      SET balcnt += 1
      SET stat = alterlist(balreq->objarray,balcnt)
      SET balreq->objarray[balcnt].bo_hp_reltn_id = nonsecbohpid
      SET balreq->objarray[balcnt].updt_cnt = nonsecupdtcnt
      SET balreq->objarray[balcnt].bo_hp_status_cd = balancestatus
      SET stat = alterlist(bohpstatus->status,balcnt)
      IF ( NOT (getcurrentbostatus(balreq->objarray[balcnt].bo_hp_reltn_id,bohpstatus->status[balcnt]
       .oldstatus)))
       CALL logmessage("getCurrentBOStatus","Could not retrieve bo_hp_status_cd",log_debug)
      ENDIF
      SET bohpstatus->status[balcnt].bohpreltnid = balreq->objarray[balcnt].bo_hp_reltn_id
     ENDIF
    ENDFOR
    IF (balcnt > 0)
     EXECUTE pft_da_upt_bo_hp_reltn  WITH replace("REQUEST",balreq), replace("REPLY",darep)
     IF ((darep->status_data.status != "S"))
      CALL addtracemessage("svcResetInsuranceBillingForChargeGroup",
       "pft_da_upt_bo_hp_reltn did not return success")
      CALL echorecord(balreq)
      CALL echorecord(darep)
      RETURN(false)
     ENDIF
     DECLARE balanceindex = i4 WITH protect, noconstant(0)
     FOR (balanceindex = 1 TO size(balreq->objarray,5))
       CALL publishinsurancereadytobillevent(balreq->objarray[balanceindex].bo_hp_reltn_id)
     ENDFOR
     FOR (actcnt = 1 TO size(bohpstatus->status,5))
       IF ((bohpstatus->status[actcnt].oldstatus != balreq->objarray[actcnt].bo_hp_status_cd))
        IF ( NOT (createactivityforbalstatuschng(bohpstatus->status[actcnt].oldstatus,bohpstatus->
         status[actcnt].bohpreltnid)))
         CALL logmessage("createActivityForBalStatusChng","Failed in creating an activity",log_debug)
        ENDIF
       ENDIF
     ENDFOR
    ENDIF
    SET balcnt = 0
    IF (value(size(balreq->objarray,5)) > 0)
     SET stat = initrec(applydailybalancebalreq)
     SELECT INTO "nl:"
      FROM (dummyt d  WITH seq = value(size(balreq->objarray,5))),
       pft_encntr pe,
       benefit_order bo,
       bo_hp_reltn bhr
      PLAN (d)
       JOIN (bhr
       WHERE bhr.bo_hp_reltn_id IN (balreq->objarray[d.seq].bo_hp_reltn_id)
        AND bhr.active_ind=true)
       JOIN (bo
       WHERE bo.benefit_order_id=bhr.benefit_order_id
        AND bo.active_ind=true)
       JOIN (pe
       WHERE pe.pft_encntr_id=bo.pft_encntr_id
        AND pe.active_ind=true)
      DETAIL
       balcnt += 1, stat = alterlist(applydailybalancebalreq->objarray,balcnt),
       applydailybalancebalreq->objarray[balcnt].billing_entity_id = pe.billing_entity_id,
       applydailybalancebalreq->objarray[balcnt].bo_hp_status_cd = balreq->objarray[d.seq].
       bo_hp_status_cd, applydailybalancebalreq->objarray[balcnt].bo_hp_reltn_id = balreq->objarray[d
       .seq].bo_hp_reltn_id, applydailybalancebalreq->objarray[balcnt].beg_effective_dt_tm =
       cnvtdatetime(sysdate)
      WITH nocounter
     ;end select
     IF ( NOT (applyrollamounttodailybalancebal(0)))
      CALL addtracemessage("applyRollAmountToDailyBalanceBal",
       "PFT_APPLY_TRANS_TO_BALANCE_BAL didn't return sucess")
     ENDIF
    ENDIF
    DECLARE claimcnt = i4 WITH protect, noconstant(0)
    RECORD cancelclaimsrequest(
      1 claims[*]
        2 corspactivityid = f8
        2 billstatusreasoncdf = vc
    ) WITH protect
    RECORD cancelclaimsreply(
      1 pft_status_data
        2 subeventstatus[1]
          3 programname = vc
          3 subroutinename = vc
          3 message = vc
        2 pft_stats[*]
          3 programname = vc
          3 executioncnt = i4
          3 executiontime = f8
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM bo_hp_reltn bhr,
      bill_reltn br,
      bill_rec brec
     PLAN (bhr
      WHERE bhr.benefit_order_id=benefitorderid
       AND bhr.active_ind=true
       AND bhr.priority_seq >= prioritysequence
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.fin_class_cd != cs354_selfpay_cd)
      JOIN (br
      WHERE br.parent_entity_id=bhr.bo_hp_reltn_id
       AND br.parent_entity_name="BO_HP_RELTN"
       AND br.active_ind=true)
      JOIN (brec
      WHERE brec.corsp_activity_id=br.corsp_activity_id
       AND brec.bill_class_cd=cs21849_claim_cd
       AND brec.active_ind=true)
     DETAIL
      IF (iscancelablestatus(brec.bill_status_cd))
       claimcnt += 1, stat = alterlist(cancelclaimsrequest->claims,claimcnt), cancelclaimsrequest->
       claims[claimcnt].corspactivityid = brec.corsp_activity_id
      ENDIF
     WITH nocounter
    ;end select
    IF (size(cancelclaimsrequest->claims,5) > 0)
     IF ( NOT (svccancelclaims(cancelclaimsrequest)))
      CALL addtracemessage("svcResetInsuranceBillingForChargeGroup",
       "svcCancelClaims did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"svcResetInsuranceBillingForChargeGroup",
     eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    CALL logmessage("svcResetInsuranceBillingForChargeGroup","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcresetselfpaybillingforencounter,char(128))=char(128))
  SUBROUTINE (svcresetselfpaybillingforencounter(pftencntrid=f8,cbosreq=vc(ref)) =i2)
    SET eventsvctimerstartdttm = systimestamp
    CALL logmessage("svcResetSelfpayBillingForEncounter","Entering",log_debug)
    RECORD resetreq(
      1 encounters[1]
        2 pftencntrid = f8
        2 cbospereltns[*]
          3 cbospereltnid = f8
    ) WITH protect
    RECORD resetrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET resetreq->encounters[1].pftencntrid = pftencntrid
    IF (validate(cbosreq->cbospereltns))
     SET stat = moverec(cbosreq->cbospereltns,resetreq->encounters[1].cbospereltns)
    ENDIF
    EXECUTE pft_reset_stmt_for_fin_encntr  WITH replace("REQUEST",resetreq), replace("REPLY",resetrep
     )
    IF ((resetrep->status_data.status != "S"))
     CALL addtracemessage("svcResetSelfpayBillingForEncounter",
      "pft_reset_stmt_for_fin_encntr did not return success")
     CALL echorecord(resetreq)
     CALL echorecord(resetrep)
     RETURN(false)
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"svcResetSelfpayBillingForEncounter",
     eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    CALL logmessage("svcResetSelfpayBillingForEncounter","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcremoveencounterstatementcycle,char(128))=char(128))
  SUBROUTINE (svcremoveencounterstatementcycle(pftencntrid=f8,prupdcbosched=vc(ref)) =i2)
    RECORD removerep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF (size(prupdcbosched->objarray,5) <= 0)
     RECORD removereq(
       1 context = vc
       1 objarray[1]
         2 pft_encntr_id = f8
     ) WITH protect
     SET removereq->context = "Process Registration Modifications"
     SET removereq->objarray[1].pft_encntr_id = pftencntrid
     EXECUTE pft_remove_fe_stmt_cycle  WITH replace("REQUEST",removereq), replace("REPLY",removerep)
     IF ((removerep->status_data.status != "S"))
      CALL addtracemessage("svcRemoveEncounterStatementCycle",
       "pft_remove_fe_stmt_cycle did not return success")
      CALL echorecord(removereq)
      CALL echorecord(removerep)
      RETURN(false)
     ENDIF
    ELSE
     EXECUTE pft_remove_guarresp_stmt_cycle  WITH replace("REQUEST",prupdcbosched), replace("REPLY",
      removerep)
     IF ((removerep->status_data.status != "S"))
      CALL addtracemessage("svcRemoveEncounterStatementCycle",
       "pft_remove_guarresp_stmt_cycle did not return success")
      CALL echorecord(removereq)
      CALL echorecord(removerep)
      RETURN(false)
     ENDIF
    ENDIF
    CALL logmessage("svcRemoveEncounterStatementCycle","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcremoveencounterpaymentplan,char(128))=char(128))
  SUBROUTINE (svcremoveencounterpaymentplan(pftencntrid=f8) =i2)
    DECLARE encntrid = f8 WITH protect, noconstant(0.0)
    DECLARE cboscnt = i4 WITH protect, noconstant(0)
    RECORD removereq(
      1 objarray[*]
        2 pft_encntr_id = f8
        2 cbos_pe_reltn_id = f8
    ) WITH protect
    RECORD removerep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid
       AND pe.active_ind=true)
     DETAIL
      encntrid = pe.encntr_id
     WITH nocounter
    ;end select
    IF (ismultipleguarantorencounter(encntrid))
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       cbos_pe_reltn cpr
      PLAN (pe
       WHERE pe.pft_encntr_id=pftencntrid
        AND pe.active_ind=true)
       JOIN (cpr
       WHERE cpr.pft_encntr_id=pe.pft_encntr_id
        AND cpr.active_ind=true)
      DETAIL
       cboscnt += 1, stat = alterlist(removereq->objarray,cboscnt), removereq->objarray[cboscnt].
       cbos_pe_reltn_id = cpr.cbos_pe_reltn_id,
       removereq->objarray[cboscnt].pft_encntr_id = pe.pft_encntr_id
      WITH nocounter
     ;end select
    ELSE
     SET stat = alterlist(removereq->objarray,1)
     SET removereq->objarray[1].pft_encntr_id = pftencntrid
    ENDIF
    IF (size(removereq->objarray,5) > 0)
     EXECUTE pft_remove_payment_plan  WITH replace("REQUEST",removereq), replace("REPLY",removerep)
     IF ((removerep->status_data.status != "S"))
      CALL addtracemessage("svcRemoveEncounterPaymentPlan",
       "pft_remove_payment_plan did not return success")
      CALL echorecord(removereq)
      CALL echorecord(removerep)
      RETURN(false)
     ENDIF
    ENDIF
    CALL logmessage("svcRemoveEncounterPaymentPlan","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcupdateencounterselfpaybalanceprioritysequence,char(128))=char(128))
  SUBROUTINE (svcupdateencounterselfpaybalanceprioritysequence(pftencntrid=f8,prioritysequence=i4) =
   i2)
    CALL logmessage("svcUpdateEncounterSelfpayBalancePrioritySequence","Entering",log_debug)
    RECORD uptbhrreq(
      1 objarray[*]
        2 bo_hp_reltn_id = f8
        2 updt_cnt = i4
        2 priority_seq = i4
    ) WITH protect
    RECORD uptppreq(
      1 objarray[1]
        2 pft_proration_id = f8
        2 updt_cnt = i4
        2 priority_seq = i4
    ) WITH protect
    RECORD darep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bhr,
      pft_proration pp
     PLAN (bo
      WHERE bo.pft_encntr_id=pftencntrid
       AND bo.active_ind=true
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo.fin_class_cd=cs354_selfpay_cd)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.fin_class_cd=cs354_selfpay_cd)
      JOIN (pp
      WHERE pp.bo_hp_reltn_id=bhr.bo_hp_reltn_id
       AND pp.active_ind=true)
     HEAD REPORT
      stat = alterlist(uptbhrreq->objarray,1), uptbhrreq->objarray[1].priority_seq = prioritysequence,
      uptbhrreq->objarray[1].bo_hp_reltn_id = bhr.bo_hp_reltn_id,
      uptbhrreq->objarray[1].updt_cnt = bhr.updt_cnt, uptppreq->objarray[1].priority_seq =
      prioritysequence, uptppreq->objarray[1].pft_proration_id = pp.pft_proration_id,
      uptppreq->objarray[1].updt_cnt = pp.updt_cnt
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL addtracemessage("svcUpdateEncounterSelfpayBalancePrioritySequence",
      "Failed to find selfpay balance")
     RETURN(false)
    ENDIF
    EXECUTE pft_da_upt_bo_hp_reltn  WITH replace("REQUEST",uptbhrreq), replace("REPLY",darep)
    IF ((darep->status_data.status != "S"))
     CALL addtracemessage("svcUpdateEncounterSelfpayBalancePrioritySequence",
      "pft_da_upt_bo_hp_reltn did not return success")
     CALL echorecord(uptbhrreq)
     CALL echorecord(darep)
     RETURN(false)
    ENDIF
    IF ( NOT (svcupdateproration(uptppreq)))
     CALL addtracemessage("svcUpdateEncounterSelfpayBalancePrioritySequence",
      "Failed to update pft_proration table.")
     RETURN(false)
    ENDIF
    CALL logmessage("svcUpdateEncounterSelfpayBalancePrioritySequence","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcqueueencountertoregmodworkflowqueue,char(128))=char(128))
  SUBROUTINE (svcqueueencountertoregmodworkflowqueue(pftencntrid=f8,itemstatuscd=f8,changetype=vc) =
   i2)
    DECLARE cs29322_hp_modified_event_cd = f8 WITH protect, constant(getcodevalue(29322,
      "COMBHPMODENC",0))
    DECLARE cs29322_guar_change_event_cd = f8 WITH protect, constant(getcodevalue(29322,"GUARCHANGE",
      0))
    DECLARE cs29320_pft_encntr_cd = f8 WITH protect, constant(getcodevalue(29320,"PFTENCNTR",0))
    DECLARE cs29321_demg_mod_cd = f8 WITH protect, constant(getcodevalue(29321,"DEMOMODS",0))
    RECORD queuerequest(
      1 pft_queue_event_cd = f8
      1 entity[1]
        2 pft_entity_type_cd = f8
        2 pft_entity_status_cd = f8
        2 entity_id = f8
        2 item_status_cd = f8
    ) WITH protect
    RECORD queuereply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
    ) WITH protect
    IF (((changetype="GUARCHANGE") OR (itemstatuscd IN (cs4002267_guar_removed,
    cs4002267_guar_added_fpp, cs4002267_eval_exist_pay_plans_cd))) )
     SET queuerequest->pft_queue_event_cd = cs29322_guar_change_event_cd
    ELSE
     SET queuerequest->pft_queue_event_cd = cs29322_hp_modified_event_cd
    ENDIF
    SET queuerequest->entity[1].pft_entity_type_cd = cs29320_pft_encntr_cd
    SET queuerequest->entity[1].pft_entity_status_cd = cs29321_demg_mod_cd
    SET queuerequest->entity[1].entity_id = pftencntrid
    SET queuerequest->entity[1].item_status_cd = itemstatuscd
    EXECUTE pft_wf_publish_queue_event  WITH replace("REQUEST",queuerequest), replace("REPLY",
     queuereply)
    IF ((queuereply->status_data.status="F"))
     CALL addtracemessage("svcQueueEncounterToRegModWorkflowQueue",
      "pft_wf_publish_queue_event did not return success")
     CALL echorecord(queuerequest)
     CALL echorecord(queuereply)
     RETURN(false)
    ENDIF
    IF ((queuereply->status_data.status="Z"))
     CALL addtracemessage("svcQueueEncounterToRegModWorkflowQueue",
      "pft_wf_publish_queue_event did not find the pft_queue_definition rows")
     CALL echorecord(queuerequest)
     CALL echorecord(queuereply)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcupdateguarantordailybalance,char(128))=char(128))
  SUBROUTINE (svcupdateguarantordailybalance(ppftencntrid=f8,iscalledbypersoncombine=i2(value,false)
   ) =i2)
    CALL logmessage("svcUpdateGuarantorDailyBalance","Entering",log_debug)
    SET eventsvctimerstartdttm = systimestamp
    RECORD encntrmodrequest(
      1 guar_qual[*]
        2 pft_encntr_id = f8
        2 billing_entity_id = f8
        2 benefit_orders[*]
          3 benefit_order_id = f8
          3 total_resp_amt = f8
          3 transfer_bo_id = f8
        2 trans_mod = vc
        2 transactions[*]
          3 entity_id = f8
          3 entity_name = vc
          3 amount = f8
          3 service_date = dq8
          3 type = f8
          3 sub_type = f8
    ) WITH protect
    RECORD encntrmodreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    DECLARE idx = i4 WITH protect, noconstant(0)
    IF (hasselfpayresponsibility(ppftencntrid,benefitorders))
     SET stat = alterlist(encntrmodrequest->guar_qual,1)
     SET stat = alterlist(encntrmodrequest->guar_qual[1].benefit_orders,size(benefitorders->
       benefitorders,5))
     FOR (idx = 1 TO size(benefitorders->benefitorders,5))
       SET encntrmodrequest->guar_qual[1].benefit_orders[idx].benefit_order_id = benefitorders->
       benefitorders[idx].benefitorderid
     ENDFOR
     SET encntrmodrequest->guar_qual[1].pft_encntr_id = ppftencntrid
     SET encntrmodrequest->guar_qual[1].trans_mod = evaluate(benefitorders->istrueselfpayflag,true,
      "SELF_PAY_MODIFICATION",false,"INSURANCE_MODIFICATION")
     IF (validate(debug,0)=1)
      CALL echorecord(encntrmodrequest)
     ENDIF
     IF (getdminfodetails(dm_info_domain_mods_async,dm_info_name_guar_bal)
      AND iscalledbypersoncombine != true)
      IF ( NOT (publishapplytranstoguaraccttask(ppftencntrid,true,replace(cnvtrectojson(
         encntrmodrequest),"ENCNTRMODREQUEST","applyTransToGuarAcctReq"))))
       CALL addtracemessage("svcUpdateGuarantorDailyBalance",
        "publishApplyTransToGuarAcctTask did not return success")
       RETURN(false)
      ENDIF
     ELSE
      EXECUTE pft_apply_trans_to_guar_acct  WITH replace("REQUEST",encntrmodrequest), replace("REPLY",
       encntrmodreply)
      IF ((encntrmodreply->status_data.status != "S"))
       CALL addtracemessage("svcUpdateGuarantorDailyBalance",
        "pft_apply_trans_to_guar_acct did not return success")
       IF (validate(debug,0)=1)
        CALL echorecord(encntrmodrequest)
        CALL echorecord(encntrmodreply)
       ENDIF
       RETURN(false)
      ENDIF
     ENDIF
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"svcUpdateGuarantorDailyBalance",
     eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    CALL logmessage("svcUpdateGuarantorDailyBalance","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcapplybillingholds,char(128))=char(128))
  SUBROUTINE (svcapplybillingholds(pftencntrid=f8,applyholdsrec=vc(ref)) =i2)
    CALL logmessage("svcApplyBillingHolds","Entering",log_debug)
    DECLARE lindex = i4 WITH private, noconstant(0)
    RECORD abhrequest(
      1 objarray[*]
        2 pft_encntr_id = f8
        2 pe_status_reason_cd = f8
        2 reason_comment = vc
        2 reapply_ind = i4
        2 pft_balance_id = f8
        2 pft_hold_id = f8
        2 pe_sub_status_reason_cd = f8
    ) WITH protect
    RECORD abhreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET stat = alterlist(abhrequest->objarray,size(applyholdsrec->holds,5))
    FOR (lindex = 1 TO size(applyholdsrec->holds,5))
      SET abhrequest->objarray[lindex].pft_encntr_id = pftencntrid
      SET abhrequest->objarray[lindex].pft_hold_id = applyholdsrec->holds[lindex].pftholdid
      SET abhrequest->objarray[lindex].pe_status_reason_cd = applyholdsrec->holds[lindex].
      statusreasoncd
      SET abhrequest->objarray[lindex].reapply_ind = applyholdsrec->holds[lindex].reapplyind
      SET abhrequest->objarray[lindex].reason_comment = applyholdsrec->holds[lindex].reasoncomment
      IF (validate(applyholdsrec->holds[lindex].substatusreasoncd))
       SET abhrequest->objarray[lindex].pe_sub_status_reason_cd = applyholdsrec->holds[lindex].
       substatusreasoncd
      ENDIF
    ENDFOR
    IF (size(abhrequest->objarray,5) > 0)
     EXECUTE pft_apply_bill_hold_suspension  WITH replace("REQUEST",abhrequest), replace("REPLY",
      abhreply)
     IF ((abhreply->status_data.status != "S"))
      CALL addtracemessage("svcApplyBillingHolds",
       "pft_apply_bill_hold_suspension did not return success")
      CALL echorecord(abhrequest)
      CALL echorecord(abhreply)
      SET stat = initrec(applyholdsrec)
      RETURN(false)
     ENDIF
    ENDIF
    SET stat = initrec(applyholdsrec)
    CALL logmessage("svcApplyBillingHolds","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcreleasebillingholds,char(128))=char(128))
  SUBROUTINE (svcreleasebillingholds(pftencntrid=f8,relholdsrec=vc(ref)) =i2)
    CALL logmessage("svcReleaseBillingHolds","Entering",log_debug)
    DECLARE lindex = i4 WITH private, noconstant(0)
    RECORD rbhrequest(
      1 objarray[*]
        2 pft_encntr_id = f8
        2 pe_status_reason_cd = f8
        2 pft_balance_id = f8
        2 pe_sub_status_reason_cd = f8
    ) WITH protect
    RECORD rbhreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 objarray[*]
        2 service_cd = f8
        2 updt_id = f8
        2 event_key = vc
        2 category_key = vc
        2 published_ind = i2
        2 pe_status_reason_cd = f8
        2 acct_id = f8
        2 activity_id = f8
        2 batch_denial_file_r_id = f8
        2 batch_trans_ext_id = f8
        2 batch_trans_file_id = f8
        2 batch_trans_id = f8
        2 benefit_order_id = f8
        2 bill_item_id = f8
        2 bill_templ_id = f8
        2 bill_vrsn_nbr = i4
        2 billing_entity_id = f8
        2 bo_hp_reltn_id = f8
        2 charge_item_id = f8
        2 chrg_activity_id = f8
        2 claim_status_id = f8
        2 client_org_id = f8
        2 corsp_activity_id = f8
        2 corsp_log_reltn_id = f8
        2 denial_id = f8
        2 dirty_flag = i4
        2 encntr_id = f8
        2 guar_acct_id = f8
        2 guarantor_id = f8
        2 health_plan_id = f8
        2 long_text_id = f8
        2 organization_id = f8
        2 payor_org_id = f8
        2 pe_status_reason_id = f8
        2 person_id = f8
        2 pft_balance_id = f8
        2 pft_bill_activity_id = f8
        2 pft_charge_id = f8
        2 pft_encntr_fact_id = f8
        2 pft_encntr_id = f8
        2 pft_line_item_id = f8
        2 trans_alias_id = f8
        2 pft_payment_plan_id = f8
        2 daily_encntr_bal_id = f8
        2 daily_acct_bal_id = f8
        2 active_ind = i2
        2 active_status_cd = f8
        2 active_status_disp = vc
        2 active_status_desc = vc
        2 active_status_mean = vc
        2 active_status_code_set = f8
        2 active_status_dt_tm = dq8
        2 active_status_prsnl_id = f8
        2 beg_effective_dt_tm = dq8
        2 end_effective_dt_tm = dq8
        2 updt_applctx = f8
        2 updt_cnt = i4
        2 updt_dt_tm = dq8
        2 updt_id = f8
        2 updt_task = f8
        2 benefit_status_cd = f8
        2 financial_class_cd = f8
        2 payment_plan_flag = i2
        2 payment_location_id = f8
        2 encntr_plan_cob_id = f8
        2 guarantor_account_id = f8
        2 guarantor_id1 = f8
        2 guarantor_id2 = f8
        2 cbos_pe_reltn_id = f8
        2 post_dt_tm = dq8
        2 posting_category_type_flag = i2
    ) WITH protect
    SET stat = alterlist(rbhrequest->objarray,size(relholdsrec->holds,5))
    FOR (lindex = 1 TO size(relholdsrec->holds,5))
     SET rbhrequest->objarray[lindex].pft_encntr_id = pftencntrid
     SET rbhrequest->objarray[lindex].pe_status_reason_cd = relholdsrec->holds[lindex].statusreasoncd
    ENDFOR
    IF (size(rbhrequest->objarray,5) > 0)
     EXECUTE pft_rel_bill_hold_suspension  WITH replace("REQUEST",rbhrequest), replace("REPLY",
      rbhreply)
     IF ((rbhreply->status_data.status != "S"))
      CALL addtracemessage("svcReleaseBillingHolds",
       "pft_rel_bill_hold_suspension did not return success")
      CALL echorecord(rbhrequest)
      CALL echorecord(rbhreply)
      SET stat = initrec(relholdsrec)
      FREE RECORD abhrequest
      FREE RECORD abhreply
      RETURN(false)
     ENDIF
    ENDIF
    SET stat = initrec(relholdsrec)
    FREE RECORD abhrequest
    FREE RECORD abhreply
    CALL logmessage("svcReleaseBillingHolds","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcreversetransactions,char(128))=char(128))
  SUBROUTINE (svcreversetransactions(reversalrequest=vc(ref)) =i2)
    CALL logmessage("svcReverseTransactions","Entering",log_debug)
    SET eventsvctimerstartdttm = systimestamp
    RECORD reversalreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
    ) WITH protect
    EXECUTE pft_reverse_transaction  WITH replace("REQUEST",reversalrequest), replace("REPLY",
     reversalreply)
    CALL adddiscretetimerevent(mods_disrete_timer,"svcReverseTransactions",eventsvctimerstartdttm,"",
     "",
     "",pftrmtimerevents)
    IF ((reversalreply->status_data.status="F"))
     CALL addtracemessage("svcReverseTransactions","pft_reverse_transaction did not return success")
     CALL echorecord(reversalrequest)
     CALL echorecord(reversalreply)
     RETURN(false)
    ENDIF
    CALL logmessage("svcReverseTransactions","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcqueuerevadjforvoidbalancetask,char(128))=char(128))
  SUBROUTINE (svcqueuerevadjforvoidbalancetask(claimid=f8,encounterid=f8) =i2)
    CALL logmessage("svcQueueRevAdjForVoidBalanceTask","Entering",log_debug)
    RECORD wtptaskrequest(
      1 corspactivityid = f8
    ) WITH protect
    RECORD wtpsaverequest(
      1 requestjson = vc
      1 processdttm = dq8
      1 taskident = vc
      1 entityname = vc
      1 entityid = f8
    ) WITH protect
    RECORD wtpsavereply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF (checkprg("WTP_WORKFLOW_TASK_SAVE")
     AND claimid > 0.0)
     SET wtptaskrequest->corspactivityid = claimid
     SET wtpsaverequest->processdttm = cnvtdatetime(sysdate)
     SET wtpsaverequest->taskident = "PFT_REV_ADJ_FOR_CANCELED_CLAIM"
     SET wtpsaverequest->requestjson = cnvtrectojson(wtptaskrequest)
     SET wtpsaverequest->entityname = "ENCOUNTER"
     SET wtpsaverequest->entityid = encounterid
     EXECUTE wtp_workflow_task_save  WITH replace("REQUEST",wtpsaverequest), replace("REPLY",
      wtpsavereply)
     IF ((wtpsavereply->status_data.status != "S"))
      CALL logmessage("svcQueueRevAdjForVoidBalanceTask",
       "wtp_workflow_task_save did not return success",log_debug)
      RETURN(false)
     ENDIF
    ENDIF
    CALL logmessage("svcQueueRevAdjForVoidBalanceTask","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcmoveadjustmentsonbalances,char(128))=char(128))
  SUBROUTINE (svcmoveadjustmentsonbalances(pradjtomove=vc(ref),prrevtransrequest=vc(ref)) =i2)
    SET eventsvctimerstartdttm = systimestamp
    CALL logmessage("svcMoveAdjustmentsOnBalances","Entering",log_debug)
    DECLARE transaliasid = f8 WITH protect, noconstant(0.0)
    DECLARE transtypecd = f8 WITH protect, noconstant(0.0)
    DECLARE transsubtypecd = f8 WITH protect, noconstant(0.0)
    DECLARE transreasoncd = f8 WITH protect, noconstant(0.0)
    DECLARE chargeactivityid = f8 WITH protect, noconstant(0.0)
    DECLARE activitycnt = i4 WITH protect, noconstant(0)
    RECORD transaliasfindrequest(
      1 objarray[*]
        2 trans_alias_id = f8
        2 trans_type_cd = f8
        2 trans_sub_type_cd = f8
        2 trans_reason_cd = f8
    ) WITH protect
    RECORD transaliasfindreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD revtransreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD applydiscadjreq(
      1 objarray[*]
        2 activity_id = f8
        2 trans_type_cd = f8
        2 trans_sub_type_cd = f8
        2 trans_reason_cd = f8
        2 trans_alias_id = f8
        2 amount = f8
        2 bo_hp_reltn_id = f8
        2 chrg_writeoff_ind = i2
        2 parent_activity_id = f8
      1 batch_type_flag = i4
    ) WITH protect
    RECORD applydiscadjrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD objtransalias(
      1 proxy_ind = i2
      1 obj_vrsn_1 = f8
      1 ein_type = i4
      1 objarray[*]
        2 trans_alias_id = f8
        2 trans_type_cd = f8
        2 trans_type_disp = vc
        2 trans_type_desc = vc
        2 trans_type_mean = vc
        2 trans_type_code_set = i4
        2 trans_sub_type_cd = f8
        2 trans_sub_type_disp = vc
        2 trans_sub_type_desc = vc
        2 trans_sub_type_mean = vc
        2 trans_sub_type_code_set = i4
        2 trans_reason_cd = f8
        2 trans_reason_disp = vc
        2 trans_reason_desc = vc
        2 trans_reason_mean = vc
        2 trans_reason_code_set = i4
        2 dr_cr_flag = i2
        2 pft_trans_alias = vc
        2 edi_ind = i2
        2 pft_trans_alias_cd = f8
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF (size(prrevtransrequest->objarray,5) > 0)
     SET prrevtransrequest->batch_type_flag = reg_mod_reversal
     EXECUTE pft_reverse_transaction  WITH replace("REQUEST",prrevtransrequest), replace("REPLY",
      revtransreply)
     IF ((revtransreply->status_data.status != "S"))
      CALL logmessage("svcMoveAdjustmentsOnBalances",
       "Failed to reverse discount adjustment for charge.",log_debug)
      RETURN(false)
     ENDIF
     SET transtypecd = cs18649_adjust_cd
     SET transsubtypecd = cs20549_discount_adj_cd
     SET transreasoncd = cs18937_disc_adj_cd
     SET stat = alterlist(transaliasfindrequest->objarray,size(pradjtomove->adjs,5))
     FOR (activitycnt = 1 TO size(pradjtomove->adjs,5))
       IF ((pradjtomove->adjs[activitycnt].transaliasid > 0.0))
        SET transaliasfindrequest->objarray[1].trans_alias_id = pradjtomove->adjs[activitycnt].
        transaliasid
        SET objtransalias->ein_type = ein_trans_alias
       ELSE
        SET transaliasfindrequest->objarray[1].trans_type_cd = cs18649_adjust_cd
        SET transaliasfindrequest->objarray[1].trans_sub_type_cd = cs20549_discount_adj_cd
        SET transaliasfindrequest->objarray[1].trans_reason_cd = cs18937_disc_adj_cd
        SET objtransalias->ein_type = ein_trans_alias_elements
       ENDIF
       IF (size(transaliasfindrequest->objarray,5) > 0)
        EXECUTE pft_trans_alias_find  WITH replace("REPLY",transaliasfindreply), replace("OBJREPLY",
         objtransalias), replace("REQUEST",transaliasfindrequest)
        IF ((pradjtomove->adjs[activitycnt].transaliasid > 0.0))
         IF ((((transaliasfindreply->status_data.status != "S")) OR (size(objtransalias->objarray,5)=
         0)) )
          CALL logmessage("svcMoveAdjustmentsOnBalances","Did not find the transaction alias",
           log_debug)
          RETURN(false)
         ENDIF
         SET transtypecd = objtransalias->objarray[1].trans_type_cd
         SET transsubtypecd = objtransalias->objarray[1].trans_sub_type_cd
         SET transreasoncd = objtransalias->objarray[1].trans_reason_cd
         IF ((pradjtomove->adjs[activitycnt].chargewriteoffind=1))
          SET pradjtomove->adjs[activitycnt].amount = (round(abs(pradjtomove->adjs[activitycnt].
            amount),2) * evaluate(objtransalias->objarray[1].dr_cr_flag,1,1,2,- (1),
           0))
         ENDIF
        ELSE
         IF (size(objtransalias->objarray,5) > 0)
          SELECT INTO "nl:"
           FROM (dummyt d  WITH seq = value(size(objtransalias->objarray,5)))
           PLAN (d
            WHERE (objtransalias->objarray[d.seq].dr_cr_flag=2))
           DETAIL
            pradjtomove->adjs[activitycnt].transaliasid = objtransalias->objarray[d.seq].
            trans_alias_id, transtypecd = objtransalias->objarray[d.seq].trans_type_cd,
            transsubtypecd = objtransalias->objarray[d.seq].trans_sub_type_cd,
            transreasoncd = objtransalias->objarray[d.seq].trans_reason_cd
           WITH nocounter
          ;end select
         ENDIF
         IF ((pradjtomove->adjs[activitycnt].chargewriteoffind=1))
          SET pradjtomove->adjs[activitycnt].amount = (round(pradjtomove->adjs[activitycnt].amount,2)
           * - (1.0))
         ENDIF
        ENDIF
       ENDIF
       SET stat = alterlist(applydiscadjreq->objarray,activitycnt)
       SET applydiscadjreq->objarray[activitycnt].activity_id = pradjtomove->adjs[activitycnt].
       chargeactivityid
       SET applydiscadjreq->objarray[activitycnt].trans_type_cd = transtypecd
       SET applydiscadjreq->objarray[activitycnt].trans_sub_type_cd = transsubtypecd
       SET applydiscadjreq->objarray[activitycnt].trans_reason_cd = transreasoncd
       SET applydiscadjreq->objarray[activitycnt].trans_alias_id = pradjtomove->adjs[activitycnt].
       transaliasid
       SET applydiscadjreq->objarray[activitycnt].amount = pradjtomove->adjs[activitycnt].amount
       SET applydiscadjreq->objarray[activitycnt].bo_hp_reltn_id = pradjtomove->adjs[activitycnt].
       bohpreltnid
       SET applydiscadjreq->objarray[activitycnt].chrg_writeoff_ind = pradjtomove->adjs[activitycnt].
       chargewriteoffind
       SET applydiscadjreq->objarray[activitycnt].parent_activity_id = pradjtomove->adjs[activitycnt]
       .activityid
       SET applydiscadjreq->batch_type_flag = encounter_mod_type_flag
     ENDFOR
     IF (size(applydiscadjreq->objarray,5) > 0)
      EXECUTE pft_apply_doll_adj_for_charge  WITH replace("REQUEST",applydiscadjreq), replace("REPLY",
       applydiscadjrep)
      CALL adddiscretetimerevent(mods_disrete_timer,"svcMoveAdjustmentsOnBalances",
       eventsvctimerstartdttm,"","",
       "",pftrmtimerevents)
      IF ((applydiscadjrep->status_data.status != "S"))
       CALL logmessage("svcMoveAdjustmentsOnBalances",
        "Failed to apply write-off adjustment for charge.",log_debug)
       RETURN(false)
      ENDIF
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svctransferbalances,char(128))=char(128))
  SUBROUTINE (svctransferbalances(bohpstransbal=vc(ref)) =i2)
    SET eventsvctimerstartdttm = systimestamp
    CALL logmessage("svcTransferBalances","Entering",log_debug)
    DECLARE pos = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE idx1 = i4 WITH protect, noconstant(0)
    RECORD ptbrequest(
      1 objarray[*]
        2 from_bohp = f8
        2 to_bohp = f8
        2 from_balance = f8
        2 to_balance = f8
        2 pft_charge_id = f8
        2 corsp_activity_id = f8
        2 bill_vrsn_nbr = i4
        2 bill_activity_type_cd = f8
        2 amt_type_cd = f8
        2 amount = f8
        2 roll_reason_cd = f8
    ) WITH protect
    RECORD ptbreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET stat = alterlist(ptbrequest->objarray,size(bohpstransbal->bohps,5))
    FOR (i = 1 TO size(bohpstransbal->bohps,5))
      SET ptbrequest->objarray[i].from_bohp = bohpstransbal->bohps[i].frombohpid
      SET ptbrequest->objarray[i].to_bohp = bohpstransbal->bohps[i].tobohpid
      SET ptbrequest->objarray[i].amount = bohpstransbal->bohps[i].amount
      SET ptbrequest->objarray[i].bill_activity_type_cd = cs323570_eob_rem_amt_cd
    ENDFOR
    SET stat = initrec(applydailybalancebalreq)
    SELECT INTO "nl:"
     FROM (dummyt d  WITH seq = value(size(ptbrequest->objarray,5))),
      pft_encntr pe,
      benefit_order bo,
      bo_hp_reltn bhr
     PLAN (d
      WHERE (ptbrequest->objarray[d.seq].amount > 0.0))
      JOIN (bhr
      WHERE bhr.bo_hp_reltn_id IN (ptbrequest->objarray[d.seq].from_bohp, ptbrequest->objarray[d.seq]
      .to_bohp)
       AND bhr.active_ind=true)
      JOIN (bo
      WHERE bo.benefit_order_id=bhr.benefit_order_id
       AND bo.active_ind=true)
      JOIN (pe
      WHERE pe.pft_encntr_id=bo.pft_encntr_id
       AND pe.active_ind=true)
     DETAIL
      idx1 += 1, stat = alterlist(applydailybalancebalreq->objarray,idx1), applydailybalancebalreq->
      objarray[idx1].billing_entity_id = pe.billing_entity_id,
      applydailybalancebalreq->objarray[idx1].bo_hp_status_cd = bhr.bo_hp_status_cd,
      applydailybalancebalreq->objarray[idx1].beg_effective_dt_tm = cnvtdatetime(sysdate)
      IF ((ptbrequest->objarray[d.seq].from_bohp=bhr.bo_hp_reltn_id))
       applydailybalancebalreq->objarray[idx1].roll_out_amt = ptbrequest->objarray[d.seq].amount,
       applydailybalancebalreq->objarray[idx1].bo_hp_reltn_id = ptbrequest->objarray[d.seq].from_bohp
      ELSE
       applydailybalancebalreq->objarray[idx1].roll_in_amt = ptbrequest->objarray[d.seq].amount,
       applydailybalancebalreq->objarray[idx1].bo_hp_reltn_id = ptbrequest->objarray[d.seq].to_bohp
      ENDIF
     WITH nocounter
    ;end select
    IF ( NOT (applyrollamounttodailybalancebal(0)))
     CALL addtracemessage("applyRollAmountToDailyBalanceBal",
      "PFT_APPLY_TRANS_TO_BALANCE_BAL didn't return sucess")
    ENDIF
    EXECUTE pft_transfer_balance  WITH replace("REQUEST",ptbrequest), replace("REPLY",ptbreply)
    CALL adddiscretetimerevent(mods_disrete_timer,"svcTransferBalances",eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    IF ((ptbreply->status_data.status != "S"))
     CALL addtracemessage("svcTransferBalances","pft_transfer_balance did not return success")
     CALL echorecord(ptbrequest)
     CALL echorecord(ptbreply)
     RETURN(false)
    ENDIF
    CALL logmessage("svcTransferBalances","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcapplysptransfertoguaracct,char(128))=char(128))
  SUBROUTINE (svcapplysptransfertoguaracct(ppftencntrid=f8,prtransfers=vc(ref)) =i2)
    SET eventsvctimerstartdttm = systimestamp
    CALL logmessage("svcApplySPTransferToGuarAcct","Entering",log_debug)
    DECLARE idx = i4 WITH protect, noconstant(0)
    DECLARE gidx = i4 WITH protect, noconstant(0)
    DECLARE tidx = i4 WITH protect, noconstant(0)
    DECLARE bidx = i4 WITH protect, noconstant(0)
    DECLARE peid = f8 WITH protect, noconstant(0.0)
    DECLARE peamt = f8 WITH protect, noconstant(0.0)
    DECLARE rtn = i2 WITH protect, noconstant(true)
    DECLARE applytransfer = i2 WITH protect, noconstant(false)
    DECLARE truesp = i2 WITH protect, noconstant(false)
    RECORD guaracctrequest(
      1 guar_qual[*]
        2 pft_encntr_id = f8
        2 billing_entity_id = f8
        2 benefit_orders[*]
          3 benefit_order_id = f8
          3 pft_date = dq8
          3 pft_date_id = f8
          3 total_chrg_amt = f8
          3 total_resp_amt = f8
          3 transfer_bo_id = f8
        2 trans_mod = vc
        2 transactions[*]
          3 entity_id = f8
          3 entity_name = vc
          3 amount = f8
          3 service_date = dq8
          3 type = f8
          3 sub_type = f8
    ) WITH protect
    RECORD guaracctreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    FOR (tidx = 1 TO size(prtransfers->bo,5))
      IF ((peid != prtransfers->bo[tidx].peid))
       SET peid = prtransfers->bo[tidx].peid
       SET peamt = 0.0
       SET truesp = true
      ENDIF
      IF ((((transfers->bo[tidx].status IN (cs24451_cancelled_cd, cs24451_invalid_cd))) OR ( NOT (
      transfers->bo[tidx].active))) )
       IF (abs(prtransfers->bo[tidx].transamt) > 0.009)
        SET prtransfers->bo[tidx].ttlamt = (prtransfers->bo[tidx].transamt * - (1))
       ELSE
        SET prtransfers->bo[tidx].ttlamt = 0.000
       ENDIF
      ELSE
       IF ((transfers->bo[tidx].finclass != cs354_selfpay_cd))
        SET prtransfers->bo[tidx].ttlamt = ((prtransfers->bo[tidx].ttlamt - prtransfers->bo[tidx].
        chrgamt) - prtransfers->bo[tidx].transamt)
        SET peamt = ((peamt+ prtransfers->bo[tidx].chrgamt)+ prtransfers->bo[tidx].transamt)
        SET truesp = false
       ELSEIF ( NOT (truesp))
        SET prtransfers->bo[tidx].ttlamt = ((prtransfers->bo[tidx].ttlamt - peamt) - prtransfers->bo[
        tidx].transamt)
       ELSEIF (truesp
        AND isequal(prtransfers->bo[tidx].ttlamt,prtransfers->bo[tidx].transamt)
        AND getamountflag(prtransfers->bo[tidx].ttlamt)=getamountflag(prtransfers->bo[tidx].transamt)
       )
        SET prtransfers->bo[tidx].ttlamt = 0.0
       ENDIF
      ENDIF
      IF (((gidx=0) OR ((prtransfers->bo[tidx].peid != guaracctrequest->guar_qual[gidx].pft_encntr_id
      ))) )
       SET gidx = locateval(idx,1,size(guaracctrequest->guar_qual,5),prtransfers->bo[tidx].peid,
        guaracctrequest->guar_qual[idx].pft_encntr_id)
       IF (gidx=0)
        SET gidx = (size(guaracctrequest->guar_qual,5)+ 1)
        SET stat = alterlist(guaracctrequest->guar_qual,gidx)
        SET guaracctrequest->guar_qual[gidx].pft_encntr_id = prtransfers->bo[tidx].peid
        SET guaracctrequest->guar_qual[gidx].trans_mod = "SELF_PAY_TRANSFER"
       ENDIF
      ENDIF
      SET bidx = locateval(idx,1,size(guaracctrequest->guar_qual[gidx].benefit_orders,5),prtransfers
       ->bo[tidx].boid,guaracctrequest->guar_qual[gidx].benefit_orders[idx].benefit_order_id)
      IF (bidx=0)
       SET bidx = (size(guaracctrequest->guar_qual[gidx].benefit_orders,5)+ 1)
       SET stat = alterlist(guaracctrequest->guar_qual[gidx].benefit_orders,bidx)
       SET guaracctrequest->guar_qual[gidx].benefit_orders[bidx].benefit_order_id = prtransfers->bo[
       tidx].boid
       IF ((prtransfers->bo[tidx].finclass=cs354_selfpay_cd)
        AND prtransfers->bo[tidx].active)
        SET guaracctrequest->guar_qual[gidx].benefit_orders[bidx].transfer_bo_id = prtransfers->bo[
        tidx].boid
       ENDIF
       SET applytransfer = true
      ENDIF
      SET guaracctrequest->guar_qual[gidx].benefit_orders[bidx].total_resp_amt += prtransfers->bo[
      tidx].ttlamt
    ENDFOR
    IF (validate(debug,0)=1)
     CALL echorecord(prtransfers)
     CALL echorecord(guaracctrequest)
    ENDIF
    IF (applytransfer)
     IF (getdminfodetails(dm_info_domain_mods_async,dm_info_name_guar_bal) != 0.0)
      IF ( NOT (publishapplytranstoguaraccttask(ppftencntrid,true,replace(cnvtrectojson(
         guaracctrequest),"GUARACCTREQUEST","applyTransToGuarAcctReq"))))
       CALL addtracemessage("svcApplySPTransferToGuarAcct",
        "publishApplyTransToGuarAcctTask did not return success")
       SET rtn = false
      ENDIF
     ELSE
      EXECUTE pft_apply_trans_to_guar_acct  WITH replace("REQUEST",guaracctrequest), replace("REPLY",
       guaracctreply)
      CALL adddiscretetimerevent(mods_disrete_timer,"svcApplySPTransferToGuarAcct",
       eventsvctimerstartdttm,"","",
       "",pftrmtimerevents)
      IF ((guaracctreply->status_data.status != "S"))
       CALL addtracemessage("svcApplySPTransferToGuarAcct",
        "pft_apply_trans_to_guar_acct did not return success")
       IF (validate(debug,0)=1)
        CALL echorecord(guaracctrequest)
        CALL echorecord(guaracctreply)
       ENDIF
       SET rtn = false
      ENDIF
     ENDIF
    ENDIF
    CALL logmessage("svcApplySPTransferToGuarAcct","Exiting... ",log_debug)
    RETURN(rtn)
  END ;Subroutine
 ENDIF
 IF (validate(svcvoidinsurancechargegroups,char(128))=char(128))
  SUBROUTINE (svcvoidinsurancechargegroups(voidcg=vc(ref)) =i2)
    SET eventsvctimerstartdttm = systimestamp
    RECORD voidcgreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_detail
        2 details[*]
          3 entityid = f8
          3 detailflag = i4
          3 detailmessage = vc
          3 parameters[*]
            4 paramname = vc
            4 paramvalue = vc
    ) WITH protect
    EXECUTE pft_void_charge_group  WITH replace("REQUEST",voidcg), replace("REPLY",voidcgreply)
    CALL adddiscretetimerevent(mods_disrete_timer,"svcVoidInsuranceChargeGroups",
     eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    IF ((voidcgreply->status_data.status != "S"))
     CALL addtracemessage("svcVoidInsuranceChargeGroups",
      "pft_void_charge_group did not return success")
     CALL echorecord(voidcg)
     CALL echorecord(voidcgreply)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svccreatebalance,char(128))=char(128))
  SUBROUTINE (svccreatebalance(balancerequest=vc(ref)) =i2)
    CALL logmessage("svcCreateBalance","Entering",log_debug)
    RECORD balancereply(
      1 balances[*]
        2 benefitorderid = f8
        2 bohpreltnid = f8
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_detail
        2 details[*]
          3 entityid = f8
          3 detailflag = i4
          3 detailmessage = vc
          3 parameters[*]
            4 paramname = vc
            4 paramvalue = vc
    ) WITH protect
    EXECUTE pft_create_balance  WITH replace("REQUEST",balancerequest), replace("REPLY",balancereply)
    IF ((balancereply->status_data.status="F"))
     CALL addtracemessage("svcCreateBalance","pft_create_balance did not return success")
     CALL echorecord(balancerequest)
     CALL echorecord(balancereply)
     RETURN(false)
    ENDIF
    CALL logmessage("svcCreateBalance","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcassociateencountertoselfpaybillingschedule,char(128))=char(128))
  SUBROUTINE (svcassociateencountertoselfpaybillingschedule(bohpcborequest=vc(ref)) =i2)
    CALL logmessage("svcAssociateEncounterToSelfpayBillingSchedule","Entering",log_debug)
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE failrsn = vc WITH protect, noconstant("")
    RECORD bohpcboreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD uptbenefitorderreq(
      1 objarray[*]
        2 benefit_order_id = f8
        2 cons_bo_sched_id = f8
        2 updt_cnt = i4
    ) WITH protect
    EXECUTE pft_bo_hp_cbos  WITH replace("REQUEST",bohpcborequest), replace("REPLY",bohpcboreply)
    IF ((bohpcboreply->status_data.status="F"))
     CALL addtracemessage("svcAssociateEncounterToSelfpayBillingSchedule",
      "pft_bo_hp_cbos did not return success")
     CALL echorecord(bohpcborequest)
     CALL echorecord(bohpcboreply)
     RETURN(false)
    ENDIF
    IF ((bohpcborequest->cons_bo_sched_id=0.0)
     AND  NOT (ismultipleguarantorencounter(bohpcborequest->encntr_id)))
     CALL addtracemessage("svcAssociateEncounterToSelfpayBillingSchedule","cons_bo_sched_id is 0.0")
     IF ( NOT (publisheventoutofprocess(bohpcborequest->encntr_id,"ENCOUNTER",cs29322_guarnotfound_cd,
      failrsn)))
      CALL logmessage("publishEventOutOfProcess",failrsn,log_error)
     ENDIF
    ENDIF
    SELECT INTO "nl:"
     FROM benefit_order bo
     PLAN (bo
      WHERE (bo.pft_encntr_id=bohpcborequest->pft_encntr_id)
       AND bo.active_ind=true
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
     ORDER BY bo.benefit_order_id
     HEAD bo.benefit_order_id
      cnt += 1, stat = alterlist(uptbenefitorderreq->objarray,cnt), uptbenefitorderreq->objarray[cnt]
      .benefit_order_id = bo.benefit_order_id,
      uptbenefitorderreq->objarray[cnt].cons_bo_sched_id = bohpcborequest->cons_bo_sched_id,
      uptbenefitorderreq->objarray[cnt].updt_cnt = bo.updt_cnt
     WITH nocounter
    ;end select
    IF (size(uptbenefitorderreq->objarray,5) > 0)
     IF ( NOT (svcupdatechargegroup(uptbenefitorderreq)))
      CALL addtracemessage("svcAssociateEncounterToSelfpayBillingSchedule",
       "svcUpdateChargeGroup did not return success")
      RETURN(false)
     ENDIF
     IF (size(cbosmultiguarantors->cbos,5) > 0)
      IF ( NOT (removecbospereltn(bohpcborequest->pft_encntr_id)))
       CALL addtracemessage("svcAssociateEncounterToSelfpayBillingSchedule",
        "removeCbosPeReltn did not return success")
       RETURN(false)
      ENDIF
     ENDIF
    ELSE
     CALL addtracemessage("svcAssociateEncounterToSelfpayBillingSchedule","Benefit order not found.")
     RETURN(false)
    ENDIF
    CALL logmessage("svcAssociateEncounterToSelfpayBillingSchedule","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcvoidinsurancebalances,char(128))=char(128))
  SUBROUTINE (svcvoidinsurancebalances(voidbal=vc(ref)) =i2)
    SET eventsvctimerstartdttm = systimestamp
    RECORD voidbalancereply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_detail
        2 details[*]
          3 entityid = f8
          3 detailflag = i4
          3 detailmessage = vc
          3 parameters[*]
            4 paramname = vc
            4 paramvalue = vc
    ) WITH protect
    EXECUTE pft_void_balance  WITH replace("REQUEST",voidbal), replace("REPLY",voidbalancereply)
    CALL adddiscretetimerevent(mods_disrete_timer,"svcVoidInsuranceBalances",eventsvctimerstartdttm,
     "","",
     "",pftrmtimerevents)
    IF ((voidbalancereply->status_data.status != "S"))
     CALL addtracemessage("svcVoidInsuranceBalances","pft_void_balance did not return success")
     CALL echorecord(voidbal)
     CALL echorecord(voidbalancereply)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcupdatebalance,char(128))=char(128))
  SUBROUTINE (svcupdatebalance(uptbohpreq=vc(ref)) =i2)
    RECORD uptspbohpreltnrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    EXECUTE pft_da_upt_bo_hp_reltn  WITH replace("REQUEST",uptbohpreq), replace("REPLY",
     uptspbohpreltnrep)
    IF ((uptspbohpreltnrep->status_data.status != "S"))
     CALL addtracemessage("svcUpdateBalance","pft_da_upt_bo_hp_reltn did not return success")
     CALL echorecord(uptbohpreq)
     CALL echorecord(uptspbohpreltnrep)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcupdatechargegroup,char(128))=char(128))
  SUBROUTINE (svcupdatechargegroup(uptbenefitorderreq=vc(ref)) =i2)
    RECORD uptbenefitorderrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    EXECUTE pft_da_upt_benefit_order  WITH replace("REQUEST",uptbenefitorderreq), replace("REPLY",
     uptbenefitorderrep)
    IF ((uptbenefitorderrep->status_data.status != "S"))
     CALL addtracemessage("svcUpdateChargeGroup","pft_da_upt_benefit_order did not return success")
     CALL echorecord(uptbenefitorderreq)
     CALL echorecord(uptbenefitorderrep)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcuptconsbosched,char(128))=char(128))
  SUBROUTINE (svcuptconsbosched(uptconsboschedreq=vc(ref)) =i2)
    RECORD uptconsboschedrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    EXECUTE pft_da_upt_cons_bo_sched  WITH replace("REQUEST",uptconsboschedreq), replace("REPLY",
     uptconsboschedrep)
    IF ((uptconsboschedrep->status_data.status != "S"))
     CALL addtracemessage("svcUptConsBoSched","pft_da_upt_cons_bo_sched did not return success")
     CALL echorecord(uptconsboschedreq)
     CALL echorecord(uptconsboschedrep)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcdequeueitemfromworkflow,char(128))=char(128))
  SUBROUTINE (svcdequeueitemfromworkflow(dequeuerequest=vc(ref)) =i2)
    CALL logmessage("svcDequeueItemFromWorkflow","Entering",log_debug)
    DECLARE pftencntrcnt = i4 WITH protect, noconstant(0)
    DECLARE idx = i4 WITH protect, noconstant(0)
    SET eventsvctimerstartdttm = systimestamp
    RECORD widequeuerequest(
      1 objarray[*]
        2 pftencntrid = f8
    ) WITH protect
    IF (size(dequeuerequest->pft_queue_item,5) > 0)
     SELECT INTO "nl:"
      FROM (dummyt d1  WITH seq = size(dequeuerequest->pft_queue_item,5)),
       pft_queue_item pqi
      PLAN (d1)
       JOIN (pqi
       WHERE (pqi.pft_queue_item_id=dequeuerequest->pft_queue_item[d1.seq].pft_queue_item_id)
        AND pqi.pft_queue_item_id != 0.0
        AND pqi.active_ind=true)
      ORDER BY pqi.pft_encntr_id
      HEAD pqi.pft_encntr_id
       pftencntrcnt += 1, stat = alterlist(widequeuerequest->objarray,pftencntrcnt), widequeuerequest
       ->objarray[pftencntrcnt].pftencntrid = pqi.pft_encntr_id
      WITH nocounter
     ;end select
    ENDIF
    FOR (idx = 1 TO pftencntrcnt)
      IF ( NOT (dequeueworkflowitems(widequeuerequest->objarray[idx].pftencntrid,"PFTENCNTR")))
       CALL addtracemessage("dequeueWorkflowItems",build(
         "dequeueWorkflowItems did not return success for financial encounter:",widequeuerequest->
         objarray[idx].pftencntrid))
       RETURN(false)
      ENDIF
    ENDFOR
    CALL adddiscretetimerevent(mods_disrete_timer,"svcDequeueItemFromWorkflow",eventsvctimerstartdttm,
     "","",
     "",pftrmtimerevents)
    CALL logmessage("svcDequeueItemFromWorkflow","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(isholdreleaseallowed,char(128))=char(128))
  SUBROUTINE (isholdreleaseallowed(pworkflowitemid=f8) =i2)
    CALL logmessage("isHoldReleaseAllowed","Entering",log_debug)
    DECLARE isreleaseallowed = i2 WITH protect, noconstant(false)
    DECLARE doesholdexist = i2 WITH protect, noconstant(false)
    DECLARE wicount = i4 WITH protect, noconstant(0)
    DECLARE pestatusreasonid = f8 WITH protect, noconstant(0.0)
    SELECT INTO "nl:"
     FROM pft_queue_item_wf_hist pqiwh,
      pft_queue_item_wf_reltn pqiwr,
      pe_status_reason psr
     PLAN (pqiwh
      WHERE pqiwh.pft_queue_item_id=pworkflowitemid
       AND pqiwh.active_ind=true)
      JOIN (pqiwr
      WHERE pqiwr.pft_queue_item_wf_hist_id=pqiwh.pft_queue_item_wf_hist_id
       AND pqiwr.parent_entity_name="PE_STATUS_REASON")
      JOIN (psr
      WHERE psr.pe_status_reason_id=pqiwr.parent_entity_id
       AND psr.active_ind=true)
     DETAIL
      pestatusreasonid = pqiwr.parent_entity_id, doesholdexist = true
     WITH nocounter
    ;end select
    IF (doesholdexist)
     SELECT INTO "nl:"
      FROM pft_queue_item_wf_reltn pqiwr,
       pft_queue_item_wf_hist pqiwh,
       pft_queue_item pqi
      PLAN (pqiwr
       WHERE pqiwr.parent_entity_id=pestatusreasonid
        AND pqiwr.parent_entity_name="PE_STATUS_REASON")
       JOIN (pqiwh
       WHERE pqiwh.pft_queue_item_wf_hist_id=pqiwr.pft_queue_item_wf_hist_id
        AND pqiwh.active_ind=true)
       JOIN (pqi
       WHERE pqi.pft_queue_item_id=pqiwh.pft_queue_item_id)
      DETAIL
       wicount += 1
      WITH nocounter
     ;end select
     IF (wicount=1)
      SET isreleaseallowed = true
     ENDIF
    ENDIF
    CALL logmessage("isHoldReleaseAllowed",build("Exiting:: isReleaseAllowed:",isreleaseallowed),
     log_debug)
    IF (isreleaseallowed)
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(svcuptbillrec,char(128))=char(128))
  SUBROUTINE (svcuptbillrec(uptbillrecrequest=vc(ref)) =i2)
    RECORD uptbillrecreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    EXECUTE pft_da_upt_bill_rec  WITH replace("REQUEST",uptbillrecrequest), replace("REPLY",
     uptbillrecreply)
    IF ((uptbillrecreply->status_data.status != "S"))
     CALL addtracemessage("svcUptBillRec","pft_da_upt_bill_rec did not return success")
     CALL echorecord(uptbillrecrequest)
     CALL echorecord(uptbillrecreply)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svccreatefinancialencounter,char(128))=char(128))
  SUBROUTINE (svccreatefinancialencounter(createfinencntrrequest=vc(ref),newpftencntrid=f8(ref)) =i2)
    CALL logmessage("svcCreateFinancialEncounter","Entering",log_debug)
    SET newpftencntrid = 0.0
    RECORD createfinencntrreply(
      1 pftencntrid = f8
      1 error_prog = vc
      1 error_sub = vc
      1 error_msg = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    EXECUTE pft_create_pft_encntr  WITH replace("REQUEST",createfinencntrrequest), replace("REPLY",
     createfinencntrreply)
    IF ((createfinencntrreply->status_data.status != "S"))
     CALL addtracemessage("svcCreateFinancialEncounter",
      "pft_create_pft_encntr did not return success")
     CALL echorecord(createfinencntrrequest)
     CALL echorecord(createfinencntrreply)
     RETURN(false)
    ENDIF
    SET newpftencntrid = createfinencntrreply->pftencntrid
    CALL logmessage("svcCreateFinancialEncounter","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcinactivatefinancialencounter,char(128))=char(128))
  SUBROUTINE (svcinactivatefinancialencounter(pftencntrid=f8) =i2)
    CALL logmessage("svcInactivateFinancialEncounter","Entering",log_debug)
    DECLARE paymentadjtotal = f8 WITH protect, noconstant(0.0)
    RECORD inactivatefinencntrrequest(
      1 objarray[*]
        2 pft_encntr_id = f8
        2 updt_cnt = i4
        2 active_ind = i2
        2 active_status_cd = f8
    ) WITH protect
    RECORD inactivatefinencntrreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid
       AND pe.active_ind=true)
     DETAIL
      paymentadjtotal = (pe.applied_payment_balance+ evaluate(pe.adj_bal_dr_cr_flag,2,- ((1.0 * pe
       .adjustment_balance)),pe.adjustment_balance))
      IF (isequal(paymentadjtotal,0.0)
       AND isequal(pe.charge_balance,0.0)
       AND pe.statement_cycle_id=0.0)
       stat = alterlist(inactivatefinencntrrequest->objarray,1), inactivatefinencntrrequest->
       objarray[1].pft_encntr_id = pftencntrid, inactivatefinencntrrequest->objarray[1].updt_cnt = pe
       .updt_cnt,
       inactivatefinencntrrequest->objarray[1].active_ind = false, inactivatefinencntrrequest->
       objarray[1].active_status_cd = reqdata->inactive_status_cd
      ENDIF
     WITH nocounter
    ;end select
    IF (size(inactivatefinencntrrequest->objarray,5) <= 0)
     CALL addtracemessage("svcInactivateFinancialEncounter",
      "Encounter balance is not zero or encounter is still associated with statement cycle.")
     RETURN(false)
    ENDIF
    EXECUTE pft_da_upt_pft_encntr  WITH replace("REQUEST",inactivatefinencntrrequest), replace(
     "REPLY",inactivatefinencntrreply)
    IF ((inactivatefinencntrreply->status_data.status != "S"))
     CALL addtracemessage("svcInactivateFinancialEncounter",
      "pft_da_upt_pft_encntr did not return success")
     CALL echorecord(inactivatefinencntrrequest)
     CALL echorecord(inactivatefinencntrreply)
     RETURN(false)
    ENDIF
    IF ( NOT (removecbospereltn(pftencntrid)))
     CALL addtracemessage("svcInactivateFinancialEncounter",
      "removeCbosPeReltn did not return success")
     RETURN(false)
    ENDIF
    CALL logmessage("svcInactivateFinancialEncounter","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcmovechargegroups,char(128))=char(128))
  SUBROUTINE (svcmovechargegroups(fromandtoencounteridsrec=vc(ref)) =i2)
    CALL logmessage("svcMoveChargeGroups","Entering",log_debug)
    SET eventsvctimerstartdttm = systimestamp
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE ppcnt = i4 WITH protect, noconstant(0)
    DECLARE chrgbal = f8 WITH protect, noconstant(0.0)
    RECORD uptperequest(
      1 objarray[1]
        2 charge_balance = f8
        2 updt_cnt = i4
        2 pft_encntr_id = f8
    ) WITH protect
    RECORD uptpereply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD uptcgrequest(
      1 objarray[*]
        2 benefit_order_id = f8
        2 updt_cnt = i4
        2 pft_encntr_id = f8
        2 active_ind = i2
    ) WITH protect
    RECORD pprequest(
      1 objarray[*]
        2 pft_proration_id = f8
        2 pft_encntr_id = f8
        2 updt_cnt = i4
    ) WITH protect
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bhr,
      pft_proration pp,
      pft_charge_bo_reltn pcbr,
      pft_charge pc
     PLAN (bo
      WHERE (bo.pft_encntr_id=fromandtoencounteridsrec->frompftencntrid)
       AND bo.fin_class_cd != cs354_selfpay_cd
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true)
      JOIN (pp
      WHERE pp.bo_hp_reltn_id=bhr.bo_hp_reltn_id
       AND pp.active_ind=true)
      JOIN (pcbr
      WHERE (pcbr.benefit_order_id= Outerjoin(bo.benefit_order_id))
       AND (pcbr.active_ind= Outerjoin(true)) )
      JOIN (pc
      WHERE (pc.pft_charge_id= Outerjoin(pcbr.pft_charge_id))
       AND (pc.active_ind= Outerjoin(true)) )
     ORDER BY bo.benefit_order_id
     HEAD bo.benefit_order_id
      cnt += 1, stat = alterlist(uptcgrequest->objarray,cnt), uptcgrequest->objarray[cnt].
      benefit_order_id = bo.benefit_order_id,
      uptcgrequest->objarray[cnt].updt_cnt = bo.updt_cnt, uptcgrequest->objarray[cnt].pft_encntr_id
       = fromandtoencounteridsrec->topftencntrid
      IF (pc.ext_billed_ind)
       uptcgrequest->objarray[cnt].active_ind = false, chrgbal += evaluate(bo
        .total_charge_amt_dr_cr_flag,2,(bo.total_charge_amt * - (1)),bo.total_charge_amt)
      ELSE
       uptcgrequest->objarray[cnt].active_ind = bo.active_ind
      ENDIF
     DETAIL
      ppcnt += 1, stat = alterlist(pprequest->objarray,ppcnt), pprequest->objarray[ppcnt].
      pft_proration_id = pp.pft_proration_id,
      pprequest->objarray[ppcnt].pft_encntr_id = fromandtoencounteridsrec->topftencntrid, pprequest->
      objarray[ppcnt].updt_cnt = pp.updt_cnt
     WITH nocounter
    ;end select
    IF (size(uptcgrequest->objarray,5) > 0)
     IF ( NOT (svcupdatechargegroup(uptcgrequest)))
      CALL addtracemessage("svcMoveChargeGroups","svcUpdateChargeGroup did not return success")
      RETURN(false)
     ENDIF
    ENDIF
    IF (size(pprequest->objarray,5) > 0)
     RECORD ppreply(
       1 pft_status_data
         2 status = c1
         2 subeventstatus[*]
           3 status = c1
           3 table_name = vc
           3 pk_values = vc
       1 mod_objs[*]
         2 entity_type = vc
         2 mod_recs[*]
           3 table_name = vc
           3 pk_values = vc
           3 mod_flds[*]
             4 field_name = vc
             4 field_type = vc
             4 field_value_obj = vc
             4 field_value_db = vc
       1 failure_stack
         2 failures[*]
           3 programname = vc
           3 routinename = vc
           3 message = vc
       1 status_data
         2 status = c1
         2 subeventstatus[1]
           3 operationname = c25
           3 operationstatus = c1
           3 targetobjectname = c25
           3 targetobjectvalue = vc
     ) WITH protect
     EXECUTE pft_da_upt_pft_proration  WITH replace("REQUEST",pprequest), replace("REPLY",ppreply)
     IF ((ppreply->status_data.status != "S"))
      CALL addtracemessage("svcMoveChargeGroups","pft_da_upt_pft_proration did not return success")
      CALL echorecord(pprequest)
      CALL echorecord(ppreply)
      RETURN(false)
     ENDIF
    ENDIF
    IF ( NOT (isequal(chrgbal,0.0)))
     SELECT INTO "nl:"
      FROM pft_encntr pe
      WHERE (pe.pft_encntr_id=fromandtoencounteridsrec->frompftencntrid)
       AND pe.active_ind=true
      DETAIL
       uptperequest->objarray[1].pft_encntr_id = pe.pft_encntr_id, uptperequest->objarray[1].updt_cnt
        = - (99999), uptperequest->objarray[1].charge_balance = (pe.charge_balance - chrgbal)
      WITH nocounter
     ;end select
     IF ((uptperequest->objarray[1].pft_encntr_id > 0.0))
      EXECUTE pft_da_upt_pft_encntr  WITH replace("REQUEST",uptperequest), replace("REPLY",uptpereply
       )
      IF ((uptpereply->status_data.status != "S"))
       CALL addtracemessage("svcMoveChargeGroups","PFT_DA_UPT_PFT_ENCNTR failed")
       CALL echorecord(uptperequest)
       CALL echorecord(uptpereply)
       RETURN(false)
      ENDIF
     ENDIF
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"svcMoveChargeGroups",eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    CALL logmessage("svcMoveChargeGroups","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcupdateaprefundencounterrelations,char(128))=char(128))
  SUBROUTINE (svcupdateaprefundencounterrelations(fromandtoencounteridsrec=vc(ref)) =i2)
    CALL logmessage("svcUpdateAPRefundEncounterRelations","Entering",log_debug)
    DECLARE cnt = i4 WITH protect, noconstant(0)
    RECORD aprefundrec(
      1 objarray[*]
        2 pft_ap_refund_id = f8
    ) WITH protect
    SELECT INTO "nl:"
     FROM pft_ap_refund_reltn parr
     PLAN (parr
      WHERE (parr.parent_entity_id=fromandtoencounteridsrec->frompftencntrid)
       AND parr.parent_entity_name="PFT_ENCNTR"
       AND parr.active_ind=true)
     DETAIL
      cnt += 1, stat = alterlist(aprefundrec->objarray,cnt), aprefundrec->objarray[cnt].
      pft_ap_refund_id = parr.pft_ap_refund_id
     WITH nocounter
    ;end select
    IF (cnt > 0)
     IF ( NOT (updateaprefundencounterrelations(aprefundrec,fromandtoencounteridsrec->topftencntrid))
     )
      CALL addtracemessage("svcUpdateAPRefundEncounterRelations",
       "Failed to update PFT_AP_REFUND_RELTN with new entity ids")
      RETURN(false)
     ENDIF
    ENDIF
    CALL logmessage("svcUpdateAPRefundEncounterRelations","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcmovestatementsandselfpayclaims,char(128))=char(128))
  SUBROUTINE (svcmovestatementsandselfpayclaims(fromandtoencounteridsrec=vc(ref)) =i2)
    CALL logmessage("svcMoveStatementsAndSelfPayClaims","Entering",log_debug)
    SET eventsvctimerstartdttm = systimestamp
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE tobohpreltnid = f8 WITH protect, noconstant(0)
    DECLARE tobenefitorderid = f8 WITH protect, noconstant(0)
    RECORD addbillreltnrequest(
      1 objarray[*]
        2 parent_entity_name = vc
        2 parent_entity_id = f8
        2 corsp_activity_id = f8
        2 bill_vrsn_nbr = i4
    ) WITH protect
    RECORD addbillreltnreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD uptbillreltnrequest(
      1 objarray[*]
        2 bill_reltn_id = f8
        2 updt_cnt = i4
        2 active_ind = i2
    ) WITH protect
    RECORD uptbillreltnreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bhr
     PLAN (bo
      WHERE (bo.pft_encntr_id=fromandtoencounteridsrec->topftencntrid)
       AND bo.fin_class_cd=cs354_selfpay_cd
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true)
     DETAIL
      tobohpreltnid = bhr.bo_hp_reltn_id, tobenefitorderid = bo.benefit_order_id
     WITH nocounter
    ;end select
    IF (((tobohpreltnid <= 0) OR (tobenefitorderid <= 0)) )
     CALL addtracemessage("svcMoveStatementsAndSelfPayClaims",
      "The TO financial encounter's SP balance and charge group don't exist.")
     RETURN(false)
    ENDIF
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bhr,
      bill_reltn brl,
      bill_rec br
     PLAN (bo
      WHERE (bo.pft_encntr_id=fromandtoencounteridsrec->frompftencntrid)
       AND bo.fin_class_cd=cs354_selfpay_cd
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true
       AND bhr.bo_hp_status_cd != cs24451_invalid_cd)
      JOIN (brl
      WHERE brl.parent_entity_id=bhr.bo_hp_reltn_id
       AND brl.parent_entity_name="BO_HP_RELTN"
       AND brl.active_ind=true)
      JOIN (br
      WHERE br.corsp_activity_id=brl.corsp_activity_id
       AND br.bill_class_cd IN (cs21849_statement_cd, cs21849_claim_cd)
       AND br.active_ind=true)
     DETAIL
      IF ( NOT (br.submit_dt_tm IN (0, null)))
       cnt += 1, stat = alterlist(addbillreltnrequest->objarray,cnt), stat = alterlist(
        uptbillreltnrequest->objarray,cnt),
       uptbillreltnrequest->objarray[cnt].bill_reltn_id = brl.bill_reltn_id, uptbillreltnrequest->
       objarray[cnt].updt_cnt = brl.updt_cnt, uptbillreltnrequest->objarray[cnt].active_ind = false,
       addbillreltnrequest->objarray[cnt].corsp_activity_id = br.corsp_activity_id,
       addbillreltnrequest->objarray[cnt].bill_vrsn_nbr = br.bill_vrsn_nbr, addbillreltnrequest->
       objarray[cnt].parent_entity_name = "BO_HP_RELTN",
       addbillreltnrequest->objarray[cnt].parent_entity_id = tobohpreltnid
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bo_hp_reltn bhr,
      bill_reltn brl,
      bill_rec br,
      pft_trans_reltn ptr,
      trans_log tl
     PLAN (bo
      WHERE (bo.pft_encntr_id=fromandtoencounteridsrec->frompftencntrid)
       AND bo.fin_class_cd=cs354_selfpay_cd
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true
       AND bhr.bo_hp_status_cd != cs24451_invalid_cd)
      JOIN (brl
      WHERE brl.parent_entity_id=bhr.bo_hp_reltn_id
       AND brl.parent_entity_name="BO_HP_RELTN"
       AND brl.active_ind=true)
      JOIN (br
      WHERE br.corsp_activity_id=brl.corsp_activity_id
       AND br.bill_class_cd IN (cs21849_statement_cd, cs21849_claim_cd)
       AND br.active_ind=true)
      JOIN (ptr
      WHERE ptr.parent_entity_id=br.corsp_activity_id
       AND ptr.parent_entity_name="BILL"
       AND ptr.active_ind=true)
      JOIN (tl
      WHERE tl.activity_id=ptr.activity_id
       AND tl.active_ind=true
       AND tl.trans_type_cd IN (cs18649_adjustment_cd, cs18649_payment_cd))
     ORDER BY br.corsp_activity_id
     HEAD br.corsp_activity_id
      IF (br.submit_dt_tm IN (0, null))
       cnt += 1, stat = alterlist(addbillreltnrequest->objarray,cnt), stat = alterlist(
        uptbillreltnrequest->objarray,cnt),
       uptbillreltnrequest->objarray[cnt].bill_reltn_id = brl.bill_reltn_id, uptbillreltnrequest->
       objarray[cnt].updt_cnt = brl.updt_cnt, uptbillreltnrequest->objarray[cnt].active_ind = false,
       addbillreltnrequest->objarray[cnt].corsp_activity_id = br.corsp_activity_id,
       addbillreltnrequest->objarray[cnt].bill_vrsn_nbr = br.bill_vrsn_nbr, addbillreltnrequest->
       objarray[cnt].parent_entity_name = "BO_HP_RELTN",
       addbillreltnrequest->objarray[cnt].parent_entity_id = tobohpreltnid
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM bill_reltn brl,
      bill_rec br
     PLAN (brl
      WHERE (brl.parent_entity_id=fromandtoencounteridsrec->frompftencntrid)
       AND brl.parent_entity_name="PFTENCNTR"
       AND brl.active_ind=true)
      JOIN (br
      WHERE br.corsp_activity_id=brl.corsp_activity_id
       AND br.bill_class_cd IN (cs21849_statement_cd, cs21849_claim_cd)
       AND br.active_ind=true)
     DETAIL
      IF ( NOT (br.submit_dt_tm IN (0, null)))
       cnt += 1, stat = alterlist(addbillreltnrequest->objarray,cnt), stat = alterlist(
        uptbillreltnrequest->objarray,cnt),
       uptbillreltnrequest->objarray[cnt].bill_reltn_id = brl.bill_reltn_id, uptbillreltnrequest->
       objarray[cnt].updt_cnt = brl.updt_cnt, uptbillreltnrequest->objarray[cnt].active_ind = false,
       addbillreltnrequest->objarray[cnt].corsp_activity_id = br.corsp_activity_id,
       addbillreltnrequest->objarray[cnt].bill_vrsn_nbr = br.bill_vrsn_nbr, addbillreltnrequest->
       objarray[cnt].parent_entity_name = "PFTENCNTR",
       addbillreltnrequest->objarray[cnt].parent_entity_id = fromandtoencounteridsrec->topftencntrid
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM bill_reltn brl,
      bill_rec br,
      pft_trans_reltn ptr,
      trans_log tl
     PLAN (brl
      WHERE (brl.parent_entity_id=fromandtoencounteridsrec->frompftencntrid)
       AND brl.parent_entity_name="PFTENCNTR"
       AND brl.active_ind=true)
      JOIN (br
      WHERE br.corsp_activity_id=brl.corsp_activity_id
       AND br.bill_class_cd IN (cs21849_statement_cd, cs21849_claim_cd)
       AND br.active_ind=true)
      JOIN (ptr
      WHERE ptr.parent_entity_id=br.corsp_activity_id
       AND ptr.parent_entity_name="BILL"
       AND ptr.active_ind=true)
      JOIN (tl
      WHERE tl.activity_id=ptr.activity_id
       AND tl.active_ind=true
       AND tl.trans_type_cd IN (cs18649_adjustment_cd, cs18649_payment_cd))
     ORDER BY br.corsp_activity_id
     HEAD br.corsp_activity_id
      IF (br.submit_dt_tm IN (0, null))
       cnt += 1, stat = alterlist(addbillreltnrequest->objarray,cnt), stat = alterlist(
        uptbillreltnrequest->objarray,cnt),
       uptbillreltnrequest->objarray[cnt].bill_reltn_id = brl.bill_reltn_id, uptbillreltnrequest->
       objarray[cnt].updt_cnt = brl.updt_cnt, uptbillreltnrequest->objarray[cnt].active_ind = false,
       addbillreltnrequest->objarray[cnt].corsp_activity_id = br.corsp_activity_id,
       addbillreltnrequest->objarray[cnt].bill_vrsn_nbr = br.bill_vrsn_nbr, addbillreltnrequest->
       objarray[cnt].parent_entity_name = "PFTENCNTR",
       addbillreltnrequest->objarray[cnt].parent_entity_id = fromandtoencounteridsrec->topftencntrid
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bill_reltn brl,
      bill_rec br
     PLAN (bo
      WHERE (bo.pft_encntr_id=fromandtoencounteridsrec->frompftencntrid)
       AND bo.fin_class_cd=cs354_selfpay_cd
       AND bo.active_ind=true)
      JOIN (brl
      WHERE brl.parent_entity_id=bo.benefit_order_id
       AND brl.parent_entity_name="BENEFIT ORDER"
       AND brl.active_ind=true)
      JOIN (br
      WHERE br.corsp_activity_id=brl.corsp_activity_id
       AND br.bill_class_cd=cs21849_claim_cd
       AND br.active_ind=true)
     DETAIL
      IF ( NOT (br.submit_dt_tm IN (0, null)))
       cnt += 1, stat = alterlist(addbillreltnrequest->objarray,cnt), stat = alterlist(
        uptbillreltnrequest->objarray,cnt),
       uptbillreltnrequest->objarray[cnt].bill_reltn_id = brl.bill_reltn_id, uptbillreltnrequest->
       objarray[cnt].updt_cnt = brl.updt_cnt, uptbillreltnrequest->objarray[cnt].active_ind = false,
       addbillreltnrequest->objarray[cnt].corsp_activity_id = br.corsp_activity_id,
       addbillreltnrequest->objarray[cnt].bill_vrsn_nbr = br.bill_vrsn_nbr, addbillreltnrequest->
       objarray[cnt].parent_entity_name = "BENEFIT ORDER",
       addbillreltnrequest->objarray[cnt].parent_entity_id = tobenefitorderid
      ENDIF
     WITH nocounter
    ;end select
    SELECT INTO "nl:"
     FROM benefit_order bo,
      bill_reltn brl,
      bill_rec br,
      pft_trans_reltn ptr,
      trans_log tl
     PLAN (bo
      WHERE (bo.pft_encntr_id=fromandtoencounteridsrec->frompftencntrid)
       AND bo.fin_class_cd=cs354_selfpay_cd
       AND bo.active_ind=true)
      JOIN (brl
      WHERE brl.parent_entity_id=bo.benefit_order_id
       AND brl.parent_entity_name="BENEFIT ORDER"
       AND brl.active_ind=true)
      JOIN (br
      WHERE br.corsp_activity_id=brl.corsp_activity_id
       AND br.bill_class_cd=cs21849_claim_cd
       AND br.active_ind=true)
      JOIN (ptr
      WHERE ptr.parent_entity_id=br.corsp_activity_id
       AND ptr.parent_entity_name="BILL"
       AND ptr.active_ind=true)
      JOIN (tl
      WHERE tl.activity_id=ptr.activity_id
       AND tl.active_ind=true
       AND tl.trans_type_cd IN (cs18649_adjustment_cd, cs18649_payment_cd))
     ORDER BY br.corsp_activity_id
     HEAD br.corsp_activity_id
      IF (br.submit_dt_tm IN (0, null))
       cnt += 1, stat = alterlist(addbillreltnrequest->objarray,cnt), stat = alterlist(
        uptbillreltnrequest->objarray,cnt),
       uptbillreltnrequest->objarray[cnt].bill_reltn_id = brl.bill_reltn_id, uptbillreltnrequest->
       objarray[cnt].updt_cnt = brl.updt_cnt, uptbillreltnrequest->objarray[cnt].active_ind = false,
       addbillreltnrequest->objarray[cnt].corsp_activity_id = br.corsp_activity_id,
       addbillreltnrequest->objarray[cnt].bill_vrsn_nbr = br.bill_vrsn_nbr, addbillreltnrequest->
       objarray[cnt].parent_entity_name = "BENEFIT ORDER",
       addbillreltnrequest->objarray[cnt].parent_entity_id = tobenefitorderid
      ENDIF
     WITH nocounter
    ;end select
    IF (size(addbillreltnrequest->objarray,5) > 0)
     EXECUTE pft_da_add_bill_reltn  WITH replace("REQUEST",addbillreltnrequest), replace("REPLY",
      addbillreltnreply)
     IF ((addbillreltnreply->status_data.status != "S"))
      CALL addtracemessage("svcMoveStatements","pft_da_add_bill_reltn did not return success")
      CALL echorecord(addbillreltnrequest)
      CALL echorecord(addbillreltnreply)
      RETURN(false)
     ENDIF
    ENDIF
    IF (size(uptbillreltnrequest->objarray,5) > 0)
     EXECUTE pft_da_upt_bill_reltn  WITH replace("REQUEST",uptbillreltnrequest), replace("REPLY",
      uptbillreltnreply)
     IF ((uptbillreltnreply->status_data.status != "S"))
      CALL addtracemessage("svcMoveStatementsAndSelfPayClaims",
       "pft_da_upt_bill_reltn did not return success")
      CALL echorecord(uptbillreltnrequest)
      CALL echorecord(uptbillreltnreply)
      RETURN(false)
     ENDIF
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"svcMoveStatementsAndSelfPayClaims",
     eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    CALL logmessage("svcMoveStatementsAndSelfPayClaims","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcmovecomments,char(128))=char(128))
  SUBROUTINE (svcmovecomments(fromandtoencounteridsrec=vc(ref)) =i2)
    CALL logmessage("svcMoveComments","Entering",log_debug)
    SET eventsvctimerstartdttm = systimestamp
    DECLARE cnt = i4 WITH protect, noconstant(0)
    DECLARE addtimelinecnt = i4 WITH protect, noconstant(0)
    DECLARE updatetimelinecnt = i4 WITH protect, noconstant(0)
    DECLARE entityidx = i4 WITH protect, noconstant(0)
    DECLARE encntralias = vc WITH protect, noconstant("")
    DECLARE acctnumber = vc WITH protect, noconstant("")
    DECLARE fromacctid = f8 WITH protect, noconstant(0.00)
    DECLARE timelineassociatedentitycnt = i4 WITH protect, noconstant(0)
    RECORD timelineassociatedentities(
      1 entitylist[*]
        2 parententityid = f8
        2 parententityname = vc
    ) WITH protect
    RECORD addcommentrequest(
      1 objarray[*]
        2 acct_id = f8
        2 pft_encntr_id = f8
        2 activity_id = f8
        2 parent_entity_name = vc
        2 parent_entity_id = f8
        2 active_status_prsnl_id = f8
        2 bill_vrsn_nbr = i4
        2 active_ind = i2
    ) WITH protect
    RECORD addcommentreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    RECORD rctimelineaddrequest(
      1 objarray[*]
        2 active_ind = i2
        2 active_status_cd = f8
        2 active_status_dt_tm = dq8
        2 active_status_prsnl_id = f8
        2 activity_created_dt_tm = dq8
        2 activity_created_prsnl_id = f8
        2 activity_type_cd = f8
        2 applied_to_cd = f8
        2 applied_to_txt = vc
        2 child_parent_entity_id = f8
        2 child_parent_entity_name = vc
        2 comment_clob = vc
        2 description_txt = vc
        2 parent_entity_id = f8
        2 parent_entity_name = vc
        2 priority_nbr = i4
        2 solution_cd = f8
        2 source_reference_ident = vc
    ) WITH protect
    RECORD rctimelineupdaterequest(
      1 objarray[*]
        2 rc_timeline_id = f8
        2 active_ind = i2
        2 active_status_cd = f8
        2 updt_cnt = i4
        2 comment_clob = vc
    ) WITH protect
    RECORD rctimelinereply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM corsp_log_reltn clr
     PLAN (clr
      WHERE (clr.pft_encntr_id=fromandtoencounteridsrec->frompftencntrid)
       AND clr.active_ind=true)
     DETAIL
      cnt += 1, stat = alterlist(addcommentrequest->objarray,cnt), addcommentrequest->objarray[cnt].
      acct_id = svcassigntargetacctid(clr.acct_id,fromandtoencounteridsrec),
      addcommentrequest->objarray[cnt].pft_encntr_id = fromandtoencounteridsrec->topftencntrid,
      addcommentrequest->objarray[cnt].activity_id = clr.activity_id, addcommentrequest->objarray[cnt
      ].parent_entity_name = clr.parent_entity_name
      IF (clr.parent_entity_name="ENCOUNTER")
       addcommentrequest->objarray[cnt].parent_entity_id = fromandtoencounteridsrec->topftencntrid
      ELSE
       addcommentrequest->objarray[cnt].parent_entity_id = clr.parent_entity_id
       IF (clr.parent_entity_id != 0.0
        AND clr.parent_entity_name != "ACCOUNT")
        timelineassociatedentitycnt += 1, stat = alterlist(timelineassociatedentities->entitylist,
         timelineassociatedentitycnt), timelineassociatedentities->entitylist[
        timelineassociatedentitycnt].parententityid = clr.parent_entity_id,
        timelineassociatedentities->entitylist[timelineassociatedentitycnt].parententityname = clr
        .parent_entity_name
       ENDIF
      ENDIF
      addcommentrequest->objarray[cnt].active_status_prsnl_id = clr.active_status_prsnl_id,
      addcommentrequest->objarray[cnt].bill_vrsn_nbr = clr.bill_vrsn_nbr, addcommentrequest->
      objarray[cnt].active_ind = clr.active_ind,
      fromacctid = clr.acct_id
     WITH nocounter
    ;end select
    IF (size(addcommentrequest->objarray,5) > 0)
     EXECUTE pft_da_add_corsp_log_reltn  WITH replace("REQUEST",addcommentrequest), replace("REPLY",
      addcommentreply)
     IF ((addcommentreply->status_data.status != "S"))
      CALL addtracemessage("svcMoveComments","pft_da_add_corsp_log_reltn did not return success")
      CALL echorecord(addcommentrequest)
      CALL echorecord(addcommentreply)
      RETURN(false)
     ENDIF
    ENDIF
    IF ((fromandtoencounteridsrec->topftencntrid=0.0))
     CALL addtracemessage("svcMoveComments",
      "new financial encounter is not available to move the comments")
     RETURN(false)
    ENDIF
    IF ((fromandtoencounteridsrec->topftencntrid > 0.009))
     SELECT INTO "nl:"
      FROM pft_encntr pe,
       encntr_alias ea
      PLAN (pe
       WHERE pe.pft_encntr_id != 0.0
        AND (pe.pft_encntr_id=fromandtoencounteridsrec->topftencntrid)
        AND pe.active_ind=true)
       JOIN (ea
       WHERE ea.encntr_id=pe.encntr_id
        AND ea.beg_effective_dt_tm <= cnvtdatetime(sysdate)
        AND ea.end_effective_dt_tm > cnvtdatetime(sysdate)
        AND ea.active_ind=true
        AND ea.encntr_alias_type_cd=cs319_fin_nbr_cd)
      ORDER BY pe.encntr_id
      HEAD pe.encntr_id
       IF (pe.recur_current_month > 0
        AND pe.recur_current_year > 0)
        encntralias = concat(trim(cnvtstring(ea.alias),3)," - ",trim(cnvtstring(pe.recur_seq),3))
       ELSE
        encntralias = trim(ea.alias,3)
       ENDIF
      WITH nocounter
     ;end select
    ENDIF
    IF (validate(fromandtoencounteridsrec->toacctid))
     IF ((fromandtoencounteridsrec->toacctid > 0.009))
      SELECT INTO "nl:"
       FROM account a
       PLAN (a
        WHERE a.acct_id != 0.0
         AND (a.acct_id=fromandtoencounteridsrec->toacctid)
         AND a.active_ind=true)
       DETAIL
        acctnumber = a.ext_acct_id_txt
       WITH nocounter
      ;end select
     ENDIF
    ENDIF
    SELECT INTO "nl:"
     FROM rc_timeline rct
     PLAN (rct
      WHERE rct.parent_entity_id != 0.0
       AND (rct.parent_entity_id=fromandtoencounteridsrec->frompftencntrid)
       AND rct.parent_entity_name="PFT_ENCNTR"
       AND rct.active_ind=true)
     DETAIL
      addtimelinecnt += 1, updatetimelinecnt += 1
      IF (mod(addtimelinecnt,10)=1)
       stat = alterlist(rctimelineaddrequest->objarray,(addtimelinecnt+ 9))
      ENDIF
      IF (mod(updatetimelinecnt,10)=1)
       stat = alterlist(rctimelineupdaterequest->objarray,(updatetimelinecnt+ 9))
      ENDIF
      rctimelineupdaterequest->objarray[updatetimelinecnt].rc_timeline_id = rct.rc_timeline_id,
      rctimelineupdaterequest->objarray[updatetimelinecnt].active_ind = false,
      rctimelineupdaterequest->objarray[updatetimelinecnt].active_status_cd = reqdata->
      inactive_status_cd,
      rctimelineupdaterequest->objarray[updatetimelinecnt].updt_cnt = rct.updt_cnt,
      rctimelineaddrequest->objarray[addtimelinecnt].active_ind = rct.active_ind,
      rctimelineaddrequest->objarray[addtimelinecnt].active_status_cd = rct.active_status_cd,
      rctimelineaddrequest->objarray[addtimelinecnt].active_status_dt_tm = rct.active_status_dt_tm,
      rctimelineaddrequest->objarray[addtimelinecnt].active_status_prsnl_id = rct
      .active_status_prsnl_id, rctimelineaddrequest->objarray[addtimelinecnt].activity_created_dt_tm
       = rct.activity_created_dt_tm,
      rctimelineaddrequest->objarray[addtimelinecnt].activity_created_prsnl_id = rct
      .activity_created_prsnl_id, rctimelineaddrequest->objarray[addtimelinecnt].activity_type_cd =
      rct.activity_type_cd, rctimelineaddrequest->objarray[addtimelinecnt].applied_to_cd = rct
      .applied_to_cd,
      rctimelineaddrequest->objarray[addtimelinecnt].applied_to_txt = encntralias,
      rctimelineaddrequest->objarray[addtimelinecnt].comment_clob = rct.comment_clob,
      rctimelineaddrequest->objarray[addtimelinecnt].description_txt = rct.description_txt,
      rctimelineaddrequest->objarray[addtimelinecnt].parent_entity_id = fromandtoencounteridsrec->
      topftencntrid, rctimelineaddrequest->objarray[addtimelinecnt].parent_entity_name = rct
      .parent_entity_name, rctimelineaddrequest->objarray[addtimelinecnt].priority_nbr = rct
      .priority_nbr,
      rctimelineaddrequest->objarray[addtimelinecnt].solution_cd = rct.solution_cd,
      rctimelineaddrequest->objarray[addtimelinecnt].source_reference_ident = rct
      .source_reference_ident
     WITH nocounter
    ;end select
    IF (addtimelinecnt > 0)
     SET stat = alterlist(rctimelineaddrequest->objarray,addtimelinecnt)
    ENDIF
    IF (updatetimelinecnt > 0)
     SET stat = alterlist(rctimelineupdaterequest->objarray,updatetimelinecnt)
    ENDIF
    IF (validate(fromandtoencounteridsrec->toacctid))
     IF ((fromandtoencounteridsrec->toacctid > 0.009)
      AND fromacctid > 0.009)
      SELECT INTO "nl:"
       FROM rc_timeline rct
       PLAN (rct
        WHERE rct.parent_entity_id != 0.0
         AND rct.parent_entity_id=fromacctid
         AND rct.parent_entity_name="ACCOUNT"
         AND rct.active_ind=true)
       DETAIL
        addtimelinecnt += 1, updatetimelinecnt += 1, stat = alterlist(rctimelineaddrequest->objarray,
         addtimelinecnt),
        stat = alterlist(rctimelineupdaterequest->objarray,updatetimelinecnt),
        rctimelineupdaterequest->objarray[updatetimelinecnt].rc_timeline_id = rct.rc_timeline_id,
        rctimelineupdaterequest->objarray[updatetimelinecnt].active_ind = false,
        rctimelineupdaterequest->objarray[updatetimelinecnt].active_status_cd = reqdata->
        inactive_status_cd, rctimelineupdaterequest->objarray[updatetimelinecnt].updt_cnt = rct
        .updt_cnt, rctimelineaddrequest->objarray[addtimelinecnt].active_ind = rct.active_ind,
        rctimelineaddrequest->objarray[addtimelinecnt].active_status_cd = rct.active_status_cd,
        rctimelineaddrequest->objarray[addtimelinecnt].active_status_dt_tm = rct.active_status_dt_tm,
        rctimelineaddrequest->objarray[addtimelinecnt].active_status_prsnl_id = rct
        .active_status_prsnl_id,
        rctimelineaddrequest->objarray[addtimelinecnt].activity_created_dt_tm = rct
        .activity_created_dt_tm, rctimelineaddrequest->objarray[addtimelinecnt].
        activity_created_prsnl_id = rct.activity_created_prsnl_id, rctimelineaddrequest->objarray[
        addtimelinecnt].activity_type_cd = rct.activity_type_cd,
        rctimelineaddrequest->objarray[addtimelinecnt].applied_to_cd = rct.applied_to_cd,
        rctimelineaddrequest->objarray[addtimelinecnt].applied_to_txt = acctnumber,
        rctimelineaddrequest->objarray[addtimelinecnt].comment_clob = rct.comment_clob,
        rctimelineaddrequest->objarray[addtimelinecnt].description_txt = rct.description_txt,
        rctimelineaddrequest->objarray[addtimelinecnt].parent_entity_id = fromandtoencounteridsrec->
        toacctid, rctimelineaddrequest->objarray[addtimelinecnt].parent_entity_name = rct
        .parent_entity_name,
        rctimelineaddrequest->objarray[addtimelinecnt].priority_nbr = rct.priority_nbr,
        rctimelineaddrequest->objarray[addtimelinecnt].solution_cd = rct.solution_cd,
        rctimelineaddrequest->objarray[addtimelinecnt].source_reference_ident = rct
        .source_reference_ident
       WITH nocounter
      ;end select
     ENDIF
    ENDIF
    IF (addtimelinecnt > 0)
     SET stat = alterlist(rctimelineaddrequest->objarray,addtimelinecnt)
    ENDIF
    IF (updatetimelinecnt > 0)
     SET stat = alterlist(rctimelineupdaterequest->objarray,updatetimelinecnt)
    ENDIF
    IF (size(timelineassociatedentities->entitylist,5) > 0)
     SELECT INTO "nl:"
      FROM rc_timeline rct
      PLAN (rct
       WHERE rct.rc_timeline_id != 0.0
        AND expand(entityidx,1,size(timelineassociatedentities->entitylist,5),rct.parent_entity_id,
        timelineassociatedentities->entitylist[entityidx].parententityid)
        AND rct.active_ind=true)
      DETAIL
       updatetimelinecnt += 1, stat = alterlist(rctimelineupdaterequest->objarray,updatetimelinecnt),
       rctimelineupdaterequest->objarray[updatetimelinecnt].rc_timeline_id = rct.rc_timeline_id,
       rctimelineupdaterequest->objarray[updatetimelinecnt].active_ind = false,
       rctimelineupdaterequest->objarray[updatetimelinecnt].active_status_cd = reqdata->
       inactive_status_cd, rctimelineupdaterequest->objarray[updatetimelinecnt].updt_cnt = rct
       .updt_cnt,
       addtimelinecnt += 1, stat = alterlist(rctimelineaddrequest->objarray,addtimelinecnt),
       rctimelineaddrequest->objarray[addtimelinecnt].active_ind = rct.active_ind,
       rctimelineaddrequest->objarray[addtimelinecnt].active_status_cd = rct.active_status_cd,
       rctimelineaddrequest->objarray[addtimelinecnt].active_status_dt_tm = rct.active_status_dt_tm,
       rctimelineaddrequest->objarray[addtimelinecnt].active_status_prsnl_id = rct
       .active_status_prsnl_id,
       rctimelineaddrequest->objarray[addtimelinecnt].activity_created_dt_tm = rct
       .activity_created_dt_tm, rctimelineaddrequest->objarray[addtimelinecnt].
       activity_created_prsnl_id = rct.activity_created_prsnl_id, rctimelineaddrequest->objarray[
       addtimelinecnt].activity_type_cd = rct.activity_type_cd,
       rctimelineaddrequest->objarray[addtimelinecnt].applied_to_cd = rct.applied_to_cd,
       rctimelineaddrequest->objarray[addtimelinecnt].applied_to_txt = rct.applied_to_txt,
       rctimelineaddrequest->objarray[addtimelinecnt].child_parent_entity_id = rct.parent_entity_id,
       rctimelineaddrequest->objarray[addtimelinecnt].child_parent_entity_name = rct
       .parent_entity_name, rctimelineaddrequest->objarray[addtimelinecnt].comment_clob = rct
       .comment_clob, rctimelineaddrequest->objarray[addtimelinecnt].description_txt = rct
       .description_txt,
       rctimelineaddrequest->objarray[addtimelinecnt].parent_entity_id = fromandtoencounteridsrec->
       topftencntrid, rctimelineaddrequest->objarray[addtimelinecnt].parent_entity_name =
       "PFT_ENCNTR", rctimelineaddrequest->objarray[addtimelinecnt].priority_nbr = rct.priority_nbr,
       rctimelineaddrequest->objarray[addtimelinecnt].solution_cd = rct.solution_cd,
       rctimelineaddrequest->objarray[addtimelinecnt].source_reference_ident = rct
       .source_reference_ident
      WITH nocounter
     ;end select
    ENDIF
    IF (addtimelinecnt > 0)
     SET stat = alterlist(rctimelineaddrequest->objarray,addtimelinecnt)
    ENDIF
    IF (updatetimelinecnt > 0)
     SET stat = alterlist(rctimelineupdaterequest->objarray,updatetimelinecnt)
    ENDIF
    IF (size(rctimelineaddrequest->objarray,5) > 0)
     EXECUTE pft_da_add_rc_timeline  WITH replace("REQUEST",rctimelineaddrequest), replace("REPLY",
      rctimelinereply)
     IF ((rctimelinereply->status_data.status="S"))
      CALL echo("pft_da_add_rc_timeline was successful")
     ELSE
      CALL addtracemessage("svcMoveComments","pft_da_add_rc_timeline did not return success")
      CALL echorecord(rctimelineaddrequest)
      CALL echorecord(rctimelinereply)
      RETURN(false)
     ENDIF
    ENDIF
    SET stat = initrec(rctimelinereply)
    IF (size(rctimelineupdaterequest->objarray,5) > 0)
     EXECUTE pft_da_upt_rc_timeline  WITH replace("REQUEST",rctimelineupdaterequest), replace("REPLY",
      rctimelinereply)
     IF ((rctimelinereply->status_data.status="S"))
      CALL echo("pft_da_upt_rc_timeline was successful")
     ELSE
      CALL addtracemessage("svcMoveComments","pft_da_upt_rc_timeline did not return success")
      CALL echorecord(rctimelineupdaterequest)
      CALL echorecord(rctimelinereply)
      RETURN(false)
     ENDIF
    ENDIF
    CALL adddiscretetimerevent(mods_disrete_timer,"svcMoveComments",eventsvctimerstartdttm,"","",
     "",pftrmtimerevents)
    CALL logmessage("svcMoveComments","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcassigntargetacctid,char(128))=char(128))
  SUBROUTINE (svcassigntargetacctid(pacctid=f8,pfromandtoencounteridsrec=vc(ref)) =f8)
    DECLARE targetacctid = f8 WITH protect, noconstant(0.0)
    IF (validate(pfromandtoencounteridsrec->toacctid))
     IF ((pfromandtoencounteridsrec->toacctid > 0.0009))
      SET targetacctid = fromandtoencounteridsrec->toacctid
     ELSE
      SET targetacctid = pacctid
     ENDIF
    ELSE
     SET targetacctid = pacctid
    ENDIF
    RETURN(targetacctid)
  END ;Subroutine
 ENDIF
 IF (validate(svccreateselfpaychargegroup,char(128))=char(128))
  SUBROUTINE (svccreateselfpaychargegroup(selfpaychargegroupattributes=vc(ref)) =i2)
    CALL logmessage("svcCreateSelfPayChargeGroup","Entering",log_debug)
    RECORD createspcgrequest(
      1 chargegroups[1]
        2 pftencntrid = f8
        2 consolidatedscheduleid = f8
        2 chargegroupattributes
          3 healthplanid = f8
          3 encntrplanreltnid = f8
    ) WITH protect
    RECORD createspcgreply(
      1 chargegroups[*]
        2 benefitorderid = f8
        2 bohpreltnid = f8
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
    ) WITH protect
    SET createspcgrequest->chargegroups[1].pftencntrid = selfpaychargegroupattributes->pftencntrid
    SET createspcgrequest->chargegroups[1].consolidatedscheduleid = selfpaychargegroupattributes->
    consolidatedscheduleid
    SET createspcgrequest->chargegroups[1].chargegroupattributes.healthplanid =
    selfpaychargegroupattributes->healthplanid
    SET createspcgrequest->chargegroups[1].chargegroupattributes.encntrplanreltnid =
    selfpaychargegroupattributes->encntrplanreltnid
    EXECUTE pft_create_selfpay_cg  WITH replace("REQUEST",createspcgrequest), replace("REPLY",
     createspcgreply)
    IF ((createspcgreply->status_data.status != "S"))
     CALL addtracemessage("svcCreateSelfPayChargeGroup",
      "pft_create_selfpay_cg did not return success")
     CALL echorecord(createspcgrequest)
     CALL echorecord(createspcgreply)
     RETURN(false)
    ENDIF
    CALL logmessage("svcCreateSelfPayChargeGroup","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svccancelclaims,char(128))=char(128))
  SUBROUTINE (svccancelclaims(cancelclaimsreq=vc(ref)) =i2)
    CALL logmessage("svcCancelClaims","Entering...",log_debug)
    RECORD cancelclaimsreply(
      1 pft_status_data
        2 subeventstatus[1]
          3 programname = vc
          3 subroutinename = vc
          3 message = vc
        2 pft_stats[*]
          3 programname = vc
          3 executioncnt = i4
          3 executiontime = f8
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    EXECUTE pft_clm_cancel_claim  WITH replace("REQUEST",cancelclaimsreq), replace("REPLY",
     cancelclaimsreply)
    IF ((cancelclaimsreply->status_data.status != "S"))
     CALL addtracemessage("svcCancelClaims","pft_clm_cancel_claim did not return success")
     CALL echorecord(cancelclaimsreq)
     CALL echorecord(cancelclaimsreply)
     RETURN(false)
    ENDIF
    CALL logmessage("svcCancelClaims","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcmodifychargecoverage,char(128))=char(128))
  SUBROUTINE (svcmodifychargecoverage(chargecoverageslist=vc(ref)) =i2)
    CALL logmessage("svcModifyChargeCoverage","Entering...",log_debug)
    DECLARE idx = i4 WITH protect, noconstant(0)
    RECORD modifychargecoveragerequest(
      1 pftchargeid = f8
      1 benefitorderid = f8
      1 coverage[*]
        2 iscovered = i2
    ) WITH protect
    RECORD modifychargecoveragereply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    FOR (i = 1 TO size(chargecoverageslist->list,5))
      SET modifychargecoveragerequest->pftchargeid = chargecoverageslist->list[i].pftchargeid
      SET modifychargecoveragerequest->benefitorderid = chargecoverageslist->list[i].benefitorderid
      SET stat = alterlist(modifychargecoveragerequest->coverage,size(chargecoverageslist->list[i].
        coverage,5))
      SET stat = movereclist(chargecoverageslist->list[i].coverage,modifychargecoveragerequest->
       coverage,1,1,size(chargecoverageslist->list[i].coverage,5),
       false)
      EXECUTE pft_modify_charge_coverage  WITH replace("REQUEST",modifychargecoveragerequest),
      replace("REPLY",modifychargecoveragereply)
      IF ((modifychargecoveragereply->status_data.status != "S"))
       CALL addtracemessage("svcModifyChargeCoverage",
        "pft_modify_charge_coverage did not return success")
       CALL echorecord(modifychargecoveragerequest)
       CALL echorecord(modifychargecoveragereply)
       RETURN(false)
      ENDIF
      SET stat = initrec(modifychargecoveragerequest)
    ENDFOR
    CALL logmessage("svcUptChargeRelationAttributes","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcdequeuebalancefromworkflow,char(128))=char(128))
  SUBROUTINE (svcdequeuebalancefromworkflow(spbalanceid=f8) =i2)
    CALL logmessage("svcDequeueBalanceFromWorkflow","Entering...",log_debug)
    DECLARE wfentitytype = vc WITH private, constant("SELFPAY")
    IF ( NOT (dequeueworkflowitems(spbalanceid,wfentitytype)))
     CALL addtracemessage("svcDequeueBalanceFromWorkflow","Call to dequeueWorkflowItems failed")
     RETURN(false)
    ENDIF
    CALL logmessage("svcDequeueBalanceFromWorkflow","Exiting...",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcupdateproration,char(128))=char(128))
  SUBROUTINE (svcupdateproration(pprequest=vc(ref)) =i2)
    CALL logmessage("svcUpdateProration","Entering",log_debug)
    RECORD ppreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    EXECUTE pft_da_upt_pft_proration  WITH replace("REQUEST",pprequest), replace("REPLY",ppreply)
    IF ((ppreply->status_data.status != "S"))
     CALL addtracemessage("svcUpdateProration","pft_da_upt_pft_proration did not return success")
     CALL echorecord(pprequest)
     CALL echorecord(ppreply)
     RETURN(false)
    ENDIF
    CALL logmessage("svcUpdateProration","Exiting",log_debug)
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcrollnoncoveredbalances,char(128))=char(128))
  SUBROUTINE (svcrollnoncoveredbalances(scpcgchargegroups=vc(ref)) =i2)
    RECORD rollnoncovbalancesrequest(
      1 chargegroupid = f8
    ) WITH protect
    RECORD rollnoncovbalancesreply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    FOR (i = 1 TO size(scpcgchargegroups->chargegroup,5))
      SET rollnoncovbalancesrequest->chargegroupid = scpcgchargegroups->chargegroup[i].chargegroupid
      EXECUTE pft_roll_noncov_balances  WITH replace("REQUEST",rollnoncovbalancesrequest), replace(
       "REPLY",rollnoncovbalancesreply)
      IF ((rollnoncovbalancesreply->status_data.status != "S"))
       CALL addtracemessage("svcRollNonCoveredBalances",
        "pft_roll_noncov_balances did not return success")
       CALL echorecord(rollnoncovbalancesrequest)
       CALL echorecord(rollnoncovbalancesreply)
       RETURN(false)
      ENDIF
      SET stat = initrec(rollnoncovbalancesreply)
    ENDFOR
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(dequeueworkflowitems,char(128))=char(128))
  SUBROUTINE (dequeueworkflowitems(entityid=f8,entitytypekey=vc) =i2)
    RECORD wfdequeuerequest(
      1 entitytypekey = vc
      1 entityid = f8
    ) WITH protect
    RECORD wfdequeuereply(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET wfdequeuerequest->entitytypekey = entitytypekey
    SET wfdequeuerequest->entityid = entityid
    EXECUTE pft_wf_remove_items_for_entity  WITH replace("REQUEST",wfdequeuerequest), replace("REPLY",
     wfdequeuereply)
    IF ((wfdequeuereply->status_data.status="F"))
     CALL addtracemessage("dequeueWorkflowItems",
      "pft_wf_remove_items_for_entity did not return success")
     CALL echorecord(wfdequeuerequest)
     CALL echorecord(wfdequeuereply)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(isglobalbillingenabled,char(128))=char(128))
  SUBROUTINE (isglobalbillingenabled(pftencntrid=f8) =i2)
    DECLARE isglobalbilling = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      billing_entity be
     PLAN (pe
      WHERE pe.pft_encntr_id=pftencntrid
       AND pe.active_ind=true)
      JOIN (be
      WHERE be.billing_entity_id=pe.billing_entity_id
       AND be.active_ind=true
       AND be.global_billing_ind=true)
     DETAIL
      isglobalbilling = true
     WITH nocounter
    ;end select
    RETURN(isglobalbilling)
  END ;Subroutine
 ENDIF
 IF (validate(retrieveactivefinencntr,char(128))=char(128))
  SUBROUTINE (retrieveactivefinencntr(pftencntrid=f8(ref)) =i2)
    DECLARE isactive = i2 WITH protect, noconstant(false)
    SELECT INTO "nl:"
     FROM pft_encntr pe1,
      encounter e,
      pft_encntr pe2
     PLAN (pe1
      WHERE pe1.pft_encntr_id=pftencntrid)
      JOIN (e
      WHERE pe1.encntr_id=e.encntr_id
       AND e.active_ind=true)
      JOIN (pe2
      WHERE pe2.encntr_id=e.encntr_id
       AND pe2.active_ind=true)
     DETAIL
      IF (pe1.active_ind=true)
       isactive = true
      ELSE
       pftencntrid = pe2.pft_encntr_id
      ENDIF
     WITH nocounter, maxrec = 1
    ;end select
    IF (curqual > 0)
     IF (isactive)
      CALL logmessage("retrieveActiveFinEncntr",build2("pft_encntr with Id: ",pftencntrid,
        " is active."),log_debug)
     ELSE
      CALL logmessage("retrieveActiveFinEncntr",build2("Found active pft_encntr with Id: ",
        pftencntrid," associated to clinical encounter"),log_debug)
     ENDIF
     RETURN(true)
    ENDIF
    CALL logmessage("retrieveActiveFinEncntr",build2("pft_encntr with id: ",pftencntrid,
      " is inactive and unable to retrieve another active one"),log_error)
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(srvupdateaccount,char(128))=char(128))
  SUBROUTINE (srvupdateaccount(uptaccountrequest=vc(ref)) =i2)
    RECORD uptaccountreply(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF (size(uptaccountrequest->objarray,5) > 0)
     EXECUTE pft_da_upt_account  WITH replace("REQUEST",uptaccountrequest), replace("REPLY",
      uptaccountreply)
     IF ((uptaccountreply->status_data.status != "S"))
      CALL addtracemessage("srvUpdateAccount","pft_da_upt_account did not return success")
      CALL echorecord(uptaccountrequest)
      CALL echorecord(uptaccountreply)
      RETURN(false)
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svccreateaccountwithfinencounter,char(128))=char(128))
  SUBROUTINE (svccreateaccountwithfinencounter(genfinencntrrequest=vc(ref),newpftencntrid=f8(ref)) =
   i2)
    SET newpftencntrid = 0.0
    RECORD genfinencntrrep(
      1 objarray[*]
        2 encntr_id = f8
        2 acct_id = f8
        2 pft_encntr_id = f8
        2 benefit_order_id = f8
      1 error_prog = vc
      1 error_sub = vc
      1 error_msg = vc
      1 pft_encntr_id = f8
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    EXECUTE pft_generate_fin_encntr  WITH replace("REQUEST",genfinencntrrequest), replace("REPLY",
     genfinencntrrep)
    IF ((genfinencntrrep->status_data.status != "S"))
     CALL addtracemessage("svcCreateAccountWithFinEncounter",
      "pft_generate_fin_encntr did not return success")
     CALL echorecord(genfinencntrrequest)
     CALL echorecord(genfinencntrrep)
     RETURN(false)
    ENDIF
    SET newpftencntrid = genfinencntrrep->pft_encntr_id
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(publisheventoutofprocess,char(128))=char(128))
  SUBROUTINE (publisheventoutofprocess(pentityid=f8,pentityname=vc,peventcd=f8,pfailrsn=vc(ref)) =i2)
    DECLARE app_id = i4 WITH protect, constant(4080000)
    DECLARE task_id = i4 WITH protect, constant(4080000)
    DECLARE req_id = i4 WITH protect, constant(4099263)
    DECLARE crmstat = i4 WITH protect, noconstant(0)
    DECLARE happ = i4 WITH protect, noconstant(0)
    DECLARE htask = i4 WITH protect, noconstant(0)
    DECLARE hstep = i4 WITH protect, noconstant(0)
    DECLARE hreq = i4 WITH protect, noconstant(0)
    DECLARE hevent = i4 WITH protect, noconstant(0)
    DECLARE hrep = i4 WITH protect, noconstant(0)
    DECLARE hstatdata = i4 WITH protect, noconstant(0)
    DECLARE repstat = vc WITH protect, noconstant("")
    DECLARE hsubevent = i4 WITH protect, noconstant(0)
    SET crmstat = uar_crmbeginapp(app_id,happ)
    IF (crmstat=0)
     SET crmstat = uar_crmbegintask(happ,task_id,htask)
     IF (crmstat=0)
      SET crmstat = uar_crmbeginreq(htask,"",req_id,hstep)
      IF (crmstat=0)
       SET hreq = uar_crmgetrequest(hstep)
       IF (hreq > 0)
        SET hevent = uar_srvadditem(hreq,"eventList")
        SET stat = uar_srvsetstring(hevent,"entityTypeKey",nullterm(pentityname))
        SET stat = uar_srvsetdouble(hevent,"entityId",pentityid)
        SET stat = uar_srvsetdouble(hevent,"eventCd",peventcd)
        SET stat = uar_srvsetdouble(hevent,"eventTypeCd",cs23369_wfevent_cd)
        SET crmstat = uar_crmperform(hstep)
        IF (crmstat=0)
         SET hrep = uar_crmgetreply(hstep)
         IF (hrep != 0)
          SET hstatdata = uar_srvgetstruct(hrep,"status_data")
          SET repstat = uar_srvgetstringptr(hstatdata,"status")
          IF (repstat != "S")
           SET hsubevent = uar_srvgetitem(hstatdata,"subeventstatus",0)
           SET pfailrsn = uar_srvgetstringptr(hsubevent,"TargetObjectValue")
          ENDIF
         ELSE
          SET pfailrsn = "Failed to get reply"
         ENDIF
        ELSE
         SET pfailrsn = "Failed to perform pft_publish_event"
        ENDIF
       ELSE
        SET pfailrsn = "Failed to get request"
       ENDIF
       CALL uar_crmendreq(hstep)
      ELSE
       SET pfailrsn = "Failed to begin req 4099263"
      ENDIF
      CALL uar_crmendtask(htask)
     ELSE
      SET pfailrsn = "Failed to begin task 4080000"
     ENDIF
     CALL uar_crmendapp(happ)
    ELSE
     SET pfailrsn = "Failed to begin app 4080000"
    ENDIF
    IF (repstat="S")
     RETURN(true)
    ENDIF
    RETURN(false)
  END ;Subroutine
 ENDIF
 IF (validate(svcprocessdemographicchanges,char(128))=char(128))
  SUBROUTINE (svcprocessdemographicchanges(prdemoupdts=vc(ref)) =i2)
    RECORD retsaverequest(
      1 callbackhandlerident = i4
      1 extbatchident = vc
      1 extgroupident = vc
      1 extpartnerident = vc
      1 httpstatuscd = i4
      1 httpstatusdesc = vc
      1 maxretrycnt = i4
      1 origrceditransactionid = f8
      1 parententityid = f8
      1 parententityname = vc
      1 resourceurl = vc
      1 retrievedttm = f8
      1 retrycnt = i4
      1 servicecd = f8
      1 statuscd = f8
      1 transmitdttm = f8
      1 requestjson = vc
    ) WITH protect
    RECORD retsavereply(
      1 rceditransactionid = f8
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET retsaverequest->parententityid = prdemoupdts->pftencntrid
    SET retsaverequest->parententityname = "PFT_ENCNTR"
    SET retsaverequest->requestjson = replace(cnvtrectojson(prdemoupdts),"PRDEMOUPDTS","DEMOS")
    SET retsaverequest->statuscd = cs4002853_queued_cd
    SET retsaverequest->servicecd = cs4002709_atdemoout
    EXECUTE pft_rm_save_rc_edi_trans  WITH replace("REQUEST",retsaverequest), replace("REPLY",
     retsavereply)
    IF ((retsavereply->status_data.status != "S"))
     CALL logmessage("svcProcessDemographicChanges","pft_rm_save_rc_edi_trans did not return success",
      log_error)
     CALL echorecord(retsaverequest)
     CALL echorecord(retsavereply)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcreprocesssurchargeforhealthplanmod,char(128))=char(128))
  SUBROUTINE (svcreprocesssurchargeforhealthplanmod(prsurchgmodrec=vc(ref)) =i2)
    IF ( NOT (updatesurchgpartcpnstatusfornonprimarypayments(prsurchgmodrec)))
     CALL addtracemessage("svcReprocessSurchargeForHealthPlanMod",
      "updateSurchgPartcpnStatusForNonPrimaryPayments did not return success.")
     RETURN(false)
    ENDIF
    IF ( NOT (reprocesspatsurchgadjforprimary(prsurchgmodrec)))
     CALL addtracemessage("svcReprocessSurchargeForHealthPlanMod",
      "reprocessPatSurchgAdjForPrimary did not return success.")
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(updatesurchgpartcpnstatusfornonprimarypayments,char(128))=char(128))
  SUBROUTINE (updatesurchgpartcpnstatusfornonprimarypayments(prsurchgmodrec=vc(ref)) =i2)
    DECLARE updtidx = i4 WITH protect, noconstant(0)
    DECLARE surchgmodlistidx = i4 WITH protect, noconstant(0)
    DECLARE surchgmodmatchidx = i4 WITH protect, noconstant(0)
    RECORD updatebatchtransreq(
      1 objarray[*]
        2 batch_trans_file_id = f8
        2 updt_cnt = i4
        2 surchrg_prtcptn_status_cd = f8
    ) WITH protect
    RECORD updatebatchtransrep(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
    ) WITH protect
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      pft_trans_reltn ptr,
      batch_trans_file btf,
      bo_hp_reltn bhr,
      benefit_order bo,
      health_plan hp,
      trans_log tl
     PLAN (pe
      WHERE (pe.pft_encntr_id=prsurchgmodrec->pftencntrid))
      JOIN (ptr
      WHERE ptr.parent_entity_name="PFTENCNTR"
       AND ptr.parent_entity_id=pe.pft_encntr_id)
      JOIN (bhr
      WHERE bhr.bo_hp_reltn_id=ptr.benefit_order_id
       AND bhr.priority_seq > 1
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.active_ind=true)
      JOIN (hp
      WHERE hp.health_plan_id=bhr.health_plan_id
       AND hp.active_ind=true)
      JOIN (bo
      WHERE bo.benefit_order_id=bhr.benefit_order_id
       AND bo.fin_class_cd != cs354_selfpay_cd
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo.active_ind=true)
      JOIN (tl
      WHERE tl.activity_id=ptr.activity_id
       AND tl.trans_type_cd=cs18649_payment_cd
       AND tl.active_ind=true)
      JOIN (btf
      WHERE btf.batch_trans_file_id=ptr.batch_trans_file_id
       AND btf.active_ind=true)
     ORDER BY bhr.priority_seq
     DETAIL
      updtidx += 1, stat = alterlist(updatebatchtransreq->objarray,updtidx), updatebatchtransreq->
      objarray[updtidx].batch_trans_file_id = btf.batch_trans_file_id,
      updatebatchtransreq->objarray[updtidx].updt_cnt = btf.updt_cnt
      IF (prsurchgmodrec->anynonprimaryisexempt)
       updatebatchtransreq->objarray[updtidx].surchrg_prtcptn_status_cd = cs4302016_exempt_cd
      ELSE
       surchgmodmatchidx = locateval(surchgmodlistidx,1,size(prsurchgmodrec->surchgmodlist,5),bhr
        .priority_seq,prsurchgmodrec->surchgmodlist[surchgmodlistidx].priorityseq),
       updatebatchtransreq->objarray[updtidx].surchrg_prtcptn_status_cd = prsurchgmodrec->
       surchgmodlist[surchgmodmatchidx].surchgpartcpnstatuscd
      ENDIF
     WITH nocounter
    ;end select
    IF (validate(debug))
     CALL echorecord(updatebatchtransreq)
     CALL echorecord(prsurchgmodrec)
    ENDIF
    IF (size(updatebatchtransreq->objarray,5) > 0)
     EXECUTE pft_da_upt_batch_trans_file  WITH replace("REQUEST",updatebatchtransreq), replace(
      "REPLY",updatebatchtransrep)
     IF ((updatebatchtransrep->status_data.status != "S"))
      CALL addtracemessage("updateSurchgPartcpnStatusForNonPrimaryPayments",
       "Unable to update surcharge participation status in batch_trans_file.")
      CALL echorecord(updatebatchtransreq)
      CALL echorecord(updatebatchtransrep)
      RETURN(false)
     ENDIF
    ELSE
     CALL logmessage("updateSurchgPartcpnStatusForNonPrimaryPayments",
      "There are no non-primary payments to update.",log_debug)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(reprocesspatsurchgadjforprimary,char(128))=char(128))
  SUBROUTINE (reprocesspatsurchgadjforprimary(prsurchgmodrec=vc(ref)) =i2)
    DECLARE surchgpartcpnstatuscd = f8 WITH protect, noconstant(0.0)
    DECLARE surchgremarkcd = f8 WITH protect, noconstant(0.0)
    DECLARE surchgratepercent = f8 WITH protect, noconstant(0.0)
    DECLARE totalpatsurchadjoffset = f8 WITH protect, noconstant(0.0)
    DECLARE clmidx = i4 WITH protect, noconstant(0)
    DECLARE clmcnt = i4 WITH protect, noconstant(0)
    DECLARE surchgmodlistidx = i4 WITH protect, noconstant(0)
    DECLARE surchgmodmatchidx = i4 WITH protect, noconstant(0)
    DECLARE reversaltransidx = i4 WITH protect, noconstant(0)
    SET surchgmodmatchidx = locateval(surchgmodlistidx,1,size(prsurchgmodrec->surchgmodlist,5),1,
     prsurchgmodrec->surchgmodlist[surchgmodlistidx].priorityseq)
    SET surchgpartcpnstatuscd = prsurchgmodrec->surchgmodlist[surchgmodmatchidx].
    surchgpartcpnstatuscd
    SET surchgremarkcd = prsurchgmodrec->surchgmodlist[surchgmodmatchidx].surchgremarkcd
    SET surchgratepercent = prsurchgmodrec->surchgmodlist[surchgmodmatchidx].surchgratepercent
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      benefit_order bo,
      bo_hp_reltn bhr,
      bill_reltn brl,
      bill_rec br
     PLAN (pe
      WHERE (pe.pft_encntr_id=prsurchgmodrec->pftencntrid)
       AND pe.active_ind=true)
      JOIN (bo
      WHERE bo.pft_encntr_id=pe.pft_encntr_id
       AND bo.fin_class_cd != cs354_selfpay_cd
       AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.priority_seq=1
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.active_ind=true)
      JOIN (brl
      WHERE brl.parent_entity_id=bhr.bo_hp_reltn_id
       AND brl.parent_entity_name="BO_HP_RELTN"
       AND brl.active_ind=true)
      JOIN (br
      WHERE br.corsp_activity_id=brl.corsp_activity_id
       AND br.bill_status_cd != cs18935_canceled_cd
       AND br.active_ind=true)
     ORDER BY br.corsp_activity_id DESC
     DETAIL
      clmidx += 1, stat = alterlist(prsurchgmodrec->surchgclmslist,clmidx), prsurchgmodrec->
      surchgclmslist[clmidx].corpsactivityid = br.corsp_activity_id
     WITH nocounter
    ;end select
    IF (validate(debug))
     CALL echorecord(prsurchgmodrec)
    ENDIF
    IF (size(prsurchgmodrec->surchgclmslist,5) > 0)
     FOR (clmcnt = 1 TO size(prsurchgmodrec->surchgclmslist,5))
       IF (((surchgpartcpnstatuscd IN (cs4302016_prtcptndir_cd, cs4302016_prtcptnindir_cd,
       cs4302016_gvrnmntdir_cd, cs4302016_gvrnmntindir_cd)
        AND  NOT (prsurchgmodrec->anynonprimaryisexempt)) OR (surchgpartcpnstatuscd=
       cs4302016_partnonconv_cd
        AND prsurchgmodrec->anynonprimaryisexempt)) )
        IF ( NOT (reverseprimarypatientsurchargeadjustmentsonprimarybalance(prsurchgmodrec->
         surchgclmslist[clmcnt].corpsactivityid,totalpatsurchadjoffset)))
         CALL addtracemessage("reprocessPatSurchgAdjForPrimary",
          "Unable to reverse patient surcharge adjustments.")
         RETURN(false)
        ENDIF
        IF ( NOT (isequal(totalpatsurchadjoffset,0.00)))
         IF ( NOT (transferprimarybalancecreatedbyoffset(prsurchgmodrec->surchgclmslist[clmcnt].
          corpsactivityid,totalpatsurchadjoffset)))
          CALL addtracemessage("reprocessPatSurchgAdjForPrimary",
           "Unable to transfer primary balance created by offset.")
          RETURN(false)
         ENDIF
        ENDIF
       ELSEIF (((surchgpartcpnstatuscd IN (cs4302016_prtcptndir_cd, cs4302016_prtcptnindir_cd,
       cs4302016_gvrnmntdir_cd, cs4302016_gvrnmntindir_cd)
        AND prsurchgmodrec->anynonprimaryisexempt) OR (surchgpartcpnstatuscd=cs4302016_partnonconv_cd
        AND  NOT (prsurchgmodrec->anynonprimaryisexempt))) )
        IF ( NOT (postpatientsurchargeadjustmentoffset(surchgpartcpnstatuscd,surchgremarkcd,
         surchgratepercent,prsurchgmodrec->surchgclmslist[clmcnt].corpsactivityid,
         totalpatsurchadjoffset)))
         CALL addtracemessage("reprocessPatSurchgAdjForPrimary",
          "Unable to post new patient surcharge adjustments.")
         RETURN(false)
        ENDIF
        IF ( NOT (isequal(totalpatsurchadjoffset,0.00)))
         IF ( NOT (transferprimarybalancecreatedbyoffset(prsurchgmodrec->surchgclmslist[clmcnt].
          corpsactivityid,totalpatsurchadjoffset)))
          CALL addtracemessage("reprocessPatSurchgAdjForPrimary",
           "Unable to transfer primary balance created by offset.")
          RETURN(false)
         ENDIF
        ENDIF
       ELSE
        CALL logmessage("reprocessPatSurchgAdjForPrimary",
         "Primary balance does not qualify for reprocessing.",log_debug)
        RETURN(true)
       ENDIF
     ENDFOR
    ELSE
     CALL logmessage("reprocessPatSurchgAdjForPrimary",
      "Primary balance does not qualify for reprocessing.",log_debug)
     RETURN(true)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(reverseprimarypatientsurchargeadjustmentsonprimarybalance,char(128))=char(128))
  SUBROUTINE (reverseprimarypatientsurchargeadjustmentsonprimarybalance(pcorpsactivityid=f8,
   prtotalpatsurchadjoffset=f8(ref)) =i2)
    DECLARE transcnt = i4 WITH protect, noconstant(0)
    RECORD reversaltransactions(
      1 batch_type_flag = i2
      1 objarray[*]
        2 activity_id = f8
    ) WITH protect
    SELECT INTO "nl:"
     FROM pft_trans_reltn ptr,
      trans_log tl
     PLAN (ptr
      WHERE ptr.parent_entity_id=pcorpsactivityid
       AND ptr.parent_entity_name="BILL"
       AND ptr.active_ind=true)
      JOIN (tl
      WHERE tl.activity_id=ptr.activity_id
       AND tl.trans_type_cd=cs18649_adjustment_cd
       AND tl.trans_sub_type_cd=cs20549_patsurchrg_cd
       AND tl.trans_reason_cd != cs18937_reversal_cd
       AND tl.active_ind=true
       AND  NOT ( EXISTS (
      (SELECT
       ttr.parent_activity_id
       FROM trans_trans_reltn ttr
       WHERE ttr.parent_activity_id=tl.activity_id
        AND ttr.trans_reltn_reason_cd=cs25753_reversal))))
     ORDER BY ptr.activity_id
     HEAD ptr.activity_id
      transcnt += 1, stat = alterlist(reversaltransactions->objarray,transcnt), reversaltransactions
      ->objarray[transcnt].activity_id = ptr.activity_id,
      prtotalpatsurchadjoffset += evaluate(ptr.dr_cr_flag,2,(ptr.amount * - (1)),ptr.amount)
     WITH nocounter
    ;end select
    IF (size(reversaltransactions->objarray,5) > 0)
     SET reversaltransactions->batch_type_flag = reg_mod_reversal
     IF ( NOT (svcreversetransactions(reversaltransactions)))
      CALL addtracemessage("reversePrimaryPatientSurchargeAdjustmentsOnPrimaryBalance",
       "svcReverseTransactions did not return success")
      CALL echorecord(reversaltransactions)
      RETURN(false)
     ENDIF
    ELSE
     CALL logmessage("reversePrimaryPatientSurchargeAdjustmentsOnPrimaryBalance",
      "No Patient Surcharge Adjustments on primary balance to reverse.",log_debug)
     RETURN(true)
    ENDIF
    SET prtotalpatsurchadjoffset *= - (1)
    IF (validate(debug))
     CALL echorecord(reversaltransactions)
     CALL echo(build2("prTotalPatSurchAdjOffset: ",prtotalpatsurchadjoffset))
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF ( NOT (validate(postpatientsurchargeadjustmentoffset)))
  SUBROUTINE (postpatientsurchargeadjustmentoffset(psurchgpartcpnstatuscd=f8,psurchgremarkcd=f8,
   psurchgratepercent=f8,pcorpsactivityid=f8,prtotalpatsurchadjoffset=f8(ref)) =i2)
    DECLARE surchgtransaliasid = f8 WITH protect, noconstant(0.0)
    DECLARE adjidx = i4 WITH protect, noconstant(0)
    DECLARE logicaldomainid = f8 WITH protect, noconstant(0.0)
    DECLARE lineleveladjamount = f8 WITH protect, noconstant(0.0)
    DECLARE claimleveladjamount = f8 WITH protect, noconstant(0.0)
    DECLARE claimleveladjustments = i2 WITH protect, noconstant(false)
    RECORD applydolladjreq(
      1 objarray[*]
        2 pft_line_item_id = f8
        2 corsp_activity_id = f8
        2 trans_type_cd = f8
        2 trans_sub_type_cd = f8
        2 trans_reason_cd = f8
        2 trans_alias_id = f8
        2 amount = f8
        2 transaction_comment_text = vc
    ) WITH protect
    RECORD applydolladjrep(
      1 pft_status_data
        2 status = c1
        2 subeventstatus[*]
          3 status = c1
          3 table_name = vc
          3 pk_values = vc
      1 mod_objs[*]
        2 entity_type = vc
        2 mod_recs[*]
          3 table_name = vc
          3 pk_values = vc
          3 mod_flds[*]
            4 field_name = vc
            4 field_type = vc
            4 field_value_obj = vc
            4 field_value_db = vc
      1 failure_stack
        2 failures[*]
          3 programname = vc
          3 routinename = vc
          3 message = vc
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    IF ( NOT (psurchgpartcpnstatuscd IN (cs4302016_prtcptndir_cd, cs4302016_prtcptnindir_cd,
    cs4302016_gvrnmntdir_cd, cs4302016_gvrnmntindir_cd, cs4302016_partnonconv_cd)))
     CALL logmessage("postPatientSurchargeAdjustmentOffset",
      "Primary balance does not qualify for patient surcharge adjustments",log_debug)
     RETURN(true)
    ENDIF
    IF ( NOT (getlogicaldomain(ld_concept_organization,logicaldomainid)))
     CALL addtracemessage("postPatientSurchargeAdjustmentOffset",
      "Failed to retrieve logical domain id")
     RETURN(false)
    ENDIF
    SET stat = retrievepatsurchgtransaliasids(logicaldomainid,surchgtransaliasid)
    SELECT INTO "nl:"
     FROM pft_trans_reltn ptr,
      trans_log tl
     PLAN (ptr
      WHERE ptr.parent_entity_id=pcorpsactivityid
       AND ptr.parent_entity_name="BILL"
       AND ptr.active_ind=true)
      JOIN (tl
      WHERE tl.activity_id=ptr.activity_id
       AND tl.trans_type_cd=cs18649_adjustment_cd
       AND tl.trans_sub_type_cd=cs20549_patsurchrg_cd
       AND tl.trans_reason_cd != cs18937_reversal_cd
       AND tl.active_ind=true
       AND  NOT ( EXISTS (
      (SELECT
       ttr.parent_activity_id
       FROM trans_trans_reltn ttr
       WHERE ttr.parent_activity_id=tl.activity_id
        AND ttr.trans_reltn_reason_cd=cs25753_reversal))))
     ORDER BY ptr.activity_id
     WITH nocounter
    ;end select
    IF (curqual > 0)
     CALL logmessage("postPatientSurchargeAdjustmentOffset",
      "Primary balance does not qualify for reprocessing.",log_debug)
     RETURN(true)
    ENDIF
    SELECT INTO "nl:"
     FROM batch_trans_file btf,
      denial d
     PLAN (d
      WHERE d.corsp_activity_id=pcorpsactivityid
       AND d.active_ind=true)
      JOIN (btf
      WHERE btf.batch_trans_file_id=d.batch_trans_file_id
       AND btf.active_ind=true)
     ORDER BY d.corsp_activity_id, btf.pft_line_item_id
     HEAD d.corsp_activity_id
      IF (btf.pft_line_item_id > 0.0)
       claimleveladjustments = false
      ELSE
       claimleveladjustments = true
      ENDIF
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL logmessage("postPatientSurchargeAdjustmentOffset",
      "Primary balance does not qualify for reprocessing.",log_debug)
     RETURN(true)
    ENDIF
    IF ( NOT (claimleveladjustments))
     SELECT INTO "nl:"
      FROM pft_trans_reltn ptr,
       batch_trans_file btf,
       trans_log tl
      PLAN (ptr
       WHERE ptr.parent_entity_id=pcorpsactivityid
        AND ptr.parent_entity_name="BILL"
        AND ptr.active_ind=true)
       JOIN (btf
       WHERE btf.batch_trans_file_id=ptr.batch_trans_file_id
        AND btf.active_ind=true)
       JOIN (tl
       WHERE tl.activity_id=ptr.activity_id
        AND tl.active_ind=true
        AND  NOT ( EXISTS (
       (SELECT
        ttr.parent_activity_id
        FROM trans_trans_reltn ttr
        WHERE ttr.parent_activity_id=tl.activity_id
         AND ttr.trans_reltn_reason_cd=cs25753_reversal))))
      ORDER BY ptr.parent_entity_id, btf.pft_line_item_id
      HEAD ptr.parent_entity_id
       IF (btf.pft_line_item_id > 0.0)
        claimleveladjustments = false
       ELSE
        claimleveladjustments = true
       ENDIF
      WITH nocounter
     ;end select
    ENDIF
    IF (claimleveladjustments)
     SELECT INTO "nl:"
      FROM denial d,
       denial_detail dd,
       batch_trans_file btf
      PLAN (d
       WHERE d.corsp_activity_id=pcorpsactivityid
        AND d.denial_type_cd=cs29904_patient_cd
        AND d.denial_reason_cd IN (cs26398_coinsamt_cd, psurchgremarkcd)
        AND d.active_ind=true)
       JOIN (dd
       WHERE dd.denial_id=d.denial_id
        AND dd.remark_code_attrib_cd=cs26913_dollar_amt_cd
        AND dd.active_ind=true)
       JOIN (btf
       WHERE btf.batch_trans_file_id=d.batch_trans_file_id
        AND btf.active_ind=true
        AND (btf.batch_trans_id=
       (SELECT
        max(btf2.batch_trans_id)
        FROM denial d2,
         batch_trans_file btf2
        WHERE d2.corsp_activity_id=btf.corsp_activity_id
         AND btf2.batch_trans_file_id=d2.batch_trans_file_id
         AND btf2.active_ind=true)))
      ORDER BY d.corsp_activity_id, btf.post_dt_tm DESC, btf.batch_trans_id,
       btf.pft_line_item_id
      HEAD d.corsp_activity_id
       claimleveladjamount = 0.0
      DETAIL
       IF (psurchgpartcpnstatuscd=cs4302016_partnonconv_cd)
        IF (d.denial_reason_cd=cs26398_coinsamt_cd)
         claimleveladjamount += cnvtreal(dd.remark_code_attrib_value)
        ENDIF
       ELSE
        IF (d.denial_reason_cd=psurchgremarkcd)
         claimleveladjamount += cnvtreal(dd.remark_code_attrib_value)
        ENDIF
       ENDIF
      FOOT  d.corsp_activity_id
       adjidx += 1, stat = alterlist(applydolladjreq->objarray,adjidx)
       IF (psurchgpartcpnstatuscd=cs4302016_partnonconv_cd)
        applydolladjreq->objarray[adjidx].amount = - ((1 * round((claimleveladjamount * (
         psurchgratepercent/ 100)),2)))
       ELSE
        applydolladjreq->objarray[adjidx].amount = claimleveladjamount
       ENDIF
       applydolladjreq->objarray[adjidx].pft_line_item_id = 0.0, applydolladjreq->objarray[adjidx].
       corsp_activity_id = d.corsp_activity_id, applydolladjreq->objarray[adjidx].trans_type_cd =
       cs18649_adjustment_cd,
       applydolladjreq->objarray[adjidx].trans_sub_type_cd = cs20549_patsurchrg_cd, applydolladjreq->
       objarray[adjidx].trans_reason_cd = cs18937_reqbylaw_cd, applydolladjreq->objarray[adjidx].
       trans_alias_id = surchgtransaliasid,
       prtotalpatsurchadjoffset += applydolladjreq->objarray[adjidx].amount
      WITH nocounter
     ;end select
    ELSE
     SELECT INTO "nl:"
      FROM denial d,
       denial_detail dd,
       batch_trans_file btf
      PLAN (d
       WHERE d.corsp_activity_id=pcorpsactivityid
        AND d.denial_type_cd=cs29904_patient_cd
        AND d.denial_reason_cd IN (cs26398_coinsamt_cd, psurchgremarkcd)
        AND d.active_ind=true)
       JOIN (dd
       WHERE dd.denial_id=d.denial_id
        AND dd.remark_code_attrib_cd=cs26913_dollar_amt_cd
        AND dd.active_ind=true)
       JOIN (btf
       WHERE btf.batch_trans_file_id=d.batch_trans_file_id
        AND btf.active_ind=true
        AND (btf.batch_trans_id=
       (SELECT
        max(btf2.batch_trans_id)
        FROM batch_trans_file btf2
        WHERE btf2.pft_line_item_id=btf.pft_line_item_id
         AND btf2.nontrans_flag=1
         AND btf2.active_ind=true)))
      ORDER BY btf.pft_line_item_id, d.denial_reason_cd
      HEAD btf.pft_line_item_id
       lineleveladjamount = 0.0
      DETAIL
       IF (psurchgpartcpnstatuscd=cs4302016_partnonconv_cd)
        IF (d.denial_reason_cd=cs26398_coinsamt_cd)
         lineleveladjamount += cnvtreal(dd.remark_code_attrib_value)
        ENDIF
       ELSE
        IF (d.denial_reason_cd=psurchgremarkcd)
         lineleveladjamount += cnvtreal(dd.remark_code_attrib_value)
        ENDIF
       ENDIF
      FOOT  btf.pft_line_item_id
       adjidx += 1, stat = alterlist(applydolladjreq->objarray,adjidx)
       IF (psurchgpartcpnstatuscd=cs4302016_partnonconv_cd)
        applydolladjreq->objarray[adjidx].amount = - ((1 * round((lineleveladjamount * (
         psurchgratepercent/ 100)),2)))
       ELSE
        applydolladjreq->objarray[adjidx].amount = lineleveladjamount
       ENDIF
       applydolladjreq->objarray[adjidx].pft_line_item_id = btf.pft_line_item_id, applydolladjreq->
       objarray[adjidx].corsp_activity_id = d.corsp_activity_id, applydolladjreq->objarray[adjidx].
       trans_type_cd = cs18649_adjustment_cd,
       applydolladjreq->objarray[adjidx].trans_sub_type_cd = cs20549_patsurchrg_cd, applydolladjreq->
       objarray[adjidx].trans_reason_cd = cs18937_reqbylaw_cd, applydolladjreq->objarray[adjidx].
       trans_alias_id = surchgtransaliasid,
       prtotalpatsurchadjoffset += applydolladjreq->objarray[adjidx].amount
      WITH nocounter
     ;end select
    ENDIF
    IF (validate(debug))
     CALL echorecord(applydolladjreq)
     CALL echo(build2("prTotalPatSurchAdjOffset: ",prtotalpatsurchadjoffset))
    ENDIF
    IF (size(applydolladjreq->objarray,5) > 0)
     EXECUTE pft_apply_doll_adj_for_claim  WITH replace("REQUEST",applydolladjreq), replace("REPLY",
      applydolladjrep)
     IF ((applydolladjrep->status_data.status != "S"))
      CALL addtracemessage("postPatientSurchargeAdjustmentOffset",
       "pft_apply_doll_adj_for_claim failed to post patient surcharge adjustments.")
      RETURN(false)
     ENDIF
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(transferprimarybalancecreatedbyoffset,char(128))=char(128))
  SUBROUTINE (transferprimarybalancecreatedbyoffset(pcorpsactivityid=f8,ptotalpatsurchadjoffset=f8) =
   i2)
    DECLARE primaryinsbalid = f8 WITH protect, noconstant(0.0)
    DECLARE primaryinsbalstatuscd = f8 WITH protect, noconstant(0.0)
    DECLARE nextinsbalid = f8 WITH protect, noconstant(0.0)
    DECLARE nextinsbalstatuscd = f8 WITH protect, noconstant(0.0)
    DECLARE selfpaybalid = f8 WITH protect, noconstant(0.0)
    RECORD bohpstransbal(
      1 bohps[*]
        2 frombohpid = f8
        2 tobohpid = f8
        2 amount = f8
    ) WITH protect
    SELECT INTO "nl:"
     FROM bill_reltn brl,
      bo_hp_reltn bhr,
      (left JOIN bo_hp_reltn bhr3 ON bhr3.benefit_order_id=bhr.benefit_order_id
       AND bhr3.priority_seq > bhr.priority_seq
       AND  NOT (bhr3.bo_hp_status_cd IN (cs24451_invalid_cd, cs24451_cancelled_cd,
      cs24451_complete_cd))
       AND bhr3.active_ind=true),
      pft_proration pp,
      benefit_order bo,
      pft_encntr pe,
      benefit_order bo2,
      bo_hp_reltn bhr2
     PLAN (brl
      WHERE brl.corsp_activity_id=pcorpsactivityid
       AND brl.parent_entity_name="BO_HP_RELTN"
       AND brl.active_ind=true)
      JOIN (bhr
      WHERE bhr.bo_hp_reltn_id=brl.parent_entity_id
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.priority_seq=1
       AND bhr.active_ind=true)
      JOIN (pp
      WHERE pp.bo_hp_reltn_id=bhr.bo_hp_reltn_id)
      JOIN (bo
      WHERE bo.benefit_order_id=bhr.benefit_order_id
       AND bo.active_ind=true)
      JOIN (pe
      WHERE pe.pft_encntr_id=bo.pft_encntr_id)
      JOIN (bo2
      WHERE bo2.pft_encntr_id=pe.pft_encntr_id
       AND bo2.fin_class_cd=cs354_selfpay_cd
       AND  NOT (bo2.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bo2.active_ind=true)
      JOIN (bhr2
      WHERE bhr2.benefit_order_id=bo2.benefit_order_id
       AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
       AND bhr.active_ind=true)
      JOIN (bhr3)
     ORDER BY bhr3.priority_seq
     HEAD REPORT
      primaryinsbalid = bhr.bo_hp_reltn_id, primaryinsbalstatuscd = bhr.bo_hp_status_cd, selfpaybalid
       = bhr2.bo_hp_reltn_id
     DETAIL
      IF (nextinsbalid=0.0)
       nextinsbalid = bhr3.bo_hp_reltn_id, nextinsbalstatuscd = bhr3.bo_hp_status_cd
      ENDIF
     WITH nocounter
    ;end select
    IF (validate(debug))
     CALL echo(build2("primaryInsBalId       : ",primaryinsbalid))
     CALL echo(build2("primaryInsBalStatusCd : ",primaryinsbalstatuscd))
     CALL echo(build2("selfpayBalId          : ",selfpaybalid))
     CALL echo(build2("nextInsBalId          : ",nextinsbalid))
     CALL echo(build2("nextInsBalStatusCd    : ",nextinsbalstatuscd))
    ENDIF
    IF (primaryinsbalid > 0)
     IF (primaryinsbalstatuscd=cs24451_complete_cd
      AND  NOT (isequal(ptotalpatsurchadjoffset,0.00)))
      SET stat = alterlist(bohpstransbal->bohps,1)
      SET bohpstransbal->bohps[1].frombohpid = primaryinsbalid
      SET bohpstransbal->bohps[1].amount = ptotalpatsurchadjoffset
      IF (nextinsbalid > 0)
       SET bohpstransbal->bohps[1].tobohpid = nextinsbalid
      ELSE
       SET bohpstransbal->bohps[1].tobohpid = selfpaybalid
      ENDIF
      IF ( NOT (svctransferbalances(bohpstransbal)))
       CALL addtracemessage("transferPrimaryBalanceCreatedByOffset",
        "svcTransferBalances did not return success")
       RETURN(false)
      ENDIF
     ELSE
      CALL logmessage("transferPrimaryBalanceCreatedByOffset",
       "Primary balance does not qualify to be transfered.",log_debug)
     ENDIF
    ELSE
     CALL addtracemessage("transferPrimaryBalanceCreatedByOffset",
      "Failed to retrieve balance information.")
     RETURN(false)
    ENDIF
    IF (validate(debug))
     CALL echo("Patient surcharge adjustments balance transfer request.")
     CALL echorecord(bohpstransbal)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(applyrollamounttodailybalancebal,char(128))=char(128))
  SUBROUTINE (applyrollamounttodailybalancebal(dummyvar=i2) =i2)
    CALL logmessage("applyRollAmountToDailyBalanceBal","Entering...",log_debug)
    IF ( NOT (validate(applybalancereply)))
     RECORD applybalancereply(
       1 status_data
         2 status = c1
         2 subeventstatus[1]
           3 operationname = c25
           3 operationstatus = c1
           3 targetobjectname = c25
           3 targetobjectvalue = vc
     ) WITH protect
    ENDIF
    IF (validate(debug,0)=1)
     CALL echorecord(applydailybalancebalreq)
    ENDIF
    EXECUTE pft_apply_trans_to_balance_bal  WITH replace("REQUEST",applydailybalancebalreq), replace(
     "REPLY",applybalancereply)
    IF ((applybalancereply->status_data.status != "S"))
     CALL logmessage("applyRollAmountToDailyBalanceBal",
      "Script PFT_APPLY_TRANS_TO_BALANCE_BAL failed",log_debug)
     RETURN(false)
    ENDIF
    CALL echo("EXITING applyRollAmountToDailyBalanceBal")
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcpublishreimbursementevent,char(128))=char(128))
  SUBROUTINE (svcpublishreimbursementevent(ppftencntrid=f8,preimburseflag=i2) =i2)
    RECORD publishremiburesementreq(
      1 objarray[*]
        2 pftencntrid = f8
        2 reimburseflag = i2
    ) WITH protect
    RECORD publishremiburesementrep(
      1 status_data
        2 status = c1
        2 subeventstatus[1]
          3 operationname = c25
          3 operationstatus = c1
          3 targetobjectname = c25
          3 targetobjectvalue = vc
    ) WITH protect
    SET stat = alterlist(publishremiburesementreq->objarray,1)
    SET publishremiburesementreq->objarray[1].pftencntrid = ppftencntrid
    SET publishremiburesementreq->objarray[1].reimburseflag = preimburseflag
    EXECUTE pft_pub_reimbursement_event  WITH replace("REQUEST",publishremiburesementreq), replace(
     "REPLY",publishremiburesementrep)
    IF ((publishremiburesementrep->status_data.status="F"))
     CALL logmessage("svcPublishReimbursementEvent","Failed to publish reimbursement event",log_error
      )
     CALL echorecord(publishremiburesementreq)
     CALL echorecord(publishremiburesementrep)
     RETURN(false)
    ENDIF
    RETURN(true)
  END ;Subroutine
 ENDIF
 IF (validate(svcqueueencountersforencounterlinking,char(128))=char(128))
  SUBROUTINE (svcqueueencountersforencounterlinking(pencntrid=f8,pactivityeventname=vc) =i2)
   IF ( NOT (processencounterlinkingrequestasync(pactivityeventname,pencntrid)))
    CALL addtracemessage("svcQueueEncountersForEncounterLinking",
     "processEncounterLinkingRequestAsync did not return success")
    RETURN(false)
   ENDIF
   RETURN(true)
  END ;Subroutine
 ENDIF
 CALL echo("End PFT_RM_SERVICE_SUBS.INC")
 CALL beginservice(afc_rm_process_reg_mods)
 DECLARE dequeuesuccessfulmods(encntrid=f8,dequeueitems=vc(ref)) = i2
 DECLARE removesuspenseblobs(dequeueitems=vc(ref)) = i2
 IF ( NOT (validate(cs13029_reprocess_cd)))
  DECLARE cs13029_reprocess_cd = f8 WITH protect, constant(getcodevalue(13029,"REPROCESS",0))
 ENDIF
 IF ( NOT (validate(cs13028_debit_cd)))
  DECLARE cs13028_debit_cd = f8 WITH protect, constant(getcodevalue(13028,"DR",0))
 ENDIF
 IF ( NOT (validate(cs13019_suspense_cd)))
  DECLARE cs13019_suspense_cd = f8 WITH protect, constant(getcodevalue(13019,"SUSPENSE",0))
 ENDIF
 IF ( NOT (validate(cs4002267_suspchg_cd)))
  DECLARE cs4002267_suspchg_cd = f8 WITH protect, constant(getcodevalue(4002267,"SUSPENDCHRGS",0))
 ENDIF
 IF ( NOT (validate(cs4002267_enchist_cd)))
  DECLARE cs4002267_enchist_cd = f8 WITH protect, constant(getcodevalue(4002267,"ENCNTRINHIST",0))
 ENDIF
 IF ( NOT (validate(cs4002267_encbaddebt_cd)))
  DECLARE cs4002267_encbaddebt_cd = f8 WITH protect, constant(getcodevalue(4002267,"ENCNTRINBD",0))
 ENDIF
 IF ( NOT (validate(cs48_inactive_cd)))
  DECLARE cs48_inactive_cd = f8 WITH protect, constant(getcodevalue(48,"INACTIVE",0))
 ENDIF
 IF ( NOT (validate(cs24450_pending_reg_mod_cd)))
  DECLARE cs24450_pending_reg_mod_cd = f8 WITH protect, constant(getcodevalue(24450,"PENDREGMOD",0))
 ENDIF
 IF ( NOT (validate(cs29322_encntrtypechange)))
  DECLARE cs29322_encntrtypechange = f8 WITH protect, noconstant(getcodevalue(29322,"ENCNTRTYPECH",0)
   )
 ENDIF
 IF ( NOT (validate(cs29322_locchange)))
  DECLARE cs29322_locchange = f8 WITH protect, noconstant(getcodevalue(29322,"LOCCHANGE",0))
 ENDIF
 IF ( NOT (validate(cs29322_encounterdischarge)))
  DECLARE cs29322_encounterdischarge = f8 WITH protect, noconstant(getcodevalue(29322,"ENCNTRDISCH",0
    ))
 ENDIF
 IF ( NOT (validate(cs29322_dxmapping_cd)))
  DECLARE cs29322_dxmapping_cd = f8 WITH protect, constant(getcodevalue(29322,"DXMAPPING",0))
 ENDIF
 IF ( NOT (validate(cs24454_prevencntrtype)))
  DECLARE cs24454_prevencntrtype = f8 WITH protect, noconstant(getcodevalue(24454,"PREVETYPE",0))
 ENDIF
 IF ( NOT (validate(cs24454_prevlocnurseunit)))
  DECLARE cs24454_prevlocnurseunit = f8 WITH protect, noconstant(getcodevalue(24454,"PREVLOCNUNIT",0)
   )
 ENDIF
 IF ( NOT (validate(cs24451_invalid_cd)))
  DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
 ENDIF
 IF ( NOT (validate(pft_encntr_type_key)))
  DECLARE pft_encntr_type_key = vc WITH protect, constant("PFTENCNTR")
 ENDIF
 IF ( NOT (validate(encntr_type_key)))
  DECLARE encntr_type_key = vc WITH protect, constant("ENCOUNTER")
 ENDIF
 IF ( NOT (validate(cs20849_patient_cd)))
  DECLARE cs20849_patient_cd = f8 WITH protect, noconstant(getcodevalue(20849,"PATIENT",0))
 ENDIF
 IF ( NOT (validate(cs18736_ar_cd)))
  DECLARE cs18736_ar_cd = f8 WITH protect, noconstant(getcodevalue(18736,"A/R",0))
 ENDIF
 IF ( NOT (validate(cs106_person_mgmt_cd)))
  DECLARE cs106_person_mgmt_cd = f8 WITH protect, constant(getcodevalue(106,"PM",1))
 ENDIF
 IF ( NOT (validate(cs29322_creditbal_cd)))
  DECLARE cs29322_creditbal_cd = f8 WITH protect, constant(getcodevalue(29322,"CREDITBAL",1))
 ENDIF
 IF ( NOT (validate(cs29322_debitbal_cd)))
  DECLARE cs29322_debitbal_cd = f8 WITH protect, constant(getcodevalue(29322,"DEBITBAL",1))
 ENDIF
 IF ( NOT (validate(cs23369_wfevent_cd)))
  DECLARE cs23369_wfevent_cd = f8 WITH protect, noconstant(getcodevalue(23369,"WFEVENT",1))
 ENDIF
 IF ( NOT (validate(insurance_type_key)))
  DECLARE insurance_type_key = vc WITH protect, constant("INSURANCE")
 ENDIF
 IF ( NOT (validate(cs24269_history_cd)))
  DECLARE cs24269_history_cd = f8 WITH protect, constant(getcodevalue(24269,"HISTORY",0))
 ENDIF
 IF ( NOT (validate(flag_posted)))
  DECLARE flag_posted = i4 WITH protect, constant(100)
 ENDIF
 IF ( NOT (validate(flag_interfaced)))
  DECLARE flag_interfaced = i4 WITH protect, constant(999)
 ENDIF
 IF ( NOT (validate(admit_date_change)))
  DECLARE admit_date_change = vc WITH protect, constant("ADMIT_DATE_CHANGE")
 ENDIF
 IF ( NOT (validate(nurse_unit_location_change)))
  DECLARE nurse_unit_location_change = vc WITH protect, constant("NURSE_UNIT_LOCATION_CHANGE")
 ENDIF
 IF ( NOT (validate(discharge_date_change)))
  DECLARE discharge_date_change = vc WITH protect, constant("DISCHARGE_DATE_CHANGE")
 ENDIF
 IF ( NOT (validate(encounter_type_change)))
  DECLARE encounter_type_change = vc WITH protect, constant("ENCOUNTER_TYPE_CHANGE")
 ENDIF
 IF ( NOT (validate(cs25130_fe_cmb)))
  DECLARE cs25130_fe_cmb = f8 WITH protect, constant(getcodevalue(25130,"FE_CMB",0))
 ENDIF
 DECLARE detailidx = i4 WITH protect, noconstant(0)
 DECLARE lockpmtransactionid = f8 WITH protect, noconstant(0.0)
 DECLARE enqueueentityid = f8 WITH protect, noconstant(0.0)
 DECLARE retierorchargemodchangeflag = i2 WITH protect, noconstant(false)
 DECLARE chargecnt = i4 WITH protect, noconstant(0)
 DECLARE pftchargeid = f8 WITH protect, noconstant(0.0)
 DECLARE primarybohpreltnid = f8 WITH protect, noconstant(0.0)
 DECLARE chargeactivityid = f8 WITH protect, noconstant(0.0)
 DECLARE writeoffactionkey = vc WITH protect, noconstant("")
 DECLARE pftencntrid = f8 WITH protect, noconstant(0.0)
 DECLARE encntrlochaschanged = i2 WITH protect, noconstant(false)
 DECLARE encntrmedservicecdchanged = i2 WITH protect, noconstant(false)
 DECLARE haspmcharges = i2 WITH protect, noconstant(false)
 DECLARE encchargecount = f8 WITH protect, noconstant(0)
 DECLARE hasrpcharges = i2 WITH protect, noconstant(false)
 DECLARE skiprebillind = i2 WITH protect, noconstant(false)
 DECLARE realiasall = i2 WITH protect, noconstant(false)
 DECLARE eventtimerstartdttm = dm12 WITH protect, noconstant(0.0)
 IF ((request->encounterid < 1.0))
  CALL exitservicesuccess("0.0 encounter id passed in.")
  GO TO exit_script
 ENDIF
 SET lockpmtransactionid = getcurrentpmtransactionid(request->encounterid)
 IF ( NOT (getencountervalues(request->encounterid)))
  CALL exitservicefailure("Failed to get the Encounter values",go_to_exit_script)
 ENDIF
 SET enctypes->oldenctype = encountervalues->oldencountertype
 SET enctypes->newenctype = encountervalues->newencountertype
 IF ( NOT (getbypassedfinancials(request->encounterid,enctypes,bypasslist)))
  CALL exitservicefailure(build2("getBypassedFinancials failed for encounterId: ",request->
    encounterid),go_to_exit_script)
 ENDIF
 IF ((encountervalues->oldlocation != encountervalues->newlocation))
  SET stat = alterlist(eventparams->params,1)
  SET eventparams->params[1].paramcd = cs24454_prevlocnurseunit
  SET eventparams->params[1].paramvalue = encountervalues->oldlocation
  IF ( NOT (publishencounterevent(request->encounterid,cs29322_locchange,eventparams,encntr_type_key)
  ))
   CALL exitservicefailure("Failed to publish Location change event",go_to_exit_script)
  ENDIF
 ENDIF
 SET eventtimerstartdttm = systimestamp
 IF ( NOT (getchargestobereprocessed(request->encounterid,enccharges,encntrlochaschanged,
  encntrmedservicecdchanged,haspmcharges,
  encountervalues)))
  CALL exitservicefailure("getChargesToBeReprocessed did not return success",go_to_exit_script)
 ENDIF
 CALL adddiscretetimerevent(mods_disrete_timer,"AFC_RM_ROCESS_REG_MODS-getChargesToBeReprocessed",
  eventtimerstartdttm,cnvtrectojson(request),cnvtrectojson(reply),
  "",afcrmtimerevents)
 IF ( NOT (getretailpharmacycharges(request->encounterid,rpchargelist,hasrpcharges)))
  CALL exitservicefailure("getRetailPharmacyCharges did not return success",go_to_exit_script)
 ENDIF
 IF ((encountervalues->newencountertype != encountervalues->oldencountertype))
  SET realiasall = true
 ENDIF
 SET encchargecount = size(enccharges->charge_items,5)
 IF (validate(debug))
  CALL echorecord(enccharges)
  CALL echo(build2("hasPMCharges: ",haspmcharges))
 ENDIF
 IF (validate(request->omitrebillind,0)=true)
  IF ( NOT (getreprocessedchargesbegin(request->encounterid,enccharges)))
   CALL exitservicefailure("getReprocessedChargesBegin did not return success",go_to_exit_script)
  ENDIF
  IF ( NOT (processregmodsforprofitwithlocation(request->encounterid,encntrlochaschanged,
   encntrmedservicecdchanged,encchargecount,haspmcharges,
   hasrpcharges)))
   CALL exitservicefailure("processRegModsForProfitWithLocation did not return success",
    go_to_exit_script)
  ENDIF
 ELSEIF (((encchargecount > 0) OR (hasrpcharges)) )
  IF ( NOT (getreprocessedchargesbegin(request->encounterid,enccharges)))
   CALL exitservicefailure("getReprocessedChargesBegin did not return success",go_to_exit_script)
  ENDIF
  IF ( NOT (encntrlochaschanged)
   AND  NOT (encntrmedservicecdchanged)
   AND  NOT (realiasall))
   IF ( NOT (dochargesqualifyforrealias(chargesforreclass)))
    CALL exitservicefailure("doChargesQualifyForReAlias did not return success",go_to_exit_script)
   ENDIF
  ENDIF
  IF ( NOT (processregmodsforprofitwithlocation(request->encounterid,encntrlochaschanged,
   encntrmedservicecdchanged,encchargecount,haspmcharges,
   hasrpcharges)))
   CALL exitservicefailure("processRegModsForProfitWithLocation did not return success",
    go_to_exit_script)
  ENDIF
  IF ( NOT (skiprebillind))
   SET eventtimerstartdttm = systimestamp
   IF ( NOT (doupdatecharges(retierorchargemodchangeflag)))
    CALL exitservicefailure("doUpdateCharges did not return success",go_to_exit_script)
   ENDIF
   IF ( NOT (docreditcharges(suspendedcharges)))
    FOR (i = 1 TO size(suspendedcharges->charges,5))
      SET stat = addstatusdetail(suspendedcharges->charges[i].parent_charge_item_id,
       status_detail_suspended_charges,i18n_em_failed_to_suspended_charges_message)
      SET detailidx = size(reply->status_detail.details,5)
      SET stat = addstatusdetailparam(detailidx,"CHARGE_TYPE_CD",cnvtstring(suspendedcharges->
        charges[i].charge_type_cd,17,2))
      SET stat = addstatusdetailparam(detailidx,"SUSPENSE_REASON_CD",cnvtstring(suspendedcharges->
        charges[i].field1_id,17,2))
      SET stat = addstatusdetailparam(detailidx,"UNKNOWN_REASON",concat(trim(suspendedcharges->
         charges[i].field3)," - ",trim(suspendedcharges->charges[i].field6)))
    ENDFOR
    CALL exitservicefailure("doCreditCharges did not return success",go_to_exit_script)
   ENDIF
   IF ( NOT (dodebitcharges(suspendedcharges)))
    FOR (i = 1 TO size(suspendedcharges->charges,5))
      SET stat = addstatusdetail(suspendedcharges->charges[i].parent_charge_item_id,
       status_detail_suspended_charges,i18n_em_failed_to_suspended_charges_message)
      SET detailidx = size(reply->status_detail.details,5)
      SET stat = addstatusdetailparam(detailidx,"CHARGE_TYPE_CD",cnvtstring(suspendedcharges->
        charges[i].charge_type_cd,17,2))
      SET stat = addstatusdetailparam(detailidx,"SUSPENSE_REASON_CD",cnvtstring(suspendedcharges->
        charges[i].field1_id,17,2))
      SET stat = addstatusdetailparam(detailidx,"UNKNOWN_REASON",concat(trim(suspendedcharges->
         charges[i].field3)," - ",trim(suspendedcharges->charges[i].field6)))
    ENDFOR
    CALL exitservicefailure("doDebitCharges did not return success",go_to_exit_script)
   ENDIF
   CALL adddiscretetimerevent(mods_disrete_timer,"AFC_RM_ROCESS_REG_MODS-uptCredDebCharges",
    eventtimerstartdttm,"","",
    build2("Charge count: ",size(suspendedcharges->charges,5)),afcrmtimerevents)
  ENDIF
 ELSE
  IF ( NOT (processregmodsforprofitwithlocation(request->encounterid,encntrlochaschanged,
   encntrmedservicecdchanged,encchargecount,haspmcharges,
   hasrpcharges)))
   CALL exitservicefailure("processRegModsForProfitWithLocation did not return success",
    go_to_exit_script)
  ENDIF
 ENDIF
 IF (hasrpcharges)
  IF ((affectedfinencounterlist->financialencounters[1].newpftencntrid > 0.0))
   IF ( NOT (getredebitedretailpharmacycharges(rpchargelist)))
    CALL logmessage("getRedebitedRetailPharmacyCharges","Redebited retail pharmacy charges not found",
     log_debug)
   ELSE
    IF ( NOT (processretailpharmacycharges(rpchargelist)))
     CALL logmessage("processRetailPharmacyCharges","Cannot process retail pharmacy charges",
      log_debug)
    ENDIF
   ENDIF
  ENDIF
 ENDIF
 IF ( NOT (processdiagnosismap(request->encounterid)))
  CALL exitservicefailure("processDiagnosisMap did not return success",go_to_exit_script)
 ENDIF
 IF ((encountervalues->oldencountertype != encountervalues->newencountertype))
  SET stat = alterlist(eventparams->params,1)
  SET eventparams->params[1].paramcd = cs24454_prevencntrtype
  SET eventparams->params[1].paramvalue = encountervalues->oldencountertype
  IF ( NOT (publishencounterevent(request->encounterid,cs29322_encntrtypechange,eventparams,
   encntr_type_key)))
   CALL exitservicefailure("Failed to publish Encounter Type change event",go_to_exit_script)
  ENDIF
  IF ( NOT (publishencounterevent(request->encounterid,cs29322_encntrtypechange,eventparams,
   insurance_type_key)))
   CALL exitservicefailure("Failed to publish Encounter Type change event",go_to_exit_script)
  ENDIF
 ENDIF
 SET eventtimerstartdttm = systimestamp
 IF ( NOT (sendencountertowfevaluation(request->encounterid)))
  CALL addtracemessage("sendEncounterToWFEvaluation",
   "sendEncounterToWFEvaluation did not return success")
 ENDIF
 CALL adddiscretetimerevent(mods_disrete_timer,"AFC_RM_ROCESS_REG_MODS-sendEncounterToWFEval",
  eventtimerstartdttm,"","",
  build2("Charge count: ",size(suspendedcharges->charges,5)),afcrmtimerevents)
 IF (lockpmtransactionid != getcurrentpmtransactionid(request->encounterid))
  SET enqueueentityid = getassociatedfinancialencounter(request->encounterid)
  IF (enqueueentityid > 0.0)
   SET stat = addstatusdetail(enqueueentityid,status_detail_lock_error,
    i18n_em_failed_to_lock_error_message)
  ENDIF
  CALL exitservicefailure("Another transaction has been made in registration.",go_to_exit_script)
 ENDIF
 IF ( NOT (updatepftencntrs(request->encounterid,encountervalues)))
  CALL exitservicefailure("Failed to update the financial encounter.",go_to_exit_script)
 ENDIF
 IF ( NOT (consolidatefinencntrs(request->encounterid)))
  CALL exitservicefailure("consolidateFinEncntrs did not return success",go_to_exit_script)
 ENDIF
 IF ( NOT (releasesuspendedpendingregmodcharges(request->encounterid)))
  CALL exitservicefailure("releaseSuspendedPendingRegModCharges did not return success",
   go_to_exit_script)
 ENDIF
 IF ( NOT (removefailurereasondescription(request->encounterid)))
  CALL exitservicefailure("Unsucessful removal of the old failure reason.",go_to_exit_script)
 ENDIF
 IF (checkencounterformovedchargesorcombines(request->encounterid))
  IF ((encountervalues->newadmitdttm != encountervalues->oldadmitdttm))
   IF ( NOT (svcqueueencountersforencounterlinking(request->encounterid,admit_date_change)))
    CALL exitservicefailure("Unsucessful encounter linking.",go_to_exit_script)
   ENDIF
  ENDIF
  IF ((encountervalues->newlocation != encountervalues->oldlocation))
   IF ( NOT (svcqueueencountersforencounterlinking(request->encounterid,nurse_unit_location_change)))
    CALL exitservicefailure("Unsucessful encounter linking.",go_to_exit_script)
   ENDIF
  ENDIF
  IF ((encountervalues->newdischargedttm != encountervalues->olddischargedttm))
   IF ( NOT (svcqueueencountersforencounterlinking(request->encounterid,discharge_date_change)))
    CALL exitservicefailure("Unsucessful encounter linking.",go_to_exit_script)
   ENDIF
  ENDIF
  IF ((encountervalues->newencountertype != encountervalues->oldencountertype))
   IF ( NOT (svcqueueencountersforencounterlinking(request->encounterid,encounter_type_change)))
    CALL exitservicefailure("Unsucessful encounter linking.",go_to_exit_script)
   ENDIF
  ENDIF
 ENDIF
 CALL exitservicesuccess("Finished processing registration modifications")
#exit_script
 CALL logdiscretetimers(afcrmtimerevents)
 SUBROUTINE (getchargestobereprocessed(encntrid=f8,reprocesschargelist=vc(ref),hasencntrlocchanged=vc
  (ref),hasmedservicecdchanged=i2(ref),phaspmcharges=i2(ref),prencountervalues=vc(ref)) =i2)
   DECLARE chargeidx = i4 WITH protect, noconstant(0)
   DECLARE chargecnt = i4 WITH protect, noconstant(0)
   DECLARE chrgcnt = i4 WITH protect, noconstant(0)
   DECLARE hpidx = i4 WITH protect, noconstant(0)
   DECLARE hpcnt = i4 WITH protect, noconstant(0)
   DECLARE chargeid = f8 WITH protect, noconstant(0.0)
   DECLARE pftencntrid = f8 WITH protect, noconstant(0.0)
   DECLARE healthplanchangeind = i2 WITH protect, noconstant(false)
   DECLARE nohealthplanind = i2 WITH protect, noconstant(false)
   DECLARE effectivedtorprofilechangeind = i2 WITH protect, noconstant(false)
   DECLARE healthplanind = i2 WITH protect, noconstant(false)
   DECLARE mostrecentchargedttm = f8 WITH protect, noconstant(0.0)
   DECLARE flag_suspended = i4 WITH protect, constant(1)
   DECLARE activitytypecd = f8 WITH protect, noconstant(0.0)
   DECLARE facilitychangeind = i2 WITH protect, noconstant(false)
   DECLARE encntrtypechangeind = i2 WITH protect, noconstant(false)
   DECLARE medservicecdchangeind = i2 WITH protect, noconstant(false)
   DECLARE isorgmarkedfornonrecurringhpexpire = i2 WITH protect, noconstant(true)
   RECORD tempchargerequest(
     1 charge_items[*]
       2 charge_item_id = f8
   ) WITH protect
   RECORD chargefindrequest(
     1 charge_items[*]
       2 charge_item_id = f8
   ) WITH protect
   RECORD activehealthplans(
     1 healthplan[*]
       2 healthplanid = f8
       2 begeffectivedttm = dq8
       2 endeffectivedttm = dq8
   ) WITH protect
   IF ( NOT (validate(affectedpftencntrs)))
    RECORD affectedpftencntrs(
      1 pft_encntrs[*]
        2 pft_encntr_id = f8
    ) WITH protect
   ENDIF
   RECORD charges(
     1 charge[*]
       2 charge_item_id = f8
   ) WITH protect
   SELECT INTO "nl:"
    FROM encntr_plan_cob epc,
     encntr_plan_cob_reltn epcr,
     encntr_plan_reltn epr
    PLAN (epc
     WHERE epc.encntr_id=encntrid
      AND epc.active_ind=true)
     JOIN (epcr
     WHERE epcr.encntr_plan_cob_id=epc.encntr_plan_cob_id
      AND epcr.active_ind=true
      AND epcr.priority_seq=1)
     JOIN (epr
     WHERE epr.encntr_plan_reltn_id=epcr.encntr_plan_reltn_id
      AND epr.active_ind=true)
    ORDER BY epr.beg_effective_dt_tm
    DETAIL
     hpcnt += 1, stat = alterlist(activehealthplans->healthplan,hpcnt), activehealthplans->
     healthplan[hpcnt].healthplanid = epr.health_plan_id,
     activehealthplans->healthplan[hpcnt].begeffectivedttm = epr.beg_effective_dt_tm,
     activehealthplans->healthplan[hpcnt].endeffectivedttm = epr.end_effective_dt_tm
    WITH nocounter
   ;end select
   IF (hpcnt=0)
    SELECT INTO "nl:"
     FROM encntr_plan_reltn epr
     PLAN (epr
      WHERE epr.encntr_id=encntrid
       AND epr.active_ind=true
       AND epr.priority_seq=1)
     ORDER BY epr.beg_effective_dt_tm
     DETAIL
      hpcnt += 1, stat = alterlist(activehealthplans->healthplan,hpcnt), activehealthplans->
      healthplan[hpcnt].healthplanid = epr.health_plan_id,
      activehealthplans->healthplan[hpcnt].begeffectivedttm = epr.beg_effective_dt_tm,
      activehealthplans->healthplan[hpcnt].endeffectivedttm = epr.end_effective_dt_tm
     WITH nocounter
    ;end select
    IF (hpcnt=0)
     SELECT INTO "nl:"
      FROM encounter e,
       pft_encntr pe,
       benefit_order bo,
       bo_hp_reltn bhr
      PLAN (e
       WHERE e.encntr_id=encntrid
        AND e.active_ind=true)
       JOIN (pe
       WHERE pe.encntr_id=e.encntr_id
        AND pe.active_ind=true)
       JOIN (bo
       WHERE bo.pft_encntr_id=pe.pft_encntr_id
        AND bo.active_ind=true
        AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
       JOIN (bhr
       WHERE bhr.benefit_order_id=bo.benefit_order_id
        AND bhr.active_ind=true
        AND bhr.fin_class_cd != cs354_selfpay_cd
        AND bhr.priority_seq=1
        AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd)))
      DETAIL
       nohealthplanind = true
      WITH nocounter
     ;end select
    ENDIF
   ENDIF
   IF ((prencountervalues->isdenormalized=false))
    SELECT INTO "nl:"
     FROM encounter e
     WHERE e.encntr_id=encntrid
      AND e.active_ind=true
     DETAIL
      prencountervalues->newencountertype = e.encntr_type_cd, prencountervalues->newlocation = e
      .loc_nurse_unit_cd, prencountervalues->newfacilitycd = e.loc_facility_cd
     WITH nocounter
    ;end select
    IF ((prencountervalues->oldlocation=0.0)
     AND (prencountervalues->oldfacilitycd=0.0))
     SELECT INTO "nl:"
      FROM pft_reg_mod prm
      PLAN (prm
       WHERE prm.encntr_id=encntrid
        AND prm.active_ind=true)
      ORDER BY prm.create_dt_tm DESC
      HEAD REPORT
       prencountervalues->oldlocation = prm.loc_nurse_unit_cd, prencountervalues->oldfacilitycd = prm
       .loc_facility_cd
      WITH nocounter
     ;end select
    ENDIF
   ENDIF
   IF ((prencountervalues->oldlocation=0.0)
    AND (prencountervalues->oldfacilitycd=0.0))
    SELECT INTO "nl:"
     FROM encntr_loc_hist elh,
      pft_date pd
     PLAN (elh
      WHERE elh.encntr_id=encntrid
       AND elh.active_ind=true)
      JOIN (pd
      WHERE pd.parent_entity_id=elh.encntr_loc_hist_id
       AND pd.parent_entity_name="ENCNTR_LOC_HIST"
       AND pd.active_ind=true)
     ORDER BY pd.date_value_dt_tm DESC
     HEAD REPORT
      prencountervalues->oldlocation = elh.loc_nurse_unit_cd, prencountervalues->oldfacilitycd = elh
      .loc_facility_cd
     WITH nocounter
    ;end select
    IF (curqual=0)
     SELECT INTO "nl:"
      FROM charge c
      PLAN (c
       WHERE c.encntr_id=encntrid
        AND c.process_flg != flag_suspended
        AND c.charge_type_cd=cs13028_debit_cd
        AND c.active_ind=true)
      ORDER BY c.beg_effective_dt_tm DESC
      HEAD REPORT
       mostrecentchargedttm = cnvtdatetime(c.beg_effective_dt_tm)
      WITH nocounter, maxrec = 1
     ;end select
     SELECT INTO "nl:"
      FROM encntr_loc_hist elh
      PLAN (elh
       WHERE elh.encntr_id=encntrid
        AND elh.activity_dt_tm <= cnvtdatetime(mostrecentchargedttm))
      ORDER BY elh.activity_dt_tm DESC
      HEAD REPORT
       prencountervalues->oldlocation = elh.loc_nurse_unit_cd, prencountervalues->oldfacilitycd = elh
       .loc_facility_cd
      WITH nocounter
     ;end select
    ENDIF
   ENDIF
   IF ((prencountervalues->oldfacilitycd=prencountervalues->newfacilitycd)
    AND (prencountervalues->oldlocation != prencountervalues->newlocation))
    SET hasencntrlocchanged = true
   ENDIF
   IF ((prencountervalues->oldfacilitycd != prencountervalues->newfacilitycd)
    AND isencountermodonfactransind(prencountervalues->newfacilitycd)
    AND isencountermodonfactransind(prencountervalues->oldfacilitycd))
    SET hasencntrlocchanged = true
    SET facilitychangeind = true
   ENDIF
   IF ( NOT (checkiforgmarkedfornonrecurringhpexpire(encntrid)))
    SET isorgmarkedfornonrecurringhpexpire = false
   ENDIF
   IF ( NOT (evaluatepostedchargehpcoveragechanges(encntrid,prencountervalues,
    postedchargecoverageevalresults)))
    CALL addtracemessage("getChargesToBeReprocessed",
     "Posted charges HP coverage evaluation not successful")
    RETURN(false)
   ENDIF
   SET chrgcnt = size(postedchargecoverageevalresults->chargestoreprocess,5)
   SET stat = alterlist(charges->charge,chrgcnt)
   FOR (chargeidx = 1 TO chrgcnt)
     SET charges->charge[chargeidx].charge_item_id = postedchargecoverageevalresults->
     chargestoreprocess[chargeidx].chargeitemid
   ENDFOR
   IF (validate(debug))
    CALL echorecord(postedchargecoverageevalresults)
    CALL echorecord(charges)
   ENDIF
   SELECT INTO "nl:"
    c.charge_item_id, c.charge_type_cd, c.health_plan_id,
    c.service_dt_tm, c.activity_type_cd, c.admit_type_cd,
    c.offset_charge_item_id, c.process_flg, c.encntr_id,
    c.med_service_cd
    FROM charge c
    PLAN (c
     WHERE c.encntr_id=encntrid
      AND c.active_ind=true
      AND c.offset_charge_item_id=0.0
      AND (( NOT ( EXISTS (
     (SELECT
      pc.charge_item_id
      FROM pft_charge pc,
       pft_encntr pe
      WHERE ((pc.charge_item_id=c.charge_item_id
       AND pc.active_ind=true
       AND pc.ext_billed_ind=true) OR (pc.charge_item_id=c.charge_item_id
       AND pc.active_ind=true
       AND pc.ext_billed_ind=false
       AND pe.pft_encntr_id=pc.pft_encntr_id
       AND pe.encntr_id != c.encntr_id
       AND pe.active_ind=true)) )))) UNION (
     (SELECT INTO "nl:"
      c.charge_item_id, c.charge_type_cd, c.health_plan_id,
      c.service_dt_tm, c.activity_type_cd, c.admit_type_cd,
      c.offset_charge_item_id, c.process_flg, c.encntr_id,
      c.med_service_cd
      FROM pft_encntr pe,
       pft_charge pc,
       charge c
      WHERE pe.encntr_id=encntrid
       AND pe.active_ind=true
       AND pc.pft_encntr_id=pe.pft_encntr_id
       AND pc.active_ind=true
       AND pc.ext_billed_ind=false
       AND c.charge_item_id=pc.charge_item_id
       AND c.encntr_id != encntrid
       AND c.active_ind=true
       AND c.offset_charge_item_id=0.0))) )
    DETAIL
     healthplanind = false, encntrtypechangeind = false, medservicecdchangeind = false
     FOR (hpidx = 1 TO size(activehealthplans->healthplan,5))
       IF ( NOT (healthplanind))
        IF ((activehealthplans->healthplan[hpidx].healthplanid=c.health_plan_id)
         AND (activehealthplans->healthplan[hpidx].begeffectivedttm <= c.service_dt_tm)
         AND (activehealthplans->healthplan[hpidx].endeffectivedttm >= c.service_dt_tm))
         healthplanind = true, healthplanchangeind = false, hpidx = (size(activehealthplans->
          healthplan,5)+ 1)
        ELSEIF ((activehealthplans->healthplan[hpidx].begeffectivedttm <= c.service_dt_tm)
         AND (activehealthplans->healthplan[hpidx].endeffectivedttm >= c.service_dt_tm))
         healthplanchangeind = true
        ELSEIF ((activehealthplans->healthplan[hpidx].begeffectivedttm > c.service_dt_tm)
         AND (activehealthplans->healthplan[hpidx].endeffectivedttm >= c.service_dt_tm)
         AND  NOT (isorgmarkedfornonrecurringhpexpire))
         healthplanchangeind = true
        ENDIF
       ENDIF
     ENDFOR
     IF (size(charges->charge,5) > 0)
      effectivedtorprofilechangeind = false
      FOR (chrgidx = 1 TO size(charges->charge,5))
        IF ((charges->charge[chrgidx].charge_item_id=c.charge_item_id))
         effectivedtorprofilechangeind = true, chrgidx = (size(charges->charge,5)+ 1)
        ENDIF
      ENDFOR
     ENDIF
     IF (((effectivedtorprofilechangeind) OR (((facilitychangeind) OR ((prencountervalues->
     oldencounterclass != prencountervalues->newencounterclass))) ))
      AND c.activity_type_cd=cs106_person_mgmt_cd)
      activitytypecd = 0.0, phaspmcharges = true
     ELSE
      activitytypecd = c.activity_type_cd
     ENDIF
     IF (c.encntr_id != encntrid
      AND (prencountervalues->newencountertype != encountervalues->oldencountertype))
      encntrtypechangeind = true
     ENDIF
     IF (((c.process_flg=flag_posted) OR (c.process_flg=flag_interfaced))
      AND (c.med_service_cd != prencountervalues->newmedservicecd)
      AND c.activity_type_cd != cs106_person_mgmt_cd
      AND c.encntr_id=encntrid)
      medservicecdchangeind = true, hasmedservicecdchanged = true
     ENDIF
     IF (((healthplanchangeind) OR (((effectivedtorprofilechangeind) OR ((((c.admit_type_cd !=
     prencountervalues->newencountertype)) OR (((nohealthplanind) OR (((hasencntrlocchanged) OR (((
     encntrtypechangeind) OR (medservicecdchangeind)) )) )) )) )) )) )
      IF (chargequalifiesforreevaluation(c.charge_type_cd,c.offset_charge_item_id,c.process_flg,
       activitytypecd))
       chargecnt += 1, stat = alterlist(tempchargerequest->charge_items,chargecnt), tempchargerequest
       ->charge_items[chargecnt].charge_item_id = c.charge_item_id
      ENDIF
     ENDIF
    WITH nocounter, rdbunion
   ;end select
   IF (chargecnt=0)
    CALL logmessage("getChargesToBeReprocessed","No charges qualify for reevaluation",log_debug)
    RETURN(true)
   ENDIF
   SET stat = filterbypasscharges(tempchargerequest,bypasslist,chargefindrequest)
   IF (size(chargefindrequest->charge_items,5) > 0)
    FOR (chargeidx = 1 TO size(chargefindrequest->charge_items,5))
     SET chargeid = chargefindrequest->charge_items[chargeidx].charge_item_id
     IF ( NOT (lockcharge(chargeid)))
      CALL addtracemessage("getChargesToBeReprocessed",build("Failed to lock chargeId [",chargeid,"]"
        ))
      SET pftencntrid = getassociatedfinancialencounter(request->encounterid)
      IF (pftencntrid > 0.0)
       SET stat = addstatusdetail(pftencntrid,status_detail_lock_error,
        i18n_em_failed_to_lock_error_message)
      ENDIF
      RETURN(false)
     ENDIF
    ENDFOR
    EXECUTE afc_charge_find  WITH replace("REQUEST",chargefindrequest), replace("REPLY",
     reprocesschargelist)
    IF ((reprocesschargelist->status_data.status != "S"))
     CALL addtracemessage("getChargesToBeReprocessed","afc_charge_find did not return success")
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getreprocessedchargesbegin(encntrid=f8,reprocesschargelist=vc(ref)) =i2)
   DECLARE cecnt = i4 WITH protect, noconstant(0)
   DECLARE ciicnt = i4 WITH protect, noconstant(0)
   SET eventtimerstartdttm = sysdatetime
   RECORD reprocrequest(
     1 asyncprocessingind = i2
     1 asyncrequesthandle = i4
     1 nocommitind = i2
     1 process_event[*]
       2 charge_event_id = f8
       2 charge_item[*]
         3 charge_item_id = f8
     1 facility_transfer_ind = i2
   ) WITH protect
   SELECT INTO "nl:"
    chargeeventid = reprocesschargelist->charge_items[d1.seq].charge_event_id, chargeitemid =
    reprocesschargelist->charge_items[d1.seq].charge_item_id
    FROM (dummyt d1  WITH seq = size(reprocesschargelist->charge_items,5))
    PLAN (d1)
    ORDER BY chargeeventid, chargeitemid
    HEAD chargeeventid
     cecnt += 1, stat = alterlist(reprocrequest->process_event,cecnt), reprocrequest->process_event[
     cecnt].charge_event_id = chargeeventid,
     ciicnt = 0
    HEAD chargeitemid
     ciicnt += 1, stat = alterlist(reprocrequest->process_event[cecnt].charge_item,ciicnt),
     reprocrequest->process_event[cecnt].charge_item[ciicnt].charge_item_id = chargeitemid
    WITH nocounter
   ;end select
   IF (cecnt=0)
    RETURN(true)
   ENDIF
   SET reprocrequest->nocommitind = true
   SET reprocrequest->asyncprocessingind = true
   IF ((encountervalues->oldfacilitycd != encountervalues->newfacilitycd)
    AND encntrlochaschanged=true)
    SET reprocrequest->facility_transfer_ind = true
   ENDIF
   EXECUTE afc_release_charge_sync  WITH replace("REQUEST",reprocrequest), replace("REPLY",
    reprocreply)
   IF (validate(debug,false)=true)
    CALL echorecord(reprocrequest)
    CALL echorecord(reprocreply)
   ENDIF
   CALL adddiscretetimerevent(mods_disrete_timer,"AFC_RM_ROCESS_REG_MODS-getReprocessedChargesBegin",
    eventtimerstartdttm,"","",
    build2("Charge Count: ",ciicnt),afcrmtimerevents)
   IF ((reprocreply->status_data.status != "S"))
    CALL echorecord(reprocreply)
    CALL addtracemessage("getReprocessedChargesBegin",
     "afc_reprocess_charge_events did not return success")
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getretailpharmacycharges(encntrid=f8,rpchargelist=vc(ref),phasrpcharges=i2(ref)) =i2)
   DECLARE rpcnt = i4 WITH protect, noconstant(0)
   DECLARE transidx = i4 WITH protect, noconstant(0)
   DECLARE transcnt = i4 WITH protect, noconstant(0)
   SELECT INTO "nl:"
    FROM charge c,
     pft_charge pc,
     pft_charge_bo_reltn pcbr,
     bo_hp_reltn bhr,
     pft_line_item_chrg_reltn plicr
    PLAN (c
     WHERE c.encntr_id=encntrid
      AND c.active_ind=true
      AND c.charge_type_cd=cs13028_debit_cd
      AND c.offset_charge_item_id=0.0)
     JOIN (pc
     WHERE pc.charge_item_id=c.charge_item_id
      AND pc.active_ind=true
      AND pc.ext_billed_ind=true)
     JOIN (pcbr
     WHERE pcbr.pft_charge_id=pc.pft_charge_id
      AND pcbr.active_ind=true)
     JOIN (bhr
     WHERE bhr.benefit_order_id=pcbr.benefit_order_id
      AND bhr.active_ind=true
      AND bhr.fin_class_cd != cs354_selfpay_cd)
     JOIN (plicr
     WHERE (plicr.pft_charge_id= Outerjoin(pc.pft_charge_id)) )
    ORDER BY c.charge_item_id
    DETAIL
     phasrpcharges = true, rpcnt += 1, stat = alterlist(rpchargelist->charges,rpcnt),
     rpchargelist->charges[rpcnt].o_charge_item_id = c.charge_item_id, rpchargelist->charges[rpcnt].
     o_pft_charge_id = pc.pft_charge_id, rpchargelist->charges[rpcnt].o_pft_encntr_id = pc
     .pft_encntr_id,
     rpchargelist->charges[rpcnt].o_bo_hp_id = bhr.bo_hp_reltn_id, rpchargelist->charges[rpcnt].
     o_bo_id = bhr.benefit_order_id, rpchargelist->charges[rpcnt].o_bo_hp_status_cd = bhr
     .bo_hp_status_cd,
     rpchargelist->charges[rpcnt].o_pli_chrg_reltn_id = plicr.pft_line_item_chrg_reltn_id
    WITH nocounter
   ;end select
   SELECT INTO "nl:"
    FROM pft_trans_reltn ptr,
     pft_trans_reltn ptr2,
     trans_log tl,
     (dummyt d1  WITH seq = size(rpchargelist->charges,5))
    PLAN (d1)
     JOIN (ptr
     WHERE (ptr.parent_entity_id=rpchargelist->charges[d1.seq].o_pft_encntr_id)
      AND ptr.parent_entity_name="PFTENCNTR"
      AND ptr.active_ind=true)
     JOIN (ptr2
     WHERE ptr2.activity_id=ptr.activity_id
      AND (ptr2.benefit_order_id=rpchargelist->charges[d1.seq].o_bo_hp_id)
      AND ptr2.parent_entity_name="BILL"
      AND ptr2.active_ind=true)
     JOIN (tl
     WHERE tl.activity_id=ptr.activity_id
      AND tl.active_ind=true
      AND  NOT ( EXISTS (
     (SELECT
      ttr.parent_activity_id
      FROM trans_trans_reltn ttr
      WHERE ttr.parent_activity_id=tl.activity_id
      GROUP BY ttr.parent_activity_id
      HAVING sum(ttr.amount)=tl.total_trans_amount))))
    ORDER BY tl.activity_id
    HEAD tl.activity_id
     transcnt += 1, stat = alterlist(transactions->objarray,transcnt), transactions->objarray[
     transcnt].activity_id = tl.activity_id
    WITH nocounter
   ;end select
   IF (size(transactions->objarray,5) > 0)
    SET transactionsinfo->ein_type = ein_activity
    SET transactionsinfo->hide_charges_ind = true
    EXECUTE pft_transaction_find  WITH replace("REQUEST",transactions), replace("OBJREPLY",
     transactionsinfo), replace("REPLY",transfindreply)
    IF ((transfindreply->status_data.status != "S"))
     CALL addtracemessage("getRetailPharmacyCharges","pft_transaction_find did not return success")
     RETURN(false)
    ENDIF
    FOR (transidx = 1 TO size(transactionsinfo->objarray,5))
     IF (transactionsinfo->objarray[transidx].reversed_ind)
      IF ((transactionsinfo->objarray[transidx].total_trans_amount < 0.00))
       SET dtempamt = transactionsinfo->objarray[transidx].reversed_amount
      ELSE
       SET dtempamt = (abs(transactionsinfo->objarray[transidx].reversed_amount) * - (1.00))
      ENDIF
      SET remainingtransamt = (transactionsinfo->objarray[transidx].total_trans_amount+ dtempamt)
     ELSE
      SET remainingtransamt = transactionsinfo->objarray[transidx].total_trans_amount
     ENDIF
     SET transactionsinfo->objarray[transidx].total_trans_amount = remainingtransamt
    ENDFOR
    IF (validate(debug,- (1)) > 0)
     CALL echorecord(transactions)
     CALL echorecord(transactionsinfo)
     CALL echorecord(transfindreply)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getredebitedretailpharmacycharges(rpchargelist=vc(ref)) =i2)
   DECLARE hasredebitedrpchrg = i2 WITH protect, noconstant(false)
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = size(rpchargelist->charges,5)),
     charge c,
     pft_charge pc,
     pft_charge_bo_reltn pcbr,
     bo_hp_reltn bhr
    PLAN (d1)
     JOIN (c
     WHERE (c.parent_charge_item_id=rpchargelist->charges[d1.seq].o_charge_item_id)
      AND c.charge_type_cd=cs13028_debit_cd
      AND c.offset_charge_item_id=0.0
      AND c.active_ind=true)
     JOIN (pc
     WHERE pc.charge_item_id=c.charge_item_id
      AND pc.active_ind=true)
     JOIN (pcbr
     WHERE pcbr.pft_charge_id=pc.pft_charge_id
      AND pcbr.active_ind=true)
     JOIN (bhr
     WHERE bhr.benefit_order_id=pcbr.benefit_order_id
      AND bhr.active_ind=true
      AND bhr.fin_class_cd != cs354_selfpay_cd)
    DETAIL
     hasredebitedrpchrg = true, rpchargelist->charges[d1.seq].n_charge_item_id = c.charge_item_id,
     rpchargelist->charges[d1.seq].n_pft_charge_id = pc.pft_charge_id,
     rpchargelist->charges[d1.seq].n_pft_encntr_id = pc.pft_encntr_id, rpchargelist->charges[d1.seq].
     n_bo_hp_id = bhr.bo_hp_reltn_id, rpchargelist->charges[d1.seq].n_bo_id = bhr.benefit_order_id
    WITH nocounter
   ;end select
   IF (hasredebitedrpchrg)
    RETURN(true)
   ELSE
    RETURN(false)
   ENDIF
 END ;Subroutine
 SUBROUTINE (processretailpharmacycharges(rpchargelist=vc(ref)) =i2)
   DECLARE bhrcnt = i4 WITH protect, noconstant(0)
   DECLARE brlcnt = i4 WITH protect, noconstant(0)
   DECLARE trlcnt = i4 WITH protect, noconstant(0)
   DECLARE licrcnt = i4 WITH protect, noconstant(0)
   DECLARE newpftencntrid = f8 WITH protect, noconstant(0)
   RECORD rptransreltnlist(
     1 objarray[*]
       2 pft_trans_reltn_id = f8
   ) WITH protect
   RECORD applytranstoacctbalreq(
     1 pfttransreltnid = f8
   ) WITH protect
   RECORD uptbillreltnreq(
     1 objarray[*]
       2 bill_reltn_id = f8
       2 updt_cnt = i4
       2 parent_entity_id = f8
   ) WITH protect
   RECORD uptlineitemchrgrelreq(
     1 objarray[*]
       2 pft_line_item_chrg_reltn_id = f8
       2 pft_charge_id = f8
       2 updt_cnt = i4
   ) WITH protect
   RECORD uptbohpreltnreq(
     1 objarray[*]
       2 bo_hp_reltn_id = f8
       2 bo_hp_status_cd = f8
       2 updt_cnt = i4
   ) WITH protect
   RECORD dareply(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = size(rpchargelist->charges,5)),
     bill_reltn brl
    PLAN (d1)
     JOIN (brl
     WHERE (brl.parent_entity_id=rpchargelist->charges[d1.seq].o_bo_hp_id)
      AND brl.parent_entity_name="BO_HP_RELTN"
      AND brl.active_ind=true)
    DETAIL
     brlcnt += 1, stat = alterlist(uptbillreltnreq->objarray,brlcnt), uptbillreltnreq->objarray[
     brlcnt].bill_reltn_id = brl.bill_reltn_id,
     uptbillreltnreq->objarray[brlcnt].updt_cnt = - (99999), uptbillreltnreq->objarray[brlcnt].
     parent_entity_id = rpchargelist->charges[d1.seq].n_bo_hp_id
    WITH nocounter
   ;end select
   IF (size(uptbillreltnreq->objarray,5) > 0)
    EXECUTE pft_da_upt_bill_reltn  WITH replace("REQUEST",uptbillreltnreq), replace("REPLY",dareply)
    IF ((dareply->status_data.status != "S"))
     CALL addtracemessage("processRetailPharmacyCharges",
      "pft_da_upt_bill_reltn did not return success")
     RETURN(false)
    ENDIF
   ENDIF
   SET newpftencntrid = affectedfinencounterlist->financialencounters[1].newpftencntrid
   IF (size(transactions->objarray,5) > 0)
    IF ( NOT (reposttransactions(transactions,newpftencntrid,transactionsinfo)))
     CALL addtracemessage("processRetailPharmacyCharges","rePostTransactions did not return success."
      )
     RETURN(false)
    ENDIF
   ENDIF
   SELECT INTO "nl:"
    FROM (dummyt d1  WITH seq = size(rpchargelist->charges,5)),
     pft_trans_reltn ptr
    PLAN (d1)
     JOIN (ptr
     WHERE (ptr.benefit_order_id=rpchargelist->charges[d1.seq].n_bo_hp_id)
      AND ptr.parent_entity_name="ACCOUNT"
      AND ptr.active_ind=true)
    DETAIL
     trlcnt += 1, stat = alterlist(rptransreltnlist->objarray,trlcnt), rptransreltnlist->objarray[
     trlcnt].pft_trans_reltn_id = ptr.pft_trans_reltn_id
    WITH nocounter
   ;end select
   IF (size(rptransreltnlist->objarray,5) > 0)
    FOR (trlcnt = 1 TO size(rptransreltnlist,5))
      SET applytranstoacctbalreq->pfttransreltnid = rptransreltnlist->objarray[trlcnt].
      pft_trans_reltn_id
      EXECUTE pft_apply_trans_to_acct_bal  WITH replace("REQUEST",applytranstoacctbalreq), replace(
       "REPLY",dareply)
      IF ((dareply->status_data.status != "S"))
       CALL addtracemessage("processRetailPharmacyCharges",
        "pft_apply_trans_to_acct_bal did not return success")
       RETURN(false)
      ENDIF
    ENDFOR
   ENDIF
   FOR (idx = 1 TO size(rpchargelist->charges,5))
     SET bhrcnt += 1
     SET stat = alterlist(uptbohpreltnreq->objarray,bhrcnt)
     SET uptbohpreltnreq->objarray[bhrcnt].bo_hp_reltn_id = rpchargelist->charges[idx].n_bo_hp_id
     SET uptbohpreltnreq->objarray[bhrcnt].bo_hp_status_cd = rpchargelist->charges[idx].
     o_bo_hp_status_cd
     SET uptbohpreltnreq->objarray[bhrcnt].updt_cnt = - (99999)
     SET licrcnt += 1
     SET stat = alterlist(uptlineitemchrgrelreq->objarray,licrcnt)
     SET uptlineitemchrgrelreq->objarray[licrcnt].pft_line_item_chrg_reltn_id = rpchargelist->
     charges[idx].o_pli_chrg_reltn_id
     SET uptlineitemchrgrelreq->objarray[licrcnt].pft_charge_id = rpchargelist->charges[idx].
     n_pft_charge_id
     SET uptlineitemchrgrelreq->objarray[licrcnt].updt_cnt = - (99999)
   ENDFOR
   IF (size(uptbohpreltnreq->objarray,5) > 0)
    EXECUTE pft_da_upt_bo_hp_reltn  WITH replace("REQUEST",uptbohpreltnreq), replace("REPLY",dareply)
    IF ((dareply->status_data.status != "S"))
     CALL addtracemessage("processRetailPharmacyCharges",
      "pft_da_upt_bo_hp_reltn did not return success")
     RETURN(false)
    ENDIF
   ENDIF
   IF (size(uptlineitemchrgrelreq->objarray,5) > 0)
    EXECUTE pft_da_upt_line_item_chrg_rltn  WITH replace("REQUEST",uptlineitemchrgrelreq), replace(
     "REPLY",dareply)
    IF ((dareply->status_data.status != "S"))
     CALL addtracemessage("processRetailPharmacyCharges",
      " pft_da_upt_line_item_chrg_rltn did not return success")
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (processregmodsforprofitwithlocation(encntrid=f8,locationchanged=i2,medservicecdchange=i2,
  penccount=i4,phaspmcharges=i2,phasrpcharges=i2) =i2)
   RECORD rmrequest(
     1 pftencntrid = f8
     1 encntrid = f8
     1 personid = f8
     1 omitrebillind = i2
     1 oldencntrtype = f8
     1 newencntrtype = f8
     1 oldencounterclass = f8
     1 newencounterclass = f8
     1 locationchanged = i2
     1 medservicecdchange = i2
     1 oldfacilitycd = f8
     1 newfacilitycd = f8
     1 olddischargedttm = dq8
     1 newdischargedttm = dq8
     1 oldadmitdttm = dq8
     1 newadmitdttm = dq8
     1 oldregdttm = dq8
     1 newregdttm = dq8
     1 oldlocation = f8
     1 newlocation = f8
     1 isdenormalized = i2
     1 encchargecount = f8
     1 encchargehaspm = i2
     1 encchargehasrp = i2
     1 skiprebillpriorityseq = f8
     1 affectedchargesforreclassification[*]
       2 charge_item_id = f8
   ) WITH protect
   RECORD rmreply(
     1 processedencounters[*]
       2 pftencntrid = f8
       2 encounterinhistoryind = i2
       2 zerobalancedttm = dq8
       2 endeffectivedttm = dq8
       2 newpftencntrid = f8
     1 skiprebillind = i2
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_detail
       2 details[*]
         3 entityid = f8
         3 detailflag = i4
         3 detailmessage = vc
         3 parameters[*]
           4 paramname = vc
           4 paramvalue = vc
   ) WITH protect
   SET rmrequest->encntrid = encntrid
   SET rmrequest->omitrebillind = validate(request->omitrebillind,0)
   SET rmrequest->oldencntrtype = encountervalues->oldencountertype
   SET rmrequest->newencntrtype = encountervalues->newencountertype
   SET rmrequest->oldencounterclass = encountervalues->oldencounterclass
   SET rmrequest->newencounterclass = encountervalues->newencounterclass
   SET rmrequest->locationchanged = locationchanged
   SET rmrequest->medservicecdchange = medservicecdchange
   SET rmrequest->encchargecount = penccount
   SET rmrequest->encchargehaspm = phaspmcharges
   SET rmrequest->oldfacilitycd = encountervalues->oldfacilitycd
   SET rmrequest->newfacilitycd = encountervalues->newfacilitycd
   SET rmrequest->olddischargedttm = encountervalues->olddischargedttm
   SET rmrequest->newdischargedttm = encountervalues->newdischargedttm
   SET rmrequest->oldadmitdttm = encountervalues->oldadmitdttm
   SET rmrequest->newadmitdttm = encountervalues->newadmitdttm
   SET rmrequest->oldregdttm = encountervalues->oldregdttm
   SET rmrequest->newregdttm = encountervalues->newregdttm
   SET rmrequest->oldlocation = encountervalues->oldlocation
   SET rmrequest->newlocation = encountervalues->newlocation
   SET rmrequest->isdenormalized = encountervalues->isdenormalized
   SET rmrequest->encchargehasrp = phasrpcharges
   SET rmrequest->skiprebillpriorityseq = validate(request->skiprebillpriorityseq,0)
   IF (size(chargesforreclass->charges,5) > 0)
    FOR (i = 1 TO size(chargesforreclass->charges,5))
     SET stat = alterlist(rmrequest->affectedchargesforreclassification,i)
     SET rmrequest->affectedchargesforreclassification[i].charge_item_id = chargesforreclass->
     charges[i].charge_item_id
    ENDFOR
   ENDIF
   SET eventtimerstartdttm = systimestamp
   EXECUTE pft_rm_process_reg_mods  WITH replace("REQUEST",rmrequest), replace("REPLY",rmreply)
   CALL adddiscretetimerevent(mods_disrete_timer,"PFT_RM_ROCESS_REG_MODS",eventtimerstartdttm,
    cnvtrectojson(rmrequest),"",
    "",afcrmtimerevents)
   IF ((rmreply->status_data.status="F"))
    CALL copytracemessages(rmreply,reply)
    CALL addtracemessage("processRegModsForProfitWithLocation",
     "pft_rm_process_reg_mods returned a failure status")
    CALL copystatusdetails(rmreply,reply)
    RETURN(false)
   ENDIF
   SET skiprebillind = rmreply->skiprebillind
   SET stat = moverec(rmreply->processedencounters,affectedfinencounterlist->financialencounters)
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (removefailurereasondescription(encntrid=f8) =i2)
   DECLARE cnt = i4 WITH protect, noconstant(0)
   RECORD removelongtextrequest(
     1 objarray[*]
       2 long_text_id = f8
       2 updt_cnt = i4
       2 active_ind = i2
       2 active_status_cd = f8
   ) WITH protect
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     pe_status_reason psr,
     long_text lt
    PLAN (pe
     WHERE pe.encntr_id=encntrid
      AND pe.active_ind=true)
     JOIN (psr
     WHERE psr.pft_encntr_id=pe.pft_encntr_id
      AND psr.pe_status_reason_cd=cs24450_pending_reg_mod_cd)
     JOIN (lt
     WHERE lt.parent_entity_id=psr.pe_status_reason_id
      AND lt.parent_entity_name="PE_STATUS_REASON"
      AND lt.active_ind=true)
    DETAIL
     cnt += 1, stat = alterlist(removelongtextrequest->objarray,cnt), removelongtextrequest->
     objarray[cnt].long_text_id = lt.long_text_id,
     removelongtextrequest->objarray[cnt].active_ind = false, removelongtextrequest->objarray[cnt].
     active_status_cd = cs48_inactive_cd, removelongtextrequest->objarray[cnt].updt_cnt = (lt
     .updt_cnt+ 1)
    WITH nocounter
   ;end select
   IF (size(removelongtextrequest->objarray,5) > 0)
    UPDATE  FROM long_text lt,
      (dummyt d  WITH seq = value(size(removelongtextrequest->objarray,5)))
     SET lt.active_ind = removelongtextrequest->objarray[d.seq].active_ind, lt.active_status_cd =
      removelongtextrequest->objarray[d.seq].active_status_cd, lt.updt_cnt = removelongtextrequest->
      objarray[d.seq].updt_cnt,
      lt.updt_dt_tm = cnvtdatetime(sysdate), lt.updt_id = reqinfo->updt_id, lt.updt_task = reqinfo->
      updt_task,
      lt.updt_applctx = reqinfo->updt_applctx
     PLAN (d)
      JOIN (lt
      WHERE (lt.long_text_id=removelongtextrequest->objarray[d.seq].long_text_id))
    ;end update
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (lockcharge(chargeid=f8) =i2)
   SELECT INTO "nl:"
    FROM charge c
    WHERE c.charge_item_id=chargeid
    WITH forupdate(c)
   ;end select
   IF (curqual=0)
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getcurrentpmtransactionid(encounterid=f8) =f8)
   DECLARE currentpmtransactionid = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM pm_transaction pt
    WHERE pt.n_encntr_id=encounterid
    ORDER BY pt.updt_dt_tm DESC
    HEAD REPORT
     currentpmtransactionid = pt.transaction_id
    WITH nocounter
   ;end select
   RETURN(currentpmtransactionid)
 END ;Subroutine
 SUBROUTINE (getassociatedfinancialencounter(encounterid=f8) =f8)
   DECLARE pftencntrid = f8 WITH protect, noconstant(0.0)
   SELECT INTO "nl:"
    FROM pft_encntr pe
    WHERE pe.encntr_id=encounterid
     AND pe.active_ind=true
    DETAIL
     pftencntrid = pe.pft_encntr_id
    WITH nocounter, maxrec = 1
   ;end select
   RETURN(pftencntrid)
 END ;Subroutine
 SUBROUTINE (publishencounterevent(pentityid=f8,peventcd=f8,pparams=vc(ref),pentitytypekey=vc) =i2)
   IF ( NOT (validate(cs23369_wfevent)))
    DECLARE cs23369_wfevent = f8 WITH protect, noconstant(getcodevalue(23369,"WFEVENT",1))
   ENDIF
   RECORD publisheventrequest(
     1 eventlist[*]
       2 entitytypekey = vc
       2 entityid = f8
       2 eventtypecd = f8
       2 eventcd = f8
       2 params[*]
         3 paramcd = f8
         3 paramvalue = f8
   ) WITH protect
   RECORD publisheventreply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SET stat = alterlist(publisheventrequest->eventlist,1)
   SET publisheventrequest->eventlist[1].entitytypekey = pentitytypekey
   SET publisheventrequest->eventlist[1].entityid = pentityid
   SET publisheventrequest->eventlist[1].eventcd = peventcd
   SET publisheventrequest->eventlist[1].eventtypecd = cs23369_wfevent
   SET stat = moverec(pparams->params,publisheventrequest->eventlist[1].params)
   EXECUTE pft_publish_event  WITH replace("REQUEST",publisheventrequest), replace("REPLY",
    publisheventreply)
   IF ((publisheventreply->status_data.status != "S"))
    CALL logmessage("publishEncounterEvent","pft_publish_event did not return success",log_debug)
    RETURN(false)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (getencountervalues(pencounterid=f8) =i2)
   DECLARE oldencountertype = f8 WITH protect, noconstant(0.0)
   DECLARE newencountertype = f8 WITH protect, noconstant(0.0)
   DECLARE oldlocationcd = f8 WITH protect, noconstant(0.0)
   DECLARE newlocationcd = f8 WITH protect, noconstant(0.0)
   DECLARE olddischargedttm = dq8 WITH protect, noconstant(0.0)
   DECLARE newdischargedttm = dq8 WITH protect, noconstant(0.0)
   DECLARE oldfacilitycd = f8 WITH protect, noconstant(0.0)
   DECLARE newfacilitycd = f8 WITH protect, noconstant(0.0)
   IF (getfinencounterinfo(pencounterid,encountervalues))
    RETURN(true)
   ELSE
    CALL logmessage("getEncounterValues","Processing an old encounter",log_debug)
   ENDIF
   IF ( NOT (getolddischargedttm(pencounterid,olddischargedttm)))
    CALL logmessage("getEncounterValues","Failed to get the old discharge datetime",log_debug)
    RETURN(false)
   ENDIF
   SET encountervalues->olddischargedttm = olddischargedttm
   IF ( NOT (getnewdischargedttm(pencounterid,newdischargedttm)))
    CALL logmessage("getEncounterValues","Failed to get the new discharge datetime",log_debug)
    RETURN(false)
   ENDIF
   SET encountervalues->newdischargedttm = newdischargedttm
   IF ( NOT (getoldencountertype(pencounterid,oldencountertype)))
    CALL logmessage("getEncounterValues","Failed to get old encounter type",log_debug)
    RETURN(false)
   ENDIF
   SET encountervalues->oldencountertype = oldencountertype
   IF ( NOT (getnewencountertype(pencounterid,newencountertype)))
    CALL logmessage("getEncounterValues","Failed to get the new encounter type",log_debug)
    RETURN(false)
   ENDIF
   SET encountervalues->newencountertype = newencountertype
   IF ( NOT (getoldlocation(pencounterid,oldlocationcd)))
    CALL logmessage("getEncounterValues","Failed to get the old Location",log_debug)
    RETURN(false)
   ENDIF
   SET encountervalues->oldlocation = oldlocationcd
   IF ( NOT (getnewlocation(pencounterid,newlocationcd)))
    CALL logmessage("getEncounterValues","Failed to get the new Location",log_debug)
    RETURN(false)
   ENDIF
   SET encountervalues->newlocation = newlocationcd
   IF ( NOT (getoldfacilitycd(pencounterid,oldfacilitycd)))
    CALL logmessage("getEncounterValues","Failed to get the old FacilityCd",log_debug)
    RETURN(false)
   ENDIF
   SET encountervalues->oldfacilitycd = oldfacilitycd
   IF ( NOT (getnewfacilitycd(pencounterid,newfacilitycd)))
    CALL logmessage("getEncounterValues","Failed to get the new FacilityCd",log_debug)
    RETURN(false)
   ENDIF
   SET encountervalues->newfacilitycd = newfacilitycd
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (sendencountertowfevaluation(encounterid=f8) =i2)
   RECORD finencnctrlist(
     1 financialencounters[*]
       2 pftencntrid = f8
       2 encounterbalance = f8
       2 peupdtcnt = i4
   ) WITH protect
   RECORD entitytypereq(
     1 entitytypelist[*]
       2 entitytypekey = vc
       2 entitylist[*]
         3 entityid = f8
   ) WITH protect
   RECORD evalmodelsrequest(
     1 entitytypelist[*]
       2 entitytypekey = vc
       2 entitylist[*]
         3 entityid = f8
       2 workflowmodels[*]
         3 workflowmodelid = f8
   ) WITH protect
   RECORD evalmodelsreply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   RECORD uptperequest(
     1 objarray[*]
       2 pft_encntr_id = f8
       2 end_effective_dt_tm = dq8
       2 zero_balance_dt_tm = dq8
       2 zero_balance_dt_tm_null = i2
       2 updt_cnt = i4
   ) WITH protect
   RECORD uptpereply(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   RECORD publisheventrequest(
     1 eventlist[*]
       2 entitytypekey = vc
       2 entityid = f8
       2 eventcd = f8
       2 eventtypecd = f8
       2 params[*]
         3 paramcd = f8
         3 paramvalue = f8
   ) WITH protect
   RECORD publisheventreply(
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   DECLARE finencnctrcount = i4 WITH protect, noconstant(0)
   DECLARE encntridx = i4 WITH protect, noconstant(0)
   DECLARE entitytypeidx = i4 WITH protect, noconstant(0)
   DECLARE entityididx = i4 WITH protect, noconstant(0)
   DECLARE lidx = i4 WITH protect, noconstant(0)
   DECLARE idx1 = i4 WITH protect, noconstant(0)
   DECLARE idx2 = i4 WITH protect, noconstant(0)
   DECLARE idx3 = i4 WITH protect, noconstant(0)
   DECLARE zerobaldatetime = dq8 WITH protect, noconstant(0.0)
   DECLARE endeffdatetime = dq8 WITH protect, noconstant(0.0)
   DECLARE historycount = i4 WITH protect, noconstant(0)
   DECLARE eventindex = i4 WITH protect, noconstant(0)
   IF ( NOT (validate(cs24451_cancelled_cd)))
    DECLARE cs24451_cancelled_cd = f8 WITH protect, constant(getcodevalue(24451,"CANCELLED",0))
   ENDIF
   IF ( NOT (validate(cs24451_invalid_cd)))
    DECLARE cs24451_invalid_cd = f8 WITH protect, constant(getcodevalue(24451,"INVALID",0))
   ENDIF
   IF ( NOT (validate(cs354_selfpay_cd)))
    DECLARE cs354_selfpay_cd = f8 WITH protect, constant(getcodevalue(354,"SELFPAY",1))
   ENDIF
   IF (encounterid > 0.0)
    SELECT INTO "nl:"
     FROM pft_encntr pe
     PLAN (pe
      WHERE pe.encntr_id=encounterid
       AND pe.active_ind=true
       AND pe.pft_encntr_status_cd != cs24269_history_cd)
     DETAIL
      finencnctrcount += 1, stat = alterlist(finencnctrlist->financialencounters,finencnctrcount),
      finencnctrlist->financialencounters[finencnctrcount].pftencntrid = pe.pft_encntr_id,
      finencnctrlist->financialencounters[finencnctrcount].encounterbalance = pe.balance,
      finencnctrlist->financialencounters[finencnctrcount].peupdtcnt = pe.updt_cnt
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL addtracemessage("sendEncounterToWFEvaluation","No Finencntrs found for the EncntrId")
     RETURN(false)
    ENDIF
    FOR (idx1 = 1 TO size(finencnctrlist->financialencounters,5))
      SET encntridx = locateval(lidx,1,size(affectedfinencounterlist->financialencounters,5),
       finencnctrlist->financialencounters[idx1].pftencntrid,affectedfinencounterlist->
       financialencounters[lidx].pftencntrid)
      IF (encntridx > 0)
       SET zerobaldatetime = affectedfinencounterlist->financialencounters[encntridx].zerobalancedttm
       SET endeffdatetime = affectedfinencounterlist->financialencounters[encntridx].endeffectivedttm
      ELSE
       SET zerobaldatetime = cnvtdatetime(sysdate)
       SET endeffdatetime = cnvtdatetime("31-DEC-2100 23:59:59.00")
      ENDIF
      SELECT INTO "nl:"
       finclass = evaluate(bhr.fin_class_cd,cs354_selfpay_cd,"SELFPAY","INSURANCE")
       FROM pft_encntr pe,
        benefit_order bo,
        bo_hp_reltn bhr
       PLAN (pe
        WHERE (pe.pft_encntr_id=finencnctrlist->financialencounters[idx1].pftencntrid)
         AND pe.active_ind=true)
        JOIN (bo
        WHERE bo.pft_encntr_id=pe.pft_encntr_id
         AND  NOT (bo.bo_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
         AND bo.active_ind=true)
        JOIN (bhr
        WHERE bhr.benefit_order_id=bo.benefit_order_id
         AND  NOT (bhr.bo_hp_status_cd IN (cs24451_cancelled_cd, cs24451_invalid_cd))
         AND bhr.active_ind=true)
       ORDER BY finclass
       HEAD finclass
        entitytypeidx += 1, stat = alterlist(entitytypereq->entitytypelist,entitytypeidx),
        entitytypereq->entitytypelist[entitytypeidx].entitytypekey = trim(finclass,3),
        entityididx = 0
       DETAIL
        entityididx += 1, stat = alterlist(entitytypereq->entitytypelist[entitytypeidx].entitylist,
         entityididx), entitytypereq->entitytypelist[entitytypeidx].entitylist[entityididx].entityid
         = bhr.bo_hp_reltn_id
       WITH nocounter
      ;end select
      IF (curqual=0)
       CALL addtracemessage("sendEncounterToWFEvaluation","No Bo_hp_reltn Id's for the pft_encntr_id"
        )
       RETURN(false)
      ENDIF
      FOR (idx2 = 1 TO size(entitytypereq->entitytypelist,5))
        SET stat = initrec(evalmodelsrequest)
        SET stat = initrec(evalmodelsreply)
        SET stat = alterlist(evalmodelsrequest->entitytypelist,1)
        SET evalmodelsrequest->entitytypelist[1].entitytypekey = entitytypereq->entitytypelist[idx2].
        entitytypekey
        FOR (idx3 = 1 TO size(entitytypereq->entitytypelist[idx2].entitylist,5))
          SET stat = alterlist(evalmodelsrequest->entitytypelist[1].entitylist,1)
          SET evalmodelsrequest->entitytypelist[1].entitylist[1].entityid = entitytypereq->
          entitytypelist[idx2].entitylist[idx3].entityid
          EXECUTE pft_wf_eval_models_for_entity  WITH replace("REQUEST",evalmodelsrequest), replace(
           "REPLY",evalmodelsreply)
          IF ((evalmodelsreply->status_data.status != "S"))
           CALL addtracemessage("sendEncounterToWFEvaluation","Failed to process Workflow evaluation"
            )
          ENDIF
        ENDFOR
      ENDFOR
      IF (isequal(finencnctrlist->financialencounters[idx1].encounterbalance,0.0))
       SET historycount += 1
       SET stat = alterlist(uptperequest->objarray,historycount)
       SET uptperequest->objarray[historycount].pft_encntr_id = finencnctrlist->financialencounters[
       idx1].pftencntrid
       SET uptperequest->objarray[historycount].end_effective_dt_tm = endeffdatetime
       SET uptperequest->objarray[historycount].zero_balance_dt_tm = zerobaldatetime
       SET uptperequest->objarray[historycount].zero_balance_dt_tm_null = false
       SET uptperequest->objarray[historycount].updt_cnt = finencnctrlist->financialencounters[idx1].
       peupdtcnt
      ENDIF
    ENDFOR
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      benefit_order bo,
      bo_hp_reltn bhr,
      pft_proration pp
     PLAN (pe
      WHERE pe.encntr_id=encounterid
       AND pe.active_ind=true
       AND pe.pft_encntr_status_cd != cs24269_history_cd)
      JOIN (bo
      WHERE bo.pft_encntr_id=pe.pft_encntr_id
       AND bo.active_ind=true)
      JOIN (bhr
      WHERE bhr.benefit_order_id=bo.benefit_order_id
       AND bhr.active_ind=true)
      JOIN (pp
      WHERE pp.bo_hp_reltn_id=bhr.bo_hp_reltn_id
       AND pp.active_ind=true)
     ORDER BY bhr.bo_hp_reltn_id
     HEAD bhr.bo_hp_reltn_id
      IF ( NOT (isequal(pp.curr_amt_due,0.0)))
       eventindex += 1, stat = alterlist(publisheventrequest->eventlist,eventindex),
       publisheventrequest->eventlist[eventindex].entitytypekey = "INSURANCE",
       publisheventrequest->eventlist[eventindex].entityid = bhr.bo_hp_reltn_id, publisheventrequest
       ->eventlist[eventindex].eventtypecd = cs23369_wfevent_cd
       IF (round((pp.curr_amt_due * evaluate(pp.curr_amount_dr_cr_flag,2,- (1.0),1,1.0,
         0.0)),2) < 0.0)
        publisheventrequest->eventlist[eventindex].eventcd = cs29322_creditbal_cd
       ELSEIF (round((pp.curr_amt_due * evaluate(pp.curr_amount_dr_cr_flag,2,- (1.0),1,1.0,
         0.0)),2) > 0.0)
        publisheventrequest->eventlist[eventindex].eventcd = cs29322_debitbal_cd
       ENDIF
      ENDIF
     WITH nocounter
    ;end select
    IF (size(publisheventrequest->eventlist,5) > 0)
     EXECUTE pft_publish_event  WITH replace("REQUEST",publisheventrequest), replace("REPLY",
      publisheventreply)
     IF ((publisheventreply->status_data.status != "S"))
      CALL echorecord(publisheventrequest)
      CALL echorecord(publisheventrequest)
      CALL addtracemessage("sendEncounterToWFEvaluation",
       "pft_publish_event for CREDITBAL/DEBITBAL events was not successful")
      RETURN(false)
     ENDIF
    ENDIF
   ELSE
    CALL addtracemessage("sendEncounterToWFEvaluation","No Clinical Encounters found")
    RETURN(false)
   ENDIF
   IF (size(uptperequest->objarray,5) > 0)
    EXECUTE pft_da_upt_pft_encntr  WITH replace("REQUEST",uptperequest), replace("REPLY",uptpereply)
    IF ((uptpereply->status_data.status != "S"))
     CALL addtracemessage("sendEncounterToWFEvaluation","PFT_DA_UPT_PFT_ENCNTR failed")
     CALL echorecord(uptperequest)
     CALL echorecord(uptpereply)
     RETURN(false)
    ENDIF
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (processdiagnosismap(encntrid=f8) =i2)
   DECLARE finencnctrcnt = i4 WITH protect, noconstant(0)
   RECORD finencnctrs(
     1 financialencounters[*]
       2 pftencntrid = f8
   ) WITH protect
   IF (encntrid > 0.0)
    SELECT INTO "nl:"
     FROM pft_encntr pe,
      account a
     PLAN (pe
      WHERE pe.encntr_id=encntrid
       AND pe.active_ind=true)
      JOIN (a
      WHERE a.acct_id=pe.acct_id
       AND a.acct_type_cd=cs18736_ar_cd
       AND a.acct_sub_type_cd=cs20849_patient_cd
       AND a.active_ind=true)
     DETAIL
      finencnctrcnt += 1, stat = alterlist(finencnctrs->financialencounters,finencnctrcnt),
      finencnctrs->financialencounters[finencnctrcnt].pftencntrid = pe.pft_encntr_id
     WITH nocounter
    ;end select
    IF (curqual=0)
     CALL addtracemessage("processDiagnosisMap","No Finencntrs found for the EncntrId")
     RETURN(true)
    ENDIF
    FOR (idx1 = 1 TO size(finencnctrs->financialencounters,5))
     SET stat = evaluateencounterdiagnosismapping(finencnctrs->financialencounters[idx1].pftencntrid)
     IF (stat=new_map)
      SET stat = initrec(eventparams)
      IF ( NOT (publishencounterevent(finencnctrs->financialencounters[idx1].pftencntrid,
       cs29322_dxmapping_cd,eventparams,pft_encntr_type_key)))
       CALL exitservicefailure("publish mapping event failed.",go_to_exit_script)
      ENDIF
     ELSEIF (stat=map_error)
      CALL exitservicefailure("evaluateEncounterDiagnosisMapping did not return success",
       go_to_exit_script)
     ENDIF
    ENDFOR
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (filterbypasscharges(prencountercharges=vc(ref),prbypassfinlist=vc(ref),
  prremainingcharges=vc(ref)) =i2)
   DECLARE chrgidx = i4 WITH protect, noconstant(0)
   DECLARE peidx = i4 WITH protect, noconstant(0)
   DECLARE chrgcnt = i4 WITH protect, noconstant(0)
   DECLARE padidx = i4 WITH protect, noconstant(0)
   DECLARE startidx = i4 WITH protect, noconstant(1)
   DECLARE batch_size = i4 WITH protect, constant(50)
   DECLARE list_size = i4 WITH protect, constant(size(prencountercharges->charge_items,5))
   DECLARE batch_count = i4 WITH protect, constant(ceil((cnvtreal(list_size)/ batch_size)))
   DECLARE new_list_size = i4 WITH protect, constant((batch_count * batch_size))
   SET stat = alterlist(prencountercharges->charge_items,new_list_size)
   FOR (padidx = (list_size+ 1) TO new_list_size)
     SET prencountercharges->charge_items[padidx].charge_item_id = prencountercharges->charge_items[
     list_size].charge_item_id
   ENDFOR
   SELECT INTO "nl:"
    FROM (dummyt d  WITH seq = value(batch_count)),
     charge c,
     pft_charge pc
    PLAN (d
     WHERE initarray(startidx,evaluate(d.seq,1,1,(startidx+ batch_size))))
     JOIN (c
     WHERE expand(chrgidx,startidx,((startidx+ batch_size) - 1),c.charge_item_id,prencountercharges->
      charge_items[chrgidx].charge_item_id))
     JOIN (pc
     WHERE (pc.charge_item_id= Outerjoin(c.charge_item_id)) )
    ORDER BY c.charge_item_id
    HEAD c.charge_item_id
     IF (((pc.charge_item_id=0.0) OR (locateval(peidx,1,size(prbypassfinlist->pelist,5),pc
      .pft_encntr_id,prbypassfinlist->pelist[peidx].pftencntrid)=0.0)) )
      chrgcnt += 1, stat = alterlist(prremainingcharges->charge_items,chrgcnt), prremainingcharges->
      charge_items[chrgcnt].charge_item_id = c.charge_item_id
     ENDIF
    WITH nocounter, expand = 1
   ;end select
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (updatepftencntrs(pencntrid=f8,prencountervalues=vc(ref)) =i2)
   DECLARE pftencntrcount = i4 WITH protect, noconstant(0)
   RECORD uptpftencntrrequest(
     1 objarray[*]
       2 pft_encntr_id = f8
       2 disch_dt_tm = dq8
       2 pft_encntr_data_model_vrsn_nbr = i4
       2 encntr_type_cd = f8
       2 encntr_type_class_cd = f8
       2 loc_nurse_unit_cd = f8
       2 loc_facility_cd = f8
       2 inpatient_admit_dt_tm = dq8
       2 reg_dt_tm = dq8
       2 updt_cnt = i4
   ) WITH protect
   RECORD uptpftencntrreply(
     1 pft_status_data
       2 status = c1
       2 subeventstatus[*]
         3 status = c1
         3 table_name = vc
         3 pk_values = vc
     1 mod_objs[*]
       2 entity_type = vc
       2 mod_recs[*]
         3 table_name = vc
         3 pk_values = vc
         3 mod_flds[*]
           4 field_name = vc
           4 field_type = vc
           4 field_value_obj = vc
           4 field_value_db = vc
     1 failure_stack
       2 failures[*]
         3 programname = vc
         3 routinename = vc
         3 message = vc
     1 status_data
       2 status = c1
       2 subeventstatus[1]
         3 operationname = c25
         3 operationstatus = c1
         3 targetobjectname = c25
         3 targetobjectvalue = vc
   ) WITH protect
   SELECT INTO "nl:"
    FROM pft_encntr pe
    PLAN (pe
     WHERE pe.encntr_id=pencntrid
      AND pe.active_ind=true)
    ORDER BY pe.pft_encntr_id
    HEAD pe.pft_encntr_id
     pftencntrcount += 1, stat = alterlist(uptpftencntrrequest->objarray,pftencntrcount),
     uptpftencntrrequest->objarray[pftencntrcount].pft_encntr_id = pe.pft_encntr_id,
     uptpftencntrrequest->objarray[pftencntrcount].encntr_type_cd = prencountervalues->
     newencountertype, uptpftencntrrequest->objarray[pftencntrcount].encntr_type_class_cd =
     prencountervalues->newencounterclass, uptpftencntrrequest->objarray[pftencntrcount].disch_dt_tm
      = prencountervalues->newdischargedttm,
     uptpftencntrrequest->objarray[pftencntrcount].inpatient_admit_dt_tm = prencountervalues->
     newadmitdttm, uptpftencntrrequest->objarray[pftencntrcount].reg_dt_tm = prencountervalues->
     newregdttm, uptpftencntrrequest->objarray[pftencntrcount].loc_facility_cd = prencountervalues->
     newfacilitycd,
     uptpftencntrrequest->objarray[pftencntrcount].loc_nurse_unit_cd = prencountervalues->newlocation,
     uptpftencntrrequest->objarray[pftencntrcount].pft_encntr_data_model_vrsn_nbr = 2,
     uptpftencntrrequest->objarray[pftencntrcount].updt_cnt = pe.updt_cnt
    WITH forupdate(pe)
   ;end select
   IF (pftencntrcount > 0)
    EXECUTE pft_da_upt_pft_encntr  WITH replace("REQUEST",uptpftencntrrequest), replace("REPLY",
     uptpftencntrreply)
    IF ((uptpftencntrreply->status_data.status != "S"))
     CALL logmessage("updatePftEncntrs","Failed to update pft_encntrs",log_error)
     RETURN(false)
    ENDIF
   ELSE
    CALL logmessage("updatePftEncntrs","No PFT_ENCNTRS qualified to update",log_debug)
   ENDIF
   RETURN(true)
 END ;Subroutine
 SUBROUTINE (checkencounterformovedchargesorcombines(pencntrid=f8) =i2)
   DECLARE movedchargesind = i2 WITH protect, noconstant(false)
   SELECT INTO "nl:"
    FROM pft_encntr pe,
     pft_charge pc,
     charge c
    PLAN (pe
     WHERE pe.encntr_id=pencntrid)
     JOIN (pc
     WHERE pc.pft_encntr_id=pe.pft_encntr_id)
     JOIN (c
     WHERE pc.charge_item_id=c.charge_item_id
      AND ((pe.encntr_id != c.encntr_id) UNION (
     (SELECT
      pe.pft_encntr_id
      FROM pft_encntr pe,
       pft_combine_log pcl
      WHERE pe.encntr_id=pencntrid
       AND pe.active_ind=false
       AND pcl.from_xxx_id=pe.pft_encntr_id
       AND pcl.pft_combine_type_cd=cs25130_fe_cmb))) )
    DETAIL
     movedchargesind = true
    WITH nocounter, maxrec = 1
   ;end select
   RETURN(movedchargesind)
 END ;Subroutine
END GO
